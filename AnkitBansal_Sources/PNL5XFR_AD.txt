// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNL5XFR
// ?Date: 14.08.2025 Time: 03:45:35
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// LCL.USR Load Id ALpha = PAR.Load ID
LCL.USR_Load_Id_ALpha = PAR.Load_ID;

EXECUTE FUNCTION(RTV Carrier Date Info  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1955573;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.LD_Carrier_Appt_Date);
PARAMETER(PAR.LD_Carrier_Appt_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?** Only retrieve the info for the 1st stop
 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PAR.LD Carrier Appt Date is Entered
IF PAR.LD_Carrier_Appt_Date > 0;

EXECUTE FUNCTION(RTV Load/Order w/o Co  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1903799;
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(LCL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(PAR.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.Invoice_Order_Value_Tot);
PARAMETER(NLL.Process_Sts_for_3C);
PARAMETER(NLL.Order_Conf_Fax_Sts);
PARAMETER(NLL.Manifest_Fax_Sts);
PARAMETER(NLL.Invoice_Fax_Sts);
PARAMETER(NLL.Transfer_in_Storage_Ind);
PARAMETER(NLL.Email_Cust_On_Order_Ship);
PARAMETER(NLL.Order_Emailed);
PARAMETER(NLL.Export_Docs_Go_w_Driver);
PARAMETER(NLL.Shipping_Temp_Code_C_F);
PARAMETER(NLL.Broker_Order_Status);
PARAMETER(NLL.Air_Freight_Order);
PARAMETER(NLL.Order_Requires_Review);
PARAMETER(NLL.OH_Load_Plan_Ready);
PARAMETER(NLL.Export_USDA_Approved);
PARAMETER(NLL.HPB_Ship_to_Warehouse);
PARAMETER(NLL.OH_TF_Exempt_Code);
PARAMETER(NLL.OH_Appt_Confirmation_Dt);
PARAMETER(NLL.JPN_Invoice_Issuance_Date);
PARAMETER(NLL.Load_Actual_Shipped_Date);
PARAMETER(NLL.Load_BOL_Complete_Date);
PARAMETER(NLL.Load_Truck_Departure_Date);
PARAMETER(NLL.Maximum_Gross_Weight);
PARAMETER(NLL.Time_of_Original_Entry);
PARAMETER(NLL.OH_Appt_Confirmation_Tm);
PARAMETER(NLL.Load_BOL_Complete_Time);
PARAMETER(NLL.Load_Truck_Departure_Time);
PARAMETER(NLL.Act_Frt_Reference_Amount);
PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
PARAMETER(NLL.Claim_Number);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Update DDD/T if Prepaid, skip if Collect
CASE;

// IF LCL.Carrier Code is Not Buyer's Truck
IF LCL.Carrier_Code <> 'BUY';

// WRK.Deadline Departure Time = PAR.LD Carrier Appt Time
WRK.Deadline_Departure_Time = PAR.LD_Carrier_Appt_Time;

// WRK.Deadline Departure Date = PAR.LD Carrier Appt Date
WRK.Deadline_Departure_Date = PAR.LD_Carrier_Appt_Date;

EXECUTE FUNCTION(CLC Depart Date/Accept IF) TYPE(EXCINTFUN)                     AC1560217;
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Deadline_Departure_Time);
PARAMETER(WRK.Deadline_Departure_Date);
{
 //?Execute internal function

 //?** Calc from Req Delv instead          E01523 RMC 4/29/11
 //?** Rtv 1st carrier appointment date/time              E00495
 EXECUTE FUNCTION(Rtv 1st Ord Delv Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456727;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(WRK.Requested_Delivery_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Ship_To_Name);
  PARAMETER(WRK.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // WRK.Deadline Departure Date = PAR.Deadline Departure Date
 WRK.Deadline_Departure_Date = PAR.Deadline_Departure_Date;

 EXECUTE FUNCTION(CLC Deadline Date/Time IF) TYPE(EXCINTFUN)                     AC1496951;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Requested_Delivery_Time);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?Execute internal function

  //?** Convert time from 4.0 to 6.0
  // PAR.Deadline Depart Time  HDR = PAR.Requested Delivery Time * CON.100 *Rounded
  PAR.Deadline_Depart_Time_HDR = PAR.Requested_Delivery_Time * 100 'H';

  EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Deadline_Depart_DT_HDR);
  PARAMETER(PAR.Deadline_Depart_Time_HDR);
  {
   //?Execute internal function

   //?***** Change Log and Comments
   DO;

   //?** The Date and Time being calculated are the latest date and time
   //?** that the truck can leave the warehouse and still make the
   //?** delivery on time.
   //?*****
   //?** E00495 LJB 09.23.2009
   //?** Carrier Appt Date and Time are in the parm Deadline Departure
   //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
   //?*****
   //?** E00207 LJB 08/11/2008
   //?** Override Total Load Miles has been added to the
   //?** Retrieve Total Load Miles function
   //?*****
   //?** FP1251 LJB 12/26/2007
   //?** If no Miles To Next record, change SSD/T to zeros.
   //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
   ENDDO;

   EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Shipping_Method);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Shipping Method is Collect Truck
   IF LCL.Shipping_Method = 'CT';

   // OR LCL.Shipping Method is Collect Rail
   OR LCL.Shipping_Method = 'CR';

   //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
   PARAMETER(PAR.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Miles_to_next_stop);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   //?** Calc miles between all stops then retrieve 1st stop miles
   CASE;

   // IF PAR.Miles to next stop is Not Entered
   IF PAR.Miles_to_next_stop = *ZERO;

   //?** Override miles will be returned, if entered
   // Call program CLC Total Load Miles   XF.
   CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(WRK.Total_Load_Miles);
   PARAMETER(WRK.Override_Total_Load_Miles);

   EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
   PARAMETER(PAR.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Miles_to_next_stop);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   ENDIF;

   //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
   CASE;

   // IF PAR.Miles to next stop is Not Entered
   IF PAR.Miles_to_next_stop = *ZERO;

   // PAR.Scheduled Delivery Date = CND.not entered
   PAR.Scheduled_Delivery_Date = *ZERO;

   // PAR.Scheduled Delivery Time = CND.Not Entered
   PAR.Scheduled_Delivery_Time = *ZERO;

   //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Hours Required = CON.*ZERO
   PAR.Hours_Required = *ZERO;

   // LCL.Hours Required = CON.*ZERO
   LCL.Hours_Required = *ZERO;

   EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
   PARAMETER(PAR.Miles_to_next_stop);
   PARAMETER(LCL.Hours_Required);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   //?09/09/11 PKD E1659 Additional Route Hours
   // Call program Rtv Addtnl Route Hrs  XF.
   CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Additional_Route_Hours);

   // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
   PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

   //?get number of whole days + remaining hours
   CASE;

   // IF PAR.Hours Required is Zero
   IF PAR.Hours_Required = *ZERO;

   //?get number of whole days + remaining hours
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.@Days 5 = PAR.Hours Required / CON.24 *
   PAR.@Days_5 = PAR.Hours_Required / 24;

   // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
   WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

   // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
   PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

   // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
   WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

   //?Subtract whole days
   CASE;

   // IF PAR.@Days 5 is greater than zero
   IF PAR.@Days_5 > *ZERO;

   // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
   PAR.@Days_5 = PAR.@Days_5 * -1;

   // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
   PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
   1111111 'NONE' 'N' 1);

   ENDIF;

   //?Calculate # whole days + hours left
   CASE;

   // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
   IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

   // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
   WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

   // PAR.@Days 5 = CON.-1
   PAR.@Days_5 = -1;

   // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
   PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
   1111111 'NONE' 'N' 1);

   // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
   PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

   //?Calculate # whole days + hours left
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
   PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

   ENDIF;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
   PARAMETER(PAR.Load_ID);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.Total_Load_Miles);
   PARAMETER(WRK.Override_Total_Load_Miles);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  //?** Convert time back to 6.0
  // PAR.Deadline Departure Time = PAR.Deadline Depart Time  HDR
  PAR.Deadline_Departure_Time = PAR.Deadline_Depart_Time_HDR;

  //?***** Change Log and Comments
  DO;

  //?** 08/12/2008 LJB E00207
  //?** Total Load Miles can be overriden. This will not change the
  //?** Deadline Depart date, however.
  //?*****
  //?** 11/16/2007 LJB FP1251
  //?** Date and time are set to zeros if there is no
  //?** Miles Between Cites record which means there were no
  //?** total load miles calculated.
  ENDDO;

 }

 //?** DDD/T are returned as zeros if no Miles Between Cities records
}


EXECUTE FUNCTION(CHG Deadline Dep D/T   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1493670;
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Deadline_Depart_Date_LH);
 PARAMETER(PAR.Deadline_Depart_Time_LH);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(PAR.Load_ID);
PARAMETER(1);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


//?** if load is locked, send email notification to Traffic
EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Load Status is Lock
IF WRK.Load_Status = 'L';

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(LCL.Company_Number);
PARAMETER('TRAFFICDDD');
PARAMETER(WRK.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Load Id ALpha = CVTVAR(PAR.Load ID)
WRK.USR_Load_Id_ALpha = CVTVAR(PAR.Load_ID);

// WRK.Order Number Alpha = CVTVAR(PAR.Order Number)
WRK.Order_Number_Alpha = CVTVAR(PAR.Order_Number);

//?** Convert the date from *CMDY to *MDYY for printing
DO;

// WRK.@Date Alpha = CVTVAR(WRK.Deadline Departure Date)
WRK.@Date_Alpha = CVTVAR(WRK.Deadline_Departure_Date);

// WRK.Date From Convert USR = WRK.@Date Alpha
WRK.Date_From_Convert_USR = WRK.@Date_Alpha;

// WRK.@Field Name - 6 = CON.*CYMD
WRK.@Field_Name_6 = *CYMD;

// WRK.Field Name = CON.*MDYY
WRK.Field_Name = *MDYY;

// WRK.Text USR 7 = CON./
WRK.Text_USR_7 = '/';

// Call program Zzz Convert Date cmd   UP.
CALL PROGRAM(Zzz Convert Date cmd   UP) ('PNL8UPC');
PARAMETER(WRK.Date_From_Convert_USR);
PARAMETER(WRK.Date_mm_dd_yyyy_USR);
PARAMETER(WRK.@Field_Name_6);
PARAMETER(WRK.Field_Name);
PARAMETER(WRK.Text_USR_7);

ENDDO;

// WRK.USR Substitution Field = CVTVAR(WRK.Deadline Departure Time)
WRK.USR_Substitution_Field = CVTVAR(WRK.Deadline_Departure_Time);

// LCL.Subject Line USR = CONCAT(CON.Deadline Depart Date/Time,CON.Change,CON.1)
LCL.Subject_Line_USR = 'Deadline Depart Date/Time' + 'Change' (1);

// LCL.Pager Msg 256 USR = CONCAT(CON.Deadline Depart Date/Time,CON.has changed to: Date -,CON.1)
LCL.Pager_Msg_256_USR = 'Deadline Depart Date/Time' + 'has changed to: Date -' (1);

// LCL.Pager Msg 256 USR = CONCAT(LCL.Pager Msg 256 USR,WRK.Date mm/dd/yyyy USR,CON.1)
LCL.Pager_Msg_256_USR = LCL.Pager_Msg_256_USR + WRK.Date_mm_dd_yyyy_USR (1);

// LCL.Pager Msg 256 USR = CONCAT(LCL.Pager Msg 256 USR,CON., Time -,CON.*ZERO)
LCL.Pager_Msg_256_USR = LCL.Pager_Msg_256_USR + ', Time -' (*ZERO);

// LCL.Pager Msg 256 USR = CONCAT(LCL.Pager Msg 256 USR,WRK.USR Substitution Field,CON.1)
LCL.Pager_Msg_256_USR = LCL.Pager_Msg_256_USR + WRK.USR_Substitution_Field (1);

// LCL.Pager Msg 256 USR = CONCAT(LCL.Pager Msg 256 USR,CON.. For Load ID -,CON.*ZERO)
LCL.Pager_Msg_256_USR = LCL.Pager_Msg_256_USR + '. For Load ID -' (*ZERO);

// LCL.Pager Msg 256 USR = CONCAT(LCL.Pager Msg 256 USR,WRK.USR Load Id ALpha,CON.1)
LCL.Pager_Msg_256_USR = LCL.Pager_Msg_256_USR + WRK.USR_Load_Id_ALpha (1);

// LCL.Pager Msg 256 USR = CONCAT(LCL.Pager Msg 256 USR,CON.. For Order Number -,CON.*ZERO)
LCL.Pager_Msg_256_USR = LCL.Pager_Msg_256_USR + '. For Order Number -' (*ZERO);

// LCL.Pager Msg 256 USR = CONCAT(LCL.Pager Msg 256 USR,WRK.Order Number Alpha,CON.1)
LCL.Pager_Msg_256_USR = LCL.Pager_Msg_256_USR + WRK.Order_Number_Alpha (1);

// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(WRK.System_Value_Alpha);
PARAMETER(LCL.Subject_Line_USR);
PARAMETER(LCL.Pager_Msg_256_USR);

ENDIF;

ENDIF;

ENDIF;

