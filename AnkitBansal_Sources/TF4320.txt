      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF4320
      * TITLE:       Specify Invoice Charges Listing Options
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/14/05
      *
      * FUNCTION: Allows user to enter listing options and submit job.
      *
      * NOTE:    This is a pop-up window program.  Please note that in window
      *          programs the record format containing the window definition
      *          must be written first.  So, we write the error message subfile
      *          control record first followed by the command line record format.
      *          This is opposite of the non-window programs.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd4320   cf   e             workstn infds(iofeed)
      *
      *
     Ftfp005    if   e           k disk
      *    Charge codes
      *
      *
     Ftfp006    if   e           k disk
      *    System module
      *
      *
     Ftfp020    if   e           k disk
      *    Invoice header
      *
      *
     Ftfp021    if   e           k disk
      *    Invoice charge
      *
      *
     Ftfp097    if   e           k disk
      *    Status codes
      *
      *
     Ftfp098    if   e           k disk
      *    Charge frequency
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxalphsn        s              7a
      *
     D xxfcymd         s              8  0
     D xxtcymd         s              8  0
      *
     D xxynfl          s                   like(d1ynfl)
     D xxaist          s                   like(ccaist)
     D xxucfl          s                   like(ccucfl)
      *
     D xxicsn          s                   like(icicsn)
     D xxinsn          s                   like(icinsn)
     D xxinstcd        s                   like(ststcd)
     D xxinstds        s                   like(ststds)
      *
     D xxcccd          s                   like(cccccd)
     D xxccds          s                   like(ccccds)
      *
     D xxsmcd          s                   like(smsmcd)
     D xxsmds          s                   like(smsmds)
      *
     D xxcfqcd         s                   like(cfcfqcd)
     D xxcfqds         s                   like(cfcfqds)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   move      scrn1         routne
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * Write screen 1 to CRT.
      *
     C                   write     TF4320ec
     C                   write     TF4320k1
     C                   exfmt     TF4320r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in08 = *on                                  F8-submit
     C                   exsr      $edit1
     C                   if        error = 0
     C                   movel     '08'          rtncd
     C                   eval      routne = exit
     C                   else
     C                   eval      routne = scrn1
     C                   endif
     C                   other
      *
     C                   exsr      $edit1
     C                   eval      routne = scrn1
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *  1) include posted charges
      *  2) from invoice charge date
      *  3) to invoice charge
      *  4) charge status code
      *  5) charge frequency code
      *  6) user-controlled flag
      *  7) system module code
      *  8) include in invoice total flag
      *  9) charge code
      * 10) invoice charge number
      * 11) invoice number
      *
      *
     C                   exsr      $ynfl
     C                   exsr      $fmdy
     C                   exsr      $tmdy
     C                   exsr      $instcd
     C                   exsr      $cfqcd
     C                   exsr      $ucfl
     C                   exsr      $smcd
     C                   exsr      $infl
     C                   exsr      $cccd
     C                   exsr      $insn
     C                   exsr      $icsn
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate 'include posted charges' flag
      *---------------------------------------------------------------
      *
      * Validations:
      *   1) Must be Yes or No
      *
     C     $ynfl         begsr
      *
     C                   select
     C                   when      d1ynfl = yes or d1ynfl = no
     C                   other
      *
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate From Invoice Charge Date
      *----------------------------------------------------------------
      *
     C     $fmdy         begsr
      *
     C                   z-add     0             xxfcymd
      *
     C                   select
     C                   when      d1tmdy = 0 and d1fmdy = 0
      *
     C                   when      d1tmdy <> 0 and d1fmdy = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09088'     mgid(e)
     C                   endif
      *
     C                   when      d1fmdy < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1fmdy        wkcymdiso
     C                   move      wkcymdiso     xxfcymd
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate To Invoice Charge Date
      *----------------------------------------------------------------
      *
     C     $tmdy         begsr
      *
     C                   z-add     0             xxtcymd
      *
     C                   select
     C                   when      d1tmdy = 0 and d1fmdy = 0
      *
     C                   when      d1fmdy <> 0 and d1tmdy = 0
     C                   seton                                        40
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09089'     mgid(e)
     C                   endif
      *
     C                   when      d1tmdy < 0
     C                   seton                                        40
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        40
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1tmdy        wkcymdiso
     C                   move      wkcymdiso     xxtcymd
     C                   endif                                                  If bad date
     C                   endsl
      *
      * To date cannot be earlier than from date.
      *
     C                   if        *in32 = *off and
     C                             *in40 = *off and
     C                             xxtcymd < xxfcymd
     C                   seton                                        40
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Charge Status Code
      *----------------------------------------------------------------
      *
     C     $instcd       begsr
      *
     C                   select
     C                   when      d1instcd = *blank
     C                   other
      *
     C     d1instcd      chain     tfp097                             92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08042'
     C                   clear                   mgw
     C                   movea     d1instcd      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If no hit
     C                   endsl
      *
     C                   if        d1ynfl = no and d1instcd = 'P'
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08046'
     C                   clear                   mgw
     C                   movea     d1instcd      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Charge Frequency Code
      *----------------------------------------------------------------
      *
     C     $cfqcd        begsr
      *
     C                   select
     C                   when      d1cfqcd = *blank
     C                   other
      *
     C     d1cfqcd       chain     tfp098                             92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08018'
     C                   clear                   mgw
     C                   movea     d1cfqcd       mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If no hit
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate User-controlled Flag
      *----------------------------------------------------------------
      *
     C     $ucfl         begsr
      *
     C                   select
     C                   when      d1ucfl = *blank
      *
     C                   when      d1ucfl <> yes and d1ucfl <> no
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate System Module Code
      *----------------------------------------------------------------
      *
     C     $smcd         begsr
      *
     C                   select
     C                   when      d1smcd = *blank
     C                   other
      *
     C     d1smcd        chain     tfp006                             92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08019'
     C                   clear                   mgw
     C                   movea     d1smcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If no hit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Include in Invoice Total Flag
      *---------------------------------------------------------------
      *
     C     $infl         begsr
      *
     C                   select
     C                   when      d1infl = *blank
      *
     C                   when      d1infl <> yes and d1infl <> no
     C                   seton                                        39
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Charge Code
      *---------------------------------------------------------------
      *
     C     $cccd         begsr
      *
     C                   select
     C                   when      d1cccd = *blank
     C                   other
      *
     C     d1cccd        chain     tfp005                             92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08029'
     C                   clear                   mgw
     C                   movea     d1cccd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If no hit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Invoice Charge Number
      *---------------------------------------------------------------
      *
     C     $icsn         begsr
      *
     C                   select
     C                   when      d1icsn = 0
      *
     C                   when      d1icsn < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1icsn        chain     tfp021                             92
     C                   if        *in92 = *on                                  If bad charge
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08044'     mgid(e)
     C                   clear                   mgw
     C                   move      d1icsn        xxalphsn
     C                   movea     xxalphsn      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
      * You cannot choose a 'Posted' Charge if the value for 'Include Posted
      * Charges' is NO.
     C                   if        icinstcd = 'P' and d1ynfl = no
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08049'     mgid(e)
     C                   endif
     C                   endif
     C                   endif                                                  If bad charge
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Invoice Number
      *---------------------------------------------------------------
      *
     C     $insn         begsr
      *
     C                   select
     C                   when      d1insn = 0
      *
     C                   when      d1insn < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1insn        chain     tfp020                             92
     C                   if        *in92 = *on                                  If bad inv
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08043'     mgid(e)
     C                   clear                   mgw
     C                   move      d1insn        xxalphsn
     C                   movea     xxalphsn      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
      * You cannot choose a 'Posted' Invoice if the value for 'Include Posted
      * Charges' is NO.
     C                   if        ihinstcd = 'P' and d1ynfl = no
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08048'     mgid(e)
     C                   endif
     C                   endif
     C                   endif                                                  If bad inv
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Include posted charges flag
      *
     C                   select
     C                   when      fld = 'D1YNFL'
     C                   call      'HP522'
     C                   parm                    xxynfl
     C                   seton                                        50
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        d1ynfl
     C                   endif
      *
      *
      * Charge status code
      *
     C                   when      fld = 'D1INSTCD'
     C                   call      'TF512'
     C                   parm      *blank        xxinstcd
     C                   parm      *blank        xxinstds
     C                   seton                                        55
     C                   if        xxinstcd <> *blank
     C                   move      xxinstcd      d1instcd
     C                   endif
      *
      * Invoice Number
     C                   when      fld = 'D1INSN'
      *
     C                   if        d1ynfl = no
     C                   move      'X'           xxinstcd
     C                   else
     C                   move      *blank        xxinstcd
     C                   endif
      *
     C                   call      'TF514'
     C                   parm                    xxinstcd
     C                   parm      0             xxinsn
     C                   seton                                        54
     C                   if        xxinsn <> 0
     C                   z-add     xxinsn        d1insn
     C                   endif
      *
      * Charge code
     C                   when      fld = 'D1CCCD'
     C                   call      'TF513'
     C                   parm      ' '           xxaist
     C                   parm      ' '           xxucfl
     C                   parm      *blank        xxcccd
     C                   parm      *blank        xxccds
     C                   seton                                        53
     C                   if        xxcccd <> *blank
     C                   move      xxcccd        d1cccd
     C                   endif
      *
      * Charge frequency code
      *
     C                   when      fld = 'D1CFQCD'
     C                   call      'TF508'
     C                   parm      *blank        xxcfqcd
     C                   parm      *blank        xxcfqds
     C                   seton                                        57
     C                   if        xxcfqcd <> *blank
     C                   movel     xxcfqcd       d1cfqcd
     C                   endif
      *
      * System module
     C                   when      fld = 'D1SMCD'
     C                   call      'TF509'
     C                   parm      *blank        xxsmcd
     C                   parm      *blank        xxsmds
     C                   seton                                        58
     C                   if        xxsmcd <> *blank
     C                   movel     xxsmcd        d1smcd
     C                   endif
      *
      * User-controlled flag
      *
     C                   when      fld = 'D1UCFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        56
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        d1ucfl
     C                   endif
      *
      * Include in invoice total flag
      *
     C                   when      fld = 'D1INFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        59
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        d1infl
     C                   endif
      *
      * Invoice charge number
      *
     C                   when      fld = 'D1ICSN'
      *
     C                   if        d1ynfl = no
     C                   move      'X'           xxinstcd
     C                   else
     C                   move      *blank        xxinstcd
     C                   endif
      *
     C                   call      'TF515'
     C                   parm                    xxinstcd
     C                   parm      0             xxicsn
     C                   seton                                        51
     C                   if        xxicsn <> 0
     C                   z-add     xxicsn        d1icsn
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    d1ynfl
     C                   parm                    d1fmdy
     C                   parm                    xxfcymd
     C                   parm                    d1tmdy
     C                   parm                    xxtcymd
     C                   parm                    d1instcd
     C                   parm                    d1cfqcd
     C                   parm                    d1ucfl
     C                   parm                    d1smcd
     C                   parm                    d1infl
     C                   parm                    d1cccd
     C                   parm                    d1insn
     C                   parm                    d1icsn
     C                   parm                    rtncd
      *
      *
      * Key lists
      *   None
      *
      * Default 'NO' to the control field 'include posted charges' if the incoming
      * parm is blank.
      *
     C                   if        d1ynfl = *blank
     C                   move      no            d1ynfl
     C                   endif
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * This window logic keeps the screen in the calling program from being
      * cleared.
      *
     C                   write     assume
      *
     C                   endsr
      /eject
