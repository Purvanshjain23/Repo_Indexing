      *
      * ENVIRONMENT: PORK DIVISION
      * SYSTEM:      AS/400
      * PROGRAM:     MP451
      * TITLE:       Specify List of Overridden Items
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     04/30/02
      *
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to submit a report.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/02/02  LeAnne Fedor
      *           Replaced from/to invoice date with from/to batch date.
      *
      * 03/10/14  LeAnne Ramsey (E2992)
      *           Added Accounting Company as an optional selection....
      *           with a prompt.
      *
      * 03/26/19  Brad Baden  (E14631)
      *           Recompile only due to field size changes in database.
      *
      * 06/02/21  Danny Nguyen (S17068)
      *           Recompile only due to MPJ104C file change. MPP104 file was changed.
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fmpd451    cf   e             workstn infds(iofeed)
      *
      *
     Fmpj104c   if   e           k disk
      *  Invoice header + Purchase order header
      *
      *
     Fmpp108    if   e           k disk
      *    MP2: Upload companies
      *
      *
     Fcaabrel1  if   e           k disk
      *    Company
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Parm fields
      *
     d xxajd           s                   like(d1jdvnno)
     D xxname          s             40
     D xxtype          s              3    inz('V  ')
     D xxerror         s              1    inz('N')
     D xxalphcono      s              3
     D xxacono         s                    like(d1acono)
     D xxaconm         s                    like(d1aconm)
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1     inz('N')
     D xxcopy          s              1  0
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldfmdy                 1      6  0
     D  ldtmdy                 7     12  0
     D  ldfcymd               13     20  0
     D  ldtcymd               21     28  0
     D  ldjdvnno              29     36  0
     D  ldjdvnnm              37     76
     D  ldbatno               77     84  0
     D  ldflag                85     85
     D  ldacono               86     88  0
      *
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     mp451k1
     C                   write     mp451ec
     C                   exfmt     mp451r1
      *
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C                   parm                    ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Since the user may enter a batch number or from/to dates. We will
      * clear all the lda values here...just for simplicity.
      *
     C                   z-add     0             ldfmdy
     C                   z-add     0             ldtmdy
     C                   z-add     0             ldfcymd
     C                   z-add     0             ldtcymd
     C                   z-add     0             ldjdvnno
     C                   z-add     0             ldacono
     C                   z-add     0             ldbatno
     C                   move      *blank        ldflag
     C                   move      *blank        D1ACONM
      *
      * Preliminary entry edits
     C                   exsr      $prelim
      *
      * Validate:
      *   2) JDE batch number
      *   3) Accounting company number
      *   4) from date
      *   5) to date
      *   6) Validate the JDE Vendor number
      *
     C
     C                   if        error = 0                                    If edit more
     C                   exsr      $batno
     C                   exsr      $acono
     C                   exsr      $fmdy
     C                   exsr      $tmdy
     C                   exsr      $jdvnno
     C                   endif                                                  If edit more
      *
      *
      * If there are no errors, execute the subroutine to submit.
      *
     C                   if        error = 0 and *in08 = *on                    If no error
     C                   exsr      $proc1
     C                   endif                                                  If no error
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * User must enter a Batch Number OR other stuff....not both!
      *----------------------------------------------------------------
      *
     C     $prelim       begsr
      *
      * The user has to enter something!
      *
     C                   if        d1batno = 0 and
     C                             d1fmdy = 0  and
     C                             d1tmdy = 0  and
     C                             d1acono = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09199'
     C                   endif
     C                   endif
      *
      *  The user entered too much.
      *
     C                   if        d1batno <> 0 and                             If too much
     C                             (d1acono <> 0 or d1fmdy <> 0 or
     C                              d1tmdy <> 0 or d1jdvnno <> 0)
      *
     C                   if        d1acono <> 0
     C                   seton                                        33
     C                   endif
      *
     C                   if        d1fmdy <> 0
     C                   seton                                        35
     C                   endif
      *
     C                   if        d1tmdy <> 0
     C                   seton                                        36
     C                   endif
      *
     C                   if        d1jdvnno <> 0
     C                   seton                                        31
     C                   endif
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09198'
     C                   endif
     C                   endif                                                  If too much
      *
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate JDE batch number
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *  2) must be a valid batch
      *
      *
     C     $batno        begsr
      *
     C                   select
     C                   when      d1batno = 0
      *
     C                   when      d1batno < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1batno > 0
     C     d1batno       chain     mpj104c                            92
     C                   if        *in92 = *off                                 If invalid batch
     C                   z-add     phacono       ldacono
     C                   else
     C                   z-add     0             ldacono
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09238'
     C                   endif
     C                   endif                                                  If invalid batch
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Accounting Company
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required if batch number is blank
      *  2) cannot be negative
      *
     C     $acono        begsr
      *
     C                   move      *blank        d1aconm
      *
     C                   select
     C                   when      d1acono < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1acono = 0 and d1batno = 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09199'
     C                   endif
      *
     C                   when      d1acono > 0
     C     d1acono       chain     caabrel1                           92
     C                   if        *in92 = *off                                 If hit
     C                   eval      d1aconm = abadtx
     C                   else
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08020'
     C                   clear                   mgw
     C                   move      d1acono       xxalphcono
     C                   movea     xxalphcono    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If hit
      *
      * Has this company been set up as an upload file from MP2
      *
     C     d1acono       chain     mpp108                             92
     C                   if        *in92 = *on
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09240'
     C                   endif
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate from date
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required if batch number is blank
      *  2) cannot be negative
      *  3) must be a valid date
      *
      *
     C     $fmdy         begsr
      *
     C                   z-add     0             ldfcymd
      *
     C                   select
     C                   when      d1fmdy < 0
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1fmdy = 0 and d1acono <> 0
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09239'
     C                   endif
      *
     C                   when      d1fmdy > 0
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C                   z-add     d1fmdy        ldfmdy
     C     *mdy          move      d1fmdy        wkcymdiso
     C                   move      wkcymdiso     ldfcymd
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate to date
      *----------------------------------------------------------------
      *
      *  1) required if batch number is blank
      *  2) cannot be negative
      *  3) must be a valid date
      *  4) must be later than from date
      *
      *
     C     $tmdy         begsr
      *
     C                   z-add     0             ldtcymd
      *
     C                   select
     C                   when      d1tmdy < 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1tmdy > 0
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C                   z-add     d1tmdy        ldtmdy
     C     *mdy          move      d1tmdy        wkcymdiso
     C                   move      wkcymdiso     ldtcymd
     C                   endif                                                  If bad date
     C                   endsl
      *
      * To date cannot be earlier than from date.
      *
     C                   if        *in35 = *off and
     C                             *in36 = *off and
     C                             ldtcymd < ldfcymd
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate JDE Vendor Number
      *---------------------------------------------------------------
      *
      * Validations:
      *  1) optional
      *  2) if entered, must be valid in JDE
      *
     C     $jdvnno       begsr
      *
     C                   move      *blank        d1jdvnnm
      *
     C                   select
     C                   when      d1jdvnno = 0
     C                   other
      *
     C                   call      'HPJDEV'
     C                   parm                    mgi
     C                   parm                    mgd
     C                   parm                    error
     C                   parm      d1jdvnno      xxajd
     C                   parm      'V  '         xxtype
     C                   parm      no            xxerror
     C                   parm      *blank        xxname
      *
     C                   if        xxerror = yes
     C                   seton                                        31
     C                   else
     C                   move      xxname        d1jdvnnm
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the interface.
      *
     C     $proc1        begsr
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      * (Note: If the user entered dates, their LDA values were set in the
      *  edit routine.)
      *
     C                   z-add     d1batno       ldbatno
     C                   z-add     d1jdvnno      ldjdvnno
     C                   movel(p)  d1jdvnnm      ldjdvnnm
      *
     C                   if        d1batno = 0
     C                   z-add     d1acono       ldacono
     C                   endif
      *
     C                   if        ldbatno <> 0
     C                   move      'B'           ldflag
     C                   else
     C                   move      'D'           ldflag
     C                   endif
      *
     C                   out       lda
     C                   movea     xxjobq        cmd(51)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Accounting company
      *
     C                   select
     C                   when      fld = 'D1ACONO'
     C                   call      'MP508'
     C                   parm      0             xxacono
     C                   parm      *blank        xxaconm
     C                   seton                                        50
     C                   if        xxacono <> 0
     C                   z-add     xxacono       d1acono
     C                   eval      d1aconm = xxaconm
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *   none
      *
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldjdvnno
     C                   z-add     0             ldacono
     C                   move      no            ldhold
     C                   z-add     1             ldcopy
     C                   move      *blank        ldoutq
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(MP451CL )) JOB(MP2OVERS) JOBQ(__________)
