// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDPGEFR
// ?Date: 14.08.2025 Time: 03:42:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?WI642   JM-02/19/25 USDA FAS 98 and FAS99
//?- Create load order change log when adding new item lines.
//?- Changes are inside 'CRT PD Order Detail    CR'.
//?7/11/06 slm - Allow Completed Credit/Debit Memo to be displayed
//?              and only allow the ISS fields to be maintenance on
//?              screen.
//?E3387 JJH 09/14/14 - Display Shipping Method.
//?E4057 JJH 06/05/15 - Add option 9=Edit Deducitons/Additions
//?  NOTE:  This was previously a hidden option
ENDDO;

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?Change to ADD mode if no records exists.
DO;

EXECUTE FUNCTION(RTV Last Seq 1 Nbr     RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426854;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
{
 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

ENDDO;

//?Initialize flags and get company defaults.
DO;

// PAR.USR First Time = CND.Yes
PAR.USR_First_Time = 'Y';

// PAR.Access Denied (Y/N) = CND.no
PAR.Access_Denied_Y_N = 'N';

EXECUTE FUNCTION(RTV Cr/Dr Prc Meth     RT) TYPE(RTVOBJ) FILE(CAAQREP)          AC1344677;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Price_Method_Default_C_M);
PARAMETER(PAR.Price_Method_Default_D_M);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

//?USER: Initialize subfile header

//?07/11/06 Get the header Status for Complete & Confirmed
// LCL.Display Flag 1 USR = CND.blank
LCL.Display_Flag_1_USR = *BLANK;

CASE;

// IF PAR.USR First Time is Yes
IF PAR.USR_First_Time = 'Y';

//?Perform first time processing.
DO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E3387 JJH 09/12/14 - Display Shipping Method
EXECUTE FUNCTION(RTV Order Header CR/DR RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1573100;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(LCL.Header_Status);
PARAMETER(CTL.Order_Value_Total);
PARAMETER(CTL.Order_Weight_Total);
PARAMETER(CTL.Shipping_Method);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Age_Code);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Broker_Order_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR First Time = CND.No
PAR.USR_First_Time = 'N';

ENDDO;

ENDIF;

//?07/11/06 Add the Completed/Confirmed logic on only allow of Aff
//?         flags for update
CASE;

// IF LCL.Header Status is Confirmed & Complete
IF LCL.Header_Status = 'C'/'R';

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

// LCL.Display Flag 1 USR = CND.no
LCL.Display_Flag_1_USR = 'N';

//?Add mode is not valid if claim memo.
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

// Send error message - 'Memo/Claim Add not allowed Confirmed, or Completed'
ERROR(USR3644);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?If claim memo, then make screen fields output onlu.
DO;

CASE;

// IF CTL.Claim Number is Zero
IF CTL.Claim_Number = *ZERO;

// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

//?Add mode is not valid if claim memo.
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

// Send error message - 'Memo is tied to a claim, cannot add items.'
ERROR(USR2894);

ENDIF;

ENDIF;

ENDDO;

ENDIF;

EXECUTE FUNCTION(Vry TFExmp - Customer) TYPE(RTVOBJ) FILE(PDNEREP)              AC1748135;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Customer_TF_Exempt_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Customer TF Exempt Code is Exempt Customer
IF LCL.Customer_TF_Exempt_Code = 'EC';

// LCL.OH TF Exempt Code = LCL.Customer TF Exempt Code
LCL.OH_TF_Exempt_Code = LCL.Customer_TF_Exempt_Code;

// IF LCL.Customer TF Exempt Code is Not Exempt
IF LCL.Customer_TF_Exempt_Code = 'NE';

// LCL.OH TF Exempt Code = CND.Exempt Product
LCL.OH_TF_Exempt_Code = 'EP';

ENDIF;

// CTL.TF Exempt Code Desc Usr = Condition name of LCL.OH TF Exempt Code
CTL.TF_Exempt_Code_Desc_Usr = RTVCND(LCL.OH_TF_Exempt_Code);

//?USER: Initialize subfile record (existing record)

// RCD.USR Pounds = DB1.Weight Ordered
RCD.USR_Pounds = DB1.Weight_Ordered;

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

//?E3387 JJH 09/12/14 - Display Shipping Method
EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(CTL.ACR_Shipping_Method_DRV);
PARAMETER(CTL.Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Initialize subfile record (new record)

// RCD.Detail Line Status = CND.Entered
RCD.Detail_Line_Status = 'E';

// RCD.Price Status = CND.Priced
RCD.Price_Status = 'P';

// RCD.Order Sequence Number = CON.*ZERO
RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Secondary Line Seq = CON.1
RCD.Order_Secondary_Line_Seq = 1;

// RCD.Date of Original Entry = JOB.*Job date
RCD.Date_of_Original_Entry = JOB.*Job_date;

EXECUTE FUNCTION(RTV Affect Inv/Sls     RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1573105;
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Broker Order Status is yes
IF PAR.Broker_Order_Status = 'Y';

// LCL.Affect Commission = CND.yes
LCL.Affect_Commission = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Affect Commission = CND.no
LCL.Affect_Commission = 'N';

ENDIF;

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

//?CALC: Subfile control function fields

EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(CTL.ACR_Shipping_Method_DRV);
PARAMETER(CTL.Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Validate subfile control

CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program Prt Claim-Claim All   XF.
CALL PROGRAM(Prt Claim-Claim All   XF) ('PPL7XFR');
PARAMETER(CTL.Claim_Number);
PARAMETER(CTL.Company_Number);
PARAMETER('QPRINT');
PARAMETER(*YES);
PARAMETER(*NO);
PARAMETER(1);
PARAMETER('N');
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*NO);
PARAMETER(*NO);
PARAMETER('R');

// Call program DSP&DLT Spool File     UP.
CALL PROGRAM(DSP&DLT Spool File     UP) ('PDP5UPR');
PARAMETER('PPL4PFR$');

ENDIF;

//?USER: Validate subfile record fields

//?Validate Delete Request.
DO;

//?7/12/2006 Slm Delete not allowed added logic
CASE;

// IF RCD.Detail Line Status is Confirmed & Complete
IF RCD.Detail_Line_Status = 'C'/'R';

CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// Send error message - 'Memo is tied to a claim cannot delete item.'
ERROR(USR2893);
MSGPARM(RCD.*SFLSEL);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

CASE;

// IF CTL.Claim Number is Zero
IF CTL.Claim_Number = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Memo is tied to a claim cannot delete item.'
ERROR(USR2893);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?Calculate next order sequence number.
DO;

CASE;

// IF RCD.Order Sequence Number is Equal to zero
IF RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Sequence Number = WRK.Order Sequence Number + CON.1
RCD.Order_Sequence_Number = WRK.Order_Sequence_Number + 1;

// WRK.Order Sequence Number = RCD.Order Sequence Number
WRK.Order_Sequence_Number = RCD.Order_Sequence_Number;

ENDIF;

ENDDO;

//?Get defaults values from Company/Item.
DO;

// Call program RTV For Ord Dtl 2      XF.
CALL PROGRAM(RTV For Ord Dtl 2      XF) ('PDG8XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(LCL.Item_TF_Exempt_Code);
PARAMETER(WRK.Error_Status);

CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Company Item not found.'
ERROR(USR0326);
MSGPARM(RCD.Company_Number);
MSGPARM(RCD.Item_Code);

// IF LCL.Customer TF Exempt Code is Exempt Customer
IF LCL.Customer_TF_Exempt_Code = 'EC';

//?Either the Customer must be exempt or each line item must be
//?This pass the exempt so no more validation
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Claim Number is Claim Process
IF CTL.Claim_Number > *ZERO;

// IF LCL.Item TF Exempt Code is Exempt Product
IF LCL.Item_TF_Exempt_Code = 'EP';

// IF RCD.*SFLSEL is *Delete#1
IF RCD.*SFLSEL = '4';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The item or this ship to customer must be exempt'
ERROR(USR3611);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Ship_To_Customer);

ENDIF;

ENDIF;

ENDDO;

//?Validate Warehouse.
DO;

//?If warehouse not entered by user, then load default.
DO;

CASE;

// IF RCD.Warehouse Code is Warehouse Code Blank
IF RCD.Warehouse_Code = *BLANK;

// RCD.Warehouse Code = WRK.Warehouse Code
RCD.Warehouse_Code = WRK.Warehouse_Code;

ENDIF;

ENDDO;

//?Validate Warehouse Code.
DO;

EXECUTE FUNCTION(VAL Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1573102;
PARAMETER(RCD.Warehouse_Code);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(RCD.Warehouse_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDDO;

//?Validate Item/Warehouse --> IC Item Balance.
DO;

// Call program VAL Itm Bal. Exists    XF.
CALL PROGRAM(VAL Itm Bal. Exists    XF) ('PDCUXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.Error_Status);

CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(RCD.Company_Number);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Warehouse_Code);

ENDIF;

ENDDO;

ENDDO;

//?Validate Item Type Code.
DO;

CASE;

// IF WRK.Item Type Code is Not Finished Good
IF WRK.Item_Type_Code <> 'FG';

// Send error message - 'Ordered Items must be Finished Goods.'
ERROR(USR1941);
MSGPARM(RCD.Item_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDDO;

//?Validate Contract Number.
DO;

CASE;

// IF RCD.Contract Number is Entered
IF RCD.Contract_Number > *ZERO;

EXECUTE FUNCTION(RTV Val. Contract #    RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1267683;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Effective_Date);
PARAMETER(PAR.End_Date_Effective);
PARAMETER(PAR.Maximum_Quantity);
PARAMETER(PAR.Quantity_Sold);
PARAMETER(RCD.Contract_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// AND PAR.Order Date GE PAR.Effective Date
AND PAR.Order_Date >= PAR.Effective_Date;

// AND PAR.Order Date LE PAR.End Date Effective
AND PAR.Order_Date <= PAR.End_Date_Effective;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'OPP Item Contract not found in contract file.'
ERROR(USR1803);
MSGPARM(RCD.Contract_Number);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

ENDDO;

//?Validate Price Method.
DO;

//?If price method not entered by user, then load default.
DO;

CASE;

// IF RCD.Price Method Code is Blank
IF RCD.Price_Method_Code = *BLANK;

CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// RCD.Price Method Code = PAR.Price Method Default C/M
RCD.Price_Method_Code = PAR.Price_Method_Default_C_M;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Price Method Code = PAR.Price Method Default D/M
RCD.Price_Method_Code = PAR.Price_Method_Default_D_M;

ENDIF;

ENDIF;

ENDDO;

EXECUTE FUNCTION(RTV Price Meth Type    RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1268519;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(PAR.Price_Method_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Price Method Type is Extended or Manual
IF PAR.Price_Method_Type = 'X'/'M';

//?Price Method must be extended or manual.
DO;

CASE;

// IF PAR.Price Method Type is Manual Pricing
IF PAR.Price_Method_Type = 'M';

// AND RCD.Quantity Ordered is Equal to zero
AND RCD.Quantity_Ordered = *ZERO;

//?When Price Method is Extended, Qty Ordered must be entered.
DO;

// Send error message - 'Price Method is invalid with order quantity = 0'
ERROR(USR1975);
MSGPARM(RCD.Price_Method_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDDO;

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Price Method is invalid for Credit/Debit memos'
ERROR(USR1971);
MSGPARM(RCD.Price_Method_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDDO;

//?Validate Weight (Pounds).
DO;

CASE;

// IF PAR.Display Flag is No
IF PAR.Display_Flag = 'N';

//?*** Memo was created from a claim, skip calculations.
// IF *OTHERWISE
IF *OTHERWISE;

//?Not a claim memo.
DO;

CASE;

// IF RCD.USR Pounds is Zero
IF RCD.USR_Pounds = *ZERO;

//?Weight not entered by user, load default.
DO;

CASE;

// IF PAR.Price Method Type is Extended Pricing
IF PAR.Price_Method_Type = 'X';

//?*** extended price method, do not change pounds ***
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Quantity Ordered is Equal to zero
IF RCD.Quantity_Ordered = *ZERO;

//?*** load default pounds for item ***
// RCD.USR Pounds = RCD.Unit Weight Ordered U/M
RCD.USR_Pounds = RCD.Unit_Weight_Ordered_U_M;

// IF *OTHERWISE
IF *OTHERWISE;

//?*** total default pounds = qty * default pounds ***
// RCD.USR Pounds = RCD.Quantity Ordered * RCD.Unit Weight Ordered U/M *
RCD.USR_Pounds = RCD.Quantity_Ordered * RCD.Unit_Weight_Ordered_U_M;

ENDIF;

ENDIF;

ENDDO;

ENDIF;

CASE;

// IF RCD.USR Pounds is Zero
IF RCD.USR_Pounds = *ZERO;

// AND PAR.Price Method Type is Manual Pricing
AND PAR.Price_Method_Type = 'M';

//?Pounds is required if Manual price method.
DO;

// Send error message - 'Pounds is Required'
ERROR(USR2255);
MSGPARM(RCD.Weight_Ordered);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDDO;

ENDIF;

ENDDO;

ENDIF;

ENDDO;

CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

//?*** errors found stop validations. ***
// IF *OTHERWISE
IF *OTHERWISE;

//?Continue Validations.
DO;

CASE;

// IF PAR.Display Flag is No
IF PAR.Display_Flag = 'N';

//?*** Memo was created from a claim, skip calculations.
// IF *OTHERWISE
IF *OTHERWISE;

//?Not a claim memo.
DO;

CASE;

// IF PAR.Price Method Type is Extended Pricing
IF PAR.Price_Method_Type = 'X';

//?Extended Pricing, USR Quantity = Pounds / Default Item Qty.
DO;

// WRK.USR Quantity 17,9 = RCD.USR Pounds / RCD.Unit Weight Ordered U/M *
WRK.USR_Quantity_179 = RCD.USR_Pounds / RCD.Unit_Weight_Ordered_U_M;

// WRK.USR Quantity = WRK.USR Quantity 17,9 * CON.1 *
WRK.USR_Quantity = WRK.USR_Quantity_179 * 1;

CASE;

// IF WRK.USR Quantity is Equal to zero
IF WRK.USR_Quantity = *ZERO;

// WRK.USR Quantity = CON.1
WRK.USR_Quantity = 1;

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Manual Pricing, USR Quantity = Quantity Ordered.
DO;

// WRK.USR Quantity = RCD.Quantity Ordered
WRK.USR_Quantity = RCD.Quantity_Ordered;

ENDDO;

ENDIF;

// Call program CLC Price Item         XF.
CALL PROGRAM(CLC Price Item         XF) ('PDG9XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(**);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(*ZERO);
PARAMETER(WRK.Error_Return);
PARAMETER('S');

//?Calculate for pricing by the pound calculations
DO;

CASE;

// IF PAR.Price Method Type is Extended Pricing
IF PAR.Price_Method_Type = 'X';

//?Price Method is Extended Pricing.
DO;

// Call program RTV Item Details       XF.
CALL PROGRAM(RTV Item Details       XF) ('PDKAXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(WRK.Unused_Parm_CD9_USR);
PARAMETER(WRK.Item_Pricing_Operation);
PARAMETER(WRK.Item_Pricing_Constant);

CASE;

// IF WRK.USR Quantity 17,9 is NE Zeros
IF WRK.USR_Quantity_179 <> *ZERO;

// WRK.Pricing Retrieved Amount = RCD.Price Overage Override / WRK.USR Quantity 17,
WRK.Pricing_Retrieved_Amount = RCD.Price_Overage_Override / WRK.USR_Quantity_179 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Pricing Retrieved Amount = RCD.Price Overage Override
WRK.Pricing_Retrieved_Amount = RCD.Price_Overage_Override;

ENDIF;

// Call program CLC Convert Price Qtys XF.
CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Pricing_Retrieved_Amount);

//?If U/M Priced = Primary then execute
CASE;

// IF RCD.U/M - Base Price EQ WRK.U/M - Primary
IF RCD.U_M_Base_Price = WRK.UOM_Primary;

// RCD.Unit Price = WRK.Price based on U/M1 S
RCD.Unit_Price = WRK.Price_based_on_U_M1_S;

ENDIF;

//?If U/M Priced = Secondary then execute
CASE;

// IF RCD.U/M - Base Price EQ WRK.U/M - Second
IF RCD.U_M_Base_Price = WRK.UOM_Second;

// RCD.Unit Price = WRK.Price based on U/M2 S
RCD.Unit_Price = WRK.Price_based_on_U_M2_S;

ENDIF;

//?If U/M Priced = Third then execute
CASE;

// IF RCD.U/M - Base Price EQ WRK.U/M - Third
IF RCD.U_M_Base_Price = WRK.UOM_Third;

// RCD.Unit Price = WRK.Price based on U/M3 S
RCD.Unit_Price = WRK.Price_based_on_U_M3_S;

ENDIF;

//?Calc Unit Price Ordered U/M
CASE;

// IF WRK.USR Quantity 17,9 is NE Zeros
IF WRK.USR_Quantity_179 <> *ZERO;

// RCD.Unit Price Ordered U/M = RCD.Price Overage Override / WRK.USR Quantity 17,9
RCD.Unit_Price_Ordered_U_M = RCD.Price_Overage_Override / WRK.USR_Quantity_179 'H';

//?Calc Unit Price Ordered U/M
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Unit Price Ordered U/M = RCD.Price Overage Override
RCD.Unit_Price_Ordered_U_M = RCD.Price_Overage_Override;

ENDIF;

// RCD.Unit Price - Credit = RCD.Unit Price Ordered U/M
RCD.Unit_Price_Credit = RCD.Unit_Price_Ordered_U_M;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.U/M - Base Price is Gallon
IF RCD.U_M_Base_Price = 'GL';

//?5/30/08
//?RMC FP1110 added for HPB which is in gallons, lbs is per a density calc
// IF *OTHERWISE
IF *OTHERWISE;

//?Price Method is Manual.
DO;

CASE;

// IF RCD.Unit Weight Ordered U/M is Not equal zero
IF RCD.Unit_Weight_Ordered_U_M <> *ZERO;

// Calc Working Extended Amt
PAR.Calc_Work_Field_156_USR = ( RCD.Unit_Price_Ordered_U_M / RCD.Unit_Weight_Ordered_U_M           +
'H' ) * RCD.USR_Pounds 'H';

ENDIF;

//?Recalc Unit Price per U/M
CASE;

// IF RCD.Quantity Ordered is not equal zero
IF RCD.Quantity_Ordered <> *ZERO;

// RCD.Unit Price Ordered U/M = PAR.Calc Work Field 15,6 USR / RCD.Quantity Ordered
RCD.Unit_Price_Ordered_U_M = PAR.Calc_Work_Field_156_USR / RCD.Quantity_Ordered 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Unit Price Ordered U/M = PAR.Calc Work Field 15,6 USR / CON.1 *Rounded
RCD.Unit_Price_Ordered_U_M = PAR.Calc_Work_Field_156_USR / 1 'H';

ENDIF;

ENDDO;

ENDIF;

ENDIF;

ENDDO;

//?Pricing error message
CASE;

// IF WRK.Error Return is All Entered Values
IF WRK.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'            +
/'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

// Send error message - 'Error in Pricing Routine.  Review pricing codes.'
ERROR(USR1850);
MSGPARM(RCD.Market_Pricing_Date);
MSGPARM(RCD.Date_Method_Code);
MSGPARM(RCD.Price_Method_Code);
MSGPARM(RCD.Commodity_Market_Code);
MSGPARM(WRK.Error_Return);

ENDIF;

//?Extended Amount
CASE;

// IF RCD.Quantity Ordered is Equal to zero
IF RCD.Quantity_Ordered = *ZERO;

// RCD.Extended Amount = RCD.Price Overage Override
RCD.Extended_Amount = RCD.Price_Overage_Override;

// RCD.Unit Price = CON.*ZERO
RCD.Unit_Price = *ZERO;

// RCD.Unit Price - Credit = CON.*ZERO
RCD.Unit_Price_Credit = *ZERO;

// RCD.Unit Price Ordered U/M = CON.*ZERO
RCD.Unit_Price_Ordered_U_M = *ZERO;

// RCD.U/M - Base Price = CON.*BLANK
RCD.U_M_Base_Price = *BLANK;

//?Extended Amount
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Price Method Type is Extended Pricing
IF PAR.Price_Method_Type = 'X';

// RCD.Extended Amount = RCD.Price Overage Override
RCD.Extended_Amount = RCD.Price_Overage_Override;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Extended Amount = RCD.Quantity Ordered * RCD.Unit Price Ordered U/M *Rounded
RCD.Extended_Amount = RCD.Quantity_Ordered * RCD.Unit_Price_Ordered_U_M 'H';

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDDO;

ENDIF;

ENDDO;

ENDIF;

CASE;

// IF CTL.Claim Number is Claim Process
IF CTL.Claim_Number > *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Customer TF Exempt Code is Exempt Customer
IF LCL.Customer_TF_Exempt_Code = 'EC';

CASE;

// IF LCL.Item TF Exempt Code is Not Exempt
IF LCL.Item_TF_Exempt_Code = 'NE';

// RCD.Ord TF Exempt Code = CND.Exempt Customer
RCD.Ord_TF_Exempt_Code = 'EC';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Ord TF Exempt Code = CND.Exempt Product
RCD.Ord_TF_Exempt_Code = 'EP';

ENDIF;

// IF LCL.Customer TF Exempt Code is Not Exempt
IF LCL.Customer_TF_Exempt_Code = 'NE';

// RCD.Ord TF Exempt Code = CND.Exempt Product
RCD.Ord_TF_Exempt_Code = 'EP';

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF RCD.*SFLSEL is *Comments
IF RCD.*SFLSEL = '8'/'8';

//?Edit Memo Comments.
DO;

// Call program EDT Detail Comments    EF.
CALL PROGRAM(EDT Detail Comments    EF) ('PDDWEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(RCD.Requested_Ship_Date);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDDO;

ENDIF;

CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Edt Ord Dtl Accr      EF.
CALL PROGRAM(Edt Ord Dtl Accr      EF) ('PNL9EFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(CTL.Ship_To_City);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(LCL.Shipping_Method);
PARAMETER(PAR.Billing_Activity_Type);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT PD Order Detail    CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1425283;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(RCD.Order_Group_Code);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(RCD.Billing_Detail_Cost_Dol);
PARAMETER(RCD.Billing_Detail_Gross_Dol);
PARAMETER(RCD.Billing_Detail_Net_Dol);
PARAMETER(RCD.Quantity_to_Substitute);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Work_Confirm_Status);
PARAMETER(RCD.Work_Over_Short_Status);
PARAMETER(RCD.OD_Production_Plan_Sts);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(PAR.Age_Code);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.USR_Pounds);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.USR_Pounds);
PARAMETER(RCD.Unit_Cost_Pricing_U_M);
PARAMETER(RCD.Unit_Cost_Per_Pound);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Tare_Weight_Total);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Quality_Level);
PARAMETER(RCD.Pricing_Product_Class_Rep);
PARAMETER(RCD.Season_Product_Class_Repo);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*USER);
PARAMETER(RCD.Country_Code);
PARAMETER('01');
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.Substituted_Flag);
PARAMETER(RCD.OD_Schedule_Override_Sts);
PARAMETER(RCD.Invoice_Unit_Price);
PARAMETER(RCD.Invoice_Extended_Amt);
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER('N');
PARAMETER(LCL.Affect_Commission);
PARAMETER('N');
PARAMETER(RCD.Released_by_User_Sts_Y_N);
PARAMETER(RCD.Ord_TF_Exempt_Code);
PARAMETER(RCD.OD_Pallet_Type);
PARAMETER(RCD.Production_Warehouse);
PARAMETER(RCD.OD_Price_Type);
PARAMETER(RCD.Warehouse_Pallets_Loaded);
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.OD_Price_Type_Ref_Num);
PARAMETER(RCD.OD_Firm_Date);
PARAMETER(RCD.Deadline_Depart_Time_LH);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.Maximum_Net_Weight);
PARAMETER(RCD.Substitution_Line_Number);
PARAMETER(RCD.Max_Qty_to_sched_per_day);
PARAMETER(RCD.Warehouse_Pallet_Tare);
PARAMETER(RCD.Warehouse_Avg_Pallet_Tare);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(RCD.OD_Estimated_Gross_Weight);
PARAMETER(RCD.OD_Maximum_Unit_Weight);
PARAMETER(RCD.Order_Gate_Final_Price);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Gate_Final_Price_Adj);
PARAMETER(RCD.OD_Weighted_Avg_Price);
PARAMETER(RCD.OD_Original_Ordered_Qty);
PARAMETER(RCD.OD_Cancel_Date);
PARAMETER(RCD.OD_Unused_Prc_7);
PARAMETER(RCD.OD_Unused_Prc_8);
PARAMETER(RCD.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(RCD.OD_MPR_Prc_Ready_to_Send);
PARAMETER(RCD.OD_UnUsed_Price_Sts_3);
PARAMETER(RCD.Weight_Amount_Entered);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(RCD.OD_Spot_Buy);
PARAMETER(RCD.OD_Clm_Full_Return_to_Plt);
PARAMETER(RCD.Order_Line_Error_Type);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.OD_Atch_to_Ord_ActShpDte);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Processing before Data update

 // DB1.Age Code = CND.Blank
 DB1.Age_Code = *BLANK;

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program Rtv First Consumed Itm XF.
 CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Consumed_Item_Code);

 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Warehouse);
 PARAMETER(NLL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
 DO;

 // Call program Rtv Tare Weight        XF.
 CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Misc_Tare_Weight);

 //?wi464
 // Call program RTV Itm BxID & Tares  XF.
 CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Box_Weight);
 PARAMETER(LCL.Number_Cases_On_A_Pallet);
 PARAMETER(LCL.Pallet_Tare_Weight);
 PARAMETER(LCL.Box_iD);
 PARAMETER(DB1.OD_Pallet_Type);

 // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
 LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

 // Box + Misc Tare
 LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

 //?Pallet Tare
 CASE;

 // IF DB1.Palletize is yes
 IF DB1.Palletize = 'Y';

 CASE;

 // IF LCL.Number Cases On A Pallet is GT Zero
 IF LCL.Number_Cases_On_A_Pallet > *ZERO;

 // Pallet Weight
 LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
 * LCL.Pallet_Tare_Weight 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Weight 1.2             .U = CON.*ZERO
 LCL.Weight_1_2_U = *ZERO;

 ENDIF;

 //?Pallet Tare
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Weight 1.2             .U = CON.*ZERO
 LCL.Weight_1_2_U = *ZERO;

 ENDIF;

 // Estimated Gross
 DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
 + LCL.Weight_1_2_U;

 //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
 ENDDO;

 //?USER: Processing after Data update

 //?WI642   JM-02/19/25-Add load order change log on new items.
 //?WI642   JM-02/19/25-Crt chg log if dtl has been sent to MPR USDA
 CASE;

 // IF DB1.OD MPR Prc Ready to Send is yes
 IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

 //?Always create price type log ORDPRT
 // LCL.Text 3 Length USR = DB1.Order Sequence Number
 LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,CND.Not Entered,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + *BLANK (1);

 // LCL.Change Log New Value = PAR.OD Price Type
 LCL.Change_Log_New_Value = PAR.OD_Price_Type;

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDPRT');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 ENDIF;

 //?WI642   JM-02/19/25-If not the transfer order nbr 9999999->crt chg logs
 CASE;

 // IF DB1.Order Number is ne 9999999
 IF DB1.Order_Number <> 9999999;

 // LCL.Text 3 Length USR = DB1.Order Sequence Number
 LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

 // LCL.Weight Beg Inv usr = CND.Not Entered
 LCL.Weight_Beg_Inv_usr = *ZERO;

 // LCL.Text USR 7 = LCL.Weight Beg Inv usr
 LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

 // LCL.Weight Beg Inv usr = PAR.Weight Ordered
 LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

 // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
 LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDWGT');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 // LCL.Weight Beg Inv usr = CND.Not Entered
 LCL.Weight_Beg_Inv_usr = *ZERO;

 // LCL.Text USR 7 = LCL.Weight Beg Inv usr
 LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

 // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
 LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

 // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
 LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDQTY');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Order Detail SpcAffIF) TYPE(EXCINTFUN) FILE(OPBGWKP)       AC1787561;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Order_Group_Code);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
PARAMETER(RCD.Billing_Detail_Cost_Dol);
PARAMETER(RCD.Billing_Detail_Gross_Dol);
PARAMETER(RCD.Billing_Detail_Net_Dol);
PARAMETER(RCD.Quantity_to_Substitute);
PARAMETER(RCD.Comment_Print_Acknowledge);
PARAMETER(RCD.Comment_Print_Inv_Cr_Memo);
PARAMETER(RCD.Comment_Print_Pick_Slip);
PARAMETER(RCD.Comment_Print_Ship_Doc);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Work_Confirm_Status);
PARAMETER(RCD.Work_Over_Short_Status);
PARAMETER(RCD.OD_Production_Plan_Sts);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(RCD.Age_Code);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Audit_Reason_Code);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.USR_Pounds);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.USR_Pounds);
PARAMETER(RCD.Unit_Cost_Pricing_U_M);
PARAMETER(RCD.Unit_Cost_Per_Pound);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Tare_Weight_Total);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Quality_Level);
PARAMETER(RCD.Pricing_Product_Class_Rep);
PARAMETER(RCD.Season_Product_Class_Repo);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.Country_Code);
PARAMETER(RCD.Event_Code);
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.Substituted_Flag);
PARAMETER(RCD.OD_Schedule_Override_Sts);
PARAMETER(RCD.Invoice_Unit_Price);
PARAMETER(RCD.Invoice_Extended_Amt);
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Affect_Trade_Fund);
PARAMETER(RCD.Affect_Commission);
PARAMETER(RCD.Affect_Pricing);
PARAMETER(RCD.Released_by_User_Sts_Y_N);
PARAMETER(RCD.Ord_TF_Exempt_Code);
PARAMETER(RCD.OD_Pallet_Type);
PARAMETER(RCD.Production_Warehouse);
PARAMETER(RCD.OD_Price_Type);
PARAMETER(RCD.Warehouse_Pallets_Loaded);
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.OD_Price_Type_Ref_Num);
PARAMETER(RCD.OD_Firm_Date);
PARAMETER(RCD.Deadline_Depart_Time_LH);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.Maximum_Net_Weight);
PARAMETER(RCD.Substitution_Line_Number);
PARAMETER(RCD.Max_Qty_to_sched_per_day);
PARAMETER(RCD.Warehouse_Pallet_Tare);
PARAMETER(RCD.Warehouse_Avg_Pallet_Tare);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(RCD.OD_Estimated_Gross_Weight);
PARAMETER(RCD.OD_Maximum_Unit_Weight);
PARAMETER(RCD.Order_Gate_Final_Price);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Gate_Final_Price_Adj);
PARAMETER(RCD.OD_Weighted_Avg_Price);
PARAMETER(RCD.OD_Original_Ordered_Qty);
PARAMETER(RCD.OD_Cancel_Date);
PARAMETER(RCD.OD_Unused_Prc_7);
PARAMETER(RCD.OD_Unused_Prc_8);
PARAMETER(RCD.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(RCD.OD_MPR_Prc_Ready_to_Send);
PARAMETER(RCD.OD_UnUsed_Price_Sts_3);
PARAMETER(RCD.Weight_Amount_Entered);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(RCD.OD_Spot_Buy);
PARAMETER(RCD.OD_Clm_Full_Return_to_Plt);
PARAMETER(RCD.Order_Line_Error_Type);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.OD_Atch_to_Ord_ActShpDte);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(LCL.Header_Status);
{
 //?Execute internal function

 //?Update the Order Detail, bring back the before pic of the
 //?        affect flags.
 EXECUTE FUNCTION(CHG Order Detail SpcAffCH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1787562;
 PARAMETER(PR1.Company_Number);
 PARAMETER(PR1.Order_Number);
 PARAMETER(PR1.Order_Sequence_Number);
 PARAMETER(PR1.Order_Secondary_Line_Seq);
 PARAMETER(PR1.Item_Code);
 PARAMETER(PR1.Warehouse_Code);
 PARAMETER(PR1.Ship_To_Customer);
 PARAMETER(PR1.Order_Group_Code);
 PARAMETER(PR1.Detail_Line_Status);
 PARAMETER(PR1.Detail_Line_Status_Last);
 PARAMETER(PR1.Billing_Detail_Cost_Dol);
 PARAMETER(PR1.Billing_Detail_Gross_Dol);
 PARAMETER(PR1.Billing_Detail_Net_Dol);
 PARAMETER(PR1.Quantity_to_Substitute);
 PARAMETER(PR1.Comment_Print_Acknowledge);
 PARAMETER(PR1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(PR1.Comment_Print_Pick_Slip);
 PARAMETER(PR1.Comment_Print_Ship_Doc);
 PARAMETER(PR1.Extended_Amount);
 PARAMETER(PR1.Market_Pricing_Date);
 PARAMETER(PR1.Commodity_Market_Code);
 PARAMETER(PR1.Date_Method_Code);
 PARAMETER(PR1.Price_Method_Code);
 PARAMETER(PR1.Price_Overage_Override);
 PARAMETER(PR1.Contract_Number);
 PARAMETER(PR1.Price_Status);
 PARAMETER(PR1.Pricing_Date_Used);
 PARAMETER(PR1.U_M_Base_Price);
 PARAMETER(PR1.U_M_Ordered);
 PARAMETER(PR1.Work_Confirm_Status);
 PARAMETER(PR1.Work_Over_Short_Status);
 PARAMETER(PR1.OD_Production_Plan_Sts);
 PARAMETER(PR1.Order_Desc_Line_One);
 PARAMETER(PR1.Order_Desc_Line_Two);
 PARAMETER(PR1.Age_Code);
 PARAMETER(PR1.Palletize);
 PARAMETER(PR1.Slip_Sheet);
 PARAMETER(PR1.Catch_Weight_Status);
 PARAMETER(PR1.Price_Audit);
 PARAMETER(PR1.Price_Audit_Reason_Code);
 PARAMETER(PR1.Production_Date_Control);
 PARAMETER(PR1.Rated_Freight);
 PARAMETER(PR1.Quantity_Ordered);
 PARAMETER(PR1.Weight_Ordered);
 PARAMETER(PR1.Quantity_Scheduled);
 PARAMETER(PR1.Weight_Scheduled);
 PARAMETER(PR1.Quantity_Shipped_Total);
 PARAMETER(PR1.Weight_Shipped_Total);
 PARAMETER(PR1.Unit_Cost_Pricing_U_M);
 PARAMETER(PR1.Unit_Cost_Per_Pound);
 PARAMETER(PR1.Unit_Price);
 PARAMETER(PR1.Unit_Price_Credit);
 PARAMETER(PR1.Unit_Price_Ordered_U_M);
 PARAMETER(PR1.Unit_Weight_Ordered_U_M);
 PARAMETER(PR1.Tare_Weight_Total);
 PARAMETER(PR1.Requested_Ship_Date);
 PARAMETER(PR1.Scheduled_Ship_Date);
 PARAMETER(PR1.Actual_Shipped_Date);
 PARAMETER(PR1.Affect_Inventory_Status);
 PARAMETER(PR1.Affect_Sales_Doll_Status);
 PARAMETER(PR1.Affect_Sales_Pnds_Status);
 PARAMETER(PR1.Item_Structure_Type_Code);
 PARAMETER(PR1.Item_Structure_Group_Code);
 PARAMETER(PR1.Item_Structure_Class_Code);
 PARAMETER(PR1.Item_Level);
 PARAMETER(PR1.Quality_Level);
 PARAMETER(PR1.Pricing_Product_Class_Rep);
 PARAMETER(PR1.Season_Product_Class_Repo);
 PARAMETER(PR1.Date_of_Original_Entry);
 PARAMETER(PR1.User_Profile_Name);
 PARAMETER(PR1.Country_Code);
 PARAMETER(PR1.Event_Code);
 PARAMETER(PR1.Reason_Code);
 PARAMETER(PR1.Sales_Route_Code);
 PARAMETER(PR1.Modified_Flag);
 PARAMETER(PR1.Substituted_Flag);
 PARAMETER(PR1.OD_Schedule_Override_Sts);
 PARAMETER(PR1.Invoice_Unit_Price);
 PARAMETER(PR1.Invoice_Extended_Amt);
 PARAMETER(PR1.Ham_Group_Number);
 PARAMETER(PR1.OD_Adj_Type_Override);
 PARAMETER(PR1.Affect_Trade_Fund);
 PARAMETER(PR1.Affect_Commission);
 PARAMETER(PR1.Affect_Pricing);
 PARAMETER(PR1.Released_by_User_Sts_Y_N);
 PARAMETER(PR1.Ord_TF_Exempt_Code);
 PARAMETER(PR1.OD_Pallet_Type);
 PARAMETER(PR1.Production_Warehouse);
 PARAMETER(PR1.OD_Price_Type);
 PARAMETER(PR1.Warehouse_Pallets_Loaded);
 PARAMETER(PR1.Consumed_Item_Code);
 PARAMETER(PR1.Deadline_Depart_Date_LH);
 PARAMETER(PR1.OD_Price_Type_Ref_Num);
 PARAMETER(PR1.OD_Firm_Date);
 PARAMETER(PR1.Deadline_Depart_Time_LH);
 PARAMETER(PR1.Price_Code);
 PARAMETER(PR1.Maximum_Net_Weight);
 PARAMETER(PR1.Substitution_Line_Number);
 PARAMETER(PR1.Max_Qty_to_sched_per_day);
 PARAMETER(PR1.Warehouse_Pallet_Tare);
 PARAMETER(PR1.Warehouse_Avg_Pallet_Tare);
 PARAMETER(PR1.OD_Item_Target_Price);
 PARAMETER(PR1.OD_Estimated_Gross_Weight);
 PARAMETER(PR1.OD_Maximum_Unit_Weight);
 PARAMETER(PR1.Order_Gate_Final_Price);
 PARAMETER(PR1.OD_Ceiling_Price);
 PARAMETER(PR1.OD_Gate_Final_Price_Adj);
 PARAMETER(PR1.OD_Weighted_Avg_Price);
 PARAMETER(PR1.OD_Original_Ordered_Qty);
 PARAMETER(PR1.OD_Cancel_Date);
 PARAMETER(PR1.OD_Unused_Prc_7);
 PARAMETER(PR1.OD_Unused_Prc_8);
 PARAMETER(PR1.OD_MPR_Sent_to_USDA_Sts);
 PARAMETER(PR1.OD_MPR_Prc_Ready_to_Send);
 PARAMETER(PR1.OD_UnUsed_Price_Sts_3);
 PARAMETER(PR1.Weight_Amount_Entered);
 PARAMETER(PR1.Item_Age_Days);
 PARAMETER(PR1.Production_Ovr_AgeDte_Fr);
 PARAMETER(PR1.Production_Ovr_AgeDte_To);
 PARAMETER(PR1.OD_Spot_Buy);
 PARAMETER(PR1.OD_Clm_Full_Return_to_Plt);
 PARAMETER(PR1.Order_Line_Error_Type);
 PARAMETER(PR1.OD_Market_Begin_Date);
 PARAMETER(PR1.OD_Market_Ending_Date);
 PARAMETER(PR1.OD_Atch_to_Ord_ActShpDte);
 PARAMETER(PR1.EDI_Status_1);
 PARAMETER(PR1.EDI_Status_2);
 PARAMETER(PR1.EDI_Status_3);
 PARAMETER(LCL.Affect_Inventory_Sts_Usr);
 PARAMETER(LCL.Affect_Sales_Doll_Sts_Usr);
 PARAMETER(LCL.Affect_Sales_Pnds_Sts_Usr);
 PARAMETER(LCL.Upd_Del_Sts_USR);
 {
  //?USER: Processing before Data read

  // PAR.Affect Inventory Sts Usr = CND.blank
  PAR.Affect_Inventory_Sts_Usr = *BLANK;

  // PAR.Affect Sales Doll Sts Usr = CND.blank
  PAR.Affect_Sales_Doll_Sts_Usr = *BLANK;

  // PAR.Affect Sales Pnds Sts Usr = CND.blank
  PAR.Affect_Sales_Pnds_Sts_Usr = *BLANK;

  // PAR.Upd/Del Sts USR = WRK.Blank for 4           USR
  PAR.Upd_Del_Sts_USR = WRK.Blank_for_4_USR;

  //?USER: Processing after Data read

  // PAR.Affect Inventory Sts Usr = DB1.Affect Inventory Status
  PAR.Affect_Inventory_Sts_Usr = DB1.Affect_Inventory_Status;

  // PAR.Affect Sales Doll Sts Usr = DB1.Affect Sales Doll Status
  PAR.Affect_Sales_Doll_Sts_Usr = DB1.Affect_Sales_Doll_Status;

  // PAR.Affect Sales Pnds Sts Usr = DB1.Affect Sales Pnds Status
  PAR.Affect_Sales_Pnds_Sts_Usr = DB1.Affect_Sales_Pnds_Status;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?USER: Processing after Data update

  // PAR.Upd/Del Sts USR = CND.Update
  PAR.Upd_Del_Sts_USR = 'U';

 }

 CASE;

 // IF PR3.Header Status is Confirmed & Complete
 IF PR3.Header_Status = 'C'/'R';

 //?Order Detail was Update now let see if the Affect flags were
 //?changed.  If so then go to the Sales History and update
 //?the Affect Flags in the Sales History.
 //?Verify If Change and Update the Affect Flags in Sales History
 DO;

 CASE;

 // IF LCL.Upd/Del Sts USR is Update
 IF LCL.Upd_Del_Sts_USR = 'U';

 CASE;

 // IF LCL.Affect Inventory Sts Usr NE PR1.Affect Inventory Status
 IF LCL.Affect_Inventory_Sts_Usr <> PR1.Affect_Inventory_Status;

 //?Update the sales history or
 // IF LCL.Affect Sales Doll Sts Usr NE PR1.Affect Sales Doll Status
 IF LCL.Affect_Sales_Doll_Sts_Usr <> PR1.Affect_Sales_Doll_Status;

 //?Update the sales history or
 // IF LCL.Affect Sales Pnds Sts Usr NE PR1.Affect Sales Pnds Status
 IF LCL.Affect_Sales_Pnds_Sts_Usr <> PR1.Affect_Sales_Pnds_Status;

 //?Update the sales history or
 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 //?no update to the sales history
 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Affect Flags      RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1787586;
 PARAMETER(PR1.Company_Number);
 PARAMETER(PR1.Order_Number);
 PARAMETER(PR1.Order_Sequence_Number);
 PARAMETER(PR1.Order_Secondary_Line_Seq);
 PARAMETER(PR1.Affect_Inventory_Status);
 PARAMETER(PR1.Affect_Sales_Doll_Status);
 PARAMETER(PR1.Affect_Sales_Pnds_Status);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  QUIT;

  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Affect Flags       CH) TYPE(CHGOBJ) FILE(OMHSTPP)          AC1395065;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Affect_Inventory_Status);
  PARAMETER(PAR.Affect_Sales_Doll_Status);
  PARAMETER(PAR.Affect_Sales_Pnds_Status);
  PARAMETER(JOB.*Job_time);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*JOB);
  PARAMETER(JOB.*Job_date);
  {
   //?USER: Processing after Data read

   // DB1.Data Mart Process Sts = CND.no
   DB1.Data_Mart_Process_Sts = 'N';

   // DB1.Process Sts for 3C = CND.No
   DB1.Process_Sts_for_3C = 'N';

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDDO;

 ENDIF;

}


//?USER: Extra processing after DBF update

CASE;

// IF LCL.Header Status is Confirmed & Complete
IF LCL.Header_Status = 'C'/'R';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?Cancel Order Detail.
DO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.Detail Line Status Last = RCD.Detail Line Status
RCD.Detail_Line_Status_Last = RCD.Detail_Line_Status;

// RCD.Detail Line Status = CND.Cancelled
RCD.Detail_Line_Status = 'X';

EXECUTE FUNCTION(CHG Detail Status      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425418;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?After update processing.
DO;

// Call program CLC Price Item         XF.
CALL PROGRAM(CLC Price Item         XF) ('PDG9XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(02);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(*ZERO);
PARAMETER(WRK.Error_Return);
PARAMETER('S');

CASE;

// IF WRK.Error Return is All Entered Values
IF WRK.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'            +
/'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

// Send error message - 'Error in Pricing Routine.  Review pricing codes.'
ERROR(USR1850);
MSGPARM(RCD.Market_Pricing_Date);
MSGPARM(RCD.Date_Method_Code);
MSGPARM(RCD.Price_Method_Code);
MSGPARM(RCD.Commodity_Market_Code);
MSGPARM(WRK.Error_Return);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Set status to available if entered
CASE;

// IF RCD.Detail Line Status is Entered
IF RCD.Detail_Line_Status = 'E';

// RCD.Detail Line Status Last = RCD.Detail Line Status
RCD.Detail_Line_Status_Last = RCD.Detail_Line_Status;

// RCD.Detail Line Status = CND.Available
RCD.Detail_Line_Status = 'A';

EXECUTE FUNCTION(CHG Detail Status      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425418;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDDO;

ENDIF;

ENDIF;

//?Updates occurred set flags to "Yes".
DO;

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDDO;

//?USER: Process command keys

CASE;

// IF LCL.Header Status is Confirmed & Complete
IF LCL.Header_Status = 'C'/'R';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

//?did call UPD Sum Cr/Dr Memo Tot XF  (all parms CTL)
// Call program CLC Tot Ord Val Memo   XF.
CALL PROGRAM(CLC Tot Ord Val Memo   XF) ('PDQEXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Value_Total);
PARAMETER(CTL.Order_Weight_Total);
PARAMETER(WRK.USR_Production);

CASE;

// IF CTL.Claim Number is Claim Process
IF CTL.Claim_Number > *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chg TF Exempt         CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1750711;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.OH_TF_Exempt_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

ENDIF;

ENDIF;

//?USER: Exit program processing

CASE;

// IF PAR.Access Denied (Y/N) is no
IF PAR.Access_Denied_Y_N = 'N';

PGM.*Return_code = 'NOUPD';

RETURN;

ENDIF;

