// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNSHE1R
// ?Date: 14.08.2025 Time: 03:46:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?C01780  RMC 10/19/11 When chg process sts to "1" , update return code too
//?C01673  RMC 8/02/11
//?  Round any dec place to next whole nmbr - so add .5 then round
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('SHP');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize key screen

MOVE *ALL (To: KEY From: PAR);

//?USER: Initialize detail screen (existing record)

// DTL.Condition Desc. 2  USR = Condition name of DTL.RFS Transaction Type
DTL.Condition_Desc_2_USR = RTVCND(DTL.RFS_Transaction_Type);

EXECUTE FUNCTION(Rtv Trans Reason Desc RT) TYPE(RTVOBJ) FILE(PNGGREP)           AC1990835;
PARAMETER(DB1.RFS_Transaction_Type);
PARAMETER(DB1.RFS_Trans_Reason_Code);
PARAMETER(DTL.Condition_Desc_3_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Fuel Code Desc    RT) TYPE(RTVOBJ) FILE(PNGCREP)           AC1990646;
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.RFS_Fuel_Code_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Desc. 1  USR = Condition name of DTL.COA GEN EMTS Sts
DTL.Condition_Desc_1_USR = RTVCND(DTL.COA_GEN_EMTS_Sts);

// DTL.Condition Desc. 4  USR = Condition name of DTL.COA RIN EMTS Sts
DTL.Condition_Desc_4_USR = RTVCND(DTL.COA_RIN_EMTS_Sts);

//?USER: Validate detail screen fields

CASE;

// IF DTL.COA Retired RIN Reason Cd NE WRK.Blank for 4           USR
IF DTL.COA_Retired_RIN_Reason_Cd <> WRK.Blank_for_4_USR;

CASE;

// IF DTL.COA Retired RIN Date is not entered
IF DTL.COA_Retired_RIN_Date = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.COA_Retired_RIN_Date);

ENDIF;

CASE;

// IF DTL.COA Retired RIN Time is Not Entered
IF DTL.COA_Retired_RIN_Time = *ZERO;

// Send error message - 'Time is required.'
ERROR(USR2333);
MSGPARM(DTL.COA_Retired_RIN_Time);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.COA Retired RIN Date = CND.not entered
DTL.COA_Retired_RIN_Date = *ZERO;

// DTL.COA Retired RIN Time = CND.Not Entered
DTL.COA_Retired_RIN_Time = *ZERO;

ENDIF;

EXECUTE FUNCTION(Rtv Trans Reason Desc RT) TYPE(RTVOBJ) FILE(PNGGREP)           AC1990835;
PARAMETER(DTL.RFS_Transaction_Type);
PARAMETER(DTL.RFS_Trans_Reason_Code);
PARAMETER(DTL.Condition_Desc_3_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Fuel Code Desc    RT) TYPE(RTVOBJ) FILE(PNGCREP)           AC1990646;
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.RFS_Fuel_Code_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Desc. 1  USR = Condition name of DTL.COA GEN EMTS Sts
DTL.Condition_Desc_1_USR = RTVCND(DTL.COA_GEN_EMTS_Sts);

// DTL.Condition Desc. 4  USR = Condition name of DTL.COA RIN EMTS Sts
DTL.Condition_Desc_4_USR = RTVCND(DTL.COA_RIN_EMTS_Sts);

CASE;

// IF DTL.COA BHR Equiv Value is not entered
IF DTL.COA_BHR_Equiv_Value = 0;

// DTL.COA BHR Equiv Value = CON.1.5
DTL.COA_BHR_Equiv_Value = 1.5;

ENDIF;

//?C01673  RMC 8/02/11
//?  Round any dec place to next whole nmbr - so add .5 then round
//?GEN date proc
CASE;

// IF DTL.COA GEN EMTS Sts is Processed
IF DTL.COA_GEN_EMTS_Sts = '1';

// AND DTL.COA GEN EMTS Date Sent is not entered
AND DTL.COA_GEN_EMTS_Date_Sent = *ZERO;

// DTL.COA GEN EMTS Date Sent = JOB.*Job date
DTL.COA_GEN_EMTS_Date_Sent = JOB.*Job_date;

// DTL.COA GEN EMTS Time Sent = JOB.*Job time
DTL.COA_GEN_EMTS_Time_Sent = JOB.*Job_time;

// DTL.COA EMTS Return Code = CON.Completed
DTL.COA_EMTS_Return_Code = 'Completed';

ENDIF;

//?RIN date proc
CASE;

// IF DTL.COA RIN EMTS Sts is Processed
IF DTL.COA_RIN_EMTS_Sts = '1';

// AND DTL.COA RIN EMTS Date Sent is not entered
AND DTL.COA_RIN_EMTS_Date_Sent = *ZERO;

// DTL.COA RIN EMTS Date Sent = JOB.*Job date
DTL.COA_RIN_EMTS_Date_Sent = JOB.*Job_date;

// DTL.COA RIN EMTS Time Sent = JOB.*Job time
DTL.COA_RIN_EMTS_Time_Sent = JOB.*Job_time;

// DTL.COA EMTS Return Code = CON.Completed
DTL.COA_EMTS_Return_Code = 'Completed';

ENDIF;

//?GEN date proc - set back to 0
CASE;

// IF DTL.COA GEN EMTS Sts is Not Processed
IF ( DTL.COA_GEN_EMTS_Sts = '0';

// OR DTL.COA GEN EMTS Sts is Blank
OR DTL.COA_GEN_EMTS_Sts = *BLANK );

// AND DTL.COA GEN EMTS Date Sent is GT Zero
AND DTL.COA_GEN_EMTS_Date_Sent > *ZERO;

// DTL.COA GEN EMTS Date Sent = CON.*ZERO
DTL.COA_GEN_EMTS_Date_Sent = *ZERO;

// DTL.COA GEN EMTS Time Sent = CON.*ZERO
DTL.COA_GEN_EMTS_Time_Sent = *ZERO;

// DTL.COA EMTS Trans Id = CON.*BLANK
DTL.COA_EMTS_Trans_Id = *BLANK;

// DTL.COA EMTS Return Code = CON.*BLANK
DTL.COA_EMTS_Return_Code = *BLANK;

ENDIF;

//?RIN date proc - set back to 0
CASE;

// IF DTL.COA RIN EMTS Sts is Not Processed
IF ( DTL.COA_RIN_EMTS_Sts = '0';

// OR DTL.COA RIN EMTS Sts is Blank
OR DTL.COA_RIN_EMTS_Sts = *BLANK );

// AND DTL.COA RIN EMTS Date Sent is GT Zero
AND DTL.COA_RIN_EMTS_Date_Sent > *ZERO;

// DTL.COA RIN EMTS Date Sent = CON.*ZERO
DTL.COA_RIN_EMTS_Date_Sent = *ZERO;

// DTL.COA RIN EMTS Time Sent = CON.*ZERO
DTL.COA_RIN_EMTS_Time_Sent = *ZERO;

// DTL.COA EMTS Trans Id = CON.*BLANK
DTL.COA_EMTS_Trans_Id = *BLANK;

// DTL.COA EMTS Return Code = CON.*BLANK
DTL.COA_EMTS_Return_Code = *BLANK;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg COA Batch Hdr RIN CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1858627;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Batch_Header_RIN_Seq);
PARAMETER(DTL.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(DTL.COA_Batch_Header_RIN);
PARAMETER(DTL.COA_RIN_SSSSSSSS);
PARAMETER(DTL.COA_RIN_EEEEEEEE);
PARAMETER(DTL.COA_RIN_Volume_in_Gallons);
PARAMETER(DTL.COA_RIN_Transaction_Date);
PARAMETER(DTL.COA_RIN_Transaction_Time);
PARAMETER(DTL.COA_RIN_Trans_Partner_Nm);
PARAMETER(DTL.COA_RIN_Trans_Partner_Id);
PARAMETER(DTL.COA_Retired_RIN_Reason_Cd);
PARAMETER(DTL.COA_Retired_RIN_Date);
PARAMETER(DTL.COA_Retired_RIN_Time);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Sequence_Number);
PARAMETER(DTL.Order_Secondary_Line_Seq);
PARAMETER(DTL.Case_Sequence_Number);
PARAMETER(DTL.COA_Rail_Car);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.COA_Date_of_1st_Load);
PARAMETER(DTL.COA_RIN_Unused_Time);
PARAMETER(DTL.COA_RIN_Modified_Sts);
PARAMETER(DTL.COA_RIN_Unused_Text);
PARAMETER(DTL.COA_RIN_SoldFull_Splt_Sts);
PARAMETER(DTL.COA_RIN_Gallons_Sold);
PARAMETER(DTL.COA_Ship_To_Warehouse);
PARAMETER(DTL.COA_RIN_Type_Flag);
PARAMETER(DTL.COA_RIN_Customer_PO#);
PARAMETER(DTL.COA_Shipping_Company);
PARAMETER(DTL.COA_Ref_Load_Id);
PARAMETER(DTL.COA_Reference_Batch_NbrNU);
PARAMETER(DTL.COA_Reference_Btch_Seq_NU);
PARAMETER(DTL.RFS_Compliance_Period);
PARAMETER(DTL.RFS_Report_Year);
PARAMETER(DTL.COA_RIN_Int_Ext_Company);
PARAMETER(DTL.COA_BHR_Unused_Sts_2);
PARAMETER(DTL.COA_BHR_Net_Galls_to_Sell);
PARAMETER(DTL.COA_BHR_Unused_Date_2);
PARAMETER(DTL.COA_BHR_Unused_Text);
PARAMETER(DTL.COA_BHR_Loadout_Temp);
PARAMETER(DTL.COA_ULSD_Facility_#);
PARAMETER(DTL.COA_Batch_RIN_Volume);
PARAMETER(DTL.COA_RIN_Quantity);
PARAMETER(DTL.RFS_Transaction_Type);
PARAMETER(DTL.RFS_Trans_Reason_Code);
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.COA_BHR_RIN_Gen_Year);
PARAMETER(DTL.COA_BHR_RIN_Price);
PARAMETER(DTL.COA_BHR_Gallon_Price);
PARAMETER(DTL.COA_Transaction_Comment);
PARAMETER(DTL.COA_RIN_Supporting_Text_1);
PARAMETER(DTL.COA_RIN_Supporting_Nbr_1);
PARAMETER(DTL.COA_RIN_Supporting_Text_2);
PARAMETER(DTL.COA_RIN_Supporting_Nbr_2);
PARAMETER(DTL.COA_BHR_RFS_Version_Nbr);
PARAMETER(DTL.COA_GEN_EMTS_Sts);
PARAMETER(DTL.COA_GEN_EMTS_Date_Sent);
PARAMETER(DTL.COA_GEN_EMTS_Time_Sent);
PARAMETER(DTL.COA_RIN_EMTS_Sts);
PARAMETER(DTL.COA_RIN_EMTS_Date_Sent);
PARAMETER(DTL.COA_RIN_EMTS_Time_Sent);
PARAMETER(DTL.COA_EMTS_PTD_Nbr);
PARAMETER(DTL.COA_EMTS_Batch_Nbr);
PARAMETER(DTL.COA_BHR_Unused_Sts_3);
PARAMETER(DTL.COA_BHR_Unused_Nbr);
PARAMETER(DTL.COA_EMTS_Trans_Id);
PARAMETER(DTL.COA_EMTS_Return_Code);
PARAMETER(DTL.COA_BHR_Unused_Date_3);
PARAMETER(DTL.COA_BHR_Equiv_Value);
PARAMETER(DTL.COA_BHR_RINs_to_Sell_Sep);
PARAMETER(DTL.COA_Unassgnd_Txfrd_RINS);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


