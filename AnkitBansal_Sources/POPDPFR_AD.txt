// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POPDPFR
// ?Date: 14.08.2025 Time: 12:06:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?** DLY029R JRB 05/25/07 Changed 1PG Company Number from CON to DB1
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// TOP.Description = Condition name of PAR.USR Detail or Summary
TOP_Description = RTVCND(PAR.USR_Detail_or_Summary);

// WRK.Count USR = CON.*ZERO
WRK.Count_USR = *ZERO;

//?8/16/00  Create outfile in Detail  if Rpt Sel is O, and
//?   Status is Yes
//??/??/??  DONT Create outfile in Detail - someone commented this out
//?   years ago, so i removed the ref to the workfile.
//?USER: Record selection processing

//?Ignore records not meeting selection criteria
CASE;

// IF PAR.USR Product Str Type is greater than zero
IF PAR.USR_Product_Str_Type > *ZERO;

// AND PAR.USR Product Str Type NE DB1.Item Structure Type Code
AND PAR.USR_Product_Str_Type <> DB1.Item_Structure_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.USR Product Str Group is Entered
IF PAR.USR_Product_Str_Group > *ZERO;

// AND PAR.USR Product Str Group NE DB1.Item Structure Group Code
AND PAR.USR_Product_Str_Group <> DB1.Item_Structure_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.USR Product Struct Class is Entered
IF PAR.USR_Product_Struct_Class <> *ZERO;

// AND PAR.USR Product Struct Class NE DB1.Item Structure Class Code
AND PAR.USR_Product_Struct_Class <> DB1.Item_Structure_Class_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(PAR.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check Sales Flags
CASE;

// IF PAR.USR Active Flag is Record Found
IF PAR.USR_Active_Flag = 'Y';

// AND PAR.Print on Realization Rpt is No
AND PAR.Print_on_Realization_Rpt = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Check Sales Flags
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

// AND PAR.USR Sales Realiz. Flag is None
AND PAR.USR_Sales_Realiz_Flag = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PAR.USR Sales Realiz. Flag is CM/DM Only
IF PAR.USR_Sales_Realiz_Flag = 'O';

// AND PAR.Billing Activity Type is Invoice or Transfer
AND PAR.Billing_Activity_Type = '1'/'4';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.Sales Route Code is entered
IF PAR.Sales_Route_Code <> *BLANK;

// WRK.Sales Route Code = CON.*BLANK
WRK.Sales_Route_Code = *BLANK;

EXECUTE FUNCTION(RTV Sales Route        RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1371227;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(WRK.Sales_Route_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Sales Route Code is entered
IF WRK.Sales_Route_Code <> *BLANK;

CASE;

// IF PAR.Sales Route Code NE WRK.Sales Route Code
IF PAR.Sales_Route_Code <> WRK.Sales_Route_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?PK0246 - Whse Type Selector         2/22/02
CASE;

// IF PAR.Warehouse Type is Fresh or Frozen
IF PAR.Warehouse_Type = 'FR'/'FZ';

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(DB1.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Type NE PAR.Warehouse Type
IF LCL.Warehouse_Type <> PAR.Warehouse_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

// 1PG.Company Number = DB1.Company Number
X1PG_Company_Number = DB1.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(WRK.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR Company Name = WRK.USR Company Name
X1PG_USR_Company_Name = WRK.USR_Company_Name;

// 1PG.USR Product Str Type = PAR.USR Product Str Type
X1PG_USR_Product_Str_Type = PAR.USR_Product_Str_Type;

// 1PG.USR Product Str Group = PAR.USR Product Str Group
X1PG_USR_Product_Str_Group = PAR.USR_Product_Str_Group;

// 1PG.USR Product Struct Class = PAR.USR Product Struct Class
X1PG_USR_Product_Struct_Class = PAR.USR_Product_Struct_Class;

EXECUTE FUNCTION(RTV  Description       RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1219219;
PARAMETER(X1PG_USR_Product_Str_Type);
PARAMETER(X1PG_Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(X1PG_USR_Product_Str_Group);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(X1PG_USR_Product_Struct_Class);
PARAMETER(X1PG_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR Description - 15 = Condition name of PAR.USR Sales Realiz. Flag
X1PG_USR_Description_15 = RTVCND(PAR.USR_Sales_Realiz_Flag);

// 1PG.USR Flag 1 = PAR.USR Active Flag
X1PG_USR_Flag_1 = PAR.USR_Active_Flag;

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Export Sales
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Export_Sales);

CASE;

// IF PAR.Sales Route Code is not entered
IF PAR.Sales_Route_Code = *BLANK;

// 1PG.Sales Route Description = CON.All
X1PG_Sales_Route_Description = 'All';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(X1PG_Sales_Route_Code);
PARAMETER(X1PG_Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF PAR.USR Sales Realiz. Flag is CM/DM Only
IF PAR.USR_Sales_Realiz_Flag = 'O';

// LCL.Date From Alpha       USR = CVTVAR(PAR.USR From Date)
LCL.Date_From_Alpha_USR = CVTVAR(PAR.USR_From_Date);

// LCL.Date To Alpha         USR = CVTVAR(PAR.USR To Date)
LCL.Date_To_Alpha_USR = CVTVAR(PAR.USR_To_Date);

// LCL.Date Range = CONCAT(LCL.Date From Alpha       USR,LCL.Date To Alpha         USR,CON.*ZERO)
LCL.Date_Range = LCL.Date_From_Alpha_USR + LCL.Date_To_Alpha_USR (*ZERO);

ENDIF;

//?Retrieve warehouse type if entered
CASE;

// IF PAR.Warehouse Type NE WRK.BLANK
IF PAR.Warehouse_Type <> WRK.BLANK;

// 1PG.Condition Desc. 3  USR = Condition name of 1PG.Warehouse Type
X1PG_Condition_Desc_3_USR = RTVCND(X1PG_Warehouse_Type);

//?Retrieve warehouse type if entered
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 3  USR = CON.*All
X1PG_Condition_Desc_3_USR = *All;

ENDIF;

//?Retrieve whse description if entered
CASE;

// IF PAR.Warehouse Code NE WRK.BLANK
IF PAR.Warehouse_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?Retrieve whse description if entered
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Warehouse Description = CON.*All
X1PG_Warehouse_Description = *All;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// CUR.Company Number = DB1.Company Number
CUR.Company_Number = DB1.Company_Number;

// CUR.USR Company Name = WRK.USR Company Name
CUR.USR_Company_Name = WRK.USR_Company_Name;

// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

// SUPPRESSED PRINT Prod Structure Type Code header format

// SUPPRESSED PRINT Item Structure Group Code header format

// SUPPRESSED PRINT Item Structure Class Code header format

// SUPPRESSED PRINT Shipped Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Sales Route        RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1371227;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.Sales_Route_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Item Info for Rpts RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1441538;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(WRK.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);
PARAMETER(PAR.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FOB amount and weight
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.FOB Gross Amount = CND.equal to zero
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = DB1.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = DB1.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.USR Weight Accumulated = CON.*ZERO
CUR.USR_Weight_Accumulated = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Weight Accumulated = DB1.Weight Billed
CUR.USR_Weight_Accumulated = DB1.Weight_Billed;

ENDIF;

//?FOB amount and weight
// IF *OTHERWISE
IF *OTHERWISE;

//?Credit or Debit Memo
CASE;

// IF PAR.USR Sales Realiz. Flag is Process by Flags
IF PAR.USR_Sales_Realiz_Flag = 'P';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.FOB Gross Amount = CND.equal to zero
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = DB1.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = DB1.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.USR Weight Accumulated = CON.*ZERO
CUR.USR_Weight_Accumulated = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Weight Accumulated = DB1.Weight Billed
CUR.USR_Weight_Accumulated = DB1.Weight_Billed;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Sales Realiz. Flag is All
IF PAR.USR_Sales_Realiz_Flag = 'A';

// OR PAR.USR Sales Realiz. Flag is CM/DM Only
OR PAR.USR_Sales_Realiz_Flag = 'O';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// AND DB1.Affect Sales Pnds Status is yes
AND DB1.Affect_Sales_Pnds_Status = 'Y';

// CUR.FOB Gross Amount = CND.equal to zero
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = DB1.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = DB1.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// AND DB1.Affect Sales Doll Status is yes
AND DB1.Affect_Sales_Doll_Status = 'Y';

// CUR.USR Weight Accumulated = CON.*ZERO
CUR.USR_Weight_Accumulated = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Weight Accumulated = DB1.Weight Billed
CUR.USR_Weight_Accumulated = DB1.Weight_Billed;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Weight Accumulated is Greater Than Zero
AND CUR.USR_Weight_Accumulated > *ZERO;

// CUR.USR Weight Accumulated = CON.*ZERO - CUR.USR Weight Accumulated
CUR.USR_Weight_Accumulated = *ZERO - CUR.USR_Weight_Accumulated;

ENDIF;

//?Market Code
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(DB1.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* CUR.USR_Weight_Accumulated 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

ENDIF;

//?Market Code
// IF *OTHERWISE
IF *OTHERWISE;

//?Credit or Debit memo
CASE;

// IF PAR.USR Sales Realiz. Flag is Process by Flags
IF PAR.USR_Sales_Realiz_Flag = 'P';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(DB1.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* CUR.USR_Weight_Accumulated 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Sales Realiz. Flag is All
IF PAR.USR_Sales_Realiz_Flag = 'A';

// OR PAR.USR Sales Realiz. Flag is CM/DM Only
OR PAR.USR_Sales_Realiz_Flag = 'O';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// AND DB1.Affect Sales Pnds Status is yes
AND DB1.Affect_Sales_Pnds_Status = 'Y';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(DB1.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* CUR.USR_Weight_Accumulated 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// LCL.U/M - Base Price = DB1.U/M - Base Price
LCL.U_M_Base_Price = DB1.U_M_Base_Price;

// CUR.USR Qty Billed = DB1.Quantity Billed
CUR.USR_Qty_Billed = DB1.Quantity_Billed;

// CUR.USR Percent Work, 7.2 = CON.*ZERO
CUR.USR_Percent_Work_7_2 = *ZERO;

// CUR.USR Amount Remaining = CON.*ZERO
CUR.USR_Amount_Remaining = *ZERO;

CASE;

// IF CUR.USR Weight Accumulated is Entered
IF CUR.USR_Weight_Accumulated <> *ZERO;

// WRK.USR Percent Work, 7.4 = CUR.FOB Gross Amount / CUR.USR Weight Accumulated *R
WRK.USR_Percent_Work_7_4 = CUR.FOB_Gross_Amount / CUR.USR_Weight_Accumulated 'H';

// CUR.USR Percent Work, 7.2 = WRK.USR Percent Work, 7.4 * CON.100 *Rounded
CUR.USR_Percent_Work_7_2 = WRK.USR_Percent_Work_7_4 * 100 'H';

ENDIF;

//?Compute Market Price (CWT)
CASE;

// IF CUR.USR Weight Accumulated NE WRK.ZERO
IF CUR.USR_Weight_Accumulated <> WRK.ZERO;

// Synon (17,9) work field =       * Compute Market Price CWT
PGM.*Synon_179_work_field = ( CUR.USR_Market_Value_Price / CUR.USR_Weight_Accumulated              +
'H' ) * 100 'H';

//?compute usr market value
CASE;

// IF CUR.USR Market Value Price LT WRK.ZERO
IF CUR.USR_Market_Value_Price < WRK.ZERO;

// AND CUR.USR Weight Accumulated LT WRK.ZERO
AND CUR.USR_Weight_Accumulated < WRK.ZERO;

// WRK.USR Market Value = PGM.*Synon (17,9) work field * CON.-1 *Rounded
WRK.USR_Market_Value = PGM.*Synon_179_work_field * -1 'H';

//?compute usr market value
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Market Value = PGM.*Synon (17,9) work field * CON.1 *Rounded
WRK.USR_Market_Value = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

//?Compute Market Price (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Market Value = CON.*ZERO
WRK.USR_Market_Value = *ZERO;

ENDIF;

//?Compute Standard Overage
CASE;

// IF WRK.ZERO is Zero
IF WRK.ZERO = *ZERO;

EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(LCL.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(PAR.Standard_Overage_Underage);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Std Overage
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.Standard Overage Amount = CON.*ZERO
CUR.Standard_Overage_Amount = *ZERO;

//?Compute Std Overage
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Standard Overage
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' ) * 100              +
'H';

// CUR.Standard Overage Amount = PGM.*Synon (17,9) work field
CUR.Standard_Overage_Amount = PGM.*Synon_179_work_field;

ENDIF;

ENDIF;

CASE;

// IF CUR.USR Weight Accumulated is Entered
IF CUR.USR_Weight_Accumulated <> *ZERO;

// CUR.USR Amount Remaining = CUR.Standard Overage Amount + WRK.USR Market Value
CUR.USR_Amount_Remaining = CUR.Standard_Overage_Amount + WRK.USR_Market_Value;

ENDIF;

// CUR.Variance amount 1     USR = CUR.USR Percent Work, 7.2 - CUR.USR Amount Remai
CUR.Variance_amount_1_USR = CUR.USR_Percent_Work_7_2 - CUR.USR_Amount_Remaining;

// CUR.USR Description - 15 = DB1.Ship To Name
CUR.USR_Description_15 = DB1.Ship_To_Name;

//?3/14/02 never print this
// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Fr/Fz Impact ShDt PO
EXECUTE FUNCTION(Prt FR/FZ SLS/ShipdatePO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(PAR.USR_Detail_or_Summary);
PARAMETER(LCL.Qty_Produced_SUM);
PARAMETER(LCL.Weight_Billed_SUM);
PARAMETER(LCL.Total_Order_Values);
PARAMETER(LCL.Extended_amount_SUM);
PARAMETER(LCL.Price_Weight_SUM);
PARAMETER(LCL.Price_Weight_1_SUM);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?USER: Process after print of detail format

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumulated
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.FOB Gross Amount      USR = NXT.FOB Gross Amount      USR + CUR.FOB Gross Am
NXT.FOB_Gross_Amount_USR = NXT.FOB_Gross_Amount_USR + CUR.FOB_Gross_Amount;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

// NXT.USR Market Value Price = NXT.USR Market Value Price + CUR.USR Market Value P
NXT.USR_Market_Value_Price = NXT.USR_Market_Value_Price + CUR.USR_Market_Value_Price;

CASE;

// IF CUR.USR Weight Accumulated is Entered
IF CUR.USR_Weight_Accumulated <> *ZERO;

NXT.FOB_Gross_Amount_SUM = SUM(CUR.FOB_Gross_Amount);

NXT.USR_Weight_Accumulatd_SUM = SUM(CUR.USR_Weight_Accumulated);

ENDIF;

//?USER: Print required level totals

CASE;

IF NEW Shipped_Item_Code;
EXECUTE FUNCTION(RTV Item Info for Rpts RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1441538;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Item_Identifier);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);
PARAMETER(PAR.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CUR.USR Weight Accumulatd SUM is *Not Zero
IF CUR.USR_Weight_Accumulatd_SUM <> *ZERO;

// WRK.USR Percent Work, 7.4 = CUR.FOB Gross Amount      SUM / CUR.USR Weight Accum
WRK.USR_Percent_Work_7_4 = CUR.FOB_Gross_Amount_SUM / CUR.USR_Weight_Accumulatd_SUM 'H';

// CUR.USR Percent Work, 7.2 = WRK.USR Percent Work, 7.4 * CON.100 *Rounded
CUR.USR_Percent_Work_7_2 = WRK.USR_Percent_Work_7_4 * 100 'H';

ENDIF;

//?FOB Sales and Weight both negative
CASE;

// IF CUR.FOB Gross Amount      USR LT WRK.ZERO
IF CUR.FOB_Gross_Amount_USR < WRK.ZERO;

// AND CUR.USR Weight Accumulated LT WRK.ZERO
AND CUR.USR_Weight_Accumulated < WRK.ZERO;

// CUR.USR Percent Work, 7.2 = CUR.USR Percent Work, 7.2 * CON.-1 *Rounded
CUR.USR_Percent_Work_7_2 = CUR.USR_Percent_Work_7_2 * -1 'H';

ENDIF;

//?Compute Market Price (CWT)
CASE;

// IF CUR.USR Weight Accumulated NE WRK.ZERO
IF CUR.USR_Weight_Accumulated <> WRK.ZERO;

// Synon (17,9) work field =       * Compute Market Price CWT
PGM.*Synon_179_work_field = ( CUR.USR_Market_Value_Price / CUR.USR_Weight_Accumulated              +
'H' ) * 100 'H';

//?compute usr market value
CASE;

// IF CUR.USR Market Value Price LT WRK.ZERO
IF CUR.USR_Market_Value_Price < WRK.ZERO;

// AND CUR.USR Weight Accumulated LT WRK.ZERO
AND CUR.USR_Weight_Accumulated < WRK.ZERO;

// CUR.USR Market Value = PGM.*Synon (17,9) work field * CON.-1 *Rounded
CUR.USR_Market_Value = PGM.*Synon_179_work_field * -1 'H';

//?compute usr market value
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.USR_Market_Value = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

//?Compute Market Price (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value = CON.*ZERO
CUR.USR_Market_Value = *ZERO;

ENDIF;

//?Compute Standard Overage
CASE;

// IF WRK.ZERO is Zero
IF WRK.ZERO = *ZERO;

EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(LCL.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(PAR.Standard_Overage_Underage);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Std Overage
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.Standard Overage Amount = CON.*ZERO
CUR.Standard_Overage_Amount = *ZERO;

//?Compute Std Overage
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Standard Overage
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' ) * 100              +
'H';

// CUR.Standard Overage Amount = PGM.*Synon (17,9) work field
CUR.Standard_Overage_Amount = PGM.*Synon_179_work_field;

ENDIF;

ENDIF;

//?Compute Mkt + Ovr / CWT
// CUR.USR Amount Remaining = CUR.USR Market Value + CUR.Standard Overage Amount
CUR.USR_Amount_Remaining = CUR.USR_Market_Value + CUR.Standard_Overage_Amount;

// CUR.Variance amount 1     USR = CUR.USR Percent Work, 7.2 - CUR.USR Amount Remai
CUR.Variance_amount_1_USR = CUR.USR_Percent_Work_7_2 - CUR.USR_Amount_Remaining;

// CUR.Qty Produced          USR = LCL.Qty Produced SUM
CUR.Qty_Produced_USR = LCL.Qty_Produced_SUM;

// CUR.Weight Billed = LCL.Weight Billed SUM
CUR.Weight_Billed = LCL.Weight_Billed_SUM;

// CUR.Net Dollars = LCL.Total Order Values
CUR.Net_Dollars = LCL.Total_Order_Values;

// CUR.Extended Amount = LCL.Extended amount       SUM
CUR.Extended_Amount = LCL.Extended_amount_SUM;

// CUR.Price * Weight USR = LCL.Price * Weight SUM
CUR.Price_Weight_USR = LCL.Price_Weight_SUM;

// CUR.Price * Weight 1 USR = LCL.Price * Weight 1 SUM
CUR.Price_Weight_1_USR = LCL.Price_Weight_1_SUM;

// LCL.Qty Produced SUM = CON.*ZERO
LCL.Qty_Produced_SUM = *ZERO;

// LCL.Quantity Ordered 1    SUM = CON.*ZERO
LCL.Quantity_Ordered_1_SUM = *ZERO;

// LCL.Weight Billed SUM = CON.*ZERO
LCL.Weight_Billed_SUM = *ZERO;

// LCL.Total Order Values = CON.*ZERO
LCL.Total_Order_Values = *ZERO;

// LCL.Extended amount       SUM = CON.*ZERO
LCL.Extended_amount_SUM = *ZERO;

// LCL.Price * Weight SUM = CON.*ZERO
LCL.Price_Weight_SUM = *ZERO;

// LCL.Price * Weight 1 SUM = CON.*ZERO
LCL.Price_Weight_1_SUM = *ZERO;

CASE;

// IF CUR.Weight Billed is Greater than zero
IF CUR.Weight_Billed > *ZERO;

// USD $/LB Prod Date
CUR.Market_Price_USR = CUR.Price_Weight_1_USR / CUR.Weight_Billed 'H';

// Sales $/Lb
CUR.Unit_Price_DSP_USR = CUR.Price_Weight_USR / CUR.Weight_Billed 'H';

// Impact
CUR.Extended_Amount = ( CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR )                            +
* CUR.Weight_Billed 'H';

ENDIF;

// CUR.Variance amount 1     USR = CUR.Unit Price (DSP)  USR - CUR.Market Price USR
CUR.Variance_amount_1_USR = CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR;

// Print Shipped Item Code totals format
PRINT Shipped Item Code totals format;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed);

NXT.Total_Order_Values = SUM(CUR.Net_Dollars);

NXT.Extended_amount_SUM = SUM(CUR.Extended_Amount);

NXT.Qty_Produced_SUM = SUM(CUR.Qty_Produced_USR);

NXT.Price_Weight_SUM = SUM(CUR.Price_Weight_USR);

NXT.Price_Weight_1_SUM = SUM(CUR.Price_Weight_1_USR);

ENDIF;

CASE;

IF NEW Item_Structure_Class_Code;
CASE;

// IF CUR.Total Order Values is EQ 0
IF CUR.Total_Order_Values = 0;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

CASE;

// IF CUR.Weight Billed SUM is Greater than zero
IF CUR.Weight_Billed_SUM > *ZERO;

// USD $/LB Prod Date
CUR.Market_Price_USR = CUR.Price_Weight_1_SUM / CUR.Weight_Billed_SUM 'H';

// Sales $/Lb
CUR.Unit_Price_DSP_USR = CUR.Price_Weight_SUM / CUR.Weight_Billed_SUM 'H';

// Impact
CUR.Extended_Amount = ( CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR )                            +
* CUR.Weight_Billed_SUM 'H';

ENDIF;

// CUR.Variance amount 1     USR = CUR.Unit Price (DSP)  USR - CUR.Market Price USR
CUR.Variance_amount_1_USR = CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR;

// Print Item Structure Class Code totals format
PRINT Item Structure Class Code totals format;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

NXT.Qty_Produced_SUM = SUM(CUR.Qty_Produced_SUM);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

NXT.Total_Order_Values = SUM(CUR.Total_Order_Values);

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

NXT.Price_Weight_SUM = SUM(CUR.Price_Weight_SUM);

NXT.Price_Weight_1_SUM = SUM(CUR.Price_Weight_1_SUM);

ENDIF;

CASE;

IF NEW Item_Structure_Group_Code;
CASE;

// IF CUR.Weight Billed SUM is Equal to zero
IF CUR.Weight_Billed_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

CASE;

// IF CUR.Weight Billed SUM is Greater than zero
IF CUR.Weight_Billed_SUM > *ZERO;

// USD $/LB Prod Date
CUR.Market_Price_USR = CUR.Price_Weight_1_SUM / CUR.Weight_Billed_SUM 'H';

// Sales $/Lb
CUR.Unit_Price_DSP_USR = CUR.Price_Weight_SUM / CUR.Weight_Billed_SUM 'H';

// Impact
CUR.Extended_Amount = ( CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR )                            +
* CUR.Weight_Billed_SUM 'H';

ENDIF;

// CUR.Variance amount 1     USR = CUR.Unit Price (DSP)  USR - CUR.Market Price USR
CUR.Variance_amount_1_USR = CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR;

// Print Item Structure Group Code totals format
PRINT Item Structure Group Code totals format;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

NXT.Qty_Produced_SUM = SUM(CUR.Qty_Produced_SUM);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

NXT.Total_Order_Values = SUM(CUR.Total_Order_Values);

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

NXT.Price_Weight_SUM = SUM(CUR.Price_Weight_SUM);

NXT.Price_Weight_1_SUM = SUM(CUR.Price_Weight_1_SUM);

ENDIF;

CASE;

IF NEW Item_Structure_Type_Code;
CASE;

// IF CUR.Weight Billed SUM is Equal to zero
IF CUR.Weight_Billed_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

CASE;

// IF CUR.Weight Billed SUM is Greater than zero
IF CUR.Weight_Billed_SUM > *ZERO;

// USD $/LB Prod Date
CUR.Market_Price_USR = CUR.Price_Weight_1_SUM / CUR.Weight_Billed_SUM 'H';

// Sales $/Lb
CUR.Unit_Price_DSP_USR = CUR.Price_Weight_SUM / CUR.Weight_Billed_SUM 'H';

// Impact
CUR.Extended_Amount = ( CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR )                            +
* CUR.Weight_Billed_SUM 'H';

ENDIF;

// CUR.Variance amount 1     USR = CUR.Unit Price (DSP)  USR - CUR.Market Price USR
CUR.Variance_amount_1_USR = CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR;

// Print Prod Structure Type Code totals format
PRINT Prod Structure Type Code totals format;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

NXT.Qty_Produced_SUM = SUM(CUR.Qty_Produced_SUM);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

NXT.Total_Order_Values = SUM(CUR.Total_Order_Values);

NXT.Extended_amount_SUM = SUM(CUR.Extended_Amount);

ENDIF;

CASE;

IF NEW Company_Number;
// Print Accounting Company Number totals format
PRINT Accounting Company Number totals format;

ENDIF;

