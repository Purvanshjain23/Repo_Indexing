// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDLUDFR
// ?Date: 14.08.2025 Time: 03:32:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile control

CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Company Name = CON.ALL
CTL.Company_Name = 'ALL';

ENDIF;

EXECUTE FUNCTION(RTV Parent Inf for Sum RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1411916;
PARAMETER(PAR.Parent_Customer);
PARAMETER(CTL.Customer_Name);
PARAMETER(CTL.AR_Credit_Limit);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program CLC Contr.Tot Sum Inq  XF.
CALL PROGRAM(CLC Contr.Tot Sum Inq  XF) ('PDLZXFR');
PARAMETER(PAR.Parent_Customer);
PARAMETER(CTL.USR_Value_Open_Orders);
PARAMETER(CTL.USR_Parent_Current_Due);
PARAMETER(CTL.USR_Parent_Past_Due);
PARAMETER(CTL.USR_Parent_Total_Due);
PARAMETER(PAR.Company_Number);

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

//?USER: Initialize subfile record from DBF record

CASE;

// IF PAR.Parent Customer EQ DB1.Parent Customer
IF PAR.Parent_Customer = DB1.Parent_Customer;

// AND DB1.Ship To Customer EQ DB1.A/R Customer Number
AND DB1.Ship_To_Customer = DB1.AR_Customer_Number;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// RCD.USR tot past due W/CB = CND.Zero
RCD.USR_tot_past_due_W_CB = *ZERO;

// RCD.Age $ Due-Current-W/O CB = CND.equal to zero
RCD.Age_Due_Current_W_O_CB = *ZERO;

// WRK.A/R Customer Number = DB1.A/R Customer Number
WRK.AR_Customer_Number = DB1.AR_Customer_Number;

//?   Total Due
// RCD.USR Tot. Due W/O CB = RCD.Age $ Due-Current-W/O CB + RCD.USR tot past due W/
RCD.USR_Tot_Due_W_O_CB = RCD.Age_Due_Current_W_O_CB + RCD.USR_tot_past_due_W_CB;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.USR Customer Name Short = RCD.Customer Name
RCD.USR_Customer_Name_Short = RCD.Customer_Name;

CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Total Due Sum/Inq  RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1412672;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(RCD.Age_Due_Current_W_O_CB);
PARAMETER(RCD.Value_of_Open_Orders);
PARAMETER(RCD.USR_tot_past_due_W_CB);
{
 //?USER: Initialize routine

 // PAR.USR tot past due W/CB = CND.Zero
 PAR.USR_tot_past_due_W_CB = *ZERO;

 // PAR.Value of Open Orders = CON.*ZERO
 PAR.Value_of_Open_Orders = *ZERO;

 // PAR.Age $ Due-Current-W/O CB = CON.*ZERO
 PAR.Age_Due_Current_W_O_CB = *ZERO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Value of Open Orders = DB1.Value of Open Orders
 PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders;

 // PAR.Age $ Due-Current-W/O CB = DB1.Age $ Due-Current-W/O CB
 PAR.Age_Due_Current_W_O_CB = DB1.Age_Due_Current_W_O_CB;

 //?Calculate past due
 // PAR.USR tot past due W/CB = DB1.Age $ Due-Aging 1-W/O CB + DB1.Age $ Due-Aging 2
 PAR.USR_tot_past_due_W_CB = DB1.Age_Due_Aging_1_W_O_CB + DB1.Age_Due_Aging_2_W_O_CB;

 // PAR.USR tot past due W/CB = DB1.Age $ Due-Aging 3-W/O CB + PAR.USR tot past due
 PAR.USR_tot_past_due_W_CB = DB1.Age_Due_Aging_3_W_O_CB + PAR.USR_tot_past_due_W_CB;

 // PAR.USR tot past due W/CB = DB1.Age $ Due-Aging 4-W/O CB + PAR.USR tot past due
 PAR.USR_tot_past_due_W_CB = DB1.Age_Due_Aging_4_W_O_CB + PAR.USR_tot_past_due_W_CB;

 // PAR.USR tot past due W/CB = DB1.Age $ Due-Aging 5-W/O CB + PAR.USR tot past due
 PAR.USR_tot_past_due_W_CB = DB1.Age_Due_Aging_5_W_O_CB + PAR.USR_tot_past_due_W_CB;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Total Due Sum ALL RT) TYPE(RTVOBJ) FILE(ARBCREP)           AC1708949;
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(RCD.Age_Due_Current_W_O_CB);
PARAMETER(RCD.Value_of_Open_Orders);
PARAMETER(RCD.USR_tot_past_due_W_CB);
{
 //?USER: Initialize routine

 // PAR.USR tot past due W/CB = CND.Zero
 PAR.USR_tot_past_due_W_CB = *ZERO;

 // PAR.Value of Open Orders = CON.*ZERO
 PAR.Value_of_Open_Orders = *ZERO;

 // PAR.Age $ Due-Current-W/O CB = CON.*ZERO
 PAR.Age_Due_Current_W_O_CB = *ZERO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Value of Open Orders = PAR.Value of Open Orders + DB1.Value of Open Orders
 PAR.Value_of_Open_Orders = PAR.Value_of_Open_Orders + DB1.Value_of_Open_Orders;

 // PAR.Age $ Due-Current-W/O CB = PAR.Age $ Due-Current-W/O CB + DB1.Age $ Due-Current-W/O CB
 PAR.Age_Due_Current_W_O_CB = PAR.Age_Due_Current_W_O_CB + DB1.Age_Due_Current_W_O_CB;

 //?Calculate past due
 // Comp:Past w/CB
 PAR.USR_tot_past_due_W_CB = ( ( ( ( DB1.Age_Due_Aging_1_W_O_CB
 + DB1.Age_Due_Aging_2_W_O_CB ) + DB1.Age_Due_Aging_3_W_O_CB )                                     +
 + DB1.Age_Due_Aging_4_W_O_CB ) + DB1.Age_Due_Aging_5_W_O_CB ) + PAR.USR_tot_past_due_W_CB;

}


ENDIF;

// RCD.USR Tot. Due W/O CB = RCD.USR tot past due W/CB + RCD.Age $ Due-Current-W/O
RCD.USR_Tot_Due_W_O_CB = RCD.USR_tot_past_due_W_CB + RCD.Age_Due_Current_W_O_CB;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process command keys

RETURN;

