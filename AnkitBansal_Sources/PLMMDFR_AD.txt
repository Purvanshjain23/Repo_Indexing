// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLMMDFR
// ?Date: 14.08.2025 Time: 02:54:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.BOH_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Initialize subfile control

//?First Time Processing
CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.BOH Company Number = WRK.BOH Company Number
CTL.BOH_Company_Number = WRK.BOH_Company_Number;

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(WRK.Name_USR);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?Default Kill Date w/Job Date
CASE;

// IF CTL.BOL Pln Delv Date EQ WRK.Zero USR
IF CTL.BOL_Pln_Delv_Date = WRK.Zero_USR;

// CTL.BOL Pln Delv Date = JOB.*Job date
CTL.BOL_Pln_Delv_Date = JOB.*Job_date;

ENDIF;

// LCL.Location Code USR = CTL.Location Code USR
LCL.Location_Code_USR = CTL.Location_Code_USR;

// LCL.Movement # 10.0 USR = CTL.Movement # 10.0 USR
LCL.Movement_#_10_0_USR = CTL.Movement_#_10_0_USR;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv Security Gate Log RT) TYPE(RTVOBJ) FILE(PLA9CPP)           AB1293250;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.BOLS_Entry_Date);
PARAMETER(RCD.BOLS_Entry_Time);
PARAMETER(RCD.BOLS_Entry_Guard);
PARAMETER(NLL.BOLS_Entry_Comment);
PARAMETER(RCD.BOLS_Depart_Date);
PARAMETER(RCD.BOLS_Depart_Time);
PARAMETER(RCD.BOLS_Depart_Guard);
PARAMETER(NLL.BOLS_Depart_Comment);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv PrdcrName,Sts,Src RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1264668;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(NLL.PD_Name);
PARAMETER(LCL.SR_Source_Code);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(LCL.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(PAR.SR_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?RTV: Internal Movement Number
CASE;

// IF LCL.SR Type is Internal
IF LCL.SR_Type = 'I';

//?*---- Retrieve Farm ----*
EXECUTE FUNCTION(Rtv Mvmnt,Farm f/BOL  RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1245116;
PARAMETER(RCD.BOL_Kill_Date);
PARAMETER(LCL.DSD_Farm_Site_Code);
PARAMETER(RCD.BOLW_Movement_Number);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?Movement Number USR
CASE;

// IF LCL.SR Type is Internal
IF LCL.SR_Type = 'I';

// RCD.Movement # 10.0 USR = RCD.BOLW Movement Number
RCD.Movement_#_10_0_USR = RCD.BOLW_Movement_Number;

//?Movement Number USR
// IF LCL.SR Type is External
IF LCL.SR_Type = 'E';

// calculate movement numb
RCD.Movement_#_10_0_USR = ( RCD.BOH_Buy_Order_Number * 1000 ) + RCD.BOL_Load_Number;

ENDIF;

//?Location Code USING External from the Source type and not seaboard
CASE;

// IF LCL.SR Type is Internal
IF LCL.SR_Type = 'I';

CASE;

// IF LCL.DSD Farm Site Code is Not Entered
IF LCL.DSD_Farm_Site_Code = *ZERO;

// RCD.Location Code USR = CON.*BLANK
RCD.Location_Code_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?E2423 Show full Farm Site instead of the last 3 position
// RCD.Location Code USR = CVTVAR(LCL.DSD Farm Site Code)
RCD.Location_Code_USR = CVTVAR(LCL.DSD_Farm_Site_Code);

ENDIF;

//?Location Code USING External from the Source type and not seaboard
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Location Code USR = RCD.PL Location Code
RCD.Location_Code_USR = RCD.PL_Location_Code;

ENDIF;

//?SEL:  Movement Number
CASE;

// IF CTL.Movement # 10.0 USR GT WRK.Zero USR
IF CTL.Movement_#_10_0_USR > WRK.Zero_USR;

CASE;

// IF RCD.Movement # 10.0 USR NE CTL.Movement # 10.0 USR
IF RCD.Movement_#_10_0_USR <> CTL.Movement_#_10_0_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Movement Number
//?SEL:  Location Code
// IF CTL.Location Code USR is Entered
IF CTL.Location_Code_USR <> *BLANK;

CASE;

// IF CTL.Location Code USR NE RCD.Location Code USR
IF CTL.Location_Code_USR <> RCD.Location_Code_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Company Number
CASE;

// IF CTL.BOH Company Number is Greater Then *zero
IF CTL.BOH_Company_Number > *ZERO;

CASE;

// IF CTL.BOH Company Number NE RCD.BOH Company Number
IF CTL.BOH_Company_Number <> RCD.BOH_Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(RCD.Producer_Name_DRV);
PARAMETER(RCD.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile control (Pre-confirm)

//?RELOAD: Movement Number, Location Code
CASE;

// IF CTL.Movement # 10.0 USR NE LCL.Movement # 10.0 USR
IF CTL.Movement_#_10_0_USR <> LCL.Movement_#_10_0_USR;

// OR CTL.Location Code USR NE LCL.Location Code USR
OR CTL.Location_Code_USR <> LCL.Location_Code_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

//?RELOAD: Movement Number, Location Code
//?F4=Prompt+
// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.PD Producer Code
IF PGM.*Cursor_field = CTL.PD_Producer_Code;

// OR PGM.*Cursor field <IS> CTL.Location Code USR
OR PGM.*Cursor_field = CTL.Location_Code_USR;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.Location_Code_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F6=Create
CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

// Call program Rtv System Date & Tim UP.
CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
PARAMETER(LCL.SG_Date);
PARAMETER(NLL.*TIME);

// Call program Zzz No BOL Gate Log   ER.
CALL PROGRAM(Zzz No BOL Gate Log   ER) ('PLNOE1R');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(LCL.SG_Date);
PARAMETER(9999);
PARAMETER('E');

ENDIF;

//?F8=Work With Security Log
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// Call program ZzzNo BOL Gate Log    DF.
CALL PROGRAM(ZzzNo BOL Gate Log    DF) ('PLNRDFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(PAR.Allw_Edit_or_Dsply_Usr);

ENDIF;

//?F21=Print Security Log
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Delivery Security Log');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('HPE');
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(PRK0812);
PARAMETER('PRTSECLOG');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*NO);

// Call program Prt Delv Security Log CL.
SBMJOB;
CALL PROGRAM(Prt Delv Security Log CL) ('PLMSUPR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOL_Pln_Delv_Date);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
SBMJOBEND;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Enter
CASE;

// IF RCD.*SFLSEL is Select Option 2
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF RCD.BOLS Entry Date is Entered
IF RCD.BOLS_Entry_Date <> *ZERO;

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz BOL Gate Log      ER.
CALL PROGRAM(Zzz BOL Gate Log      ER) ('PLNNE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER('E');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.Movement_#_10_0_USR);
PARAMETER(RCD.Location_Code_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?5=Depart
CASE;

// IF RCD.*SFLSEL is Select Option 5
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.BOLS Entry Date is Not Entered
IF RCD.BOLS_Entry_Date = *ZERO;

// OR RCD.BOLS Depart Date is Entered
OR RCD.BOLS_Depart_Date <> *ZERO;

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz BOL Gate Log      ER.
CALL PROGRAM(Zzz BOL Gate Log      ER) ('PLNNE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER('D');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(*MISSING);
PARAMETER(RCD.Location_Code_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?8=Display
CASE;

// IF RCD.*SFLSEL is Select Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Zzz BOL Gate Log      ER.
CALL PROGRAM(Zzz BOL Gate Log      ER) ('PLNNE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(*BLANK);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(*MISSING);
PARAMETER(RCD.Location_Code_USR);

ENDIF;

//?9=Edit
CASE;

// IF RCD.*SFLSEL is Select Option 9
IF RCD.*SFLSEL = '9'/'9';

CASE;

// IF PAR.Allw Edit or Dsply Usr is Dispaly
IF PAR.Allw_Edit_or_Dsply_Usr = 'D';

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz BOL Gate Log      ER.
CALL PROGRAM(Zzz BOL Gate Log      ER) ('PLNNE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER('C');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(*MISSING);
PARAMETER(RCD.Location_Code_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

