// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDVNXFR
// ?Date: 14.08.2025 Time: 03:33:16
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV CRT WF AR Ord-Name RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1449106;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_From_Date_Numeric);
PARAMETER(PAR.USR_From_Date_Numeric);
PARAMETER(PAR.Thru_Date_USR);
PARAMETER(PAR.AR_Customer_Name);
PARAMETER(PAR.USR_Adjustment_Type_1);
PARAMETER(PAR.USR_Adjustment_Type_2);
PARAMETER(PAR.USR_Adjustment_Type_3);
PARAMETER(PAR.USR_Adjustment_Type_4);
PARAMETER(PAR.USR_Adjustment_Type_5);
PARAMETER(PAR.USR_Adjustment_Type_6);
PARAMETER(PAR.USR_Adjustment_Type_7);
PARAMETER(PAR.USR_Adjustment_Type_8);
PARAMETER(PAR.USR_Adjustment_Type_9);
PARAMETER(PAR.USR_Adjustment_Type_10);
PARAMETER(PAR.USR_Company_Number_2);
PARAMETER(PAR.USR_Company_Number_3);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(PAR.Invoice_Suffix_2);
PARAMETER(PAR.Invoice_Suffix_3);
PARAMETER(PAR.Invoice_Suffix_4);
PARAMETER(PAR.Invoice_Suffix_5);
PARAMETER(PAR.Invoice_Memo_Suffix);
PARAMETER(PAR.Report_Type_USR);
PARAMETER(PAR.Customer_Number_NBR);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Select date range
 CASE;

 // IF DB1.Payment/Deposit Date GT PAR.Thru Date             USR
 IF DB1.Payment_Deposit_Date > PAR.Thru_Date_USR;

 // OR DB1.Payment/Deposit Date LT PAR.USR From Date Numeric
 OR DB1.Payment_Deposit_Date < PAR.USR_From_Date_Numeric;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Select matching company number(s)                     E009707
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // WRK.First Letter 1 USR = CON.C
 WRK.First_Letter_1_USR = 'C';

 //?Select one company                                    E009707
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND PAR.Report Type USR EQ WRK.First Letter 1 USR
 AND PAR.Report_Type_USR = WRK.First_Letter_1_USR;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 //?Select company number
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF ( PAR.Company_Number <> *ZERO;

 // AND PAR.Company Number EQ DB1.Company Number
 AND PAR.Company_Number = DB1.Company_Number );

 // LCL.*Record selected = CND.*YES
 LCL.*Record_selected = 'Y';

 ENDIF;

 //?set *record selected
 CASE;

 // IF LCL.*Record selected is *YES
 IF LCL.*Record_selected = 'Y';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?set *record selected
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 // WRK.First Letter 1 USR = CON.M
 WRK.First_Letter_1_USR = 'M';

 //?Select if Multiple Companies was selected             E009707
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND PAR.Report Type USR EQ WRK.First Letter 1 USR
 AND PAR.Report_Type_USR = WRK.First_Letter_1_USR;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 //?Select company number
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF ( PAR.Company_Number <> *ZERO;

 // AND PAR.Company Number EQ DB1.Company Number
 AND PAR.Company_Number = DB1.Company_Number );

 // LCL.*Record selected = CND.*YES
 LCL.*Record_selected = 'Y';

 ENDIF;

 //?Select company number 2
 CASE;

 // IF PAR.USR Company Number 2 is not equal to zero
 IF ( PAR.USR_Company_Number_2 <> *ZERO;

 // AND PAR.USR Company Number 2 EQ DB1.Company Number
 AND PAR.USR_Company_Number_2 = DB1.Company_Number;

 // AND LCL.*Record selected is *NO
 AND LCL.*Record_selected = 'N' );

 // LCL.*Record selected = CND.*YES
 LCL.*Record_selected = 'Y';

 ENDIF;

 //?Select company number 3
 CASE;

 // IF PAR.USR Company Number 3 is not equal to zero
 IF ( PAR.USR_Company_Number_3 <> *ZERO;

 // AND PAR.USR Company Number 3 EQ DB1.Company Number
 AND PAR.USR_Company_Number_3 = DB1.Company_Number;

 // AND LCL.*Record selected is *NO
 AND LCL.*Record_selected = 'N' );

 // LCL.*Record selected = CND.*YES
 LCL.*Record_selected = 'Y';

 ENDIF;

 //?set *record selected
 CASE;

 // IF LCL.*Record selected is *YES
 IF LCL.*Record_selected = 'Y';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?set *record selected
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 // WRK.First Letter 1 USR = CON.A
 WRK.First_Letter_1_USR = 'A';

 //?Select all company numbers                            E009707
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND PAR.Report Type USR EQ WRK.First Letter 1 USR
 AND PAR.Report_Type_USR = WRK.First_Letter_1_USR;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 //?Select if all company parms are zeros (select all)
 CASE;

 // IF PAR.Company Number is Equal to zero
 IF PAR.Company_Number = *ZERO;

 // AND PAR.USR Company Number 2 is Equal to zero
 AND PAR.USR_Company_Number_2 = *ZERO;

 // AND PAR.USR Company Number 3 is Equal to zero
 AND PAR.USR_Company_Number_3 = *ZERO;

 // AND LCL.*Record selected is *NO
 AND LCL.*Record_selected = 'N';

 // LCL.*Record selected = CND.*YES
 LCL.*Record_selected = 'Y';

 ENDIF;

 //?set *record selected
 CASE;

 // IF LCL.*Record selected is *YES
 IF LCL.*Record_selected = 'Y';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?set *record selected
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Select by Invoice Suffix if entered                   E009707
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 //?Select if no Suffix passed in - all selected
 CASE;

 // IF PAR.Invoice Suffix is Blank
 IF PAR.Invoice_Suffix = *BLANK;

 // AND PAR.Invoice Suffix 2 is Blank
 AND PAR.Invoice_Suffix_2 = *BLANK;

 // AND PAR.Invoice Suffix 3 is Blank
 AND PAR.Invoice_Suffix_3 = *BLANK;

 // AND PAR.Invoice Suffix 4 is Blank
 AND PAR.Invoice_Suffix_4 = *BLANK;

 // AND PAR.Invoice Suffix 5 is Blank
 AND PAR.Invoice_Suffix_5 = *BLANK;

 // AND PAR.Invoice/Memo Suffix is Blank
 AND PAR.Invoice_Memo_Suffix = *BLANK;

 //?Only select if Inv Suffix is an allowed value
 CASE;

 // IF DB1.Invoice Suffix is CB,CM,DM,IN,OA,RB,Blank
 IF DB1.Invoice_Suffix = 'CB'/'CM'/'DM'/'IN'/'OA'/'RB'/*BLANK;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 ENDIF;

 //?Select if Suffix is allowed value and matches passed in
 CASE;

 // IF DB1.Invoice Suffix is CB,CM,DM,IN,OA,RB,Blank
 IF DB1.Invoice_Suffix = 'CB'/'CM'/'DM'/'IN'/'OA'/'RB'/*BLANK;

 // AND LCL.Record Selected       USR is no
 AND LCL.Record_Selected_USR = 'N';

 //?Select Invoice Suffix
 CASE;

 // IF PAR.Invoice Suffix EQ DB1.Invoice Suffix
 IF PAR.Invoice_Suffix = DB1.Invoice_Suffix;

 // AND LCL.Record Selected       USR is no
 AND LCL.Record_Selected_USR = 'N';

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?Select Invoice Suffix 2
 CASE;

 // IF PAR.Invoice Suffix 2 EQ DB1.Invoice Suffix
 IF PAR.Invoice_Suffix_2 = DB1.Invoice_Suffix;

 // AND LCL.Record Selected       USR is no
 AND LCL.Record_Selected_USR = 'N';

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?Select Invoice Suffix 3
 CASE;

 // IF LCL.Record Selected       USR is no
 IF LCL.Record_Selected_USR = 'N';

 // AND PAR.Invoice Suffix 3 EQ DB1.Invoice Suffix
 AND PAR.Invoice_Suffix_3 = DB1.Invoice_Suffix;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?Select Invoice Suffix 4
 CASE;

 // IF LCL.Record Selected       USR is no
 IF LCL.Record_Selected_USR = 'N';

 // AND PAR.Invoice Suffix 4 EQ DB1.Invoice Suffix
 AND PAR.Invoice_Suffix_4 = DB1.Invoice_Suffix;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?Select Invoice Suffix 5
 CASE;

 // IF LCL.Record Selected       USR is no
 IF LCL.Record_Selected_USR = 'N';

 // AND PAR.Invoice Suffix 5 EQ DB1.Invoice Suffix
 AND PAR.Invoice_Suffix_5 = DB1.Invoice_Suffix;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?Select Invoice/Memo Suffix
 CASE;

 // IF LCL.Record Selected       USR is no
 IF LCL.Record_Selected_USR = 'N';

 // AND PAR.Invoice/Memo Suffix EQ DB1.Invoice Suffix
 AND PAR.Invoice_Memo_Suffix = DB1.Invoice_Suffix;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 ENDIF;

 //?set *record selected flag
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?set *record selected flag
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Select by A/R Customer
 CASE;

 // IF PAR.Customer Number       NBR is not equal 0
 IF PAR.Customer_Number_NBR <> *ZERO;

 // AND PGM.*Record selected is *YES
 AND PGM.*Record_selected = 'Y';

 //?** rtv customer number for invoice being processed
 EXECUTE FUNCTION(VAL A/R Cust by Inv#   RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1953717;
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(PAR.Customer_Number_NBR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?** skip this record if invoice isn't for passed in customer
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Select by Adjustment Type if entered                  E009707
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 //?If not yet selected, test db1 vs. par adj types
 CASE;

 // IF LCL.Record Selected       USR is no
 IF LCL.Record_Selected_USR = 'N';

 //?** Only select matching Adj Type 1
 CASE;

 // IF PAR.USR Adjustment Type 1 EQ DB1.Adjustment Type Code
 IF PAR.USR_Adjustment_Type_1 = DB1.Adjustment_Type_Code;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?** Only select matching Adj Type 2
 CASE;

 // IF PAR.USR Adjustment Type 2 EQ DB1.Adjustment Type Code
 IF PAR.USR_Adjustment_Type_2 = DB1.Adjustment_Type_Code;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?** Only select matching Adj Type 3
 CASE;

 // IF PAR.USR Adjustment Type 3 EQ DB1.Adjustment Type Code
 IF PAR.USR_Adjustment_Type_3 = DB1.Adjustment_Type_Code;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?** Only select matching Adj Type 4
 CASE;

 // IF PAR.USR Adjustment Type 4 EQ DB1.Adjustment Type Code
 IF PAR.USR_Adjustment_Type_4 = DB1.Adjustment_Type_Code;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?** Only select matching Adj Type 5
 CASE;

 // IF PAR.USR Adjustment Type 5 EQ DB1.Adjustment Type Code
 IF PAR.USR_Adjustment_Type_5 = DB1.Adjustment_Type_Code;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?** Only select matching Adj Type 6
 CASE;

 // IF PAR.USR Adjustment Type 6 EQ DB1.Adjustment Type Code
 IF PAR.USR_Adjustment_Type_6 = DB1.Adjustment_Type_Code;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?** Only select matching Adj Type 7
 CASE;

 // IF PAR.USR Adjustment Type 7 EQ DB1.Adjustment Type Code
 IF PAR.USR_Adjustment_Type_7 = DB1.Adjustment_Type_Code;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?** Only select matching Adj Type 8
 CASE;

 // IF PAR.USR Adjustment Type 8 EQ DB1.Adjustment Type Code
 IF PAR.USR_Adjustment_Type_8 = DB1.Adjustment_Type_Code;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?** Only select matching Adj Type 9
 CASE;

 // IF PAR.USR Adjustment Type 9 EQ DB1.Adjustment Type Code
 IF PAR.USR_Adjustment_Type_9 = DB1.Adjustment_Type_Code;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?** Only select matching Adj Type 10
 CASE;

 // IF PAR.USR Adjustment Type 10 EQ DB1.Adjustment Type Code
 IF PAR.USR_Adjustment_Type_10 = DB1.Adjustment_Type_Code;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 ENDIF;

 //?If all Adj Types are blanks, test against retrieved values
 CASE;

 // IF LCL.Record Selected       USR is no
 IF LCL.Record_Selected_USR = 'N';

 // AND PAR.USR Adjustment Type 1 is Not Entered
 AND ( PAR.USR_Adjustment_Type_1 = *BLANK;

 // AND PAR.USR Adjustment Type 2 is Not Entered
 AND PAR.USR_Adjustment_Type_2 = *BLANK;

 // AND PAR.USR Adjustment Type 3 is Not Entered
 AND PAR.USR_Adjustment_Type_3 = *BLANK;

 // AND PAR.USR Adjustment Type 4 is Not Entered
 AND PAR.USR_Adjustment_Type_4 = *BLANK;

 // AND PAR.USR Adjustment Type 5 is Not Entered
 AND PAR.USR_Adjustment_Type_5 = *BLANK;

 // AND PAR.USR Adjustment Type 6 is Not Entered
 AND PAR.USR_Adjustment_Type_6 = *BLANK;

 // AND PAR.USR Adjustment Type 7 is Not Entered
 AND PAR.USR_Adjustment_Type_7 = *BLANK;

 // AND PAR.USR Adjustment Type 8 is Not Entered
 AND PAR.USR_Adjustment_Type_8 = *BLANK;

 // AND PAR.USR Adjustment Type 9 is Not Entered
 AND PAR.USR_Adjustment_Type_9 = *BLANK;

 // AND PAR.USR Adjustment Type 10 is Not Entered
 AND PAR.USR_Adjustment_Type_10 = *BLANK );

 EXECUTE FUNCTION(RTV A/R Adjust Types   IF) TYPE(EXCINTFUN)                     AC2135614;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Adjustment_Type_Code);
 PARAMETER(1);
 PARAMETER(LCL.USR_Adjustment_Type_1);
 PARAMETER(LCL.USR_Adjustment_Type_2);
 PARAMETER(LCL.USR_Adjustment_Type_3);
 PARAMETER(LCL.USR_Adjustment_Type_4);
 PARAMETER(LCL.USR_Adjustment_Type_5);
 PARAMETER(LCL.USR_Adjustment_Type_6);
 PARAMETER(LCL.USR_Adjustment_Type_7);
 PARAMETER(LCL.USR_Adjustment_Type_8);
 PARAMETER(LCL.USR_Adjustment_Type_9);
 PARAMETER(LCL.USR_Adjustment_Type_10);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV A/R Adjust Types  RT) TYPE(RTVOBJ) FILE(PDJ3CPP)           AC2135615;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Text_1_Length_USR);
  PARAMETER(PAR.USR_Adjustment_Type_1);
  PARAMETER(PAR.USR_Adjustment_Type_2);
  PARAMETER(PAR.USR_Adjustment_Type_3);
  PARAMETER(PAR.USR_Adjustment_Type_4);
  PARAMETER(PAR.USR_Adjustment_Type_5);
  PARAMETER(PAR.USR_Adjustment_Type_6);
  PARAMETER(PAR.USR_Adjustment_Type_7);
  PARAMETER(PAR.USR_Adjustment_Type_8);
  PARAMETER(PAR.USR_Adjustment_Type_9);
  PARAMETER(PAR.USR_Adjustment_Type_10);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   //?If Adj Type is any of the allowed values, put in PAR
   CASE;

   // IF DB1.Adjustment Type Code is Chargeback
   IF DB1.Adjustment_Type_Code = 'CB';

   // OR DB1.Adjustment Type Code is Inter Company
   OR DB1.Adjustment_Type_Code = 'ITC';

   // OR DB1.Adjustment Type Code is OA On Account Cash
   OR DB1.Adjustment_Type_Code = 'OA';

   // OR DB1.Adjustment Type Code is Regular Pay
   OR DB1.Adjustment_Type_Code = 'PAY';

   // OR DB1.Adjustment Type Code is Rebill
   OR DB1.Adjustment_Type_Code = 'RB';

   // OR DB1.Adjustment Type Code is Write Off Under $150
   OR DB1.Adjustment_Type_Code = 'WO';

   // OR DB1.Adjustment Type Code is W/O $150 and above
   OR DB1.Adjustment_Type_Code = 'WO1';

   // OR DB1.Adjustment Type Code is WalMart Cash Discount
   OR DB1.Adjustment_Type_Code = 'WO2';

   // OR DB1.Adjustment Type Code is Walmart Warehouse Allowan
   OR DB1.Adjustment_Type_Code = 'WO3';

   // OR DB1.Adjustment Type Code is Offsite Warehouse
   OR DB1.Adjustment_Type_Code = 'WO4';

   CASE;

   // IF PAR.USR Adjustment Type 1 is Not Entered
   IF PAR.USR_Adjustment_Type_1 = *BLANK;

   // PAR.USR Adjustment Type 1 = DB1.Adjustment Type Code
   PAR.USR_Adjustment_Type_1 = DB1.Adjustment_Type_Code;

   // IF PAR.USR Adjustment Type 2 is Not Entered
   IF PAR.USR_Adjustment_Type_2 = *BLANK;

   // PAR.USR Adjustment Type 2 = DB1.Adjustment Type Code
   PAR.USR_Adjustment_Type_2 = DB1.Adjustment_Type_Code;

   // IF PAR.USR Adjustment Type 3 is Not Entered
   IF PAR.USR_Adjustment_Type_3 = *BLANK;

   // PAR.USR Adjustment Type 3 = DB1.Adjustment Type Code
   PAR.USR_Adjustment_Type_3 = DB1.Adjustment_Type_Code;

   // IF PAR.USR Adjustment Type 4 is Not Entered
   IF PAR.USR_Adjustment_Type_4 = *BLANK;

   // PAR.USR Adjustment Type 4 = DB1.Adjustment Type Code
   PAR.USR_Adjustment_Type_4 = DB1.Adjustment_Type_Code;

   // IF PAR.USR Adjustment Type 5 is Not Entered
   IF PAR.USR_Adjustment_Type_5 = *BLANK;

   // PAR.USR Adjustment Type 5 = DB1.Adjustment Type Code
   PAR.USR_Adjustment_Type_5 = DB1.Adjustment_Type_Code;

   // IF PAR.USR Adjustment Type 6 is Not Entered
   IF PAR.USR_Adjustment_Type_6 = *BLANK;

   // PAR.USR Adjustment Type 6 = DB1.Adjustment Type Code
   PAR.USR_Adjustment_Type_6 = DB1.Adjustment_Type_Code;

   // IF PAR.USR Adjustment Type 7 is Not Entered
   IF PAR.USR_Adjustment_Type_7 = *BLANK;

   // PAR.USR Adjustment Type 7 = DB1.Adjustment Type Code
   PAR.USR_Adjustment_Type_7 = DB1.Adjustment_Type_Code;

   // IF PAR.USR Adjustment Type 8 is Not Entered
   IF PAR.USR_Adjustment_Type_8 = *BLANK;

   // PAR.USR Adjustment Type 8 = DB1.Adjustment Type Code
   PAR.USR_Adjustment_Type_8 = DB1.Adjustment_Type_Code;

   // IF PAR.USR Adjustment Type 9 is Not Entered
   IF PAR.USR_Adjustment_Type_9 = *BLANK;

   // PAR.USR Adjustment Type 9 = DB1.Adjustment Type Code
   PAR.USR_Adjustment_Type_9 = DB1.Adjustment_Type_Code;

   // IF PAR.USR Adjustment Type 10 is Not Entered
   IF PAR.USR_Adjustment_Type_10 = *BLANK;

   // PAR.USR Adjustment Type 10 = DB1.Adjustment Type Code
   PAR.USR_Adjustment_Type_10 = DB1.Adjustment_Type_Code;

   ENDIF;

   ENDIF;

  }

 }

 CASE;

 // IF DB1.Adjustment Type Code EQ LCL.USR Adjustment Type 1
 IF DB1.Adjustment_Type_Code = LCL.USR_Adjustment_Type_1;

 // OR DB1.Adjustment Type Code EQ LCL.USR Adjustment Type 2
 OR DB1.Adjustment_Type_Code = LCL.USR_Adjustment_Type_2;

 // OR DB1.Adjustment Type Code EQ LCL.USR Adjustment Type 3
 OR DB1.Adjustment_Type_Code = LCL.USR_Adjustment_Type_3;

 // OR DB1.Adjustment Type Code EQ LCL.USR Adjustment Type 4
 OR DB1.Adjustment_Type_Code = LCL.USR_Adjustment_Type_4;

 // OR DB1.Adjustment Type Code EQ LCL.USR Adjustment Type 5
 OR DB1.Adjustment_Type_Code = LCL.USR_Adjustment_Type_5;

 // OR DB1.Adjustment Type Code EQ LCL.USR Adjustment Type 6
 OR DB1.Adjustment_Type_Code = LCL.USR_Adjustment_Type_6;

 // OR DB1.Adjustment Type Code EQ LCL.USR Adjustment Type 7
 OR DB1.Adjustment_Type_Code = LCL.USR_Adjustment_Type_7;

 // OR DB1.Adjustment Type Code EQ LCL.USR Adjustment Type 8
 OR DB1.Adjustment_Type_Code = LCL.USR_Adjustment_Type_8;

 // OR DB1.Adjustment Type Code EQ LCL.USR Adjustment Type 9
 OR DB1.Adjustment_Type_Code = LCL.USR_Adjustment_Type_9;

 // OR DB1.Adjustment Type Code EQ LCL.USR Adjustment Type 10
 OR DB1.Adjustment_Type_Code = LCL.USR_Adjustment_Type_10;

 ENDIF;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 ENDIF;

 //?set *record selected
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?set *record selected
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Populate work file if record is selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?** Retrieve A/R Customer and Ship To Customer Numbers for invoice
 EXECUTE FUNCTION(RTV A/R Hdr by Co,Inv# RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1953578;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(NLL.Adjustment_Type_Code);
 PARAMETER(NLL.Transaction_Amount);
 PARAMETER(NLL.Adjustment_Amount);
 PARAMETER(NLL.Amount_Paid);
 PARAMETER(NLL.Remaining_Balance_Due);
 PARAMETER(NLL.A_R_Processing_Status);
 PARAMETER(NLL.Purge_Status);
 PARAMETER(NLL.Bank_Code);
 PARAMETER(NLL.GL_Document_Number);
 PARAMETER(LCL.Order_Number_Ref);
 PARAMETER(WRK.Ship_To_Customer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(NLL.Sales_Route_Code);
 PARAMETER(NLL.Transaction_Date_Code);
 PARAMETER(NLL.Due_Date);
 PARAMETER(NLL.Last_Payment_Date);
 PARAMETER(NLL.Original_Inv_for_CB);
 PARAMETER(NLL.Paid_in_Full_Date);
 PARAMETER(NLL.Last_G_L_Post_Date);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(NLL.A_R_Check_Number);
 PARAMETER(NLL.Days_to_Pay);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Retrieve A/R Customer name and Parent Number
 EXECUTE FUNCTION(RTV Cust by A/R-ShTo   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1953718;
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(LCL.AR_Customer_Name);
 PARAMETER(LCL.Address_Line_1);
 PARAMETER(LCL.Address_Line_2);
 PARAMETER(LCL.Address_Line_3);
 PARAMETER(LCL.City);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.Zip_Postal_Code);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(WRK.Parent_Customer);
 PARAMETER(LCL.AR_Credit_Limit);
 PARAMETER(LCL.Ship_To_Customer_Flag);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Retrieve Ship To Customer name for A/R Customer
 EXECUTE FUNCTION(RTV Cust by A/R-ShTo   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1953718;
 PARAMETER(WRK.Ship_To_Customer);
 PARAMETER(LCL.Customer_Name);
 PARAMETER(LCL.Address_Line_1);
 PARAMETER(LCL.Address_Line_2);
 PARAMETER(LCL.Address_Line_3);
 PARAMETER(LCL.City);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.Zip_Postal_Code);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(NLL.Parent_Customer);
 PARAMETER(LCL.AR_Credit_Limit);
 PARAMETER(LCL.Ship_To_Customer_Flag);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?* If ship to customer number is zeros, blank out the name  E09707
 CASE;

 // IF WRK.Ship To Customer is equal to zero
 IF WRK.Ship_To_Customer = *ZERO;

 // LCL.Customer Name = CND.Not Entered
 LCL.Customer_Name = *BLANK;

 ENDIF;

 //?** Retrieve Parent Customer name                      E009707
 EXECUTE FUNCTION(RTV Cust by A/R-ShTo   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1953718;
 PARAMETER(WRK.Parent_Number);
 PARAMETER(WRK.Parent_Name);
 PARAMETER(LCL.Address_Line_1);
 PARAMETER(LCL.Address_Line_2);
 PARAMETER(LCL.Address_Line_3);
 PARAMETER(LCL.City);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.Zip_Postal_Code);
 PARAMETER(WRK.Parent_Number);
 PARAMETER(LCL.Parent_Customer);
 PARAMETER(LCL.AR_Credit_Limit);
 PARAMETER(LCL.Ship_To_Customer_Flag);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Write record to the work file                      E009707
 EXECUTE FUNCTION(CRT A/R Orders by Name CR) TYPE(CRTOBJ) FILE(PDK5REP)          AC1449160;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.AR_Customer_Name);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(DB1.Payment_Deposit_Date);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(LCL.Order_Number_Ref);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Transaction_Amount);
 PARAMETER(DB1.A_R_Check_Number);
 PARAMETER(DB1.Adjustment_Type_Code);
 PARAMETER(DB1.Explanation);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(DB1.Cash_Adj);
 PARAMETER(DB1.GL_Document_Number);
 PARAMETER(WRK.Ship_To_Customer);
 PARAMETER(LCL.Customer_Name);
 PARAMETER(WRK.Parent_Customer);
 PARAMETER(WRK.Parent_Name);
 ENDIF;

}


//?***** Changes and comments
DO;

//?** A/R Customer name is not being passed. It is retrieved in this
//?**   program and written out to the work file
//?Cus Nbr passed in (103904 3000046)
ENDDO;

