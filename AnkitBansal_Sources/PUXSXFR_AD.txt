// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUXSXFR
// ?Date: 14.08.2025 Time: 03:51:38
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Initialization.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Execute function EUS EDI 601 Data Dfn  US.
EXECUTE FUNCTION(EUS EDI 601 Data Dfn  US) TYPE(EXCUSRSRC) ('PUYAUFR');
{
 * Declare EDI 601 Data Definitions
 d $string2_data   s             60a   inz(*blank)
 d $var_char       s              1a   inz(*blank)
 d $pos2           s              5u 0 inz(*zero)
 *
}


ENDIF;

//?Validations.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?MUST revalidate that ALL Orders for Load has the same Booking #.
EXECUTE FUNCTION(Val Crt EDI 601 Trsn  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2210807;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Create_EDI_601_USR);
PARAMETER(LCL.OHE_Booking_Number);
PARAMETER(LCL.L1306_Order_Value_Total);
{
 //?USER: Initialize routine

 // LCL.First Time Through USR = CND.Yes
 LCL.First_Time_Through_USR = 'Y';

 // PAR.Create EDI 601 USR = CND.No
 PAR.Create_EDI_601_USR = 'N';

 // PAR.OHE Booking Number = CND.Not Entered
 PAR.OHE_Booking_Number = *BLANK;

 // PAR.L1306-Order Value Total = CON.*ZERO
 PAR.L1306_Order_Value_Total = *ZERO;

 //?USER: Process Data record

 //?Access path selects Export Status = Y.
 //?All Orders MUST have Booking # entered & are the SAME in order to
 //?create the EDI 601 data sets.
 CASE;

 // IF DB1.Header Status is Not cancelled
 IF DB1.Header_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(Rtv EDI 601 Rqd Fields RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2210808;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(LCL.Port_Delv_Terminal);
 PARAMETER(LCL.OHE_City);
 PARAMETER(LCL.OHE_Vessel_Airline);
 PARAMETER(LCL.OHE_Booking_Number);
 PARAMETER(LCL.OHE_Discharge_Port_Airprt);
 PARAMETER(LCL.OHE_Sail_Flight_Date);
 PARAMETER(LCL.OHE_Override_Type_Code);
 PARAMETER(LCL.OHE_EDI_824_Action);
 PARAMETER(LCL.OHE_EDI_824_AES_ITN_#);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv CBP Info f/EDI 601 RT) TYPE(RTVOBJ) FILE(PUC1REP)          AC2211898;
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(LCL.Port_Delv_Terminal);
 PARAMETER(NLL.CBP_Export_Port_Code);
 PARAMETER(LCL.CBP_Std_Carrier_Alpha_Cde);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Required Fields Must Be Entered & Booking # Entered and Matches.
 CASE;

 // IF LCL.OHE City is Entered
 IF LCL.OHE_City <> *BLANK;

 // AND LCL.OHE Discharge Port/Airprt is Not Blank
 AND LCL.OHE_Discharge_Port_Airprt <> *BLANK;

 // AND LCL.OHE Sail/Flight Date is not equal zero
 AND LCL.OHE_Sail_Flight_Date <> *ZERO;

 // AND LCL.Shipping Line is entered
 AND LCL.Shipping_Line <> *BLANK;

 // AND LCL.OHE Vessel/Airline is Not Blank
 AND LCL.OHE_Vessel_Airline <> *BLANK;

 // AND LCL.OHE Booking Number is Entered
 AND LCL.OHE_Booking_Number <> *BLANK;

 // AND LCL.OHE Override Type Code is ES
 AND LCL.OHE_Override_Type_Code = 'ES';

 // AND LCL.Port Delv Terminal is Entered
 AND LCL.Port_Delv_Terminal <> *BLANK;

 // AND LCL.CBP Std Carrier Alpha Cde is Entered
 AND LCL.CBP_Std_Carrier_Alpha_Cde <> *BLANK;

 // AND NOT LCL.OHE EDI 824 AES ITN # is All 9s
 AND ! LCL.OHE_EDI_824_AES_ITN_# = '999999999999999';

 //?Save 1st Booking #.
 CASE;

 // IF LCL.First Time Through USR is Yes
 IF LCL.First_Time_Through_USR = 'Y';

 // LCL.First Time Through USR = CND.No
 LCL.First_Time_Through_USR = 'N';

 // PAR.OHE Booking Number = LCL.OHE Booking Number
 PAR.OHE_Booking_Number = LCL.OHE_Booking_Number;

 // PAR.Create EDI 601 USR = CND.Yes
 PAR.Create_EDI_601_USR = 'Y';

 // PAR.L1306-Order Value Total = PAR.L1306-Order Value Total + DB1.Order Value Total
 PAR.L1306_Order_Value_Total = PAR.L1306_Order_Value_Total + DB1.Order_Value_Total;

 //?Save 1st Booking #.
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.OHE Booking Number EQ PAR.OHE Booking Number
 IF LCL.OHE_Booking_Number = PAR.OHE_Booking_Number;

 // PAR.Create EDI 601 USR = CND.Yes
 PAR.Create_EDI_601_USR = 'Y';

 // PAR.L1306-Order Value Total = PAR.L1306-Order Value Total + DB1.Order Value Total
 PAR.L1306_Order_Value_Total = PAR.L1306_Order_Value_Total + DB1.Order_Value_Total;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?This is consider a Transload if Booking # are different.
 // PAR.Create EDI 601 USR = CND.No
 PAR.Create_EDI_601_USR = 'N';

 // PAR.OHE Booking Number = CND.Not Entered
 PAR.OHE_Booking_Number = *BLANK;

 // PAR.L1306-Order Value Total = CON.*ZERO
 PAR.L1306_Order_Value_Total = *ZERO;

 QUIT;

 ENDIF;

 ENDIF;

 //?Required Fields Must Be Entered & Booking # Entered and Matches.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Create EDI 601 USR = CND.No
 PAR.Create_EDI_601_USR = 'N';

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

//?Processing.
CASE;

// IF LCL.Create EDI 601 USR is Yes
IF LCL.Create_EDI_601_USR = 'Y';

EXECUTE FUNCTION(Exc Crt EDI 601 Trsn  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2210809;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.Port_Delv_Terminal);
PARAMETER(PAR.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Booking_Number);
PARAMETER(PAR.OHE_Sail_Flight_Date);
PARAMETER(PAR.OHE_EDI_824_AES_ITN_#);
PARAMETER(PAR.CBP_Export_Port_Code);
PARAMETER(PAR.CBP_Std_Carrier_Alpha_Cde);
PARAMETER(PAR.CBP_Foreign_Port_Code);
PARAMETER(PAR.Add_Change_Delete_USR);
PARAMETER(LCL.L1306_Order_Value_Total);
{
 //?USER: Initialize routine

 // LCL.Create EDI 601 USR = CND.No
 LCL.Create_EDI_601_USR = 'N';

 // LCL.Upd OHE EDI 601 Action U = CND.No
 LCL.Upd_OHE_EDI_601_Action_U = 'N';

 // WRK.Spcl chars for addr flds = CND.Equal to Blank
 WRK.Spcl_chars_for_addr_flds = *BLANK;

 // WRK.Accent chars to scan = CND.Equal to Blank
 WRK.Accent_chars_to_scan = *BLANK;

 // WRK.Replacement chars = CND.Equal to Blank
 WRK.Replacement_chars = *BLANK;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV EDI 601/824 Sts    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2210810;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.OHE_EDI_824_Action);
 PARAMETER(LCL.OHE_EDI_601_Action);
 PARAMETER(LCL.OHE_EDI_824_AES_ITN_#);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Sent for the 1st Time.
 CASE;

 // IF LCL.OHE EDI 601 Action is Not Entered
 IF LCL.OHE_EDI_601_Action = *BLANK;

 // AND LCL.OHE EDI 824 Action is Blanks
 AND LCL.OHE_EDI_824_Action = *BLANK;

 //?Create EDI 601 data sets & set EDI-Record Processed='N'ot Process
 //?so GoAnywhere will process these records.
 // LCL.Create EDI 601 USR = CND.Yes
 LCL.Create_EDI_601_USR = 'Y';

 // LCL.Upd OHE EDI 601 Action U = CND.Yes
 LCL.Upd_OHE_EDI_601_Action_U = 'Y';

 // LCL.EDI-Record Processed = CND.Not Processed
 LCL.EDI_Record_Processed = 'N';

 // LCL.BA102-Action Code = CND.Add/New
 LCL.BA102_Action_Code = '1';

 ENDIF;

 //?Have Been Sent Before.
 CASE;

 // IF LCL.OHE EDI 601 Action is Sent
 IF LCL.OHE_EDI_601_Action = 'S';

 CASE;

 // IF PAR.Add/Change/Delete USR is Delete
 IF PAR.Add_Change_Delete_USR = 'D';

 //?Create EDI 601 ECP136 HDR only & set EDI-Record Processed='N'ot
 //?Process so GoAnywhere will process these records.
 // LCL.Create EDI 601 USR = CND.Yes
 LCL.Create_EDI_601_USR = 'Y';

 // LCL.EDI-Record Processed = CND.Not Processed
 LCL.EDI_Record_Processed = 'N';

 // LCL.BA102-Action Code = CND.Cancel
 LCL.BA102_Action_Code = 'C';

 //?Cancel any 'P'ending Records in ECP136 HDR. (Unlikely scenario.)
 // LCL.First Time Through USR = CND.No
 LCL.First_Time_Through_USR = 'N';

 EXECUTE FUNCTION(Upd Pending EDI 601 RcdRT) TYPE(RTVOBJ) FILE(ECP136)           AC2211482;
 PARAMETER(DB1.Load_ID);
 PARAMETER('P');
 PARAMETER('N');
 PARAMETER(LCL.First_Time_Through_USR);
 {
  //?USER: Process Data record

  //?Update 'Pending' 601 Records.
  CASE;

  // IF PAR.First Time Through USR is Yes
  IF PAR.First_Time_Through_USR = 'Y';

  // PAR.First Time Through USR = CND.No
  PAR.First_Time_Through_USR = 'N';

  //?GoAnywhere will process this record now.
  //?Update 'BA102-Action Code' if Need To.
  CASE;

  // IF PAR.Upd BA102-Action Code USR is Yes
  IF PAR.Upd_BA102_Action_Code_USR = 'Y';

  //?ITN# Received, Update to 'RX' (Change) if '1' (New).
  CASE;

  // IF DB1.BA102-Action Code is Add/New
  IF DB1.BA102_Action_Code = '1';

  EXECUTE FUNCTION(Chg Pending EDI 601 RcdCH) TYPE(CHGOBJ) FILE(ECP136)           AC2215494;
  PARAMETER(DB1.ST02_TRANS_SET_CONTROL_NU);
  PARAMETER('N');
  PARAMETER('RX');
  //?ITN# Received, Update to 'RX' (Change) if '1' (New).
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg EDI Rcd Processed CH) TYPE(CHGOBJ) FILE(ECP136)            AC2211483;
  PARAMETER(DB1.ST02_TRANS_SET_CONTROL_NU);
  PARAMETER('N');
  ENDIF;

  //?Update 'BA102-Action Code' if Need To.
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg EDI Rcd Processed CH) TYPE(CHGOBJ) FILE(ECP136)            AC2211483;
  PARAMETER(DB1.ST02_TRANS_SET_CONTROL_NU);
  PARAMETER('N');
  ENDIF;

  //?Reset OHE EDI 824 Action to 'Blank' to Reprocess.
  // Call program Upd OHE EDI 824 Action XF.
  CALL PROGRAM(Upd OHE EDI 824 Action XF) ('PUXXXFR');
  PARAMETER(DB1.BA105_Shipment_Ref_#_Load);
  PARAMETER(LCL.OHE_Booking_Number);
  PARAMETER(*BLANK);
  PARAMETER(8);
  PARAMETER(*BLANK);

  //?Update 'Pending' 601 Records.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?GoAnywhere will NOT process these records.
  EXECUTE FUNCTION(Chg EDI Rcd Processed CH) TYPE(CHGOBJ) FILE(ECP136)            AC2211483;
  PARAMETER(DB1.ST02_TRANS_SET_CONTROL_NU);
  PARAMETER('X');
  ENDIF;

 }

 //?Check Return Code.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Check Return Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Reset to 'Blank' to Reprocess.
 // Call program Upd OHE EDI 824 Action XF.
 CALL PROGRAM(Upd OHE EDI 824 Action XF) ('PUXXXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(*BLANK);
 PARAMETER(8);
 PARAMETER(*BLANK);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?For Record Change Processing.
 CASE;

 // IF LCL.OHE EDI 824 Action is Blanks
 IF LCL.OHE_EDI_824_Action = *BLANK;

 //?(EDI 824 transaction has not yet been received.)
 //?Create EDI 601 data sets but set EDI-Record Processed='P'ending
 //?so GoAnywhere will NOT process these records.
 // LCL.Create EDI 601 USR = CND.Yes
 LCL.Create_EDI_601_USR = 'Y';

 // LCL.EDI-Record Processed = CND.Pending
 LCL.EDI_Record_Processed = 'P';

 //?Set 'BA102-Action Code' Based on OHE ITN# is Entered.
 CASE;

 // IF LCL.OHE EDI 824 AES ITN # is *Blank
 IF LCL.OHE_EDI_824_AES_ITN_# = *BLANK;

 // LCL.BA102-Action Code = CND.Add/New
 LCL.BA102_Action_Code = '1';

 //?Set 'BA102-Action Code' Based on OHE ITN# is Entered.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BA102-Action Code = CND.Replace
 LCL.BA102_Action_Code = 'RX';

 ENDIF;

 //?For Record Change Processing.
 // IF LCL.OHE EDI 824 Action is Received
 IF LCL.OHE_EDI_824_Action = 'R';

 //?Create EDI 601 data sets & set EDI-Record Processed='N'ot Process
 //?so GoAnywhere will process these records.
 // LCL.Create EDI 601 USR = CND.Yes
 LCL.Create_EDI_601_USR = 'Y';

 // LCL.EDI-Record Processed = CND.Not Processed
 LCL.EDI_Record_Processed = 'N';

 //?Set 'BA102-Action Code' Based on OHE ITN# is Entered.
 CASE;

 // IF LCL.OHE EDI 824 AES ITN # is *Blank
 IF LCL.OHE_EDI_824_AES_ITN_# = *BLANK;

 // LCL.BA102-Action Code = CND.Add/New
 LCL.BA102_Action_Code = '1';

 //?Set 'BA102-Action Code' Based on OHE ITN# is Entered.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BA102-Action Code = CND.Replace
 LCL.BA102_Action_Code = 'RX';

 ENDIF;

 //?Reset to 'Blank' to Reprocess.
 // Call program Upd OHE EDI 824 Action XF.
 CALL PROGRAM(Upd OHE EDI 824 Action XF) ('PUXXXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(*BLANK);
 PARAMETER(8);
 PARAMETER(*BLANK);

 //?For Record Change Processing.
 // IF LCL.OHE EDI 824 Action is Snd-Error
 IF LCL.OHE_EDI_824_Action = 'E';

 //?Create EDI 601 data sets & set EDI-Record Processed='N'ot Process
 //?so GoAnywhere will process these records.
 // LCL.Create EDI 601 USR = CND.Yes
 LCL.Create_EDI_601_USR = 'Y';

 // LCL.EDI-Record Processed = CND.Not Processed
 LCL.EDI_Record_Processed = 'N';

 //?Set 'BA102-Action Code' Based on OHE ITN# is Entered.
 CASE;

 // IF LCL.OHE EDI 824 AES ITN # is *Blank
 IF LCL.OHE_EDI_824_AES_ITN_# = *BLANK;

 // LCL.BA102-Action Code = CND.Add/New
 LCL.BA102_Action_Code = '1';

 //?Set 'BA102-Action Code' Based on OHE ITN# is Entered.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BA102-Action Code = CND.Replace
 LCL.BA102_Action_Code = 'RX';

 ENDIF;

 //?Reset to 'Blank' to Reprocess.
 // Call program Upd OHE EDI 824 Action XF.
 CALL PROGRAM(Upd OHE EDI 824 Action XF) ('PUXXXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(*BLANK);
 PARAMETER(8);
 PARAMETER(*BLANK);

 ENDIF;

 ENDIF;

 ENDIF;

 //?Create EDI 601 Shipment Export Info Transactions.
 CASE;

 // IF LCL.Create EDI 601 USR is Yes
 IF LCL.Create_EDI_601_USR = 'Y';

 //?Create EDI Export Shpmnt Inf HDR (ECP136).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ST02-TRANS SET CONTROL NU = CON.999999999
 LCL.ST02_TRANS_SET_CONTROL_NU = 999999999;

 EXECUTE FUNCTION(Rtv Next Control #     RT) TYPE(RTVOBJ) FILE(ECP136)           AC2210811;
 PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
 {
  //?USER: Processing if Data record not found

  // PAR.ST02-TRANS SET CONTROL NU = CON.100
  PAR.ST02_TRANS_SET_CONTROL_NU = 100;

  //?USER: Process Data record

  // PAR.ST02-TRANS SET CONTROL NU = DB1.ST02-TRANS SET CONTROL NU + CON.1
  PAR.ST02_TRANS_SET_CONTROL_NU = DB1.ST02_TRANS_SET_CONTROL_NU + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Country ISO Code  RT) TYPE(RTVOBJ) FILE(PNHAREP)           AC2151542;
 PARAMETER(PAR.Country_Code);
 PARAMETER(LCL.ISO_Alpha2_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV 1st Warehouse 2    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2158777;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.Ship From Warehouse = LCL.Warehouse Code
 LCL.Ship_From_Warehouse = LCL.Warehouse_Code;

 EXECUTE FUNCTION(Rtv for EDI 601 ESI   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2212223;
 PARAMETER(LCL.Ship_From_Warehouse);
 PARAMETER(LCL.N301_Address_Line_1);
 PARAMETER(LCL.N302_Address_Line_2);
 PARAMETER(LCL.N401_CITY);
 PARAMETER(LCL.N403_POSTAL_CODE);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.Warehouse_Type);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Federal ID,City,St RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1782329;
 PARAMETER(DB1.Company_Number);
 PARAMETER(NLL.City);
 PARAMETER(LCL.Federal_Tax_Id);
 PARAMETER(NLL.State_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?This is the Trucking SCAC. Commented out.
 //?CBP SCAC for Ocean Carrier resides in Shipping Line/Port Extsn file.
 //?Format CBP Export Port Code.
 CASE;

 // IF PAR.CBP Export Port Code is Entered
 IF PAR.CBP_Export_Port_Code <> 0;

 // LCL.Numeric 4,0           USR = PAR.CBP Export Port Code
 LCL.Numeric_40_USR = PAR.CBP_Export_Port_Code;

 // LCL.Text USR 4 = CVTVAR(LCL.Numeric 4,0           USR)
 LCL.Text_USR_4 = CVTVAR(LCL.Numeric_40_USR);

 // LCL.PS03-Port of Export = LCL.Text USR 4
 LCL.PS03_Port_of_Export = LCL.Text_USR_4;

 //?Format CBP Export Port Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PS03-Port of Export = CON.*BLANK
 LCL.PS03_Port_of_Export = *BLANK;

 ENDIF;

 // LCL.DTM02-Sail Date = PAR.OHE Sail/Flight Date
 LCL.DTM02_Sail_Date = PAR.OHE_Sail_Flight_Date;

 //?Format CBP Foreign Port Code (Unlading).
 CASE;

 // IF PAR.CBP Foreign Port Code is Not zero
 IF PAR.CBP_Foreign_Port_Code <> *ZERO;

 // LCL.Text USR 5 = CVTVAR(PAR.CBP Foreign Port Code)
 LCL.Text_USR_5 = CVTVAR(PAR.CBP_Foreign_Port_Code);

 // LCL.P503-Port of Unlading = LCL.Text USR 5
 LCL.P503_Port_of_Unlading = LCL.Text_USR_5;

 // Execute function EUS TrimL Port of UnldgUS.
 EXECUTE FUNCTION(EUS TrimL Port of UnldgUS) TYPE(EXCUSRSRC) ('PUY2UFR');
 PARAMETER(LCL.P503_Port_of_Unlading);
 {
  * Trim Left Port of Unlading; Suppress Leading Zero.
  c                   eval      #BS7U1 = %triml(#BS7U1 : '0 ')
  *
 }

 //?Format CBP Foreign Port Code (Unlading).
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.P503-Port of Unlading = CON.*BLANK
 LCL.P503_Port_of_Unlading = *BLANK;

 ENDIF;

 // LCL.Create Date D8# = JOB.*Job date
 LCL.Create_Date_D8# = JOB.*Job_date;

 EXECUTE FUNCTION(Crt Exp Shpmnt Inf HDR CR) TYPE(CRTOBJ) FILE(ECP136)           AC2209974;
 PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
 PARAMETER(LCL.EDI_Record_Processed);
 PARAMETER('USCBP');
 PARAMETER('N');
 PARAMETER(LCL.BA102_Action_Code);
 PARAMETER('O');
 PARAMETER(LCL.ISO_Alpha2_Code);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.Federal_Tax_Id);
 PARAMETER(PAR.CBP_Std_Carrier_Alpha_Cde);
 PARAMETER(PAR.OHE_Vessel_Airline);
 PARAMETER('RZ');
 PARAMETER(LCL.DTM02_Sail_Date);
 PARAMETER(LCL.PS03_Port_of_Export);
 PARAMETER(LCL.P503_Port_of_Unlading);
 PARAMETER(PAR.OHE_EDI_824_AES_ITN_#);
 PARAMETER(70);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('Y');
 PARAMETER(*BLANK);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Create_Date_D8#);
 PARAMETER(JOB.*Job_time);
 PARAMETER('N');
 ENDIF;

 //?Create EDI Export Shpmnt Inf DTL (ECP137).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set Qty/Wgt Total.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Sum Qty/Wgt f/601  RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2211111;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(DB1.Header_Status);
 PARAMETER(LCL.USR_Gross_Wgt_LBS_Total);
 PARAMETER(LCL.USR_Quantity_Total);
 PARAMETER(LCL.Company_w_Most_Qty_Wgt_U);
 PARAMETER(LCL.Order_Number_Saved_USR);
 PARAMETER(LCL.L1304_Net_Wgt_Ship_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // LCL.USR Quantity, 9.0 = CON.*ZERO
  LCL.USR_Quantity_9_0 = *ZERO;

  // LCL.USR Weight Accumulated = CON.*ZERO
  LCL.USR_Weight_Accumulated = *ZERO;

  // LCL.First Time Through USR = CND.Yes
  LCL.First_Time_Through_USR = 'Y';

  // LCL.Company count = CON.*ZERO
  LCL.Company_count = *ZERO;

  // LCL.Total Weight Ship Save U = CON.*ZERO
  LCL.Total_Weight_Ship_Save_U = *ZERO;

  //?USER: Process Data record

  //?Booking # Must Match.
  CASE;

  // IF PAR.OHE Booking Number EQ DB1.OHE Booking Number
  IF PAR.OHE_Booking_Number = DB1.OHE_Booking_Number;

  // LCL.USR Weight Accumulated = CON.*ZERO
  LCL.USR_Weight_Accumulated = *ZERO;

  // Call program RTV Gross Wgt/Qty     XF.
  CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.USR_Weight_Accumulated);
  PARAMETER(LCL.USR_Quantity_9_0);
  PARAMETER(*ZERO);

  //?Accumulate Qty/Wgt.
  // PAR.USR Quantity, 9.0 = PAR.USR Quantity, 9.0 + LCL.USR Quantity, 9.0
  PAR.USR_Quantity_9_0 = PAR.USR_Quantity_9_0 + LCL.USR_Quantity_9_0;

  // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.USR Weight Accumulated
  PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.USR_Weight_Accumulated;

  //?Break by Co to Save Which Co have the Most Qty Net Weight.
  CASE;

  // IF DB1.Company Number NE LCL.Company Number
  IF DB1.Company_Number <> LCL.Company_Number;

  // LCL.Company count = LCL.Company count + CON.1
  LCL.Company_count = LCL.Company_count + 1;

  //?Save/Compare Total Weight Ship Save for Each Company Break.
  CASE;

  // IF LCL.Company count is >= 2
  IF LCL.Company_count >= 2;

  //?Save the Company Which have the Most Weight.
  CASE;

  // IF PAR.Total Weight Ship    USR GT LCL.Total Weight Ship Save U
  IF PAR.Total_Weight_Ship_USR > LCL.Total_Weight_Ship_Save_U;

  // LCL.Total Weight Ship Save U = PAR.Total Weight Ship    USR
  LCL.Total_Weight_Ship_Save_U = PAR.Total_Weight_Ship_USR;

  // PAR.Company w/Most Qty Wgt U = LCL.Company Number
  PAR.Company_w_Most_Qty_Wgt_U = LCL.Company_Number;

  // PAR.Order Number Saved USR = LCL.Order Number Saved USR
  PAR.Order_Number_Saved_USR = LCL.Order_Number_Saved_USR;

  ENDIF;

  ENDIF;

  // LCL.Company Number = DB1.Company Number
  LCL.Company_Number = DB1.Company_Number;

  // LCL.Order Number Saved USR = DB1.Order Number
  LCL.Order_Number_Saved_USR = DB1.Order_Number;

  //?First Time Thru.
  CASE;

  // IF LCL.First Time Through USR is Yes
  IF LCL.First_Time_Through_USR = 'Y';

  // LCL.First Time Through USR = CND.No
  LCL.First_Time_Through_USR = 'N';

  // PAR.Company w/Most Qty Wgt U = DB1.Company Number
  PAR.Company_w_Most_Qty_Wgt_U = DB1.Company_Number;

  // PAR.Order Number Saved USR = DB1.Order Number
  PAR.Order_Number_Saved_USR = DB1.Order_Number;

  //?First Time Thru.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Reset Accumulator.
  // PAR.Total Weight Ship    USR = CON.*ZERO
  PAR.Total_Weight_Ship_USR = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Rtv Sum Ord/Ship Wgt   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2212040;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Header_Status);
  PARAMETER(LCL.Total_Weight_Ship_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF PAR.Header Status is Confirmed & Complete
   IF PAR.Header_Status = 'C'/'R';

   // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + DB1.Weight Shipped Total
   PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + DB1.Weight_Shipped_Total;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + DB1.Weight Ordered
   PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + DB1.Weight_Ordered;

   ENDIF;

  }

  // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + LCL.Total Weight Ship    USR
  PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + LCL.Total_Weight_Ship_USR;

  // PAR.L1304-Net Wgt Ship Total = PAR.L1304-Net Wgt Ship Total + LCL.Total Weight Ship    USR
  PAR.L1304_Net_Wgt_Ship_Total = PAR.L1304_Net_Wgt_Ship_Total + LCL.Total_Weight_Ship_USR;

  //?Break by Co to Save Which Co have the Most Qty Net Weight.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Accumulate Total Weight Ship    USR for Same Co.
  EXECUTE FUNCTION(Rtv Sum Ord/Ship Wgt   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2212040;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Header_Status);
  PARAMETER(LCL.Total_Weight_Ship_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF PAR.Header Status is Confirmed & Complete
   IF PAR.Header_Status = 'C'/'R';

   // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + DB1.Weight Shipped Total
   PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + DB1.Weight_Shipped_Total;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + DB1.Weight Ordered
   PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + DB1.Weight_Ordered;

   ENDIF;

  }

  // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + LCL.Total Weight Ship    USR
  PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + LCL.Total_Weight_Ship_USR;

  // PAR.L1304-Net Wgt Ship Total = PAR.L1304-Net Wgt Ship Total + LCL.Total Weight Ship    USR
  PAR.L1304_Net_Wgt_Ship_Total = PAR.L1304_Net_Wgt_Ship_Total + LCL.Total_Weight_Ship_USR;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?Last Record Processing.
  CASE;

  // IF LCL.Company count is >= 2
  IF LCL.Company_count >= 2;

  //?Save the Company Which have the Most Weight.
  CASE;

  // IF PAR.Total Weight Ship    USR GT LCL.Total Weight Ship Save U
  IF PAR.Total_Weight_Ship_USR > LCL.Total_Weight_Ship_Save_U;

  // PAR.Company w/Most Qty Wgt U = LCL.Company Number
  PAR.Company_w_Most_Qty_Wgt_U = LCL.Company_Number;

  // PAR.Order Number Saved USR = LCL.Order Number Saved USR
  PAR.Order_Number_Saved_USR = LCL.Order_Number_Saved_USR;

  ENDIF;

  ENDIF;

 }

 //?Override State Code & Update ECP136 HDR Record.
 CASE;

 // IF LCL.Order Number Saved USR NE DB1.Order Number
 IF LCL.Order_Number_Saved_USR <> DB1.Order_Number;

 // AND LCL.Order Number Saved USR is Not equal to zeros
 AND LCL.Order_Number_Saved_USR <> *ZERO;

 //?Order Number changed means another Whse have the most Qty Wgt.
 //?Use this Whse address info when creating ECP135 NME 'EX' record.
 EXECUTE FUNCTION(RTV 1st Warehouse 2    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2158777;
 PARAMETER(LCL.Company_w_Most_Qty_Wgt_U);
 PARAMETER(LCL.Order_Number_Saved_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.Ship From Warehouse = LCL.Warehouse Code
 LCL.Ship_From_Warehouse = LCL.Warehouse_Code;

 EXECUTE FUNCTION(Rtv for EDI 601 ESI   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2212223;
 PARAMETER(LCL.Ship_From_Warehouse);
 PARAMETER(LCL.N301_Address_Line_1);
 PARAMETER(LCL.N302_Address_Line_2);
 PARAMETER(LCL.N401_CITY);
 PARAMETER(LCL.N403_POSTAL_CODE);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.Warehouse_Type);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Update State Code in ECP136 HDR Record. Ship From Whse Address info
 //?will be updated downstream.
 EXECUTE FUNCTION(Upd Ship From State CdeRT) TYPE(RTVOBJ) FILE(ECP136)           AC2212042;
 PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
 PARAMETER(LCL.State_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Exp Shpmnt Inf HDR CH) TYPE(CHGOBJ) FILE(ECP136)           AC2209975;
  PARAMETER(DB1.ST02_TRANS_SET_CONTROL_NU);
  PARAMETER(DB1.EDI_Record_Processed);
  PARAMETER(DB1.TRADE_PARTNER_CODE);
  PARAMETER(DB1.BA101_Related_Company);
  PARAMETER(DB1.BA102_Action_Code);
  PARAMETER(DB1.BA103_Transportation_Type);
  PARAMETER(DB1.BA104_Country_Code_ISO_2A);
  PARAMETER(DB1.BA105_Shipment_Ref_#_Load);
  PARAMETER(PAR.State_Code);
  PARAMETER(DB1.BA109_IRS_Identifier_EIN);
  PARAMETER(DB1.BA110_SCAC);
  PARAMETER(DB1.BA112_Vessel_Name);
  PARAMETER(DB1.YNQ01_Type_of_Filing);
  PARAMETER(DB1.DTM02_Sail_Date);
  PARAMETER(DB1.PS03_Port_of_Export);
  PARAMETER(DB1.P503_Port_of_Unlading);
  PARAMETER(DB1.REF02_Ref_ITN);
  PARAMETER(DB1.M1201_Customs_Entry_Type);
  PARAMETER(DB1.M1202_Customs_Entry_Nbr);
  PARAMETER(DB1.M1203_Location_ID);
  PARAMETER(DB1.M1204_Foreign_Party_Ind);
  PARAMETER(DB1.EDI_ESIH_Unused_1);
  PARAMETER(DB1.ESIH_OHE_Booking_Nbr);
  PARAMETER(DB1.EDI_ESIH_Unused_3);
  PARAMETER(DB1.Create_Date_D8#);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.EDI_824_Received_Sts);
 }

 ENDIF;

 // LCL.L1304-Qty Shipped Total = LCL.USR Quantity Total
 LCL.L1304_Qty_Shipped_Total = LCL.USR_Quantity_Total;

 //?Convert NET Weight from LBS to KG.
 // LCL.Net Weight Total 11.1 U = LCL.L1304-Net Wgt Ship Total / CON.2.2046 *Rounded
 LCL.Net_Weight_Total_11_1_U = LCL.L1304_Net_Wgt_Ship_Total / 2.2046 'H';

 //?Drop the Decimals for Net Weight.
 // LCL.USR Net Wgt LBS Tot 11.0 = LCL.Net Weight Total 11.1 U
 LCL.USR_Net_Wgt_LBS_Tot_11_0 = LCL.Net_Weight_Total_11_1_U;

 // LCL.L1304-Net Wgt Ship Total = LCL.USR Net Wgt LBS Tot 11.0
 LCL.L1304_Net_Wgt_Ship_Total = LCL.USR_Net_Wgt_LBS_Tot_11_0;

 //?Convert GROSS Weight from LBS to KG.
 // LCL.Gross Weight Total 11.1 U = LCL.USR Gross Wgt LBS Total / CON.2.2046 *Rounded
 LCL.Gross_Weight_Total_11_1_U = LCL.USR_Gross_Wgt_LBS_Total / 2.2046 'H';

 //?Drop the Decimals in Weight.
 // LCL.USR Gross Wgt LBS Tot11.0 = LCL.Gross Weight Total 11.1 U
 LCL.USR_Gross_Wgt_LBS_Tot11_0 = LCL.Gross_Weight_Total_11_1_U;

 // LCL.L1311-Gross Wgt Ship Tot = LCL.USR Gross Wgt LBS Tot11.0
 LCL.L1311_Gross_Wgt_Ship_Tot = LCL.USR_Gross_Wgt_LBS_Tot11_0;

 ENDIF;

 //?Set L1302-Commodity Code & L1312-Chilled/Frozen Text.
 CASE;

 // IF LCL.Warehouse Type is Fresh
 IF LCL.Warehouse_Type = 'FR';

 // LCL.L1302-Commodity Code = CON.0203194000
 LCL.L1302_Commodity_Code = 0203194000;

 // LCL.L1312-Chilled/Frozen Text = CON.Chilled Pork
 LCL.L1312_Chilled_Frozen_Text = 'Chilled Pork';

 //?Set L1302-Commodity Code & L1312-Chilled/Frozen Text.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Frozen.
 // LCL.L1302-Commodity Code = CON.0203294000
 LCL.L1302_Commodity_Code = 0203294000;

 // LCL.L1312-Chilled/Frozen Text = CON.Frozen Pork
 LCL.L1312_Chilled_Frozen_Text = 'Frozen Pork';

 ENDIF;

 EXECUTE FUNCTION(Crt Exp Shpmnt Inf DTL CR) TYPE(CRTOBJ) FILE(ECP137)           AC2209987;
 PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
 PARAMETER(LCL.L1302_Commodity_Code);
 PARAMETER(LCL.L1304_Net_Wgt_Ship_Total);
 PARAMETER(PAR.L1306_Order_Value_Total);
 PARAMETER(1);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.L1311_Gross_Wgt_Ship_Tot);
 PARAMETER(LCL.L1312_Chilled_Frozen_Text);
 PARAMETER('OS');
 PARAMETER(1);
 PARAMETER(*BLANK);
 PARAMETER('NLR');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('C33');
 PARAMETER(*BLANK);
 PARAMETER('D');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 ENDIF;

 //?Create EDI Export Shpmnt Inf NME (ECP135).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?'EX' (US Principle Party in Interest).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?***Use Address Info from Ship From Warehouse.
 EXECUTE FUNCTION(Rtv for All           RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2211064;
 PARAMETER(300);
 PARAMETER(LCL.Name);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(NLL.City);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(NLL.Telephone_Number_FF);
 PARAMETER(NLL.Fax_Number_FF);
 PARAMETER(NLL.Federal_Tax_Id);
 PARAMETER(NLL.Alpha_Search);
 PARAMETER(NLL.State_Code);
 PARAMETER(LCL.Country_Code);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Country Code ISO 2A.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Country ISO Code  RT) TYPE(RTVOBJ) FILE(PNHAREP)           AC2151542;
 PARAMETER(LCL.Country_Code);
 PARAMETER(LCL.ISO_Alpha2_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Get N202-Contact Phone Nbr.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
 PARAMETER('EDI601EXSH');
 PARAMETER(LCL.N202_Contact_Phone_Nbr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
 PARAMETER('EDI601N201');
 PARAMETER(LCL.N201_NAME);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Substring Out First & Last Name.
 CASE;

 // IF LCL.N201-NAME is Entered
 IF LCL.N201_NAME <> *BLANK;

 // Execute function Eus Scan f/VarChar Pos US.
 EXECUTE FUNCTION(Eus Scan f/VarChar Pos US) TYPE(EXCUSRSRC) ('PUX9UFR');
 PARAMETER(LCL.N201_NAME);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Starting_Position_USR);
 {
  * Scan for Variable Character to know what position it was.
  /free
  $string2_data = *blank;
  $string2_data = #IAME1;
  $var_char = #IUFU1;
  $pos2 = %scan ($var_char : $string2_data);
  If $pos2 = 0;
  #OTPNX = $pos2;  // Not Found
  Else;
  #OTPNX = $pos2;  // Found
  EndIf;
  /end-free
 }

 // LCL.First Name End Pos USR = LCL.Starting Position USR - CON.1
 LCL.First_Name_End_Pos_USR = LCL.Starting_Position_USR - 1;

 // LCL.N201-FIRSTNAME = SUBSTRING(LCL.N201-NAME,CON.1,LCL.First Name End Pos USR)
 LCL.N201_FIRSTNAME = SUBSTRING(LCL.N201_NAME:1:LCL.First_Name_End_Pos_USR);

 // LCL.Last Name Beg Pos USR = LCL.Starting Position USR + CON.1
 LCL.Last_Name_Beg_Pos_USR = LCL.Starting_Position_USR + 1;

 // LCL.N201-LASTNAME = SUBSTRING(LCL.N201-NAME,LCL.Last Name Beg Pos USR,CON.25)
 LCL.N201_LASTNAME = SUBSTRING(LCL.N201_NAME:LCL.Last_Name_Beg_Pos_USR:25);

 //?Substring Out First & Last Name.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.N201-FIRSTNAME = CON.*BLANK
 LCL.N201_FIRSTNAME = *BLANK;

 // LCL.N201-LASTNAME = CON.*BLANK
 LCL.N201_LASTNAME = *BLANK;

 ENDIF;

 //?Remove '-' Dash from Postal Code if Exist.
 CASE;

 // IF LCL.N403-POSTAL CODE is Entered
 IF LCL.N403_POSTAL_CODE <> *BLANK;

 // Execute function Eus Scan f/VarChar Pos US.
 EXECUTE FUNCTION(Eus Scan f/VarChar Pos US) TYPE(EXCUSRSRC) ('PUX9UFR');
 PARAMETER(LCL.N403_POSTAL_CODE);
 PARAMETER('-');
 PARAMETER(LCL.Starting_Position_USR);
 {
  * Scan for Variable Character to know what position it was.
  /free
  $string2_data = *blank;
  $string2_data = #IAME1;
  $var_char = #IUFU1;
  $pos2 = %scan ($var_char : $string2_data);
  If $pos2 = 0;
  #OTPNX = $pos2;  // Not Found
  Else;
  #OTPNX = $pos2;  // Found
  EndIf;
  /end-free
 }

 //?Dash Found.
 CASE;

 // IF LCL.Starting Position USR is Entered
 IF LCL.Starting_Position_USR > 0;

 // LCL.Zip Code End Pos USR = LCL.Starting Position USR - CON.1
 LCL.Zip_Code_End_Pos_USR = LCL.Starting_Position_USR - 1;

 // LCL.Zip Code 5A USR = SUBSTRING(LCL.N403-POSTAL CODE,CON.1,LCL.Zip Code End Pos USR)
 LCL.Zip_Code_5A_USR = SUBSTRING(LCL.N403_POSTAL_CODE:1:LCL.Zip_Code_End_Pos_USR);

 // LCL.Zip +4 Code Beg Pos USR = LCL.Starting Position USR + CON.1
 LCL.Zip_+4_Code_Beg_Pos_USR = LCL.Starting_Position_USR 1;

 // LCL.Zip +4 Code 4A USR = SUBSTRING(LCL.N403-POSTAL CODE,LCL.Zip +4 Code Beg Pos USR,CON.4)
 LCL.Zip_+4_Code_4A_USR = SUBSTRING(LCL.N403_POSTAL_CODE:LCL.Zip_+4_Code_Beg_Pos_USR:4);

 //?Concat Zip Code.
 // LCL.N403-POSTAL CODE = CON.*BLANK
 LCL.N403_POSTAL_CODE = *BLANK;

 // LCL.N403-POSTAL CODE = CONCAT(LCL.Zip Code 5A USR,LCL.Zip +4 Code 4A USR,CON.*ZERO)
 LCL.N403_POSTAL_CODE = LCL.Zip_Code_5A_USR + LCL.Zip_+4_Code_4A_USR (*ZERO);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Crt Exp Shpmnt Inf DTL CR) TYPE(CRTOBJ) FILE(ECP135)           AC2209999;
 PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
 PARAMETER('EX');
 PARAMETER(LCL.Name);
 PARAMETER(24);
 PARAMETER(90027928300);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.N201_FIRSTNAME);
 PARAMETER(LCL.N201_LASTNAME);
 PARAMETER(LCL.N202_Contact_Phone_Nbr);
 PARAMETER(LCL.N301_Address_Line_1);
 PARAMETER(LCL.N302_Address_Line_2);
 PARAMETER(LCL.N401_CITY);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.N403_POSTAL_CODE);
 PARAMETER(LCL.ISO_Alpha2_Code);
 ENDIF;

 //?'CN' (Ultimate Consignee).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?DN 5/5/23-Business wants to get Consignee Address info from PDMRREP.
 //? Commented out Ship To Address Info.
 //?Get Consignee Address Line 1, 2 & City.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Consignee Info    RT) TYPE(RTVOBJ) FILE(PDMRREP)           AC2215667;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('H');
 PARAMETER(LCL.ED_Consignee_Name);
 PARAMETER(LCL.ED_Consignee_Addr_1);
 PARAMETER(LCL.ED_Consignee_Addr_2);
 PARAMETER(LCL.ED_Consignee_Addr_3);
 PARAMETER(LCL.ED_Consignee_Addr_4);
 PARAMETER(NLL.ED_Consignee_State);
 PARAMETER(NLL.ED_Consignee_Postal);
 PARAMETER(NLL.ED_Consignee_Country_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Set Ship To City.
 CASE;

 // IF LCL.ED Consignee Addr 4 is Blank
 IF LCL.ED_Consignee_Addr_4 = *BLANK;

 // LCL.N401-CITY = DB1.Ship To City
 LCL.N401_CITY = DB1.Ship_To_City;

 //?Set Ship To City.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.N401-CITY = LCL.ED Consignee Addr 4
 LCL.N401_CITY = LCL.ED_Consignee_Addr_4;

 ENDIF;

 //?Format Required Fields from PDMRREP to Replace Hex Value 41 to Blank.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?This is due to user copying from a template onto the screen.
 // Execute function Cvt Hex 41 to Blank   US.
 EXECUTE FUNCTION(Cvt Hex 41 to Blank   US) TYPE(EXCUSRSRC) ('PVAEUFR');
 PARAMETER(LCL.ED_Consignee_Name);
 PARAMETER(LCL.ED_Consignee_Addr_1);
 PARAMETER(LCL.ED_Consignee_Addr_2);
 PARAMETER(LCL.N401_CITY);
 {
  * Cvt Hex 41 to Blank   US
  D wkrhtx          s             63A                                        Consignee Name
  D wkritx          s             63A                                        Consignee Addr 1
  D wkrjtx          s             63A                                        Consignee Addr 2
  D wkityx          s             20A                                        Consignee City
  *
  * Consignee Name.
  C                   move      #brhtx        wkrhtx
  C                   if        wkrhtx <> *blank
  C     x'41':' '     xlate     wkrhtx        #brhtx
  C                   endif
  * Consignee Addr 1.
  C                   move      #britx        wkritx
  C                   if        wkritx <> *blank
  C     x'41':' '     xlate     wkritx        #britx
  C                   endif
  * Consignee Addr 2.
  C                   move      #brjtx        wkrjtx
  C                   if        wkrjtx <> *blank
  C     x'41':' '     xlate     wkrjtx        #brjtx
  C                   endif
  *
  * Consignee City.
  C                   move      #bityx        wkityx
  C                   if        wkityx <> *blank
  C     x'41':' '     xlate     wkityx        #bityx
  C                   endif
  *
 }

 ENDIF;

 ENDIF;

 //?Suppress State Code.
 CASE;

 // IF DB1.Ship To State Code is International Accounts
 IF DB1.Ship_To_State_Code = '.';

 // LCL.N402-STATE = CON.*BLANK
 LCL.N402_STATE = *BLANK;

 //?Suppress State Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.N402-STATE = DB1.Ship To State Code
 LCL.N402_STATE = DB1.Ship_To_State_Code;

 ENDIF;

 //?Suppress Zip Code.
 CASE;

 // IF DB1.Ship To Zip/Postal Code is International
 IF DB1.Ship_To_Zip_Postal_Code = '.';

 // LCL.N403-POSTAL CODE = CON.*BLANK
 LCL.N403_POSTAL_CODE = *BLANK;

 //?Suppress Zip Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Override Zip Code if Puerto Rico Else Set to Blank.
 CASE;

 // IF PAR.Country Code is Puerto Rico
 IF PAR.Country_Code = 'PRI';

 // LCL.N403-POSTAL CODE = DB1.Ship To Zip/Postal Code
 LCL.N403_POSTAL_CODE = DB1.Ship_To_Zip_Postal_Code;

 //?Remove '-' Dash from Postal Code if Exist.
 CASE;

 // IF LCL.N403-POSTAL CODE is Entered
 IF LCL.N403_POSTAL_CODE <> *BLANK;

 // Execute function Eus Scan f/VarChar Pos US.
 EXECUTE FUNCTION(Eus Scan f/VarChar Pos US) TYPE(EXCUSRSRC) ('PUX9UFR');
 PARAMETER(LCL.N403_POSTAL_CODE);
 PARAMETER('-');
 PARAMETER(LCL.Starting_Position_USR);
 {
  * Scan for Variable Character to know what position it was.
  /free
  $string2_data = *blank;
  $string2_data = #IAME1;
  $var_char = #IUFU1;
  $pos2 = %scan ($var_char : $string2_data);
  If $pos2 = 0;
  #OTPNX = $pos2;  // Not Found
  Else;
  #OTPNX = $pos2;  // Found
  EndIf;
  /end-free
 }

 //?Dash Found.
 CASE;

 // IF LCL.Starting Position USR is Entered
 IF LCL.Starting_Position_USR > 0;

 // LCL.Zip Code End Pos USR = LCL.Starting Position USR - CON.1
 LCL.Zip_Code_End_Pos_USR = LCL.Starting_Position_USR - 1;

 // LCL.Zip Code 5A USR = SUBSTRING(LCL.N403-POSTAL CODE,CON.1,LCL.Zip Code End Pos USR)
 LCL.Zip_Code_5A_USR = SUBSTRING(LCL.N403_POSTAL_CODE:1:LCL.Zip_Code_End_Pos_USR);

 // LCL.Zip +4 Code Beg Pos USR = LCL.Starting Position USR + CON.1
 LCL.Zip_+4_Code_Beg_Pos_USR = LCL.Starting_Position_USR 1;

 // LCL.Zip +4 Code 4A USR = SUBSTRING(LCL.N403-POSTAL CODE,LCL.Zip +4 Code Beg Pos USR,CON.4)
 LCL.Zip_+4_Code_4A_USR = SUBSTRING(LCL.N403_POSTAL_CODE:LCL.Zip_+4_Code_Beg_Pos_USR:4);

 //?Concat Zip Code.
 // LCL.N403-POSTAL CODE = CON.*BLANK
 LCL.N403_POSTAL_CODE = *BLANK;

 // LCL.N403-POSTAL CODE = CONCAT(LCL.Zip Code 5A USR,LCL.Zip +4 Code 4A USR,CON.*ZERO)
 LCL.N403_POSTAL_CODE = LCL.Zip_Code_5A_USR + LCL.Zip_+4_Code_4A_USR (*ZERO);

 ENDIF;

 ENDIF;

 //?Override Zip Code if Puerto Rico Else Set to Blank.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.N403-POSTAL CODE = CON.*BLANK
 LCL.N403_POSTAL_CODE = *BLANK;

 ENDIF;

 ENDIF;

 //?Get Country Code ISO 2A.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Country ISO Code  RT) TYPE(RTVOBJ) FILE(PNHAREP)           AC2151542;
 PARAMETER(PAR.Country_Code);
 PARAMETER(LCL.ISO_Alpha2_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Override the Country Code & State Code if Puerto Rico Country.
 CASE;

 // IF LCL.ISO Alpha-2 Code is Puerto Rico
 IF LCL.ISO_Alpha2_Code = 'PR';

 // LCL.ISO Alpha-2 Code = CND.USA
 LCL.ISO_Alpha2_Code = 'US';

 // LCL.N402-STATE = CND.Puerto Rico
 LCL.N402_STATE = 'PR';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Val addr flds spl char IF) TYPE(EXCINTFUN)                     AC2242709;
 PARAMETER(LCL.ED_Consignee_Addr_1);
 PARAMETER(LCL.ED_Consignee_Addr_2);
 PARAMETER(LCL.ED_Consignee_Addr_3);
 PARAMETER(LCL.N401_CITY);
 {
  //?Execute internal function

  //?Read system values table for characters to exclude
  CASE;

  // IF WRK.Spcl chars for addr flds is Equal to Blank
  IF WRK.Spcl_chars_for_addr_flds = *BLANK;

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('ADRVALCHAR');
  PARAMETER(WRK.Spcl_chars_for_addr_flds);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('SCNCHARVAL');
  PARAMETER(WRK.Accent_chars_to_scan);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('RPLCHARVAL');
  PARAMETER(WRK.Replacement_chars);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // LCL.Characters to Replace = CND.Equal to Blank
  LCL.Characters_to_Replace = *BLANK;

  //?Translate Address line 1
  CASE;

  // IF PAR.Address Line 1(EDI) is Not Blank
  IF PAR.Address_Line_1EDI <> *BLANK;

  // Execute function EUS ScnRpl Char 601 Rq US.
  EXECUTE FUNCTION(EUS ScnRpl Char 601 Rq US) TYPE(EXCUSRSRC) ('PVKPUFR');
  PARAMETER(PAR.Address_Line_1EDI);
  PARAMETER(WRK.Spcl_chars_for_addr_flds);
  PARAMETER(LCL.Characters_to_Replace);
  PARAMETER(PAR.Address_Line_1EDI);
  {
   * Scan and Replace Special and Accent Characters
   *
   /free

   //Replace the scan characters in source data with replacement charcaters
   #OYQU1 = %xlate(#IYKU1 : #IYLU1 : #IYJU1) ;

   /end-free
   *
  }

  // Execute function EUS ScnRpl Char 601 Rq US.
  EXECUTE FUNCTION(EUS ScnRpl Char 601 Rq US) TYPE(EXCUSRSRC) ('PVKPUFR');
  PARAMETER(PAR.Address_Line_1EDI);
  PARAMETER(WRK.Accent_chars_to_scan);
  PARAMETER(WRK.Replacement_chars);
  PARAMETER(PAR.Address_Line_1EDI);
  {
   * Scan and Replace Special and Accent Characters
   *
   /free

   //Replace the scan characters in source data with replacement charcaters
   #OYQU1 = %xlate(#IYKU1 : #IYLU1 : #IYJU1) ;

   /end-free
   *
  }

  ENDIF;

  //?Translate Address line 2
  CASE;

  // IF PAR.Address Line 2(EDI) is Not Blank
  IF PAR.Address_Line_2EDI <> *BLANK;

  // Execute function EUS ScnRpl Char 601 Rq US.
  EXECUTE FUNCTION(EUS ScnRpl Char 601 Rq US) TYPE(EXCUSRSRC) ('PVKPUFR');
  PARAMETER(PAR.Address_Line_2EDI);
  PARAMETER(WRK.Spcl_chars_for_addr_flds);
  PARAMETER(LCL.Characters_to_Replace);
  PARAMETER(PAR.Address_Line_2EDI);
  {
   * Scan and Replace Special and Accent Characters
   *
   /free

   //Replace the scan characters in source data with replacement charcaters
   #OYQU1 = %xlate(#IYKU1 : #IYLU1 : #IYJU1) ;

   /end-free
   *
  }

  // Execute function EUS ScnRpl Char 601 Rq US.
  EXECUTE FUNCTION(EUS ScnRpl Char 601 Rq US) TYPE(EXCUSRSRC) ('PVKPUFR');
  PARAMETER(PAR.Address_Line_2EDI);
  PARAMETER(WRK.Accent_chars_to_scan);
  PARAMETER(WRK.Replacement_chars);
  PARAMETER(PAR.Address_Line_2EDI);
  {
   * Scan and Replace Special and Accent Characters
   *
   /free

   //Replace the scan characters in source data with replacement charcaters
   #OYQU1 = %xlate(#IYKU1 : #IYLU1 : #IYJU1) ;

   /end-free
   *
  }

  ENDIF;

  //?Translate Address line 3
  CASE;

  // IF PAR.Address Line 3(EDI) is Not Blank
  IF PAR.Address_Line_3EDI <> *BLANK;

  // Execute function EUS ScnRpl Char 601 Rq US.
  EXECUTE FUNCTION(EUS ScnRpl Char 601 Rq US) TYPE(EXCUSRSRC) ('PVKPUFR');
  PARAMETER(PAR.Address_Line_3EDI);
  PARAMETER(WRK.Spcl_chars_for_addr_flds);
  PARAMETER(LCL.Characters_to_Replace);
  PARAMETER(PAR.Address_Line_3EDI);
  {
   * Scan and Replace Special and Accent Characters
   *
   /free

   //Replace the scan characters in source data with replacement charcaters
   #OYQU1 = %xlate(#IYKU1 : #IYLU1 : #IYJU1) ;

   /end-free
   *
  }

  // Execute function EUS ScnRpl Char 601 Rq US.
  EXECUTE FUNCTION(EUS ScnRpl Char 601 Rq US) TYPE(EXCUSRSRC) ('PVKPUFR');
  PARAMETER(PAR.Address_Line_3EDI);
  PARAMETER(WRK.Accent_chars_to_scan);
  PARAMETER(WRK.Replacement_chars);
  PARAMETER(PAR.Address_Line_3EDI);
  {
   * Scan and Replace Special and Accent Characters
   *
   /free

   //Replace the scan characters in source data with replacement charcaters
   #OYQU1 = %xlate(#IYKU1 : #IYLU1 : #IYJU1) ;

   /end-free
   *
  }

  ENDIF;

  //?Translate Address line 4
  CASE;

  // IF PAR.Address Line 4(EDI) is Not Blank
  IF PAR.Address_Line_4EDI <> *BLANK;

  // Execute function EUS ScnRpl Char 601 Rq US.
  EXECUTE FUNCTION(EUS ScnRpl Char 601 Rq US) TYPE(EXCUSRSRC) ('PVKPUFR');
  PARAMETER(PAR.Address_Line_4EDI);
  PARAMETER(WRK.Spcl_chars_for_addr_flds);
  PARAMETER(LCL.Characters_to_Replace);
  PARAMETER(PAR.Address_Line_4EDI);
  {
   * Scan and Replace Special and Accent Characters
   *
   /free

   //Replace the scan characters in source data with replacement charcaters
   #OYQU1 = %xlate(#IYKU1 : #IYLU1 : #IYJU1) ;

   /end-free
   *
  }

  // Execute function EUS ScnRpl Char 601 Rq US.
  EXECUTE FUNCTION(EUS ScnRpl Char 601 Rq US) TYPE(EXCUSRSRC) ('PVKPUFR');
  PARAMETER(PAR.Address_Line_4EDI);
  PARAMETER(WRK.Accent_chars_to_scan);
  PARAMETER(WRK.Replacement_chars);
  PARAMETER(PAR.Address_Line_4EDI);
  {
   * Scan and Replace Special and Accent Characters
   *
   /free

   //Replace the scan characters in source data with replacement charcaters
   #OYQU1 = %xlate(#IYKU1 : #IYLU1 : #IYJU1) ;

   /end-free
   *
  }

  ENDIF;

 }

 EXECUTE FUNCTION(Crt Exp Shpmnt Inf DTL CR) TYPE(CRTOBJ) FILE(ECP135)           AC2209999;
 PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
 PARAMETER('CN');
 PARAMETER(LCL.ED_Consignee_Name);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(01);
 PARAMETER('DU');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.ED_Consignee_Addr_1);
 PARAMETER(LCL.ED_Consignee_Addr_2);
 PARAMETER(LCL.N401_CITY);
 PARAMETER(LCL.N402_STATE);
 PARAMETER(LCL.N403_POSTAL_CODE);
 PARAMETER(LCL.ISO_Alpha2_Code);
 ENDIF;

 ENDIF;

 //?Update OHE EDI 601 Action = 'Sent' for All Orders by Load/Booking #.
 CASE;

 // IF LCL.Upd OHE EDI 601 Action U is Yes
 IF LCL.Upd_OHE_EDI_601_Action_U = 'Y';

 // Call program Upd OHE EDI 601 Action XF.
 CALL PROGRAM(Upd OHE EDI 601 Action XF) ('PUXYXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.OHE_Booking_Number);

 ENDIF;

 ENDIF;

}


ENDIF;

