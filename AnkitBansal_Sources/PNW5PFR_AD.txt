// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNW5PFR
// ?Date: 14.08.2025 Time: 12:06:03
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// PAR.Ship To Customer = PAR.Ship to Customer Pass USR
PAR.Ship_To_Customer = PAR.Ship_to_Customer_Pass_USR;

// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

//?USER: Record selection processing

//?Select only Export
CASE;

// IF DB1.Export Status is Not Yes
IF DB1.Export_Status = *BLANK/'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Load Start Company
CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

// AND PAR.Company Number NE DB1.Company Number
AND PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Carrier if at least one is entered
CASE;

// IF PAR.Carrier Code Usr 1 is Entered
IF PAR.Carrier_Code_Usr_1 <> *BLANK;

// OR PAR.Carrier Code Usr 2 is Entered
OR PAR.Carrier_Code_Usr_2 <> *BLANK;

// OR PAR.Carrier Code Usr 3 is Entered
OR PAR.Carrier_Code_Usr_3 <> *BLANK;

// OR PAR.Carrier Code Usr 4 is Entered
OR PAR.Carrier_Code_Usr_4 <> *BLANK;

// OR PAR.Carrier Code Usr 5 is Entered
OR PAR.Carrier_Code_Usr_5 <> *BLANK;

// OR PAR.Carrier Code Usr 6 is Entered
OR PAR.Carrier_Code_Usr_6 <> *BLANK;

// OR PAR.Carrier Code Usr 7 is Entered
OR PAR.Carrier_Code_Usr_7 <> *BLANK;

// OR PAR.Carrier Code Usr 8 is Entered
OR PAR.Carrier_Code_Usr_8 <> *BLANK;

// OR PAR.Carrier Code Usr 9 is Entered
OR PAR.Carrier_Code_Usr_9 <> *BLANK;

// OR PAR.Carrier Code Usr 10 is Entered
OR PAR.Carrier_Code_Usr_10 <> *BLANK;

// WRK.Record Found USR = CND.Record Not Found
WRK.Record_Found_USR = 'N';

//?Test 1st Carrier code for match
CASE;

// IF PAR.Carrier Code Usr 1 EQ DB1.Carrier Code
IF PAR.Carrier_Code_Usr_1 = DB1.Carrier_Code;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 2nd Carrier code for match
CASE;

// IF PAR.Carrier Code Usr 2 EQ DB1.Carrier Code
IF PAR.Carrier_Code_Usr_2 = DB1.Carrier_Code;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 3rd Carrier code for match
CASE;

// IF PAR.Carrier Code Usr 3 EQ DB1.Carrier Code
IF PAR.Carrier_Code_Usr_3 = DB1.Carrier_Code;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 4th Carrier code for match
CASE;

// IF PAR.Carrier Code Usr 4 EQ DB1.Carrier Code
IF PAR.Carrier_Code_Usr_4 = DB1.Carrier_Code;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 5th Carrier code for match
CASE;

// IF PAR.Carrier Code Usr 5 EQ DB1.Carrier Code
IF PAR.Carrier_Code_Usr_5 = DB1.Carrier_Code;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 6rd Carrier code for match
CASE;

// IF PAR.Carrier Code Usr 6 EQ DB1.Carrier Code
IF PAR.Carrier_Code_Usr_6 = DB1.Carrier_Code;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 7th Carrier code for match
CASE;

// IF PAR.Carrier Code Usr 7 EQ DB1.Carrier Code
IF PAR.Carrier_Code_Usr_7 = DB1.Carrier_Code;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 8th Carrier code for match
CASE;

// IF PAR.Carrier Code Usr 8 EQ DB1.Carrier Code
IF PAR.Carrier_Code_Usr_8 = DB1.Carrier_Code;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 9th Carrier code for match
CASE;

// IF PAR.Carrier Code Usr 9 EQ DB1.Carrier Code
IF PAR.Carrier_Code_Usr_9 = DB1.Carrier_Code;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 10th Carrier code for match
CASE;

// IF PAR.Carrier Code Usr 10 EQ DB1.Carrier Code
IF PAR.Carrier_Code_Usr_10 = DB1.Carrier_Code;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?SEL: Entered Carrier if at least 1 match is found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select Ship Line if at least one is entered
CASE;

// IF PAR.Carrier Code Usr 11 is Entered
IF PAR.Carrier_Code_Usr_11 <> *BLANK;

// OR PAR.Carrier Code Usr 12 is Entered
OR PAR.Carrier_Code_Usr_12 <> *BLANK;

// OR PAR.Carrier Code Usr 13 is Entered
OR PAR.Carrier_Code_Usr_13 <> *BLANK;

// OR PAR.Carrier Code Usr 14 is Entered
OR PAR.Carrier_Code_Usr_14 <> *BLANK;

// OR PAR.Carrier Code Usr 15 is Entered
OR PAR.Carrier_Code_Usr_15 <> *BLANK;

//?Unconditionally move "///" to wrk.ship line to confound tests
// WRK.Shipping Line = CND.Skip Carrier
WRK.Shipping_Line = '///';

// WRK.Record Found USR = CND.Record Not Found
WRK.Record_Found_USR = 'N';

EXECUTE FUNCTION(RTV Shipping Line-OHE  RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2016789;
PARAMETER(DB1.Load_ID);
PARAMETER(WRK.Shipping_Line);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?** pass back the first record found with a shipping line
 CASE;

 // IF DB1.Shipping Line is not entered
 IF DB1.Shipping_Line = *BLANK;

 //?** pass back the first record found with a shipping line
 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?Test 1st Shipping Line for match
CASE;

// IF PAR.Carrier Code Usr 11 EQ WRK.Shipping Line
IF PAR.Carrier_Code_Usr_11 = WRK.Shipping_Line;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 2nd Shipping line for match
CASE;

// IF PAR.Carrier Code Usr 12 EQ WRK.Shipping Line
IF PAR.Carrier_Code_Usr_12 = WRK.Shipping_Line;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 3rd Shipping Line for match
CASE;

// IF PAR.Carrier Code Usr 13 EQ WRK.Shipping Line
IF PAR.Carrier_Code_Usr_13 = WRK.Shipping_Line;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 4th Shipping Line for match
CASE;

// IF PAR.Carrier Code Usr 14 EQ WRK.Shipping Line
IF PAR.Carrier_Code_Usr_14 = WRK.Shipping_Line;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Test 5th Shipping Line for match
CASE;

// IF PAR.Carrier Code Usr 15 EQ WRK.Shipping Line
IF PAR.Carrier_Code_Usr_15 = WRK.Shipping_Line;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?Skip records with no Shipping Line assigned
CASE;

// IF WRK.Shipping Line is not entered
IF WRK.Shipping_Line = *BLANK;

// WRK.Record Found USR = CND.Record Not Found
WRK.Record_Found_USR = 'N';

ENDIF;

//?SEL: Entered Shipping Line if at least 1 match is found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Country if at least one is entered               E00281
CASE;

// IF PGM.*Record selected is Not *NO
IF PGM.*Record_selected = 'Y'/*BLANK;

//?** Select country if at least one is entered          E00281
CASE;

// IF PAR.Country Code 1 usr is Entered
IF PAR.Country_Code_1_usr <> *BLANK;

// OR PAR.Country Code 2 usr is Entered
OR PAR.Country_Code_2_usr <> *BLANK;

// OR PAR.Country Code 3 usr is Entered
OR PAR.Country_Code_3_usr <> *BLANK;

// OR PAR.Country Code 4 usr is Entered
OR PAR.Country_Code_4_usr <> *BLANK;

// OR PAR.Country Code 5 usr is Entered
OR PAR.Country_Code_5_usr <> *BLANK;

// OR PAR.Country Code 6 usr is Entered
OR PAR.Country_Code_6_usr <> *BLANK;

// OR PAR.Country Code 7 usr is entered
OR PAR.Country_Code_7_usr <> *BLANK;

// OR PAR.Country Code 8 usr is Entered
OR PAR.Country_Code_8_usr <> *BLANK;

// OR PAR.Country Code 9 usr is Entered
OR PAR.Country_Code_9_usr <> *BLANK;

// OR PAR.Country Code 10 usr is Entered
OR PAR.Country_Code_10_usr <> *BLANK;

// WRK.Record Found USR = CND.Record Not Found
WRK.Record_Found_USR = 'N';

// WRK.Country Ord Found Sts USR = CND.no
WRK.Country_Ord_Found_Sts_USR = 'N';

//?SEL: 1st Country Code, if entered
CASE;

// IF PAR.Country Code 1 usr is Entered
IF PAR.Country_Code_1_usr <> *BLANK;

EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106458;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Country_Code_1_usr);
PARAMETER(WRK.Country_Ord_Found_Sts_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2106461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Country_Ord_Found_Sts_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Country Found
  CASE;

  // IF PAR.Country Code is Entered
  IF PAR.Country_Code <> *BLANK;

  CASE;

  // IF PAR.Country Code EQ DB1.Country Code
  IF PAR.Country_Code = DB1.Country_Code;

  // PAR.Country Ord Found Sts USR = CND.yes
  PAR.Country_Ord_Found_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF WRK.Country Ord Found Sts USR is yes
IF WRK.Country_Ord_Found_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

//?Test 2nd country code if no record for 1st country code
CASE;

// IF WRK.Record Found USR is Blanks
IF WRK.Record_Found_USR = *BLANK;

// OR WRK.Record Found USR is Record Not Found
OR WRK.Record_Found_USR = 'N';

//?SEL: 2nd Country Code, if entered
CASE;

// IF PAR.Country Code 2 usr is Entered
IF PAR.Country_Code_2_usr <> *BLANK;

EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106458;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Country_Code_2_usr);
PARAMETER(WRK.Country_Ord_Found_Sts_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2106461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Country_Ord_Found_Sts_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Country Found
  CASE;

  // IF PAR.Country Code is Entered
  IF PAR.Country_Code <> *BLANK;

  CASE;

  // IF PAR.Country Code EQ DB1.Country Code
  IF PAR.Country_Code = DB1.Country_Code;

  // PAR.Country Ord Found Sts USR = CND.yes
  PAR.Country_Ord_Found_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF WRK.Country Ord Found Sts USR is yes
IF WRK.Country_Ord_Found_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Test 3rd country code if record found is blanks
CASE;

// IF WRK.Record Found USR is Blanks
IF WRK.Record_Found_USR = *BLANK;

// OR WRK.Record Found USR is Record Not Found
OR WRK.Record_Found_USR = 'N';

//?SEL: 3rd Country Code, if entered
CASE;

// IF PAR.Country Code 3 usr is Entered
IF PAR.Country_Code_3_usr <> *BLANK;

EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106458;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Country_Code_3_usr);
PARAMETER(WRK.Country_Ord_Found_Sts_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2106461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Country_Ord_Found_Sts_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Country Found
  CASE;

  // IF PAR.Country Code is Entered
  IF PAR.Country_Code <> *BLANK;

  CASE;

  // IF PAR.Country Code EQ DB1.Country Code
  IF PAR.Country_Code = DB1.Country_Code;

  // PAR.Country Ord Found Sts USR = CND.yes
  PAR.Country_Ord_Found_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF WRK.Country Ord Found Sts USR is yes
IF WRK.Country_Ord_Found_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Test 4th country code if record found is blanks
CASE;

// IF WRK.Record Found USR is Blanks
IF WRK.Record_Found_USR = *BLANK;

// OR WRK.Record Found USR is Record Not Found
OR WRK.Record_Found_USR = 'N';

//?SEL: 4th Country Code, if entered
CASE;

// IF PAR.Country Code 4 usr is Entered
IF PAR.Country_Code_4_usr <> *BLANK;

EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106458;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Country_Code_4_usr);
PARAMETER(WRK.Country_Ord_Found_Sts_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2106461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Country_Ord_Found_Sts_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Country Found
  CASE;

  // IF PAR.Country Code is Entered
  IF PAR.Country_Code <> *BLANK;

  CASE;

  // IF PAR.Country Code EQ DB1.Country Code
  IF PAR.Country_Code = DB1.Country_Code;

  // PAR.Country Ord Found Sts USR = CND.yes
  PAR.Country_Ord_Found_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF WRK.Country Ord Found Sts USR is yes
IF WRK.Country_Ord_Found_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Test 5th country code if record found is blanks
CASE;

// IF WRK.Record Found USR is Blanks
IF WRK.Record_Found_USR = *BLANK;

// OR WRK.Record Found USR is Record Not Found
OR WRK.Record_Found_USR = 'N';

//?SEL: 5th Country Code, if entered
CASE;

// IF PAR.Country Code 5 usr is Entered
IF PAR.Country_Code_5_usr <> *BLANK;

EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106458;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Country_Code_5_usr);
PARAMETER(WRK.Country_Ord_Found_Sts_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2106461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Country_Ord_Found_Sts_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Country Found
  CASE;

  // IF PAR.Country Code is Entered
  IF PAR.Country_Code <> *BLANK;

  CASE;

  // IF PAR.Country Code EQ DB1.Country Code
  IF PAR.Country_Code = DB1.Country_Code;

  // PAR.Country Ord Found Sts USR = CND.yes
  PAR.Country_Ord_Found_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF WRK.Country Ord Found Sts USR is yes
IF WRK.Country_Ord_Found_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Test 6th country code if record found is blanks
CASE;

// IF WRK.Record Found USR is Blanks
IF WRK.Record_Found_USR = *BLANK;

// OR WRK.Record Found USR is Record Not Found
OR WRK.Record_Found_USR = 'N';

CASE;

// IF PAR.Country Code 6 usr is Entered
IF PAR.Country_Code_6_usr <> *BLANK;

EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106458;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Country_Code_6_usr);
PARAMETER(WRK.Country_Ord_Found_Sts_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2106461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Country_Ord_Found_Sts_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Country Found
  CASE;

  // IF PAR.Country Code is Entered
  IF PAR.Country_Code <> *BLANK;

  CASE;

  // IF PAR.Country Code EQ DB1.Country Code
  IF PAR.Country_Code = DB1.Country_Code;

  // PAR.Country Ord Found Sts USR = CND.yes
  PAR.Country_Ord_Found_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF WRK.Country Ord Found Sts USR is yes
IF WRK.Country_Ord_Found_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Test 7th country code if record found is blanks
CASE;

// IF WRK.Record Found USR is Blanks
IF WRK.Record_Found_USR = *BLANK;

// OR WRK.Record Found USR is Record Not Found
OR WRK.Record_Found_USR = 'N';

CASE;

// IF PAR.Country Code 7 usr is entered
IF PAR.Country_Code_7_usr <> *BLANK;

EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106458;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Country_Code_7_usr);
PARAMETER(WRK.Country_Ord_Found_Sts_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2106461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Country_Ord_Found_Sts_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Country Found
  CASE;

  // IF PAR.Country Code is Entered
  IF PAR.Country_Code <> *BLANK;

  CASE;

  // IF PAR.Country Code EQ DB1.Country Code
  IF PAR.Country_Code = DB1.Country_Code;

  // PAR.Country Ord Found Sts USR = CND.yes
  PAR.Country_Ord_Found_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF WRK.Country Ord Found Sts USR is yes
IF WRK.Country_Ord_Found_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Test 8th country code if record found is blanks
CASE;

// IF WRK.Record Found USR is Blanks
IF WRK.Record_Found_USR = *BLANK;

// OR WRK.Record Found USR is Record Not Found
OR WRK.Record_Found_USR = 'N';

CASE;

// IF PAR.Country Code 8 usr is Entered
IF PAR.Country_Code_8_usr <> *BLANK;

EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106458;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Country_Code_4_usr);
PARAMETER(WRK.Country_Ord_Found_Sts_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2106461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Country_Ord_Found_Sts_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Country Found
  CASE;

  // IF PAR.Country Code is Entered
  IF PAR.Country_Code <> *BLANK;

  CASE;

  // IF PAR.Country Code EQ DB1.Country Code
  IF PAR.Country_Code = DB1.Country_Code;

  // PAR.Country Ord Found Sts USR = CND.yes
  PAR.Country_Ord_Found_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF WRK.Country Ord Found Sts USR is yes
IF WRK.Country_Ord_Found_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Test 9th country code if record found is blanks
CASE;

// IF WRK.Record Found USR is Blanks
IF WRK.Record_Found_USR = *BLANK;

// OR WRK.Record Found USR is Record Not Found
OR WRK.Record_Found_USR = 'N';

CASE;

// IF PAR.Country Code 9 usr is Entered
IF PAR.Country_Code_9_usr <> *BLANK;

EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106458;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Country_Code_9_usr);
PARAMETER(WRK.Country_Ord_Found_Sts_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2106461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Country_Ord_Found_Sts_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Country Found
  CASE;

  // IF PAR.Country Code is Entered
  IF PAR.Country_Code <> *BLANK;

  CASE;

  // IF PAR.Country Code EQ DB1.Country Code
  IF PAR.Country_Code = DB1.Country_Code;

  // PAR.Country Ord Found Sts USR = CND.yes
  PAR.Country_Ord_Found_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF WRK.Country Ord Found Sts USR is yes
IF WRK.Country_Ord_Found_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Test 10th country code if no record for 1st country code
CASE;

// IF WRK.Record Found USR is Blanks
IF WRK.Record_Found_USR = *BLANK;

// OR WRK.Record Found USR is Record Not Found
OR WRK.Record_Found_USR = 'N';

CASE;

// IF PAR.Country Code 10 usr is Entered
IF PAR.Country_Code_10_usr <> *BLANK;

EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106458;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Country_Code_10_usr);
PARAMETER(WRK.Country_Ord_Found_Sts_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order for Cntry   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2106461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Country_Ord_Found_Sts_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Country Found
  CASE;

  // IF PAR.Country Code is Entered
  IF PAR.Country_Code <> *BLANK;

  CASE;

  // IF PAR.Country Code EQ DB1.Country Code
  IF PAR.Country_Code = DB1.Country_Code;

  // PAR.Country Ord Found Sts USR = CND.yes
  PAR.Country_Ord_Found_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF WRK.Country Ord Found Sts USR is yes
IF WRK.Country_Ord_Found_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Skip if Country Code is not found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Select by Load Id
CASE;

// IF PAR.Load ID is GT Zero
IF PAR.Load_ID > *ZERO;

// AND PAR.Load ID NE DB1.Load ID
AND PAR.Load_ID <> DB1.Load_ID;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select by Load Id
// IF DB1.Load ID is Blank
IF DB1.Load_ID = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Type of Customer - Ship To or Bill To            E002587
CASE;

// IF PAR.USR Include all Products NE WRK.Blank for 3          USR
IF PAR.USR_Include_all_Products <> WRK.Blank_for_3_USR;

//?Only test if this record has not been excluded prior to this
CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

//?Only test if this record has not been excluded prior to this
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Record Selected       USR = CND.blank
LCL.Record_Selected_USR = *BLANK;

//?If Bill To requested then select associated Ship To's as well
CASE;

// IF PAR.USR Include all Products is Bill To
IF PAR.USR_Include_all_Products = 'B';

//?Select Bill To customer
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(VAL ARCust on a Load   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2068466;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(DB1.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.A/R Customer Number EQ PAR.A/R Customer Number
 IF DB1.AR_Customer_Number = PAR.AR_Customer_Number;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// LCL.Record Selected       USR = CND.yes
LCL.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Record Selected       USR = CND.no
LCL.Record_Selected_USR = 'N';

ENDIF;

//?Select Bill To customer
// IF *OTHERWISE
IF *OTHERWISE;

//?* If no cust# passed in, select all for date range
// LCL.Record Selected       USR = CND.yes
LCL.Record_Selected_USR = 'Y';

ENDIF;

//?If Bill To requested then select associated Ship To's as well
// IF PAR.USR Include all Products is Ship To
IF PAR.USR_Include_all_Products = 'S';

//?Select Ship To customer
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

//?If Ship To requested then only select that ship to's records
EXECUTE FUNCTION(RTV Ordrs/Chk Ship Cst RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1502717;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Ship To Customer EQ PAR.Ship To Customer
 IF DB1.Ship_To_Customer = PAR.Ship_To_Customer;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// LCL.Record Selected       USR = CND.yes
LCL.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Record Selected       USR = CND.no
LCL.Record_Selected_USR = 'N';

ENDIF;

//?Select Ship To customer
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Record Selected       USR = CND.yes
LCL.Record_Selected_USR = 'Y';

ENDIF;

ENDIF;

CASE;

// IF LCL.Record Selected       USR is yes
IF LCL.Record_Selected_USR = 'Y';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?SEL: Up to 9 Warehouses                               E004105
CASE;

// IF PGM.*Record selected is Not *NO
IF PGM.*Record_selected = 'Y'/*BLANK;

//?See if at least one warehouse code was entered
CASE;

// IF PAR.USR Warehouse Code is Warehouse Code not Blank
IF PAR.USR_Warehouse_Code <> *BLANK;

// OR PAR.USR CDE Parm 1 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_1 <> *BLANK;

// OR PAR.USR CDE Parm 2 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_2 <> *BLANK;

// OR PAR.USR CDE Parm 3 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_3 <> *BLANK;

// OR PAR.USR CDE Parm 4 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_4 <> *BLANK;

// OR PAR.USR CDE Parm 5 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_5 <> *BLANK;

// OR PAR.USR CDE Parm 6 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_6 <> *BLANK;

// OR PAR.USR CDE Parm 7 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_7 <> *BLANK;

// OR PAR.USR CDE Parm 8 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_8 <> *BLANK;

//?* If warehouse requested, check each warehouse code
// LCL.Select Status = CND.no
LCL.Select_Status = 'N';

//?Whse 1-Select if warehouse code entered
CASE;

// IF PAR.USR Warehouse Code is Warehouse Code not Blank
IF PAR.USR_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(SEL Order for Whse    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106445;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(LCL.Select_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Select_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF DB1.Warehouse Code EQ PAR.Warehouse Code
  IF DB1.Warehouse_Code = PAR.Warehouse_Code;

  // PAR.Select Status = CND.yes
  PAR.Select_Status = 'Y';

  QUIT;

  ENDIF;

 }

}


ENDIF;

//?Whse 2-Select if warehouse code entered
CASE;

// IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_1 <> *BLANK;

CASE;

// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

EXECUTE FUNCTION(SEL Order for Whse    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106445;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.USR_CDE_Parm_1);
PARAMETER(LCL.Select_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Select_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF DB1.Warehouse Code EQ PAR.Warehouse Code
  IF DB1.Warehouse_Code = PAR.Warehouse_Code;

  // PAR.Select Status = CND.yes
  PAR.Select_Status = 'Y';

  QUIT;

  ENDIF;

 }

}


ENDIF;

ENDIF;

//?Whse 3-Select if warehouse code entered
CASE;

// IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_2 <> *BLANK;

CASE;

// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

EXECUTE FUNCTION(SEL Order for Whse    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106445;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.USR_CDE_Parm_2);
PARAMETER(LCL.Select_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Select_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF DB1.Warehouse Code EQ PAR.Warehouse Code
  IF DB1.Warehouse_Code = PAR.Warehouse_Code;

  // PAR.Select Status = CND.yes
  PAR.Select_Status = 'Y';

  QUIT;

  ENDIF;

 }

}


ENDIF;

ENDIF;

//?Whse 4-Select if warehouse code entered
CASE;

// IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_3 <> *BLANK;

CASE;

// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

EXECUTE FUNCTION(SEL Order for Whse    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106445;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.USR_CDE_Parm_3);
PARAMETER(LCL.Select_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Select_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF DB1.Warehouse Code EQ PAR.Warehouse Code
  IF DB1.Warehouse_Code = PAR.Warehouse_Code;

  // PAR.Select Status = CND.yes
  PAR.Select_Status = 'Y';

  QUIT;

  ENDIF;

 }

}


ENDIF;

ENDIF;

//?Whse 5-Select if warehouse code entered
CASE;

// IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_4 <> *BLANK;

CASE;

// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

EXECUTE FUNCTION(SEL Order for Whse    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106445;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.USR_CDE_Parm_4);
PARAMETER(LCL.Select_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Select_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF DB1.Warehouse Code EQ PAR.Warehouse Code
  IF DB1.Warehouse_Code = PAR.Warehouse_Code;

  // PAR.Select Status = CND.yes
  PAR.Select_Status = 'Y';

  QUIT;

  ENDIF;

 }

}


ENDIF;

ENDIF;

//?Whse 6-Select if warehouse code entered
CASE;

// IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_5 <> *BLANK;

CASE;

// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

EXECUTE FUNCTION(SEL Order for Whse    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106445;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.USR_CDE_Parm_5);
PARAMETER(LCL.Select_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Select_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF DB1.Warehouse Code EQ PAR.Warehouse Code
  IF DB1.Warehouse_Code = PAR.Warehouse_Code;

  // PAR.Select Status = CND.yes
  PAR.Select_Status = 'Y';

  QUIT;

  ENDIF;

 }

}


ENDIF;

ENDIF;

//?Whse 7-Select if warehouse code entered
CASE;

// IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_6 <> *BLANK;

CASE;

// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

EXECUTE FUNCTION(SEL Order for Whse    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106445;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.USR_CDE_Parm_6);
PARAMETER(LCL.Select_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Select_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF DB1.Warehouse Code EQ PAR.Warehouse Code
  IF DB1.Warehouse_Code = PAR.Warehouse_Code;

  // PAR.Select Status = CND.yes
  PAR.Select_Status = 'Y';

  QUIT;

  ENDIF;

 }

}


ENDIF;

ENDIF;

//?Whse 8-Select if warehouse code entered
CASE;

// IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_7 <> *BLANK;

CASE;

// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

EXECUTE FUNCTION(SEL Order for Whse    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106445;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.USR_CDE_Parm_7);
PARAMETER(LCL.Select_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Select_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF DB1.Warehouse Code EQ PAR.Warehouse Code
  IF DB1.Warehouse_Code = PAR.Warehouse_Code;

  // PAR.Select Status = CND.yes
  PAR.Select_Status = 'Y';

  QUIT;

  ENDIF;

 }

}


ENDIF;

ENDIF;

//?Whse 9-Select if warehouse code entered       01/17/20 DN S16050
CASE;

// IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_8 <> *BLANK;

CASE;

// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

EXECUTE FUNCTION(SEL Order for Whse    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2106445;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.USR_CDE_Parm_8);
PARAMETER(LCL.Select_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Select_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF DB1.Warehouse Code EQ PAR.Warehouse Code
  IF DB1.Warehouse_Code = PAR.Warehouse_Code;

  // PAR.Select Status = CND.yes
  PAR.Select_Status = 'Y';

  QUIT;

  ENDIF;

 }

}


ENDIF;

ENDIF;

//?If Select Status is no then don't select the record
CASE;

// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Select Load Haul Type, if entered
CASE;

// IF PAR.Reason Code 1 PASS    USR is Entered
IF PAR.Reason_Code_1_PASS_USR <> *BLANK;

EXECUTE FUNCTION(VAL LdHaul for Load Id RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2017932;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Reason_Code_1_PASS_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?If Collect Y/N = No, select only Prepaid, else select all
CASE;

// IF PAR.Status - Y or N is no
IF PAR.Status_Y_or_N = 'N';

CASE;

// IF DB1.Shipping Method is Collect
IF DB1.Shipping_Method = 'CR'/'CT';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//? 07/19/19 DN R15161-Replaced Booking Number w/ OHE Booking Number.
//?Select Booking Number, if entered
CASE;

// IF PAR.OHE Booking Number is Entered
IF PAR.OHE_Booking_Number <> *BLANK;

EXECUTE FUNCTION(RTV Booking# by Load   RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2032251;
PARAMETER(*ZERO);
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.OHE_Booking_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?Pass back Record Found if match
 CASE;

 // IF PAR.OHE Booking Number EQ DB1.OHE Booking Number
 IF PAR.OHE_Booking_Number = DB1.OHE_Booking_Number;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Broker if entered, val broker customer, if entered  E001704
CASE;

// IF PAR.Broker Code 1 Usr is Entered
IF PAR.Broker_Code_1_Usr <> *BLANK;

EXECUTE FUNCTION(VAL Broker Exists     RT) TYPE(RTVOBJ) FILE(POC5REP)           AC2032975;
PARAMETER(PAR.Broker_Code_1_Usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(VAL Broker for ShipTo  RT) TYPE(RTVOBJ) FILE(OMHOREP)          AC2031619;
PARAMETER(PAR.Broker_Code_1_Usr);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Ship To Customer = CON.*ZERO
LCL.Ship_To_Customer = *ZERO;

EXECUTE FUNCTION(RTV Ship To,SlsRte -Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1669723;
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Sales_Route_Code);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(VAL Broker for ShipTo  RT) TYPE(RTVOBJ) FILE(OMHOREP)          AC2031619;
PARAMETER(PAR.Broker_Code_1_Usr);
PARAMETER(LCL.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Select Customer Type Code                             E002395
CASE;

// IF PAR.Trans Type 1 PASS     USR NE WRK.Blank for 3          USR
IF PAR.Trans_Type_1_PASS_USR <> WRK.Blank_for_3_USR;

//?Only test if this record has not been excluded prior to this
CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

//?Only test if this record has not been excluded prior to this
// IF *OTHERWISE
IF *OTHERWISE;

//?Test type code for each customer order on the load, flag if at least
//?one customer matches. If only one customer is requested, test only that
//?customer and flag if type code matches
// LCL.Record Selected       USR = CND.blank
LCL.Record_Selected_USR = *BLANK;

EXECUTE FUNCTION(RTV Type Cd by Ord     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2061178;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Trans_Type_1_PASS_USR);
PARAMETER(LCL.Record_Selected_USR);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Ship To Customer is not equal to zero
 IF PAR.Ship_To_Customer <> *ZERO;

 //?Validate type code for selected customer
 CASE;

 // IF DB1.Ship To Customer EQ PAR.Ship To Customer
 IF DB1.Ship_To_Customer = PAR.Ship_To_Customer;

 EXECUTE FUNCTION(RTV Type Code by Cust  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1625687;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Type Code NE PAR.Trans Type 1 PASS     USR
 IF LCL.Type_Code <> PAR.Trans_Type_1_PASS_USR;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

 // IF PAR.Ship To Customer is equal to zero
 IF PAR.Ship_To_Customer = *ZERO;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 EXECUTE FUNCTION(Rtv Cust&CType-LdOrd  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2061218;
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Trans_Type_1_PASS_USR);
 PARAMETER(PAR.Record_Selected_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Type Code by Cust  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1625687;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Type_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Type Code EQ PAR.Trans Type 1 PASS     USR
  IF PAR.Type_Code = PAR.Trans_Type_1_PASS_USR;

  // PAR.Record Selected       USR = CND.yes
  PAR.Record_Selected_USR = 'Y';

  QUIT;

  ENDIF;

 }

 //?Flag if at least 1 order on the load has matching type code
 CASE;

 // IF PAR.Record Selected       USR is yes
 IF PAR.Record_Selected_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Record Selected       USR is no
IF LCL.Record_Selected_USR = 'N';

// OR LCL.Record Selected       USR is blank
OR LCL.Record_Selected_USR = *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF LCL.Record Selected       USR is yes
IF LCL.Record_Selected_USR = 'Y';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?SEL: Warehouse Type  (FR or FZ)                       E002587
CASE;

// IF PGM.*Record selected is Not *NO
IF PGM.*Record_selected = 'Y'/*BLANK;

//?SEL: Warehouse Type, if entered                       E002587
CASE;

// IF PAR.Trans Type 2 PASS     USR NE WRK.Blank for 3          USR
IF PAR.Trans_Type_2_PASS_USR <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(DB1.Ship_From_Warehouse);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Type is Equal blank
IF LCL.Warehouse_Type = *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF LCL.Warehouse Type NE PAR.Trans Type 2 PASS     USR
IF LCL.Warehouse_Type <> PAR.Trans_Type_2_PASS_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process top of page

// TOP.Scheduled Ship Date = PAR.Scheduled Ship Date
TOP_Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

// TOP.Scheduled Ship Date USR = PAR.Scheduled Ship Date USR
TOP_Scheduled_Ship_Date_USR = PAR.Scheduled_Ship_Date_USR;

// TOP.Load ID = PAR.Load ID
TOP_Load_ID = PAR.Load_ID;

//?** Up to 10 carriers, 10 countries, 5 shipping lines  P000737
//?** Print multiple country codes
// TOP.Country Code 1 usr = PAR.Country Code 1 usr
TOP_Country_Code_1_usr = PAR.Country_Code_1_usr;

// TOP.Country Code 2 usr = PAR.Country Code 2 usr
TOP_Country_Code_2_usr = PAR.Country_Code_2_usr;

// TOP.Country Code 3 usr = PAR.Country Code 3 usr
TOP_Country_Code_3_usr = PAR.Country_Code_3_usr;

// TOP.Country Code 4 usr = PAR.Country Code 4 usr
TOP_Country_Code_4_usr = PAR.Country_Code_4_usr;

// TOP.Country Code 5 usr = PAR.Country Code 5 usr
TOP_Country_Code_5_usr = PAR.Country_Code_5_usr;

// TOP.Country Code 6 usr = PAR.Country Code 6 usr
TOP_Country_Code_6_usr = PAR.Country_Code_6_usr;

// TOP.Country Code 7 usr = PAR.Country Code 7 usr
TOP_Country_Code_7_usr = PAR.Country_Code_7_usr;

// TOP.Country Code 8 usr = PAR.Country Code 8 usr
TOP_Country_Code_8_usr = PAR.Country_Code_8_usr;

// TOP.Country Code 9 usr = PAR.Country Code 9 usr
TOP_Country_Code_9_usr = PAR.Country_Code_9_usr;

// TOP.Country Code 10 usr = PAR.Country Code 10 usr
TOP_Country_Code_10_usr = PAR.Country_Code_10_usr;

//?** Print multiple Carrier Codes
// TOP.Carrier Code Usr 1 = PAR.Carrier Code Usr 1
TOP_Carrier_Code_Usr_1 = PAR.Carrier_Code_Usr_1;

// TOP.Carrier Code Usr 2 = PAR.Carrier Code Usr 2
TOP_Carrier_Code_Usr_2 = PAR.Carrier_Code_Usr_2;

// TOP.Carrier Code Usr 3 = PAR.Carrier Code Usr 3
TOP_Carrier_Code_Usr_3 = PAR.Carrier_Code_Usr_3;

// TOP.Carrier Code Usr 4 = PAR.Carrier Code Usr 4
TOP_Carrier_Code_Usr_4 = PAR.Carrier_Code_Usr_4;

// TOP.Carrier Code Usr 5 = PAR.Carrier Code Usr 5
TOP_Carrier_Code_Usr_5 = PAR.Carrier_Code_Usr_5;

// TOP.Carrier Code Usr 6 = PAR.Carrier Code Usr 6
TOP_Carrier_Code_Usr_6 = PAR.Carrier_Code_Usr_6;

// TOP.Carrier Code Usr 7 = PAR.Carrier Code Usr 7
TOP_Carrier_Code_Usr_7 = PAR.Carrier_Code_Usr_7;

// TOP.Carrier Code Usr 8 = PAR.Carrier Code Usr 8
TOP_Carrier_Code_Usr_8 = PAR.Carrier_Code_Usr_8;

// TOP.Carrier Code Usr 9 = PAR.Carrier Code Usr 9
TOP_Carrier_Code_Usr_9 = PAR.Carrier_Code_Usr_9;

// TOP.Carrier Code Usr 10 = PAR.Carrier Code Usr 10
TOP_Carrier_Code_Usr_10 = PAR.Carrier_Code_Usr_10;

//?** Print multiple Shipping Lines
// TOP.Carrier Code Usr 11 = PAR.Carrier Code Usr 11
TOP_Carrier_Code_Usr_11 = PAR.Carrier_Code_Usr_11;

// TOP.Carrier Code Usr 12 = PAR.Carrier Code Usr 12
TOP_Carrier_Code_Usr_12 = PAR.Carrier_Code_Usr_12;

// TOP.Carrier Code Usr 13 = PAR.Carrier Code Usr 13
TOP_Carrier_Code_Usr_13 = PAR.Carrier_Code_Usr_13;

// TOP.Carrier Code Usr 14 = PAR.Carrier Code Usr 14
TOP_Carrier_Code_Usr_14 = PAR.Carrier_Code_Usr_14;

// TOP.Carrier Code Usr 15 = PAR.Carrier Code Usr 15
TOP_Carrier_Code_Usr_15 = PAR.Carrier_Code_Usr_15;

// TOP.Warehouse Code = PAR.USR Warehouse Code
TOP_Warehouse_Code = PAR.USR_Warehouse_Code;

MOVE *ALL (To: TOP From: PAR);

//?** Include Collect Y/N
// TOP.Text 3 Length USR = Condition name of PAR.Status - Y or N
TOP_Text_3_Length_USR = RTVCND(PAR.Status_Y_or_N);

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

//?07/19/19 DN R15161-Replaced Booking Number w/ OHE Booking Number.
// TOP.OHE Booking Number = PAR.OHE Booking Number
TOP_OHE_Booking_Number = PAR.OHE_Booking_Number;

// TOP.Broker Code = PAR.Broker Code 1 Usr
TOP_Broker_Code = PAR.Broker_Code_1_Usr;

//?broker name                            E001704
CASE;

// IF TOP.Broker Code is Entered
IF TOP_Broker_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Broker Name       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1676428;
PARAMETER(TOP_Broker_Code);
PARAMETER(TOP_Broker_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF TOP.Broker Code is Not entered
IF TOP_Broker_Code = *BLANK;

// TOP.Broker Name = CON.*ALL
TOP_Broker_Name = *ALL;

ENDIF;

ENDIF;

//?Load start company
CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Load start company
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Name = CON.*All
TOP_Company_Name = *All;

ENDIF;

//?Load Customer - A/R or Ship To, based on customer type  E002587
// TOP.Ship To Customer = PAR.Ship To Customer
TOP_Ship_To_Customer = PAR.Ship_To_Customer;

CASE;

// IF TOP.Ship To Customer is equal to zero
IF TOP_Ship_To_Customer = *ZERO;

// TOP.Customer Name = CON.*All
TOP_Customer_Name = *All;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Name Only          RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1493704;
PARAMETER(TOP_Ship_To_Customer);
PARAMETER(TOP_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?Type of Customer - Bill To or Ship To                 E002587
CASE;

// IF PAR.USR Include all Products NE WRK.USR Blank Field
IF PAR.USR_Include_all_Products <> WRK.USR_Blank_Field;

CASE;

// IF PAR.USR Include all Products is Bill To
IF PAR.USR_Include_all_Products = 'B';

// TOP.Text USR = CON.Bill To
TOP_Text_USR = 'Bill To';

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Text USR = CON.Ship To
TOP_Text_USR = 'Ship To';

ENDIF;

//?Type of Customer - Bill To or Ship To                 E002587
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Text USR = CND.NOT ENTERED
TOP_Text_USR = *BLANK;

ENDIF;

//?Load Haul Type
CASE;

// IF PAR.Reason Code 1 PASS    USR is Entered
IF PAR.Reason_Code_1_PASS_USR <> *BLANK;

// TOP.OHE Load Haul Type = PAR.Reason Code 1 PASS    USR
TOP_OHE_Load_Haul_Type = PAR.Reason_Code_1_PASS_USR;

// TOP.Description 1 usr = Condition name of TOP.OHE Load Haul Type
TOP_Description_1_usr = RTVCND(TOP_OHE_Load_Haul_Type);

//?Load Haul Type
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Description 1 usr = CON.*ALL
TOP_Description_1_usr = *ALL;

ENDIF;

//?Type Code, ES, EX, or ??                              E002395
CASE;

// IF PAR.Trans Type 1 PASS     USR NE WRK.Blank for 3          USR
IF PAR.Trans_Type_1_PASS_USR <> WRK.Blank_for_3_USR;

// TOP.Type Code = PAR.Trans Type 1 PASS     USR
TOP_Type_Code = PAR.Trans_Type_1_PASS_USR;

// PAR.Type Code = TOP.Type Code
PAR.Type_Code = TOP_Type_Code;

EXECUTE FUNCTION(RTV Type Code Desc.    RT) TYPE(RTVOBJ) FILE(CAAJREP)          AC1249965;
PARAMETER(TOP_Type_Code);
PARAMETER(TOP_Description_USR);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF TOP.Type Code is EQ Blank
IF TOP_Type_Code = *BLANK;

// TOP.Description USR = CON.*ALL
TOP_Description_USR = *ALL;

ENDIF;

ENDIF;

//?Warehouse Type - Frozen or Chilled                    E002587
CASE;

// IF PAR.Trans Type 2 PASS     USR NE WRK.Blank for 3          USR
IF PAR.Trans_Type_2_PASS_USR <> WRK.Blank_for_3_USR;

// TOP.Warehouse Type = PAR.Trans Type 2 PASS     USR
TOP_Warehouse_Type = PAR.Trans_Type_2_PASS_USR;

CASE;

// IF TOP.Warehouse Type is Frozen
IF TOP_Warehouse_Type = 'FZ';

// TOP.Text USR 7 = CON.Frozen
TOP_Text_USR_7 = 'Frozen';

// WRK.Text USR 7 = TOP.Text USR 7
WRK.Text_USR_7 = TOP_Text_USR_7;

// IF TOP.Warehouse Type is Fresh
IF TOP_Warehouse_Type = 'FR';

// TOP.Text USR 7 = CON.Chilled
TOP_Text_USR_7 = 'Chilled';

// WRK.Text USR 7 = TOP.Text USR 7
WRK.Text_USR_7 = TOP_Text_USR_7;

ENDIF;

//?Warehouse Type - Frozen or Chilled                    E002587
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Text USR 7 = CON.FZ & CH
TOP_Text_USR_7 = 'FZ & CH';

// WRK.Text USR 7 = TOP.Text USR 7
WRK.Text_USR_7 = TOP_Text_USR_7;

ENDIF;

//?08/15/19 DN R15161-Commented Out & Replaced with Screen Constant.
//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Scheduled_Ship_Date;
// SUPPRESSED PRINT Scheduled Ship Date header format

ENDIF;

CASE;

IF NEW Carrier_Code;
// SUPPRESSED PRINT Carrier Code header format

ENDIF;

//?USER: On print of detail format

// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.USR_Customer_Name_Short);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// CUR.USR 15 Text           USR = Condition name of CUR.Shipping Method
CUR.USR_15_Text_USR = RTVCND(CUR.Shipping_Method);

// WRK.Count USR = WRK.Count USR + CON.1
WRK.Count_USR = WRK.Count_USR + 1;

//?11/22/22 DN DO4595-Get ITN #.
EXECUTE FUNCTION(Rtv EDI 824 AES ITN #  RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2210528;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.OHE_EDI_824_AES_ITN_#);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Get 1st Available ITN #.
 CASE;

 // IF DB1.OHE EDI 824 AES ITN # is Entered
 IF DB1.OHE_EDI_824_AES_ITN_# <> *BLANK;

 //?ITN # will be the same for all Orders on a given Load.
 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Exp Ord Dtl w/Wgts PO
//?** print order and load detail, country code is not passed,
//?** it is retrieved in the print object
// LCL.Country Code          USR = CON.*BLANK
LCL.Country_Code_USR = *BLANK;

EXECUTE FUNCTION(PRT Exp Ord Dtl w/Wgts PO) TYPE(PRTOBJ);
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.Country_Code_USR);
PARAMETER(PAR.Type_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Get 1st Available ITN #.
 CASE;

 // IF DB1.OHE EDI 824 AES ITN # is Entered
 IF DB1.OHE_EDI_824_AES_ITN_# <> *BLANK;

 //?ITN # will be the same for all Orders on a given Load.
 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?USER: Print required level totals

// SUPPRESSED PRINT Carrier Code totals format

// SUPPRESSED PRINT Scheduled Ship Date totals format

//?USER: On print of final totals format

// CUR.Number of Orders = WRK.Count USR
CUR.Number_of_Orders = WRK.Count_USR;

