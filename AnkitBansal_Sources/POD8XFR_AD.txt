// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POD8XFR
// ?Date: 14.08.2025 Time: 03:36:50
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Prc Sales History Exp RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1597661;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Process Data record

 //?Record Selection processing
 CASE;

 // IF DB1.Invoice Suffix is IN, DM, or CM
 IF DB1.Invoice_Suffix = 'CM'/'DM'/'IN';

 //?Break in Order Seq
 CASE;

 // IF DB1.Order Sequence Number NE LCL.Order Sequence Number
 IF DB1.Order_Sequence_Number <> LCL.Order_Sequence_Number;

 // OR DB1.Order Secondary Line Seq NE LCL.Order Secondary Line Seq
 OR DB1.Order_Secondary_Line_Seq <> LCL.Order_Secondary_Line_Seq;

 CASE;

 // IF LCL.First Time Flag is NO
 IF LCL.First_Time_Flag = 'N';

 //?Update Sales history with status and total
 EXECUTE FUNCTION(CHG Exp Total Amt     CH) TYPE(CHGOBJ) FILE(OMHSTPP)           AC1598497;
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(LCL.Order_Secondary_Line_Seq);
 PARAMETER('Y');
 PARAMETER(LCL.Total_Amount);
 {
  //?USER: Processing after Data read

  // DB1.Data Mart Process Sts = CND.no
  DB1.Data_Mart_Process_Sts = 'N';

 }

 ENDIF;

 // LCL.Company Number = DB1.Company Number
 LCL.Company_Number = DB1.Company_Number;

 // LCL.Order Number = DB1.Order Number
 LCL.Order_Number = DB1.Order_Number;

 // LCL.Order Sequence Number = DB1.Order Sequence Number
 LCL.Order_Sequence_Number = DB1.Order_Sequence_Number;

 // LCL.Order Secondary Line Seq = DB1.Order Secondary Line Seq
 LCL.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

 // LCL.Total Amount = CON.*ZERO
 LCL.Total_Amount = 0;

 // LCL.Actual Shipped Date = DB1.Actual Shipped Date
 LCL.Actual_Shipped_Date = DB1.Actual_Shipped_Date;

 //?If CM/DM, get Attach to Order's Actual Shipped Date
 CASE;

 // IF DB1.Invoice Suffix is CM or DM
 IF DB1.Invoice_Suffix = 'CM'/'DM';

 // OR DB1.Attach to Order Number is Not equal to zeros
 OR DB1.Attach_to_Order_Number <> *ZERO;

 //?12/08/06 PKD Use PAR.Shipping Company Number
 EXECUTE FUNCTION(Rtv Actual Ship Date  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1444831;
 PARAMETER(DB1.Shipping_Company_Number);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(NLL.Ship_To_Name);
 PARAMETER(NLL.Ship_To_City);
 PARAMETER(NLL.Ship_To_State_Code);
 PARAMETER(LCL.Actual_Shipped_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Actual Shipped Date is not entered
 IF LCL.Actual_Shipped_Date = *ZERO;

 // LCL.Actual Shipped Date = DB1.Actual Shipped Date
 LCL.Actual_Shipped_Date = DB1.Actual_Shipped_Date;

 ENDIF;

 ENDIF;

 //?Get Order's Expense Calculator Values
 EXECUTE FUNCTION(Rtv Sales Expns Actv  RT) TYPE(RTVOBJ) FILE(POAGREP)           AC1597697;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(LCL.Brokerage_Fee_Pct);
 PARAMETER(LCL.Payment_Interest_Pct);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Freezer_Stg_per_Unit);
 PARAMETER(LCL.Freezer_Storage_Cost_Unit);
 PARAMETER(LCL.Freezer_Free_Days);
 PARAMETER(LCL.Pallet_Usage_Cost_CWT);
 PARAMETER(LCL.Terms_Code);
 PARAMETER(DB1.Palletize);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(LCL.Std_Daily_Interest_Cost);
 PARAMETER(LCL.Days_Early_or_Late_USR);
 PARAMETER(LCL.USR_Brokerage_Fee_Pct_Ctr);
 PARAMETER(LCL.Freezer_Storage_Unit_2);
 PARAMETER(LCL.Freezer_Stg_Cost_Unit_2);
 PARAMETER(DB1.Affect_Sales_Pnds_Status);
 PARAMETER(DB1.Shipped_Item_Code);
 PARAMETER(LCL.Brokerage_Fee_Cost_CWT);
 PARAMETER(DB1.Export_Country_Code);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Sales Expense Code is Brokerage Fee %
  IF DB1.Sales_Expense_Code = 'BRK%1';

  EXECUTE FUNCTION(Rtv Sales Exp Brk Fee RT) TYPE(RTVOBJ) FILE(POAHREP)           AC1597667;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.A_R_Customer);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Brokerage_Fee_Pct);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // IF DB1.Sales Expense Code is Freezer Storage Cost
  IF DB1.Sales_Expense_Code = 'FRZ#1';

  // PAR.Freezer Stg per Unit = CND.Hundred Weight
  PAR.Freezer_Stg_per_Unit = 'CWT';

  EXECUTE FUNCTION(Rtv Freezer Expense   RT) TYPE(RTVOBJ) FILE(POAIREP)           AC1597683;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('CWT');
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Freezer_Storage_Cost_Unit);
  PARAMETER(WRK.Freezer_Free_Days);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // PAR.Freezer Storage Unit 2 = CND.Day
  PAR.Freezer_Storage_Unit_2 = 'DAY';

  EXECUTE FUNCTION(Rtv Freezer Expense   RT) TYPE(RTVOBJ) FILE(POAIREP)           AC1597683;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('DAY');
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Freezer_Stg_Cost_Unit_2);
  PARAMETER(PAR.Freezer_Free_Days);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // IF DB1.Sales Expense Code is Payment Interest %
  IF DB1.Sales_Expense_Code = 'PAY%1';

  EXECUTE FUNCTION(Rtv Payment Intrst %  RT) TYPE(RTVOBJ) FILE(POAKCPP)           AC1597680;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.A_R_Customer);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Payment_Interest_Pct);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // IF DB1.Sales Expense Code is Pallet Usage Cost
  IF DB1.Sales_Expense_Code = 'PLT#1';

  //?Pallet usage
  CASE;

  // IF PAR.Palletize is yes
  IF PAR.Palletize = 'Y';

  // AND PAR.Affect Sales Pnds Status is yes
  AND PAR.Affect_Sales_Pnds_Status = 'Y';

  EXECUTE FUNCTION(Rtv Pallet Usage      RT) TYPE(RTVOBJ) FILE(POAJREP)           AC1597674;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Pallet_Usage_Cost_CWT);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?Pallet usage
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pallet Usage Cost/CWT = CND.equal to 0
  PAR.Pallet_Usage_Cost_CWT = 0;

  ENDIF;

  // IF DB1.Sales Expense Code is Brokerage Fee by Item
  IF DB1.Sales_Expense_Code = 'BRK#1';

  EXECUTE FUNCTION(Rtv Sales Exp Brkr Itm RT) TYPE(RTVOBJ) FILE(POAMCPP)          AC1598862;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Brokerage_Fee_Cost_CWT);
  {
   //?USER: Processing if Data record not found

   // PAR.Brokerage Fee Cost/CWT = CON.*ZERO
   PAR.Brokerage_Fee_Cost_CWT = *ZERO;

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // IF DB1.Sales Expense Code is Brokerage Fee by Country
  IF DB1.Sales_Expense_Code = 'BRKX1';

  EXECUTE FUNCTION(Rtv Sales Exp Brkr Ctr RT) TYPE(RTVOBJ) FILE(POAOCPP)          AC1599967;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Export_Country_Code);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.USR_Brokerage_Fee_Pct_Ctr);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

 }

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 //?Calculate & Accum the costs for this item
 //?DSO Payment Interest Percent
 DO;

 // Compute:Paym intrst cost
 LCL.Sales_Expense_Amount = DB1.Billing_Detail_Gross_Dol * ( LCL.Payment_Interest_Pct
 / 100 ) 'H';

 CASE;

 // IF LCL.Sales Expense Amount NE WRK.ZERO
 IF LCL.Sales_Expense_Amount <> WRK.ZERO;

 CASE;

 // IF LCL.Sales Expense Amount LT WRK.ZERO
 IF LCL.Sales_Expense_Amount < WRK.ZERO;

 // LCL.Sales Expense Amount = LCL.Sales Expense Amount * CON.-1 *
 LCL.Sales_Expense_Amount = LCL.Sales_Expense_Amount * -1;

 ENDIF;

 EXECUTE FUNCTION(Crt Sales History Exp CR) TYPE(CRTOBJ) FILE(POALCPP)           AC1597711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('PAY%1');
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(LCL.Sales_Expense_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(*ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // LCL.Total Amount = LCL.Total Amount + LCL.Sales Expense Amount
 LCL.Total_Amount = LCL.Total_Amount + LCL.Sales_Expense_Amount;

 ENDIF;

 ENDDO;

 //?Brokerage Fee %
 DO;

 // Compute:broker fee amt
 LCL.Sales_Expense_Amount = DB1.FOB_Gross_Amount * ( LCL.Brokerage_Fee_Pct / 100 ) 'H';

 CASE;

 // IF LCL.Sales Expense Amount NE WRK.ZERO
 IF LCL.Sales_Expense_Amount <> WRK.ZERO;

 CASE;

 // IF LCL.Sales Expense Amount LT WRK.ZERO
 IF LCL.Sales_Expense_Amount < WRK.ZERO;

 // LCL.Sales Expense Amount = LCL.Sales Expense Amount * CON.-1 *
 LCL.Sales_Expense_Amount = LCL.Sales_Expense_Amount * -1;

 ENDIF;

 EXECUTE FUNCTION(Crt Sales History Exp CR) TYPE(CRTOBJ) FILE(POALCPP)           AC1597711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('BRK%1');
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(LCL.Sales_Expense_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.SHE_Unused_Sts_1);
 PARAMETER(LCL.SHE_Unused_Sts_2);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(*ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // LCL.Total Amount = LCL.Total Amount + LCL.Sales Expense Amount
 LCL.Total_Amount = LCL.Total_Amount + LCL.Sales_Expense_Amount;

 ENDIF;

 ENDDO;

 //?Pallet Usage Cost
 DO;

 // Compute: pallet usage
 LCL.Sales_Expense_Amount = LCL.Pallet_Usage_Cost_CWT * ( DB1.Weight_Billed / 100 ) 'H';

 CASE;

 // IF LCL.Sales Expense Amount NE WRK.ZERO
 IF LCL.Sales_Expense_Amount <> WRK.ZERO;

 CASE;

 // IF LCL.Sales Expense Amount LT WRK.ZERO
 IF LCL.Sales_Expense_Amount < WRK.ZERO;

 // LCL.Sales Expense Amount = LCL.Sales Expense Amount * CON.-1 *
 LCL.Sales_Expense_Amount = LCL.Sales_Expense_Amount * -1;

 ENDIF;

 EXECUTE FUNCTION(Crt Sales History Exp CR) TYPE(CRTOBJ) FILE(POALCPP)           AC1597711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('PLT#1');
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(LCL.Sales_Expense_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.SHE_Unused_Sts_1);
 PARAMETER(LCL.SHE_Unused_Sts_2);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(*ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // LCL.Total Amount = LCL.Total Amount + LCL.Sales Expense Amount
 LCL.Total_Amount = LCL.Total_Amount + LCL.Sales_Expense_Amount;

 ENDIF;

 ENDDO;

 //?Freezer Cost
 DO;

 CASE;

 // IF LCL.Freezer Storage Cost/Unit is Not equal to Zero
 IF LCL.Freezer_Storage_Cost_Unit <> 0;

 // LCL.Sales Expense Amount = CON.*ZERO
 LCL.Sales_Expense_Amount = *ZERO;

 //?12/08/06 PKD User Shipping Company Number
 EXECUTE FUNCTION(Rtv to Calc Frzr Cost RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1597714;
 PARAMETER(DB1.Shipping_Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Sales_Expense_Amount);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(LCL.Freezer_Storage_Cost_Unit);
 PARAMETER(LCL.Freezer_Stg_per_Unit);
 PARAMETER(LCL.Freezer_Storage_Unit_2);
 PARAMETER(LCL.Freezer_Free_Days);
 PARAMETER(LCL.Freezer_Stg_Cost_Unit_2);
 {
  //?USER: Process Data record

  //?There are 2 types of Freezer Expenses:
  //?   If the unit on the FRZ#1 expense code for the warehouse is DAY --
  //?      the expense is calculated by taking the
  //?       CWT * freezer cost * the number of days in the freezer.
  //?   If the unit on the FRZ#1 expense code for the warehouse is CWT --
  //?      the expense is calculated by taking the
  //?       CWT times the freezer cost.
  //?Calc Freezer Expense if Unit is DAY on the Warehouse Freezer Exp code
  CASE;

  // IF PAR.Freezer Storage Unit 2 is Day
  IF PAR.Freezer_Storage_Unit_2 = 'DAY';

  // AND PAR.Freezer Stg Cost/Unit 2 NE WRK.ZERO
  AND PAR.Freezer_Stg_Cost_Unit_2 <> WRK.ZERO;

  //?This expense is takes the CWT times the number of days in the freezer
  // LCL.Days in Freezer       USR = PAR.Actual Shipped Date - DB1.Production Date *DAYS
  LCL.Days_in_Freezer_USR = DURATION(PAR.Actual_Shipped_Date DB1.Production_Date 'DY'
  1111111 'NONE' 'N' 1);

  // LCL.Days in Freezer       USR = LCL.Days in Freezer       USR - PAR.Freezer Free Days
  LCL.Days_in_Freezer_USR = LCL.Days_in_Freezer_USR - PAR.Freezer_Free_Days;

  CASE;

  // IF LCL.Days in Freezer       USR is GT Zero
  IF LCL.Days_in_Freezer_USR > 0;

  // Compute/Accum: Frzr p/day
  PAR.Sales_Expense_Amount = ( ( LCL.Days_in_Freezer_USR * PAR.Freezer_Stg_Cost_Unit_2 ) * (
  DB1.Case_Weight / 100 ) + ) + PAR.Sales_Expense_Amount;

  ENDIF;

  ENDIF;

  //?Calc freezer cost if unit is CWT.This is a one time expense per CWT
  CASE;

  // IF PAR.Freezer Stg per Unit is Hundred Weight
  IF PAR.Freezer_Stg_per_Unit = 'CWT';

  // AND PAR.Freezer Storage Cost/Unit is Not equal to Zero
  AND PAR.Freezer_Storage_Cost_Unit <> 0;

  // Compute/Accum: Frzr p/cwt
  PAR.Sales_Expense_Amount = ( PAR.Freezer_Storage_Cost_Unit * ( DB1.Case_Weight / 100 ) )
  + PAR.Sales_Expense_Amount;

  ENDIF;

 }

 CASE;

 // IF LCL.Sales Expense Amount NE WRK.ZERO
 IF LCL.Sales_Expense_Amount <> WRK.ZERO;

 EXECUTE FUNCTION(Crt Sales History Exp CR) TYPE(CRTOBJ) FILE(POALCPP)           AC1597711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('FRZ#1');
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(LCL.Sales_Expense_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.SHE_Unused_Sts_1);
 PARAMETER(LCL.SHE_Unused_Sts_2);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(*ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // LCL.Total Amount = LCL.Total Amount + LCL.Sales Expense Amount
 LCL.Total_Amount = LCL.Total_Amount + LCL.Sales_Expense_Amount;

 ENDIF;

 ENDIF;

 ENDDO;

 //?Brokerage Fee per Item and CWT
 DO;

 // Compute:broker fee /item
 LCL.Sales_Expense_Amount = LCL.Brokerage_Fee_Cost_CWT * ( DB1.Weight_Billed / 100 ) 'H';

 CASE;

 // IF LCL.Sales Expense Amount NE WRK.ZERO
 IF LCL.Sales_Expense_Amount <> WRK.ZERO;

 CASE;

 // IF LCL.Sales Expense Amount LT WRK.ZERO
 IF LCL.Sales_Expense_Amount < WRK.ZERO;

 // LCL.Sales Expense Amount = LCL.Sales Expense Amount * CON.-1 *
 LCL.Sales_Expense_Amount = LCL.Sales_Expense_Amount * -1;

 ENDIF;

 EXECUTE FUNCTION(Crt Sales History Exp CR) TYPE(CRTOBJ) FILE(POALCPP)           AC1597711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('BRK#1');
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(LCL.Sales_Expense_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.SHE_Unused_Sts_1);
 PARAMETER(LCL.SHE_Unused_Sts_2);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(*ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // LCL.Total Amount = LCL.Total Amount + LCL.Sales Expense Amount
 LCL.Total_Amount = LCL.Total_Amount + LCL.Sales_Expense_Amount;

 ENDIF;

 ENDDO;

 //?Brokerage Fee per Export Country and CWT
 DO;

 // Compute:broker fee /ctry
 LCL.Sales_Expense_Amount = DB1.FOB_Gross_Amount * ( LCL.USR_Brokerage_Fee_Pct_Ctr / 100 )
 'H';

 CASE;

 // IF LCL.Sales Expense Amount NE WRK.ZERO
 IF LCL.Sales_Expense_Amount <> WRK.ZERO;

 CASE;

 // IF LCL.Sales Expense Amount LT WRK.ZERO
 IF LCL.Sales_Expense_Amount < WRK.ZERO;

 // LCL.Sales Expense Amount = LCL.Sales Expense Amount * CON.-1 *
 LCL.Sales_Expense_Amount = LCL.Sales_Expense_Amount * -1;

 ENDIF;

 EXECUTE FUNCTION(Crt Sales History Exp CR) TYPE(CRTOBJ) FILE(POALCPP)           AC1597711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('BRKX1');
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(LCL.Sales_Expense_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.SHE_Unused_Sts_1);
 PARAMETER(LCL.SHE_Unused_Sts_2);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(*ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // LCL.Total Amount = LCL.Total Amount + LCL.Sales Expense Amount
 LCL.Total_Amount = LCL.Total_Amount + LCL.Sales_Expense_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?USER: Exit processing

 //?Update Last History Rcd
 CASE;

 // IF LCL.First Time Flag is NO
 IF LCL.First_Time_Flag = 'N';

 //?Update Sales history with status and total
 EXECUTE FUNCTION(CHG Exp Total Amt     CH) TYPE(CHGOBJ) FILE(OMHSTPP)           AC1598497;
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(LCL.Order_Secondary_Line_Seq);
 PARAMETER('Y');
 PARAMETER(LCL.Total_Amount);
 {
  //?USER: Processing after Data read

  // DB1.Data Mart Process Sts = CND.no
  DB1.Data_Mart_Process_Sts = 'N';

 }

 ENDIF;

}


