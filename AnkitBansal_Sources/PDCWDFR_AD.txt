// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDCWDFR
// ?Date: 14.08.2025 Time: 03:27:54
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(WRK.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CON.9999
PGM.*Scan_limit = 9999;

//?***** Change Flag and Comments
DO;

//?** 12/12/2013 RMC E2885
//?** Added cie capacity code selection
//?** 03/15/2013 RMC E2513
//?** Schedule missed-- added print on sched, var<>0
//?** 04/14/2009 slm FP1054
//?** PRODUCTION WAREHOUSE, for the print report
//?** 02/10/2009 slm FP1054
//?** PRODUCTION WAREHOUSE, and 132 screen
//?** 2/15/2009 Additional changes for new options
//?** check for who the user is, and allow adjustments
//?** 11/21/2008 slm e00243
//?** Add new prompt screen and for selection of belly & trim reports
//?** screen - pass to print program  (f21)
//?** 04/14/2008 LJB FP1235
//?** Add option to email the production schedule to the prompt
//?** screen - pass to print program  (f21)
//?RMC PFS019 8/31/06 print new prod schedule pla9pfr
//?RMC PFS019 9/14/06 put pgm name in prt sched prompt
//?LJB 09/01/2006 L60831A Pass company# & whse to Product Availability
ENDDO;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?11/02/09 PKD Allow Sched as Order -renamed to App WHS Restrict
SET CURSOR;

CASE;

// IF LCL.User Code Model is Production Scheduling
IF LCL.User_Code_Model = 'PORKSCHE';

// OR LCL.User Code Model is IS
OR LCL.User_Code_Model = 'ISBGUTI';

// OR LCL.User Profile Code is Production Sched 2
OR LCL.User_Profile_Code = 'PORKSCHE2';

//?only allow these user to have use the adjustment processing
// WRK.Allow Adjustments Usr = CND.yes
WRK.Allow_Adjustments_Usr = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Allow Adjustments Usr = CND.no
WRK.Allow_Adjustments_Usr = 'N';

ENDIF;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// WRK.Consumed Item Code = CTL.Consumed Item Code
WRK.Consumed_Item_Code = CTL.Consumed_Item_Code;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

// WRK.Item Category Code USR = CTL.Item Category Code 6
WRK.Item_Category_Code_USR = CTL.Item_Primal_Sched_Report;

//?USER: Initialize subfile record from DBF record

SET CURSOR;

//?First time only
CASE;

// IF CTL.Base Frozen    USR is blank
IF CTL.Base_Frozen_USR = *BLANK;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(RCD.Company_Number);
PARAMETER('FRZTRMPROD');
PARAMETER(PAR.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Base Frozen    USR = PAR.System Value Alpha
CTL.Base_Frozen_USR = PAR.System_Value_Alpha;

EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Production_Date);
PARAMETER(WRK.Accounting_Period_Code);
PARAMETER(PAR.Day_of_Week);
PARAMETER(WRK.Week_Number);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Day of Week is Friday
IF PAR.Day_of_Week = '6';

// WRK.Date Sat USR = CTL.Production Date + CON.1 *DAYS
WRK.Date_Sat_USR = DATEINCR(CTL.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(RCD.Company_Number);
PARAMETER(WRK.Date_Sat_USR);
PARAMETER(PAR.Kill_Day_Status);
PARAMETER(PAR.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Prd Sch InfoPSPRIMRT) TYPE(RTVOBJ) FILE(CABZREP)           AC2048231;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(RCD.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(RCD.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(RCD.Item_Primal_Sched_Report);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(RCD.PS_Export_Domestic);
PARAMETER(RCD.PS_Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Verify if the Primal Group Report (item category 06 = co/item
CASE;

// IF CTL.Item Category Code 6 NE WRK.Blank for 3          USR
IF CTL.Item_Primal_Sched_Report <> WRK.Blank_for_3_USR;

//?Verify if the Primal Group Report (item category 06 = co/item
CASE;

// IF CTL.Item Category Code 6 EQ RCD.Item Category Code 6
IF CTL.Item_Primal_Sched_Report = RCD.Item_Primal_Sched_Report;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Verify if the Primal Group Report (item category 06 = co/item
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Verify if the Primal Group Report (item category 06 = co/item
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv CIE Capacity Qty  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC2079750;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.CIE_Capacity_Code);
PARAMETER(NLL.PS_Max_Qty_per_Day);
{
 //?USER: Initialize routine

 //?E2885 RMC 12/9/13 new capacity field in CIE, get qty from PS Prod Cap file
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.CIE Capacity Code is Entered
 IF DB1.CIE_Capacity_Code <> *BLANK;

 EXECUTE FUNCTION(RTV PS Prod Cap Max   RT) TYPE(RTVOBJ) FILE(PBBFREP)           AC2079751;
 PARAMETER(DB1.CIE_Capacity_Code);
 PARAMETER(PAR.PS_Max_Qty_per_Day);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.CIE Capacity Code = DB1.CIE Capacity Code
 PAR.CIE_Capacity_Code = DB1.CIE_Capacity_Code;

 ENDIF;

}


//?CIE Capacity code selection
CASE;

// IF CTL.CIE Capacity Code is Not Entered
IF CTL.CIE_Capacity_Code = *BLANK;

// OR CTL.CIE Capacity Code EQ RCD.CIE Capacity Code
OR CTL.CIE_Capacity_Code = RCD.CIE_Capacity_Code;

//?CIE Capacity code selection
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Print on Schedule selection
CASE;

// IF CTL.PS Print On Schedule is yes
IF CTL.PS_Print_On_Schedule = 'Y';

//?If item is marked as print on schedule "N"o then don't display
CASE;

// IF RCD.PS Print On Schedule is yes
IF RCD.PS_Print_On_Schedule = 'Y';

//?If item is marked as print on schedule "N"o then don't display
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Print on Schedule selection
// IF CTL.PS Print On Schedule is no
IF CTL.PS_Print_On_Schedule = 'N';

//?If item is marked do not print on schedule select N only
CASE;

// IF RCD.PS Print On Schedule is no
IF RCD.PS_Print_On_Schedule = 'N';

//?If item is marked do not print on schedule select N only
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Print on Schedule selection
// IF *OTHERWISE
IF *OTHERWISE;

//?Ctl print on schedul is no value,  so do not check
ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?If day of week is friday & no prod/no kill add sat ords to total
CASE;

// IF PAR.Day of Week is Friday
IF PAR.Day_of_Week = '6';

CASE;

// IF PAR.Kill Day Status is no
IF PAR.Kill_Day_Status = 'N';

// AND PAR.Production Day Status is no
AND PAR.Production_Day_Status = 'N';

EXECUTE FUNCTION(RTV Order Qty & Wght 2 RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1495225;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Quantity_Ordered_USR);
PARAMETER(WRK.Weight_Ordered);
PARAMETER(CTL.Production_Date);
PARAMETER(WRK.Date_Sat_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Scheduled Ship Date GT PAR.Date Sat USR
 IF DB1.Scheduled_Ship_Date > PAR.Date_Sat_USR;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Quantity Ordered = PAR.Quantity Ordered + DB1.Quantity Ordered
 PAR.Quantity_Ordered = PAR.Quantity_Ordered + DB1.Quantity_Ordered;

 // PAR.Weight Ordered = PAR.Weight Ordered + DB1.Weight Ordered
 PAR.Weight_Ordered = PAR.Weight_Ordered + DB1.Weight_Ordered;

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Order Qty & Weight RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1482221;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Quantity_Ordered_USR);
PARAMETER(WRK.Weight_Ordered);
PARAMETER(CTL.Production_Date);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Quantity Ordered = PAR.Quantity Ordered + DB1.Quantity Ordered
 PAR.Quantity_Ordered = PAR.Quantity_Ordered + DB1.Quantity_Ordered;

 // PAR.Weight Ordered = PAR.Weight Ordered + DB1.Weight Ordered
 PAR.Weight_Ordered = PAR.Weight_Ordered + DB1.Weight_Ordered;

 ENDIF;

}


ENDIF;

//?If day of week is friday & no prod/no kill add sat ords to total
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Order Qty & Weight RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1482221;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Quantity_Ordered_USR);
PARAMETER(WRK.Weight_Ordered);
PARAMETER(CTL.Production_Date);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Quantity Ordered = PAR.Quantity Ordered + DB1.Quantity Ordered
 PAR.Quantity_Ordered = PAR.Quantity_Ordered + DB1.Quantity_Ordered;

 // PAR.Weight Ordered = PAR.Weight Ordered + DB1.Weight Ordered
 PAR.Weight_Ordered = PAR.Weight_Ordered + DB1.Weight_Ordered;

 ENDIF;

}


ENDIF;

// Weight Scheduled
RCD.Weight_Sched_Prod_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )                  +
- DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

// Pieces Scheduled
RCD.Pieces_Scheduled = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )                       +
- DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

//?Quantity Production
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// AND PAR.Pieces Per Bag is GT Zero
AND PAR.Pieces_Per_Bag > *ZERO;

// AND PAR.Bags Per Unit is GT Zero
AND PAR.Bags_Per_Unit > *ZERO;

// Quantity Production
RCD.Quantity_Production_USR = RCD.Pieces_Scheduled / ( PAR.Pieces_Per_Bag                          +
* PAR.Bags_Per_Unit );

//?Quantity Production
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Unit Weight is Greater than zero
IF PAR.Unit_Weight > *ZERO;

// Quantity Production
RCD.Quantity_Production_USR = RCD.Weight_Sched_Prod_USR / PAR.Unit_Weight;

ENDIF;

ENDIF;

//?Add Actual Inventory, Actual Production and Position PPS073
EXECUTE FUNCTION(RTV On Hand Qty       RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1517668;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Quantity_Inventory_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.On Hand U/M1 Summary = PAR.On Hand U/M1 Summary + DB1.On Hand U/M1 Summary
 PAR.On_Hand_UOM1_Summary = PAR.On_Hand_UOM1_Summary + DB1.On_Hand_UOM1_Summary;

}


EXECUTE FUNCTION(Rtv Actual Production RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1377968;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(WRK.Production_Weight_USR);
PARAMETER(RCD.Actual_Production_6_1_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Production Weight USR = PAR.Production Weight USR + DB1.Transaction Weight
 PAR.Production_Weight_USR = PAR.Production_Weight_USR + DB1.Transaction_Weight;

 // PAR.Production Quantity USR = PAR.Production Quantity USR + DB1.Transaction Quantity
 PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + DB1.Transaction_Quantity;

}


//?If sched prod GE Actual then subtract Actual from Sched, else zero
CASE;

// IF RCD.Quantity Production USR GE RCD.Actual Production 6.1 USR
IF RCD.Quantity_Production_USR >= RCD.Actual_Production_6_1_USR;

// PAR.Quantity Production USR = RCD.Quantity Production USR - RCD.Actual Productio
PAR.Quantity_Production_USR = RCD.Quantity_Production_USR                                          +
- RCD.Actual_Production_6_1_USR;

//?If sched prod GE Actual then subtract Actual from Sched, else zero
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Quantity Production USR = CON.*ZERO
PAR.Quantity_Production_USR = *ZERO;

ENDIF;

//?FP1054 Hide on Screen
//?If production and order quantity are zero then don't display item
CASE;

// IF RCD.Quantity Production USR is EQ Zero
IF RCD.Quantity_Production_USR = *ZERO;

// AND RCD.Quantity Ordered USR is EQ Zero
AND RCD.Quantity_Ordered_USR = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Consumed (Get the first Consumed Item Number)
DO;

// Call program Rtv First Consumed Itm XF.
CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Consumed_Item_Code);

CASE;

// IF RCD.Consumed Item Code EQ RCD.Item Code
IF RCD.Consumed_Item_Code = RCD.Item_Code;

// RCD.Consumed Item Code = CON.*ZERO
RCD.Consumed_Item_Code = *ZERO;

ENDIF;

CASE;

// IF CTL.Consumed Item Code is Entered
IF CTL.Consumed_Item_Code <> *ZERO;

CASE;

// IF CTL.Consumed Item Code EQ RCD.Consumed Item Code
IF CTL.Consumed_Item_Code = RCD.Consumed_Item_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDDO;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?Consumed Break reload subfile
DO;

CASE;

// IF CTL.Consumed Item Code NE WRK.Consumed Item Code
IF CTL.Consumed_Item_Code <> WRK.Consumed_Item_Code;

// WRK.Consumed Item Code = CTL.Consumed Item Code
WRK.Consumed_Item_Code = CTL.Consumed_Item_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDDO;

//?F4 = Capacity Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.CIE Capacity Code
IF PGM.*Cursor_field = CTL.CIE_Capacity_Code;

// Call program Sel PS Prod Capacity   SL.
CALL PROGRAM(Sel PS Prod Capacity   SL) ('PBK0SRR');
PARAMETER(CTL.CIE_Capacity_Code);

ENDIF;

ENDIF;

//?Make Sheet or Various  or daily production schedule
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

CASE;

// IF CTL.Production Type is Plan/Schedule
IF CTL.Production_Type = 'P'/'S';

// AND CTL.Production Date is entered
AND CTL.Production_Date <> *ZERO;

// PAR.Production Date USR = CTL.Production Date
PAR.Production_Date_USR = CTL.Production_Date;

// PAR.Warehouse Code PASS   USR = CTL.PS Production Warehouse
PAR.Warehouse_Code_PASS_USR = CTL.PS_Production_Warehouse;

// LCL.PRT Night Queue Run Sts = CND.no
LCL.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// Call program Prt Prd Schedule Rpts PV.
CALL PROGRAM(Prt Prd Schedule Rpts PV) ('PMAQPVR');
PARAMETER(PAR.Production_Date_USR);
PARAMETER(PAR.Warehouse_Code_PASS_USR);
PARAMETER(PAR.Display_Prt_Opt_Pmt_USR);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Production_Type);
PARAMETER('Production Items');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(LCL.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(1);

// IF *OTHERWISE
IF *OTHERWISE;

//?Error Messages
CASE;

// IF CTL.Production Type EQ WRK.BLANK
IF CTL.Production_Type = WRK.BLANK;

// Send error message - 'Production Type is required.'
ERROR(USR2023);
MSGPARM(CTL.Production_Type);

//?Error Messages
// IF CTL.Production Date is not entered
IF CTL.Production_Date = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(CTL.Production_Date);

ENDIF;

ENDIF;

ENDIF;

//?Work With Production Adjustments only on specific users
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// AND WRK.Allow Adjustments Usr is yes
AND WRK.Allow_Adjustments_Usr = 'Y';

// Call program WW Prd Adjustments    DF.
CALL PROGRAM(WW Prd Adjustments    DF) ('PDTIDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?WW Production Order Hold
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program WW Prod Order Hold     DF.
CALL PROGRAM(WW Prod Order Hold     DF) ('PDVLDFR');

ENDIF;

//?WW PA
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

//?** Pass company# & whse to Product Availability   09/01/06 LJB
// Call program WW Product Availablty DF.
CALL PROGRAM(WW Product Availablty DF) ('PDFPDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

//?Refresh
CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Refresh
CASE;

// IF CTL.Item Category Code 6 NE WRK.Item Category Code USR
IF CTL.Item_Primal_Sched_Report <> WRK.Item_Category_Code_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.Item Category Code USR = CTL.Item Category Code 6
WRK.Item_Category_Code_USR = CTL.Item_Primal_Sched_Report;

//?Refresh
// IF CTL.CIE Capacity Code NE LCL.CIE Capacity Code
IF CTL.CIE_Capacity_Code <> LCL.CIE_Capacity_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.CIE Capacity Code = CTL.CIE Capacity Code
LCL.CIE_Capacity_Code = CTL.CIE_Capacity_Code;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(RCD.Company_Number);
PARAMETER(WRK.Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Display Detail   only for is programmers
CASE;

// IF RCD.*SFLSEL is *5
IF RCD.*SFLSEL = '5';

CASE;

// IF JOB.*USER is All IS DEV/PRD & Prktest
IF JOB.*USER = 'ALICEB'/'ISALICEB'/'PRKTEST'/'ISPURVAP'/'ISPPATE'/'ISROSEM'/'ISRCENT'              +
/'ISSMASO'/'ISSUSANM'/'ISLBUSE'/'ISLARAB'/'ISWGAUS'/'ISELOUC';

// Call program Dsp Production Detail DR.
CALL PROGRAM(Dsp Production Detail DR) ('PDDHD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Production_Type);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);

ENDIF;

ENDIF;

//?Edit Comments   Option 7
CASE;

// IF RCD.*SFLSEL is *7
IF RCD.*SFLSEL = '7';

// Call program Zzz Prod Sched Comm   EF.
CALL PROGRAM(Zzz Prod Sched Comm   EF) ('PDFPEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Production_Type);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.Name);
PARAMETER(RCD.Item_Description);

ENDIF;

//?Display Orders  Option 8
CASE;

// IF RCD.*SFLSEL is *8
IF RCD.*SFLSEL = '8';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(WRK.Name);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.*Initial_call);
PARAMETER(RCD.Warehouse_Type);

ENDIF;

//?Create Production Adjustment  Option 9  only on adjustment users
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// AND WRK.Allow Adjustments Usr is yes
AND WRK.Allow_Adjustments_Usr = 'Y';

// Call program Edt Adjustment        ER.
CALL PROGRAM(Edt Adjustment        ER) ('PDTPE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.PS_Adjustment_Type);
PARAMETER(WRK.PS_Adjustment_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Remove this FP1054
//?Add Option 10 & 11 - FP1054
//?WW Inv Alloc  - option 10
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program WW Inv Allocation     DF.
CALL PROGRAM(WW Inv Allocation     DF) ('POP5DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(*ZERO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?WW Order sched  option 11
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

CASE;

// IF RCD.Consumed Item Code is Not Entered
IF RCD.Consumed_Item_Code = *ZERO;

// LCL.Consumed Item Code = RCD.Item Code
LCL.Consumed_Item_Code = RCD.Item_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Consumed Item Code = RCD.Consumed Item Code
LCL.Consumed_Item_Code = RCD.Consumed_Item_Code;

ENDIF;

// Call program WW OrdPrdSch Edit     DF.
CALL PROGRAM(WW OrdPrdSch Edit     DF) ('POQJDFR');
PARAMETER(LCL.Consumed_Item_Code);
PARAMETER(CTL.PS_Production_Warehouse);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Message_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

SET CURSOR;

