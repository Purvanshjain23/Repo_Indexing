// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDSGPFR
// ?Date: 14.08.2025 Time: 12:04:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

//?USER: Record selection processing

EXECUTE FUNCTION(Rtv ItmTyp/ItmLv/QltLv RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1327678;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(WRK.Quality_Level);
PARAMETER(WRK.Item_Level);
PARAMETER(WRK.Item_Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select item type code if entered
CASE;

// IF PAR.Item Type Code is Blank
IF PAR.Item_Type_Code = *BLANK;

//?Select item type code if entered
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Item Type Code NE WRK.Item Type Code
IF PAR.Item_Type_Code <> WRK.Item_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.USR From Date = PAR.USR From Date
X1PG_USR_From_Date = PAR.USR_From_Date;

// 1PG.USR Through Date = PAR.USR To Date
X1PG_USR_Through_Date = PAR.USR_To_Date;

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Warehouse Code = PAR.Warehouse Code
X1PG_Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// 1PG.Item Structure Class Code = PAR.Item Structure Class Code
X1PG_Item_Structure_Class_Code = PAR.Item_Structure_Class_Code;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(X1PG_Item_Structure_Class_Code);
PARAMETER(X1PG_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Type Code = PAR.Item Type Code
X1PG_Item_Type_Code = PAR.Item_Type_Code;

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Item Type Code
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Item_Type_Code);

// 1PG.Prt Non-Zero Qty Only USR = PAR.Prt Non-Zero Qty Only USR
1PG.Prt Non-Zero Qty Only USR = PAR.Prt_Non_Zero_Qty_Only_USR;

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Prt Non-Zero Qty Only USR
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Prt_Non_Zero_Qty_Only_USR);

// 1PG.Item/Whse/Typ/Str Sts USR = PAR.Item/Whse/Typ/Str Sts USR
X1PG_Item_Whse_Typ_Str_Sts_USR = PAR.Item_Whse_Typ_Str_Sts_USR;

// 1PG.Condition Desc. 3  USR = Condition name of 1PG.Item/Whse/Typ/Str Sts USR
X1PG_Condition_Desc_3_USR = RTVCND(X1PG_Item_Whse_Typ_Str_Sts_USR);

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Item_Structure_Class_Code;
EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(CUR.Item_Structure_Class_Code);
PARAMETER(CUR.Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Item Structure Class Code header format
PRINT Item Structure Class Code header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Dsc/Typ/2nd/Crd   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1349907;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Item_Description);
PARAMETER(CUR.Item_Type_Code);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Seconds_Item);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Qtys Stock Cl Rpt  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1416825;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(9999999);
PARAMETER(PAR.USR_From_Date);
PARAMETER(PAR.USR_To_Date);
PARAMETER(CUR.On_Hand_Weight_Summary);
PARAMETER(CUR.On_Hand_UOM1_Summary);
PARAMETER(CUR.Quantity_Open_7_0_USR);
PARAMETER(CUR.Weight_Open_7_0_USR);
PARAMETER(CUR.Production_Quantity_USR);
PARAMETER(CUR.Production_Wgt_USR);
PARAMETER(CUR.Rework_Quantity_7_0_USR);
PARAMETER(CUR.Rework_Weight_7_0_USR);
PARAMETER(CUR.Transfer_Quantity_7_0_USR);
PARAMETER(CUR.Transfer_Weight_7_0_USR);
PARAMETER(CUR.Sales_Quantity_7_0_USR);
PARAMETER(CUR.Sales_Weight_7_0_USR);
PARAMETER(CUR.Adj_Other_Qty_7_0_USR);
PARAMETER(CUR.Adj_Other_Wgt_7_0_USR);
PARAMETER(CUR.Adjustment_Qty_7_0_USR);
PARAMETER(CUR.Adjustment_Wgt_7_0_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Quantity Open  7.0    USR = PAR.On Hand U/M1 Summary
 PAR.Quantity_Open_7_0_USR = PAR.On_Hand_UOM1_Summary;

 // PAR.Weight Open  7.0      USR = PAR.On Hand Weight Summary
 PAR.Weight_Open_7_0_USR = PAR.On_Hand_Weight_Summary;

 //?USER: Process Data record

 CASE;

 // IF DB1.Transaction Date Code LT PAR.USR From Date
 IF DB1.Transaction_Date_Code < PAR.USR_From_Date;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Only use transactions that affect the quantity and weight
 CASE;

 // IF DB1.Inventory Trans. Type is Quantity Adjust Types
 IF DB1.Inventory_Trans_Type = 'AP'/'A'/'AW'/'OB'/'BO'/'I'/'IO'/'R'/'RR'/'RP'/'RW'/'SA'
 /'S'/'T'/'TW';

 // Call program Zzz Convert Item Qtys  XF.
 CALL PROGRAM(Zzz Convert Item Qtys  XF) ('PDKSXFR');
 PARAMETER(DB1.UOM_Transaction);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Quantity_based_on_U_M1_S);
 PARAMETER(WRK.Quantity_based_on_U_M2_S);
 PARAMETER(WRK.Quantity_based_on_U_M3_S);
 PARAMETER(DB1.Transaction_Quantity);

 //?Reverse sign
 // WRK.Quantity based on U/M1 S = CON.*ZERO - PAR.Quantity based on U/M1 S
 WRK.Quantity_based_on_U_M1_S = *ZERO - PAR.Quantity_based_on_U_M1_S;

 // WRK.Transaction Weight = CON.*ZERO - DB1.Transaction Weight
 WRK.Transaction_Weight = *ZERO - DB1.Transaction_Weight;

 // PAR.Quantity Open  7.0    USR = PAR.Quantity Open  7.0    USR + WRK.Quantity bas
 PAR.Quantity_Open_7_0_USR = PAR.Quantity_Open_7_0_USR + WRK.Quantity_based_on_U_M1_S;

 // PAR.Weight Open  7.0      USR = PAR.Weight Open  7.0      USR + WRK.Transaction
 PAR.Weight_Open_7_0_USR = PAR.Weight_Open_7_0_USR + WRK.Transaction_Weight;

 CASE;

 // IF DB1.Transaction Date Code LE PAR.USR To Date
 IF DB1.Transaction_Date_Code <= PAR.USR_To_Date;

 //?Add trans qty and wgt to specific transaction column
 CASE;

 // IF DB1.Inventory Trans. Type is Receipt Production
 IF DB1.Inventory_Trans_Type = 'RR';

 // AND DB1.Reason Code is Production from Accu-Sort
 AND DB1.Reason_Code = 'PRD';

 // PAR.Production Quantity USR = PAR.Production Quantity USR + PAR.Quantity based o
 PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + PAR.Quantity_based_on_U_M1_S;

 // PAR.Production Wgt USR = PAR.Production Wgt USR + DB1.Transaction Weight
 PAR.Production_Wgt_USR = PAR.Production_Wgt_USR + DB1.Transaction_Weight;

 //?Add trans qty and wgt to specific transaction column
 // IF DB1.Inventory Trans. Type is Receipt Production
 IF DB1.Inventory_Trans_Type = 'RR';

 // AND DB1.Reason Code is Delete Rework-AccuSort
 AND ( DB1.Reason_Code = 'DLR';

 // OR DB1.Reason Code is Accu-Sort Adj Phs Delete
 OR DB1.Reason_Code = 'IDL' );

 // PAR.Rework Quantity  7.0  USR = PAR.Rework Quantity  7.0  USR + PAR.Quantity bas
 PAR.Rework_Quantity_7_0_USR = PAR.Rework_Quantity_7_0_USR + PAR.Quantity_based_on_U_M1_S;

 // PAR.Rework Weight    7.0  USR = PAR.Rework Weight    7.0  USR + DB1.Transaction
 PAR.Rework_Weight_7_0_USR = PAR.Rework_Weight_7_0_USR + DB1.Transaction_Weight;

 //?Add trans qty and wgt to specific transaction column
 // IF DB1.Inventory Trans. Type is Transfer types
 IF DB1.Inventory_Trans_Type = 'TW'/'T';

 // PAR.Transfer Quantity 7.0 USR = PAR.Transfer Quantity 7.0 USR + PAR.Quantity bas
 PAR.Transfer_Quantity_7_0_USR = PAR.Transfer_Quantity_7_0_USR
 + PAR.Quantity_based_on_U_M1_S;

 // PAR.Transfer Weight   7.0 USR = PAR.Transfer Weight   7.0 USR + DB1.Transaction
 PAR.Transfer_Weight_7_0_USR = PAR.Transfer_Weight_7_0_USR + DB1.Transaction_Weight;

 //?Add trans qty and wgt to specific transaction column
 // IF DB1.Inventory Trans. Type is Issue Order Process
 IF DB1.Inventory_Trans_Type = 'IO';

 // PAR.Sales Quantity  7.0   USR = PAR.Sales Quantity  7.0   USR + PAR.Quantity bas
 PAR.Sales_Quantity_7_0_USR = PAR.Sales_Quantity_7_0_USR + PAR.Quantity_based_on_U_M1_S;

 // PAR.Sales Weight    7.0   USR = PAR.Sales Weight    7.0   USR + DB1.Transaction
 PAR.Sales_Weight_7_0_USR = PAR.Sales_Weight_7_0_USR + DB1.Transaction_Weight;

 //?Add trans qty and wgt to specific transaction column
 // IF DB1.Inventory Trans. Type is Inv Adj Stock Report
 IF DB1.Inventory_Trans_Type = 'AP'/'A'/'AW'/'OB'/'BO'/'I'/'SA';

 // PAR.Adjustment Qty 7.0    USR = PAR.Adjustment Qty 7.0    USR + PAR.Quantity bas
 PAR.Adjustment_Qty_7_0_USR = PAR.Adjustment_Qty_7_0_USR + PAR.Quantity_based_on_U_M1_S;

 // PAR.Adjustment Wgt 7.0    USR = PAR.Adjustment Wgt 7.0    USR + DB1.Transaction
 PAR.Adjustment_Wgt_7_0_USR = PAR.Adjustment_Wgt_7_0_USR + DB1.Transaction_Weight;

 //?Add trans qty and wgt to specific transaction column
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Adj Other Qty  7.0    USR = PAR.Adj Other Qty  7.0    USR + PAR.Quantity bas
 PAR.Adj_Other_Qty_7_0_USR = PAR.Adj_Other_Qty_7_0_USR + PAR.Quantity_based_on_U_M1_S;

 // PAR.Adj Other Wgt  7.0    USR = PAR.Adj Other Wgt  7.0    USR + DB1.Transaction
 PAR.Adj_Other_Wgt_7_0_USR = PAR.Adj_Other_Wgt_7_0_USR + DB1.Transaction_Weight;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


// Calc ending qty
CUR.Ending_Quantity_7_0_USR = ( ( ( ( ( CUR.Quantity_Open_7_0_USR                                  +
+ CUR.Production_Quantity_USR ) + CUR.Rework_Quantity_7_0_USR )                                   +
+ CUR.Transfer_Quantity_7_0_USR ) + CUR.Sales_Quantity_7_0_USR )                                  +
+ CUR.Adj_Other_Qty_7_0_USR ) + CUR.Adjustment_Qty_7_0_USR;

// Calc ending wgt
CUR.Ending_Weight_7_0_USR = ( ( ( ( ( CUR.Weight_Open_7_0_USR + CUR.Production_Wgt_USR )           +
+ CUR.Rework_Weight_7_0_USR ) + CUR.Transfer_Weight_7_0_USR ) + CUR.Sales_Weight_7_0_USR          +
) + CUR.Adj_Other_Wgt_7_0_USR ) + CUR.Adjustment_Wgt_7_0_USR;

//?If print non zero qty only is yes and no qty and wgt then dont print
CASE;

// IF PAR.Prt Non-Zero Qty Only USR is yes
IF PAR.Prt_Non_Zero_Qty_Only_USR = 'Y';

// AND CUR.Quantity Open  7.0    USR is Equal to Zero
AND CUR.Quantity_Open_7_0_USR = *ZERO;

// AND CUR.Production Quantity USR is Equal to Zero
AND CUR.Production_Quantity_USR = *ZERO;

// AND CUR.Rework Quantity  7.0  USR is Equal to Zero
AND CUR.Rework_Quantity_7_0_USR = *ZERO;

// AND CUR.Transfer Quantity 7.0 USR is Equal to Zero
AND CUR.Transfer_Quantity_7_0_USR = *ZERO;

// AND CUR.Sales Quantity  7.0   USR is Equal to Zero
AND CUR.Sales_Quantity_7_0_USR = *ZERO;

// AND CUR.Adj Other Qty  7.0    USR is Equal to Zero
AND CUR.Adj_Other_Qty_7_0_USR = *ZERO;

// AND CUR.Adjustment Qty 7.0    USR is Equal to Zero
AND CUR.Adjustment_Qty_7_0_USR = *ZERO;

// AND CUR.Ending Quantity  7.0  USR is Equal to Zero
AND CUR.Ending_Quantity_7_0_USR = *ZERO;

// AND CUR.Weight Open  7.0      USR is Equal to Zero
AND CUR.Weight_Open_7_0_USR = *ZERO;

// AND CUR.Production Wgt USR is Not Entered
AND CUR.Production_Wgt_USR = *ZERO;

// AND CUR.Rework Weight    7.0  USR is Equal to Zero
AND CUR.Rework_Weight_7_0_USR = *ZERO;

// AND CUR.Transfer Weight   7.0 USR is Equal to Zero
AND CUR.Transfer_Weight_7_0_USR = *ZERO;

// AND CUR.Sales Weight    7.0   USR is Equal to Zero
AND CUR.Sales_Weight_7_0_USR = *ZERO;

// AND CUR.Adj Other Wgt  7.0    USR is Equal to Zero
AND CUR.Adj_Other_Wgt_7_0_USR = *ZERO;

// AND CUR.Adjustment Wgt 7.0    USR is Equal to Zero
AND CUR.Adjustment_Wgt_7_0_USR = *ZERO;

// AND CUR.Ending Weight    7.0  USR is Equal to Zero
AND CUR.Ending_Weight_7_0_USR = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Process after print of detail format

// NXT.Quantity Open  7.0    USR = NXT.Quantity Open  7.0    USR + CUR.Quantity Ope
NXT.Quantity_Open_7_0_USR = NXT.Quantity_Open_7_0_USR + CUR.Quantity_Open_7_0_USR;

// NXT.Weight Open  7.0      USR = NXT.Weight Open  7.0      USR + CUR.Weight Open
NXT.Weight_Open_7_0_USR = NXT.Weight_Open_7_0_USR + CUR.Weight_Open_7_0_USR;

// NXT.Production Quantity USR = NXT.Production Quantity USR + CUR.Production Quant
NXT.Production_Quantity_USR = NXT.Production_Quantity_USR + CUR.Production_Quantity_USR;

// NXT.Production Wgt USR = NXT.Production Wgt USR + CUR.Production Wgt USR
NXT.Production_Wgt_USR = NXT.Production_Wgt_USR + CUR.Production_Wgt_USR;

// NXT.Rework Quantity  7.0  USR = NXT.Rework Quantity  7.0  USR + CUR.Rework Quant
NXT.Rework_Quantity_7_0_USR = NXT.Rework_Quantity_7_0_USR + CUR.Rework_Quantity_7_0_USR;

// NXT.Rework Weight    7.0  USR = NXT.Rework Weight    7.0  USR + CUR.Rework Weigh
NXT.Rework_Weight_7_0_USR = NXT.Rework_Weight_7_0_USR + CUR.Rework_Weight_7_0_USR;

// NXT.Transfer Quantity 7.0 USR = NXT.Transfer Quantity 7.0 USR + CUR.Transfer Qua
NXT.Transfer_Quantity_7_0_USR = NXT.Transfer_Quantity_7_0_USR                                      +
+ CUR.Transfer_Quantity_7_0_USR;

// NXT.Transfer Weight   7.0 USR = NXT.Transfer Weight   7.0 USR + CUR.Transfer Wei
NXT.Transfer_Weight_7_0_USR = NXT.Transfer_Weight_7_0_USR + CUR.Transfer_Weight_7_0_USR;

// NXT.Sales Quantity  7.0   USR = NXT.Sales Quantity  7.0   USR + CUR.Sales Quanti
NXT.Sales_Quantity_7_0_USR = NXT.Sales_Quantity_7_0_USR + CUR.Sales_Quantity_7_0_USR;

// NXT.Sales Weight    7.0   USR = NXT.Sales Weight    7.0   USR + CUR.Sales Weight
NXT.Sales_Weight_7_0_USR = NXT.Sales_Weight_7_0_USR + CUR.Sales_Weight_7_0_USR;

// NXT.Adj Other Qty  7.0    USR = NXT.Adj Other Qty  7.0    USR + CUR.Adj Other Qt
NXT.Adj_Other_Qty_7_0_USR = NXT.Adj_Other_Qty_7_0_USR + CUR.Adj_Other_Qty_7_0_USR;

// NXT.Adj Other Wgt  7.0    USR = NXT.Adj Other Wgt  7.0    USR + CUR.Adj Other Wg
NXT.Adj_Other_Wgt_7_0_USR = NXT.Adj_Other_Wgt_7_0_USR + CUR.Adj_Other_Wgt_7_0_USR;

// NXT.Adjustment Qty 7.0    USR = NXT.Adjustment Qty 7.0    USR + CUR.Adjustment Q
NXT.Adjustment_Qty_7_0_USR = NXT.Adjustment_Qty_7_0_USR + CUR.Adjustment_Qty_7_0_USR;

// NXT.Adjustment Wgt 7.0    USR = NXT.Adjustment Wgt 7.0    USR + CUR.Adjustment W
NXT.Adjustment_Wgt_7_0_USR = NXT.Adjustment_Wgt_7_0_USR + CUR.Adjustment_Wgt_7_0_USR;

// NXT.Ending Quantity  7.0  USR = NXT.Ending Quantity  7.0  USR + CUR.Ending Quant
NXT.Ending_Quantity_7_0_USR = NXT.Ending_Quantity_7_0_USR + CUR.Ending_Quantity_7_0_USR;

// NXT.Ending Weight    7.0  USR = NXT.Ending Weight    7.0  USR + CUR.Ending Weigh
NXT.Ending_Weight_7_0_USR = NXT.Ending_Weight_7_0_USR + CUR.Ending_Weight_7_0_USR;

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

CASE;

IF NEW Item_Structure_Class_Code;
//?If print non zero qty only is yes and no qty and wgt then dont print
CASE;

// IF PAR.Prt Non-Zero Qty Only USR is yes
IF PAR.Prt_Non_Zero_Qty_Only_USR = 'Y';

// AND CUR.Quantity Open  7.0    USR is Equal to Zero
AND CUR.Quantity_Open_7_0_USR = *ZERO;

// AND CUR.Production Quantity USR is Equal to Zero
AND CUR.Production_Quantity_USR = *ZERO;

// AND CUR.Rework Quantity  7.0  USR is Equal to Zero
AND CUR.Rework_Quantity_7_0_USR = *ZERO;

// AND CUR.Transfer Quantity 7.0 USR is Equal to Zero
AND CUR.Transfer_Quantity_7_0_USR = *ZERO;

// AND CUR.Sales Quantity  7.0   USR is Equal to Zero
AND CUR.Sales_Quantity_7_0_USR = *ZERO;

// AND CUR.Adj Other Qty  7.0    USR is Equal to Zero
AND CUR.Adj_Other_Qty_7_0_USR = *ZERO;

// AND CUR.Adjustment Qty 7.0    USR is Equal to Zero
AND CUR.Adjustment_Qty_7_0_USR = *ZERO;

// AND CUR.Ending Quantity  7.0  USR is Equal to Zero
AND CUR.Ending_Quantity_7_0_USR = *ZERO;

// AND CUR.Weight Open  7.0      USR is Equal to Zero
AND CUR.Weight_Open_7_0_USR = *ZERO;

// AND CUR.Production Wgt USR is Not Entered
AND CUR.Production_Wgt_USR = *ZERO;

// AND CUR.Rework Weight    7.0  USR is Equal to Zero
AND CUR.Rework_Weight_7_0_USR = *ZERO;

// AND CUR.Transfer Weight   7.0 USR is Equal to Zero
AND CUR.Transfer_Weight_7_0_USR = *ZERO;

// AND CUR.Sales Weight    7.0   USR is Equal to Zero
AND CUR.Sales_Weight_7_0_USR = *ZERO;

// AND CUR.Adj Other Wgt  7.0    USR is Equal to Zero
AND CUR.Adj_Other_Wgt_7_0_USR = *ZERO;

// AND CUR.Adjustment Wgt 7.0    USR is Equal to Zero
AND CUR.Adjustment_Wgt_7_0_USR = *ZERO;

// AND CUR.Ending Weight    7.0  USR is Equal to Zero
AND CUR.Ending_Weight_7_0_USR = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Item Structure Class Code totals format
PRINT Item Structure Class Code totals format;

// NXT.Quantity Open  7.0    USR = NXT.Quantity Open  7.0    USR + CUR.Quantity Ope
NXT.Quantity_Open_7_0_USR = NXT.Quantity_Open_7_0_USR + CUR.Quantity_Open_7_0_USR;

// NXT.Weight Open  7.0      USR = NXT.Weight Open  7.0      USR + CUR.Weight Open
NXT.Weight_Open_7_0_USR = NXT.Weight_Open_7_0_USR + CUR.Weight_Open_7_0_USR;

// NXT.Production Quantity USR = NXT.Production Quantity USR + CUR.Production Quant
NXT.Production_Quantity_USR = NXT.Production_Quantity_USR + CUR.Production_Quantity_USR;

// NXT.Production Wgt USR = NXT.Production Wgt USR + CUR.Production Wgt USR
NXT.Production_Wgt_USR = NXT.Production_Wgt_USR + CUR.Production_Wgt_USR;

// NXT.Rework Quantity  7.0  USR = NXT.Rework Quantity  7.0  USR + CUR.Rework Quant
NXT.Rework_Quantity_7_0_USR = NXT.Rework_Quantity_7_0_USR + CUR.Rework_Quantity_7_0_USR;

// NXT.Rework Weight    7.0  USR = NXT.Rework Weight    7.0  USR + CUR.Rework Weigh
NXT.Rework_Weight_7_0_USR = NXT.Rework_Weight_7_0_USR + CUR.Rework_Weight_7_0_USR;

// NXT.Transfer Quantity 7.0 USR = NXT.Transfer Quantity 7.0 USR + CUR.Transfer Qua
NXT.Transfer_Quantity_7_0_USR = NXT.Transfer_Quantity_7_0_USR                                      +
+ CUR.Transfer_Quantity_7_0_USR;

// NXT.Transfer Weight   7.0 USR = NXT.Transfer Weight   7.0 USR + CUR.Transfer Wei
NXT.Transfer_Weight_7_0_USR = NXT.Transfer_Weight_7_0_USR + CUR.Transfer_Weight_7_0_USR;

// NXT.Sales Quantity  7.0   USR = NXT.Sales Quantity  7.0   USR + CUR.Sales Quanti
NXT.Sales_Quantity_7_0_USR = NXT.Sales_Quantity_7_0_USR + CUR.Sales_Quantity_7_0_USR;

// NXT.Sales Weight    7.0   USR = NXT.Sales Weight    7.0   USR + CUR.Sales Weight
NXT.Sales_Weight_7_0_USR = NXT.Sales_Weight_7_0_USR + CUR.Sales_Weight_7_0_USR;

// NXT.Adj Other Qty  7.0    USR = NXT.Adj Other Qty  7.0    USR + CUR.Adj Other Qt
NXT.Adj_Other_Qty_7_0_USR = NXT.Adj_Other_Qty_7_0_USR + CUR.Adj_Other_Qty_7_0_USR;

// NXT.Adj Other Wgt  7.0    USR = NXT.Adj Other Wgt  7.0    USR + CUR.Adj Other Wg
NXT.Adj_Other_Wgt_7_0_USR = NXT.Adj_Other_Wgt_7_0_USR + CUR.Adj_Other_Wgt_7_0_USR;

// NXT.Adjustment Qty 7.0    USR = NXT.Adjustment Qty 7.0    USR + CUR.Adjustment Q
NXT.Adjustment_Qty_7_0_USR = NXT.Adjustment_Qty_7_0_USR + CUR.Adjustment_Qty_7_0_USR;

// NXT.Adjustment Wgt 7.0    USR = NXT.Adjustment Wgt 7.0    USR + CUR.Adjustment W
NXT.Adjustment_Wgt_7_0_USR = NXT.Adjustment_Wgt_7_0_USR + CUR.Adjustment_Wgt_7_0_USR;

// NXT.Ending Quantity  7.0  USR = NXT.Ending Quantity  7.0  USR + CUR.Ending Quant
NXT.Ending_Quantity_7_0_USR = NXT.Ending_Quantity_7_0_USR + CUR.Ending_Quantity_7_0_USR;

// NXT.Ending Weight    7.0  USR = NXT.Ending Weight    7.0  USR + CUR.Ending Weigh
NXT.Ending_Weight_7_0_USR = NXT.Ending_Weight_7_0_USR + CUR.Ending_Weight_7_0_USR;

ENDIF;

CASE;

IF NEW Company_Number;
// Print Company Number totals format
PRINT Company Number totals format;

// NXT.Quantity Open  7.0    USR = NXT.Quantity Open  7.0    USR + CUR.Quantity Ope
NXT.Quantity_Open_7_0_USR = NXT.Quantity_Open_7_0_USR + CUR.Quantity_Open_7_0_USR;

// NXT.Weight Open  7.0      USR = NXT.Weight Open  7.0      USR + CUR.Weight Open
NXT.Weight_Open_7_0_USR = NXT.Weight_Open_7_0_USR + CUR.Weight_Open_7_0_USR;

// NXT.Production Quantity USR = NXT.Production Quantity USR + CUR.Production Quant
NXT.Production_Quantity_USR = NXT.Production_Quantity_USR + CUR.Production_Quantity_USR;

// NXT.Production Wgt USR = NXT.Production Wgt USR + CUR.Production Wgt USR
NXT.Production_Wgt_USR = NXT.Production_Wgt_USR + CUR.Production_Wgt_USR;

// NXT.Rework Quantity  7.0  USR = NXT.Rework Quantity  7.0  USR + CUR.Rework Quant
NXT.Rework_Quantity_7_0_USR = NXT.Rework_Quantity_7_0_USR + CUR.Rework_Quantity_7_0_USR;

// NXT.Rework Weight    7.0  USR = NXT.Rework Weight    7.0  USR + CUR.Rework Weigh
NXT.Rework_Weight_7_0_USR = NXT.Rework_Weight_7_0_USR + CUR.Rework_Weight_7_0_USR;

// NXT.Transfer Quantity 7.0 USR = NXT.Transfer Quantity 7.0 USR + CUR.Transfer Qua
NXT.Transfer_Quantity_7_0_USR = NXT.Transfer_Quantity_7_0_USR                                      +
+ CUR.Transfer_Quantity_7_0_USR;

// NXT.Transfer Weight   7.0 USR = NXT.Transfer Weight   7.0 USR + CUR.Transfer Wei
NXT.Transfer_Weight_7_0_USR = NXT.Transfer_Weight_7_0_USR + CUR.Transfer_Weight_7_0_USR;

// NXT.Sales Quantity  7.0   USR = NXT.Sales Quantity  7.0   USR + CUR.Sales Quanti
NXT.Sales_Quantity_7_0_USR = NXT.Sales_Quantity_7_0_USR + CUR.Sales_Quantity_7_0_USR;

// NXT.Sales Weight    7.0   USR = NXT.Sales Weight    7.0   USR + CUR.Sales Weight
NXT.Sales_Weight_7_0_USR = NXT.Sales_Weight_7_0_USR + CUR.Sales_Weight_7_0_USR;

// NXT.Adj Other Qty  7.0    USR = NXT.Adj Other Qty  7.0    USR + CUR.Adj Other Qt
NXT.Adj_Other_Qty_7_0_USR = NXT.Adj_Other_Qty_7_0_USR + CUR.Adj_Other_Qty_7_0_USR;

// NXT.Adj Other Wgt  7.0    USR = NXT.Adj Other Wgt  7.0    USR + CUR.Adj Other Wg
NXT.Adj_Other_Wgt_7_0_USR = NXT.Adj_Other_Wgt_7_0_USR + CUR.Adj_Other_Wgt_7_0_USR;

// NXT.Adjustment Qty 7.0    USR = NXT.Adjustment Qty 7.0    USR + CUR.Adjustment Q
NXT.Adjustment_Qty_7_0_USR = NXT.Adjustment_Qty_7_0_USR + CUR.Adjustment_Qty_7_0_USR;

// NXT.Adjustment Wgt 7.0    USR = NXT.Adjustment Wgt 7.0    USR + CUR.Adjustment W
NXT.Adjustment_Wgt_7_0_USR = NXT.Adjustment_Wgt_7_0_USR + CUR.Adjustment_Wgt_7_0_USR;

// NXT.Ending Quantity  7.0  USR = NXT.Ending Quantity  7.0  USR + CUR.Ending Quant
NXT.Ending_Quantity_7_0_USR = NXT.Ending_Quantity_7_0_USR + CUR.Ending_Quantity_7_0_USR;

// NXT.Ending Weight    7.0  USR = NXT.Ending Weight    7.0  USR + CUR.Ending Weigh
NXT.Ending_Weight_7_0_USR = NXT.Ending_Weight_7_0_USR + CUR.Ending_Weight_7_0_USR;

ENDIF;

