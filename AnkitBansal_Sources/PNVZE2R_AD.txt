// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNVZE2R
// ?Date: 14.08.2025 Time: 03:46:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('PDTNE1');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


MOVE *ALL (To: KEY From: PAR);

// PAR.USR Company Number = PAR.Company Number
PAR.USR_Company_Number = PAR.Company_Number;

// PAR.USR Order Number = PAR.Order Number
PAR.USR_Order_Number = PAR.Order_Number;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.USR Exit Program = CND.no
PAR.USR_Exit_Program = 'N';

// Retrieve message - 'F3=Edit  F4=Prompt+  F8=Copy Booking  F9=Add  F10=Copy From Existing Order  F
LCL.CMDKEY_Line_1_130_Char = RTVMSG(USR4668);

// Retrieve message - 'F13=Orders/MPH  F14=Truck Driver  F15=PMT Backhaul Rpt F20=Traffic Comments
LCL.CMDKEY_Line_2_130_Char = RTVMSG(USR4669);

// Execute function Screen 132 Wide 2 CMDLN.
EXECUTE FUNCTION(Screen 132 Wide 2 CMDLN) TYPE(EXCUSRSRC) ('PNHBUFR');
PARAMETER(LCL.CMDKEY_Line_1_130_Char);
PARAMETER(LCL.CMDKEY_Line_2_130_Char);
{
 C                     MOVEL#IVIT1    ##VIT1
 C                     MOVEL#IVJT1    ##VJT1
}


// LCL.Status Flag 10 Y/N = CND.No
LCL.Status_Flag_10_Y_N = 'N';

// PAR.Status Flag 7  Y/N = CND.No
PAR.Status_Flag_7_Y_N = 'N';

// WRK.Note: Text Usr - 50 = CONCAT(CON.WARNING: INVLD DDD/T-MUST,CON.LEAVE BEFORE NOW,CON.1)
WRK.Note_Text_Usr_50 = 'WARNING: INVLD DDD/T-MUST' + 'LEAVE BEFORE NOW' (1);

// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

// PAR.Status Flag 10 Y/N = CND.No
PAR.Status_Flag_10_Y_N = 'N';

//?USER: Initialize key screen

//?** Program mode
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?** Program mode
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

ENDIF;

ENDIF;

//?USER: Initialize detail screen (new record)

//?RTV LOAD ID
CASE;

// IF PAR.Load ID is Blank
IF PAR.Load_ID = *ZERO;

EXECUTE FUNCTION(RTV LdId/OrdDt/ShpDt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1648395;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(NLL.Carrier_Code);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.Block_Order_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Save load id from Order Header
CASE;

// IF DTL.Load ID NE PAR.Load ID
IF DTL.Load_ID <> PAR.Load_ID;

// AND PAR.Load ID is NE Blank
AND PAR.Load_ID <> *ZERO;

// DTL.Load ID = PAR.Load ID
DTL.Load_ID = PAR.Load_ID;

ENDIF;

//?07/22/19 DN R15161-Set Voyage to Null.
EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(DTL.Seal_1);
PARAMETER(DTL.Seal_2);
PARAMETER(DTL.Seal_3);
PARAMETER(LCL.Seal_4);
PARAMETER(LCL.Seal_2_Unused);
PARAMETER(LCL.Total_Load_Order_Weight);
PARAMETER(LCL.Flat_Amount);
PARAMETER(LCL.Allocate_Pounds_Miles);
PARAMETER(LCL.Total_Stops);
PARAMETER(DTL.Trailer_Id);
PARAMETER(DTL.Transloader_Carrier_Code);
PARAMETER(LCL.BOL_Time);
PARAMETER(DTL.Carrier_Code);
PARAMETER(LCL.Truck_Size);
PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(LCL.Rated_Freight);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Number_Pallets_Received);
PARAMETER(LCL.Number_Pallets_Loaded);
PARAMETER(LCL.Load_Carrier_Pay_Amt);
PARAMETER(LCL.Estimated_Arrival_Time);
PARAMETER(LCL.Actual_Arrival_Date);
PARAMETER(LCL.Actual_Arrival_Time);
PARAMETER(LCL.Trailer_IN_Weight);
PARAMETER(LCL.Trailer_OUT_Weight);
PARAMETER(LCL.Actual_Departure_Date);
PARAMETER(LCL.Departure_Time);
PARAMETER(LCL.Schedule_Sequence_Number);
PARAMETER(LCL.Product_Temperature);
PARAMETER(LCL.Number_Spacers_Loaded);
PARAMETER(LCL.Car_Veh_Initials);
PARAMETER(LCL.Total_Load_Miles);
PARAMETER(LCL.Recorder_ID);
PARAMETER(DTL.Shipping_Method);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Gross_Weight);
PARAMETER(LCL.Carrier_Broker);
PARAMETER(LCL.Export_Status);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(LCL.On_Time_Y_N);
PARAMETER(LCL.Truck_Ready_Date);
PARAMETER(LCL.Truck_Ready_Time);
PARAMETER(LCL.Spotted_Date);
PARAMETER(LCL.Spotted_Time);
PARAMETER(LCL.Load_Finished_Date);
PARAMETER(LCL.Load_Finished_Time);
PARAMETER(LCL.BOL_Complete_Date);
PARAMETER(LCL.BOL_Complete_Time);
PARAMETER(LCL.BOL_Received_Date);
PARAMETER(LCL.BOL_Received_Time);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
PARAMETER(LCL.Adjusted_Departure_Date);
PARAMETER(LCL.Adjusted_Departure_Time);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.Vessel_Name);
PARAMETER(NLL.Voyage);
PARAMETER(LCL.Sail_Date);
PARAMETER(LCL.Booking_Number);
PARAMETER(LCL.Discharge_Port);
PARAMETER(LCL.Arrival_Date);
PARAMETER(LCL.Container_Number);
PARAMETER(LCL.Date_In);
PARAMETER(LCL.Time_In);
PARAMETER(LCL.Date_Out);
PARAMETER(LCL.Time_Out);
PARAMETER(LCL.Load_Total_Freight);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(LCL.LH_Unused_Sts);
PARAMETER(LCL.LH_Carrier_Payment_Sts);
PARAMETER(LCL.Bring_Back_Miles);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(DTL.Deadline_Depart_DT_HDR);
PARAMETER(LCL.Deadline_Departure_Time);
PARAMETER(LCL.Load_Held_Over);
PARAMETER(LCL.Load_Held_Over_Reason);
PARAMETER(LCL.Load_Held_Over_Rsn_Cmt);
PARAMETER(LCL.Ocean_BOL_Number);
PARAMETER(LCL.Express_Mail_Number);
PARAMETER(LCL.Express_Mail_Date);
PARAMETER(LCL.Load_Shag_Flag);
PARAMETER(LCL.Load_Wash_Flag);
PARAMETER(LCL.Product_Complete_Date);
PARAMETER(LCL.Product_Complete_Time);
PARAMETER(LCL.Pallets_Loaded);
PARAMETER(LCL.Avg_Pallet_Tare);
PARAMETER(LCL.Tot_Pallet_Tare);
PARAMETER(LCL.Load_Confirmed_Sts);
PARAMETER(LCL.Load_Confirmed_Contact);
PARAMETER(LCL.Load_Confirmation_Time);
PARAMETER(LCL.Load_Door_1);
PARAMETER(LCL.Override_Total_Load_Miles);
PARAMETER(LCL.Load_Door_2);
PARAMETER(LCL.Partial_Load);
PARAMETER(LCL.Load_Confirmation_Fax_Sts);
PARAMETER(LCL.Export_Load_USDA_OK);
PARAMETER(LCL.Late_Delivery_Email_Flag);
PARAMETER(LCL.Load_Actual_Freight);
PARAMETER(LCL.Hide_on_WW_Load_Sts);
PARAMETER(LCL.Late_Billing_Email_Flag);
PARAMETER(LCL.Shipping_Temp_C_F_txt);
PARAMETER(LCL.LH_Held_Over_Rsn_Cmt);
PARAMETER(LCL.Multi_Company_Load);
PARAMETER(LCL.Fax_Sent_to_SSI_Carrier);
PARAMETER(LCL.Schedule_Pos_Load_Grade);
PARAMETER(LCL.LH_Power_Only_Load);
PARAMETER(LCL.MG_Created_Load);
PARAMETER(LCL.LH_Unused_Sts_5);
PARAMETER(LCL.Load_U_M);
PARAMETER(LCL.TPM_Shipment_Status);
PARAMETER(LCL.LH_Unused_Sts_8);
PARAMETER(LCL.LH_On_Time_Reason_Code);
PARAMETER(LCL.LH_Held_Over_Reason);
PARAMETER(LCL.LH_Carrier_Paid_Dte);
PARAMETER(LCL.LH_Carrier_Paid_Time);
PARAMETER(LCL.LH_Last_Combo_Prod_Date);
PARAMETER(LCL.LH_Last_Combo_Prod_Time);
PARAMETER(LCL.LPT_Load_Plan_Start_Dt);
PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
PARAMETER(LCL.TPM_Planned_Ship_Date);
PARAMETER(LCL.LH_Unused_Time_4);
PARAMETER(LCL.LH_Unused_Date_5);
PARAMETER(LCL.LH_Unused_Time_5);
PARAMETER(LCL.LH_Unused_Date_6);
PARAMETER(LCL.LH_Unused_Time_6);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Deadline Depart Time 4,0 = LCL.Deadline Departure Time *HHMM
DTL.Deadline_Depart_Time_40 = TIMEDTLS(LCL.Deadline_Departure_Time 'HM');

EXECUTE FUNCTION(RTV All Hdr flds b/ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1699784;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Cancel_Date);
PARAMETER(LCL.Terms_Code);
PARAMETER(LCL.Special_Instructions);
PARAMETER(LCL.Special_Instructions_2);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(LCL.Reason_Code);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Header_Status_Last);
PARAMETER(LCL.Order_Type_Print_Status);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.User_Original_Entry);
PARAMETER(LCL.Date_of_Original_Entry);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.USR_From_Time_4_0);
PARAMETER(LCL.Accounts_Receiv_Ent_1);
PARAMETER(LCL.Accounts_Receiv_Ent_2);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Price_Audit);
PARAMETER(LCL.Price_Status);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Palletize);
PARAMETER(LCL.Shrink_Wrap);
PARAMETER(LCL.Slip_Sheet);
PARAMETER(LCL.Age_Code);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Attach_to_Invoice_Number);
PARAMETER(LCL.Load_Plan_Order);
PARAMETER(LCL.Print_Pick_Slip);
PARAMETER(LCL.Resell_Reference_Number);
PARAMETER(LCL.Special_Comment_1);
PARAMETER(LCL.Special_Comment_2);
PARAMETER(LCL.Affect_Auto_Accruals);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Manager_Level_Code);
PARAMETER(LCL.VP_Level_Code);
PARAMETER(LCL.Attach_to_Order_Number);
PARAMETER(LCL.Reason_for_Price_Audit);
PARAMETER(LCL.Invoice_Number);
PARAMETER(LCL.Invoice_Suffix);
PARAMETER(LCL.Invoice_Date);
PARAMETER(LCL.Event_Code);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Modified_Flag);
PARAMETER(LCL.A_R_order_Value_Total);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.Block_Order_Flag);
PARAMETER(LCL.Order_Certification_Flag);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Retrieve country code for Port Cut Date restricts   E003351
EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Country_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?* Put Warehouse Type on the screen                    E002989
EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 ENDIF;

}


EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR Carrier Code = DTL.Carrier Code
PAR.USR_Carrier_Code = DTL.Carrier_Code;

// 2ND.OHE PowerPro Load#-Outbnd = DTL.OHE PowerPro Load#-Outbnd
2ND.OHE_PowerPro_Load#_Outbnd = DTL.OHE_PowerPro_Load#_Outbnd;

// DTL.Company Number = PAR.USR Company Number
DTL.Company_Number = PAR.USR_Company_Number;

EXECUTE FUNCTION(RTV Order Info by Load RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1814603;
PARAMETER(PAR.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(LCL.Stop_Drop);
PARAMETER(LCL.Comments_for_Pickup);
PARAMETER(LCL.Miles_to_next_stop);
PARAMETER(LCL.Freight_Charge);
PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(LCL.Freight_Misc_Charge);
PARAMETER(LCL.Freight_Stop_Charge);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(LCL.Estimated_Arrival_Date);
PARAMETER(LCL.Estimated_Arrival_Time);
PARAMETER(LCL.Appointment_Confirm_Date);
PARAMETER(LCL.Appointment_Confirm_Time);
PARAMETER(LCL.Confirmation_Made_With);
PARAMETER(LCL.Confirmation_Number);
PARAMETER(LCL.Actual_Delivery_Date);
PARAMETER(LCL.Actual_Delivery_time);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(NLL.Deadline_Depart_DT_HDR);
PARAMETER(NLL.Deadline_Depart_Time_HDR);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.MPC_Number);
PARAMETER(LCL.Load_Dtl_On_Time_Flag);
PARAMETER(LCL.On_Time_Addl_Rsn_Unused);
PARAMETER(LCL.Seal_Nbr_1);
PARAMETER(LCL.Seal_Nbr_2);
PARAMETER(LCL.Seal_Nbr_3);
PARAMETER(LCL.Seal_Nbr_4);
PARAMETER(LCL.Seal_Nbr_5);
PARAMETER(LCL.LD_Carrier_Appt_Date);
PARAMETER(LCL.LD_Unused_Date_2);
PARAMETER(LCL.LD_Unused_Date_3);
PARAMETER(LCL.LD_Carrier_Appt_Time);
PARAMETER(LCL.LD_Unused_Time_2);
PARAMETER(LCL.LD_Unused_Time_3);
PARAMETER(LCL.Miles_Error_Sts);
PARAMETER(LCL.LD_Unused_Sts_2);
PARAMETER(LCL.HPB_Transload_Station);
PARAMETER(LCL.LD_Cst_Svc_Tracer_Cmmnt);
PARAMETER(LCL.Carrier_Ref_PRO_Inv);
PARAMETER(LCL.Cust_Assigned_Appt_#);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.OHE Container Number = LCL.Container Number
DTL.OHE_Container_Number = LCL.Container_Number;

//?Convert Trailer ID to all caps                        E004079
CASE;

// IF DTL.OHE Container Number is Entered
IF DTL.OHE_Container_Number <> *BLANK;

// LCL.Case Sensitive Field = DTL.OHE Container Number
LCL.Case_Sensitive_Field = DTL.OHE_Container_Number;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.OHE Container Number = LCL.Case Upper Field
DTL.OHE_Container_Number = LCL.Case_Upper_Field;

ENDIF;

// WRK.OHE Container Number = DTL.OHE Container Number
WRK.OHE_Container_Number = DTL.OHE_Container_Number;

// DTL.OHE Bookings Confirmed = CND.No
DTL.OHE_Bookings_Confirmed = 'N';

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

//?* First Time Calcs
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

// WRK.OHE Port Cut Time = CND.Equal zero
WRK.OHE_Port_Cut_Time = *ZERO;

// WRK.OHE Port Cut Date = CND.not entered
WRK.OHE_Port_Cut_Date = *ZERO;

// PAR.Container Number usr 1 = CND.Not Entered
PAR.Container_Number_usr_1 = *BLANK;

ENDIF;

//?USER: Initialize detail screen (existing record)

//?* Add Letter of Credit to the screen                  E002768
//?** Put DB1 fields on the screen
DO;

MOVE *ALL (To: DTL From: DB1);

// DTL.Shipping Line = DB1.Shipping Line
DTL.Shipping_Line = DB1.Shipping_Line;

// DTL.Port Delv Terminal = DB1.Port Delv Terminal
DTL.Port_Delv_Terminal = DB1.Port_Delv_Terminal;

// DTL.OHE Discharge Port/Airprt = DB1.OHE Discharge Port/Airprt
DTL.OHE_Discharge_Port_Airprt = DB1.OHE_Discharge_Port_Airprt;

// DTL.OHE Container Number = DB1.OHE Container Number
DTL.OHE_Container_Number = DB1.OHE_Container_Number;

// DTL.Actual Ship Date = DB1.OHE Actual Ship Date
DTL.Actual_Ship_Date = DB1.OHE_Actual_Ship_Date;

// DTL.USR Time 4.0 = DB1.OHE Port Cut Time
DTL.USR_Time_4_0 = DB1.OHE_Port_Cut_Time;

//?* Add Letter of Credit to the screen                  E002768
//?*   Shorten to 30 characters
// DTL.String 30 = DB1.Letter of Credit Number
DTL.String_30 = DB1.Letter_of_Credit_Number;

//?* Save container to test later if it has changed    E004079
CASE;

// IF DB1.OHE Container Number is Entered
IF DB1.OHE_Container_Number <> *BLANK;

// PAR.Container Number usr 1 = DB1.OHE Container Number
PAR.Container_Number_usr_1 = DB1.OHE_Container_Number;

// PAR.Shipping Line 1 USR = DB1.Shipping Line
PAR.Shipping_Line_1_USR = DB1.Shipping_Line;

//?* Save container to test later if it has changed    E004079
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Container Number usr 1 = CND.Not Entered
PAR.Container_Number_usr_1 = *BLANK;

// PAR.Shipping Line 1 USR = DB1.Shipping Line
PAR.Shipping_Line_1_USR = DB1.Shipping_Line;

ENDIF;

ENDDO;

//?** Set par load id
CASE;

// IF PAR.Load ID is Blank
IF PAR.Load_ID = *ZERO;

EXECUTE FUNCTION(RTV LdId/OrdDt/ShpDt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1648395;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(NLL.Carrier_Code);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.USR_From_Time_4_0);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.Block_Order_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
PARAMETER(PAR.Load_ID);
PARAMETER(NLL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(DTL.Seal_1);
PARAMETER(DTL.Seal_2);
PARAMETER(DTL.Seal_3);
PARAMETER(NLL.Seal_4);
PARAMETER(NLL.Seal_2_Unused);
PARAMETER(LCL.Total_Load_Order_Weight);
PARAMETER(LCL.Flat_Amount);
PARAMETER(LCL.Allocate_Pounds_Miles);
PARAMETER(LCL.Total_Stops);
PARAMETER(DTL.Trailer_Id);
PARAMETER(DTL.Transloader_Carrier_Code);
PARAMETER(LCL.BOL_Time);
PARAMETER(DTL.Carrier_Code);
PARAMETER(LCL.Truck_Size);
PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(LCL.Rated_Freight);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Number_Pallets_Received);
PARAMETER(LCL.Number_Pallets_Loaded);
PARAMETER(LCL.Load_Carrier_Pay_Amt);
PARAMETER(LCL.Estimated_Arrival_Time);
PARAMETER(LCL.Actual_Arrival_Date);
PARAMETER(LCL.Actual_Arrival_Time);
PARAMETER(LCL.Trailer_IN_Weight);
PARAMETER(LCL.Trailer_OUT_Weight);
PARAMETER(LCL.Actual_Departure_Date);
PARAMETER(LCL.Departure_Time);
PARAMETER(LCL.Schedule_Sequence_Number);
PARAMETER(LCL.Product_Temperature);
PARAMETER(LCL.Number_Spacers_Loaded);
PARAMETER(LCL.Car_Veh_Initials);
PARAMETER(LCL.Total_Load_Miles);
PARAMETER(LCL.Recorder_ID);
PARAMETER(DTL.Shipping_Method);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Gross_Weight);
PARAMETER(LCL.Carrier_Broker);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Actual_Ship_Date);
PARAMETER(LCL.On_Time_Y_N);
PARAMETER(LCL.Truck_Ready_Date);
PARAMETER(LCL.Truck_Ready_Time);
PARAMETER(LCL.Spotted_Date);
PARAMETER(LCL.Spotted_Time);
PARAMETER(LCL.Load_Finished_Date);
PARAMETER(LCL.Load_Finished_Time);
PARAMETER(LCL.BOL_Complete_Date);
PARAMETER(LCL.BOL_Complete_Time);
PARAMETER(LCL.BOL_Received_Date);
PARAMETER(LCL.BOL_Received_Time);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
PARAMETER(LCL.Adjusted_Departure_Date);
PARAMETER(LCL.Adjusted_Departure_Time);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.Vessel_Name);
PARAMETER(NLL.Voyage);
PARAMETER(NLL.Sail_Date);
PARAMETER(NLL.Booking_Number);
PARAMETER(NLL.Discharge_Port);
PARAMETER(LCL.Arrival_Date);
PARAMETER(LCL.Container_Number);
PARAMETER(LCL.Date_In);
PARAMETER(LCL.Time_In);
PARAMETER(LCL.Date_Out);
PARAMETER(LCL.Time_Out);
PARAMETER(LCL.Load_Total_Freight);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(LCL.LH_Unused_Sts);
PARAMETER(LCL.LH_Carrier_Payment_Sts);
PARAMETER(LCL.Bring_Back_Miles);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(DTL.Deadline_Depart_DT_HDR);
PARAMETER(LCL.Deadline_Departure_Time);
PARAMETER(LCL.Load_Held_Over);
PARAMETER(LCL.Load_Held_Over_Reason);
PARAMETER(LCL.Load_Held_Over_Rsn_Cmt);
PARAMETER(NLL.Ocean_BOL_Number);
PARAMETER(LCL.Express_Mail_Number);
PARAMETER(LCL.Express_Mail_Date);
PARAMETER(LCL.Load_Shag_Flag);
PARAMETER(LCL.Load_Wash_Flag);
PARAMETER(LCL.Product_Complete_Date);
PARAMETER(LCL.Product_Complete_Time);
PARAMETER(LCL.Pallets_Loaded);
PARAMETER(LCL.Avg_Pallet_Tare);
PARAMETER(LCL.Tot_Pallet_Tare);
PARAMETER(LCL.Load_Confirmed_Sts);
PARAMETER(LCL.Load_Confirmed_Contact);
PARAMETER(LCL.Load_Confirmation_Time);
PARAMETER(LCL.Load_Door_1);
PARAMETER(LCL.Override_Total_Load_Miles);
PARAMETER(LCL.Load_Door_2);
PARAMETER(LCL.Partial_Load);
PARAMETER(LCL.Load_Confirmation_Fax_Sts);
PARAMETER(LCL.Export_Load_USDA_OK);
PARAMETER(LCL.Late_Delivery_Email_Flag);
PARAMETER(LCL.Load_Actual_Freight);
PARAMETER(LCL.Hide_on_WW_Load_Sts);
PARAMETER(LCL.Late_Billing_Email_Flag);
PARAMETER(LCL.Shipping_Temp_C_F_txt);
PARAMETER(LCL.LH_Held_Over_Rsn_Cmt);
PARAMETER(LCL.Multi_Company_Load);
PARAMETER(LCL.Fax_Sent_to_SSI_Carrier);
PARAMETER(LCL.Schedule_Pos_Load_Grade);
PARAMETER(LCL.LH_Power_Only_Load);
PARAMETER(LCL.MG_Created_Load);
PARAMETER(LCL.LH_Unused_Sts_5);
PARAMETER(LCL.Load_U_M);
PARAMETER(LCL.TPM_Shipment_Status);
PARAMETER(LCL.LH_Unused_Sts_8);
PARAMETER(LCL.LH_On_Time_Reason_Code);
PARAMETER(LCL.LH_Held_Over_Reason);
PARAMETER(LCL.LH_Carrier_Paid_Dte);
PARAMETER(LCL.LH_Carrier_Paid_Time);
PARAMETER(LCL.LH_Last_Combo_Prod_Date);
PARAMETER(LCL.LH_Last_Combo_Prod_Time);
PARAMETER(LCL.LPT_Load_Plan_Start_Dt);
PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
PARAMETER(LCL.TPM_Planned_Ship_Date);
PARAMETER(LCL.LH_Unused_Time_4);
PARAMETER(LCL.LH_Unused_Date_5);
PARAMETER(LCL.LH_Unused_Time_5);
PARAMETER(LCL.LH_Unused_Date_6);
PARAMETER(LCL.LH_Unused_Time_6);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Deadline Depart Time 4,0 = LCL.Deadline Departure Time *HHMM
DTL.Deadline_Depart_Time_40 = TIMEDTLS(LCL.Deadline_Departure_Time 'HM');

EXECUTE FUNCTION(RTV All Hdr flds b/ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1699784;
PARAMETER(NLL.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(LCL.Special_Instructions);
PARAMETER(LCL.Special_Instructions_2);
PARAMETER(LCL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(NLL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(DTL.Shipping_Method);
PARAMETER(LCL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(LCL.Special_Comment_1);
PARAMETER(LCL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Put Warehouse Type on the screen                    E002989
EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 ENDIF;

}


EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Retrieve country code for Port Cut Date restricts      E003351
EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Country_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?** Default Requested Delivery Date if zeros           E003143
CASE;

// IF DTL.Requested Delivery Date is not entered
IF DTL.Requested_Delivery_Date = *ZERO;

// DTL.Requested Delivery Date = PAR.Requested Delivery Date
DTL.Requested_Delivery_Date = PAR.Requested_Delivery_Date;

ENDIF;

//?** Default Requested Delivery Time if zeros           E003143
CASE;

// IF DTL.Requested Delivery Time is Zero
IF DTL.Requested_Delivery_Time = *ZERO;

// DTL.USR From Time 4.0 = PAR.Requested Delivery Time
DTL.USR_From_Time_4_0 = PAR.Requested_Delivery_Time;

ENDIF;

// DTL.Order Number = PAR.Order Number
DTL.Order_Number = PAR.Order_Number;

// PAR.USR Carrier Code = DTL.Carrier Code
PAR.USR_Carrier_Code = DTL.Carrier_Code;

// PAR.USR Company Number = DTL.Company Number
PAR.USR_Company_Number = DTL.Company_Number;

EXECUTE FUNCTION(RTV Order Info by Load RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1814603;
PARAMETER(PAR.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(NLL.Stop_Drop);
PARAMETER(NLL.Comments_for_Pickup);
PARAMETER(NLL.Miles_to_next_stop);
PARAMETER(NLL.Freight_Charge);
PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(NLL.Freight_Misc_Charge);
PARAMETER(NLL.Freight_Stop_Charge);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(NLL.Estimated_Arrival_Date);
PARAMETER(NLL.Estimated_Arrival_Time);
PARAMETER(NLL.Appointment_Confirm_Date);
PARAMETER(NLL.Appointment_Confirm_Time);
PARAMETER(NLL.Confirmation_Made_With);
PARAMETER(NLL.Confirmation_Number);
PARAMETER(NLL.Actual_Delivery_Date);
PARAMETER(NLL.Actual_Delivery_time);
PARAMETER(NLL.Scheduled_Delivery_Date);
PARAMETER(NLL.Scheduled_Delivery_Time);
PARAMETER(NLL.Deadline_Depart_DT_HDR);
PARAMETER(NLL.Deadline_Depart_Time_HDR);
PARAMETER(NLL.On_Yard_Date);
PARAMETER(NLL.On_Yard_Time);
PARAMETER(NLL.MPC_Number);
PARAMETER(NLL.Load_Dtl_On_Time_Flag);
PARAMETER(NLL.On_Time_Addl_Rsn_Unused);
PARAMETER(NLL.Seal_Nbr_1);
PARAMETER(NLL.Seal_Nbr_2);
PARAMETER(NLL.Seal_Nbr_3);
PARAMETER(NLL.Seal_Nbr_4);
PARAMETER(NLL.Seal_Nbr_5);
PARAMETER(NLL.LD_Carrier_Appt_Date);
PARAMETER(NLL.LD_Unused_Date_2);
PARAMETER(NLL.LD_Unused_Date_3);
PARAMETER(NLL.LD_Carrier_Appt_Time);
PARAMETER(NLL.LD_Unused_Time_2);
PARAMETER(NLL.LD_Unused_Time_3);
PARAMETER(NLL.Miles_Error_Sts);
PARAMETER(NLL.LD_Unused_Sts_2);
PARAMETER(NLL.HPB_Transload_Station);
PARAMETER(NLL.LD_Cst_Svc_Tracer_Cmmnt);
PARAMETER(NLL.Carrier_Ref_PRO_Inv);
PARAMETER(NLL.Cust_Assigned_Appt_#);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Convert Container to all caps                         E004079
CASE;

// IF DTL.OHE Container Number is Entered
IF DTL.OHE_Container_Number <> *BLANK;

// LCL.Case Sensitive Field = DTL.OHE Container Number
LCL.Case_Sensitive_Field = DTL.OHE_Container_Number;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.OHE Container Number = LCL.Case Upper Field
DTL.OHE_Container_Number = LCL.Case_Upper_Field;

ENDIF;

// WRK.OHE Container Number = DTL.OHE Container Number
WRK.OHE_Container_Number = DTL.OHE_Container_Number;

//?** First Time Calcs: Update any blank fields
DO;

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

//?** Actual Ship Date
CASE;

// IF DTL.Actual Ship Date is not entered
IF DTL.Actual_Ship_Date = *ZERO;

//?** IF Order Hdr ASD is blanks, use Load Hdr ASD
// DTL.Actual Ship Date = LCL.Actual Ship Date
DTL.Actual_Ship_Date = LCL.Actual_Ship_Date;

ENDIF;

//?** Carrier Code
CASE;

// IF DTL.Carrier Code is not entered
IF DTL.Carrier_Code = *BLANK;

// DTL.Carrier Code = LCL.Carrier Code
DTL.Carrier_Code = LCL.Carrier_Code;

ENDIF;

//?** Scheduled Ship Date
CASE;

// IF DTL.Scheduled Ship Date is not entered
IF DTL.Scheduled_Ship_Date = *ZERO;

// DTL.Scheduled Ship Date = LCL.Scheduled Ship Date
DTL.Scheduled_Ship_Date = LCL.Scheduled_Ship_Date;

ENDIF;

//?** Requested Delivery Date & time
CASE;

// IF DTL.Requested Delivery Date is not entered
IF DTL.Requested_Delivery_Date = *ZERO;

// DTL.Requested Delivery Date = LCL.Requested Delivery Date
DTL.Requested_Delivery_Date = LCL.Requested_Delivery_Date;

// DTL.USR From Time 4.0 = LCL.Requested Delivery Time
DTL.USR_From_Time_4_0 = LCL.Requested_Delivery_Time;

ENDIF;

//?** Shipping method
CASE;

// IF DTL.Shipping Method EQ WRK.Blank for 3          USR
IF DTL.Shipping_Method = WRK.Blank_for_3_USR;

// DTL.Shipping Method = LCL.Shipping Method
DTL.Shipping_Method = LCL.Shipping_Method;

ENDIF;

//?** Stop/Drop Sequence number
CASE;

// IF DTL.Stop/Drop Sequence Number is Not Entered
IF DTL.Stop_Drop_Sequence_Number = *ZERO;

// DTL.Stop/Drop Sequence Number = LCL.Stop/Drop Sequence Number
DTL.Stop_Drop_Sequence_Number = LCL.Stop_Drop_Sequence_Number;

ENDIF;

//?** Container
CASE;

// IF DTL.OHE Container Number is Not Entered
IF DTL.OHE_Container_Number = *BLANK;

// DTL.OHE Container Number = LCL.Container Number
DTL.OHE_Container_Number = LCL.Container_Number;

ENDIF;

//?* SAVE Port Cut Date and Time                         E003143
// WRK.OHE Port Cut Time = DB1.OHE Port Cut Time
WRK.OHE_Port_Cut_Time = DB1.OHE_Port_Cut_Time;

// WRK.OHE Port Cut Date = DB1.OHE Port Cut Date
WRK.OHE_Port_Cut_Date = DB1.OHE_Port_Cut_Date;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

ENDDO;

CASE;

// IF LCL.MG Created Load is Not MG Created Load
IF LCL.MG_Created_Load = *BLANK;

//?** Retrieve Shipping Line name from carrier file
CASE;

// IF DTL.Shipping Line is entered
IF DTL.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?** Retrieve Port City from Shipping Line/Port file
CASE;

// IF DTL.Port Delv Terminal is Entered
IF DTL.Port_Delv_Terminal <> *BLANK;

EXECUTE FUNCTION(RTV Shp Line/Port All  RT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1502160;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(DTL.Sail_Port_State);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?dont validate upon entry  C3913 RMC 2/11/15
ENDIF;

ENDIF;

EXECUTE FUNCTION(Carrier Name DRV) TYPE(DRVFLD)                                 AC1582201;
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(DTL.Carrier_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Carrier_Name_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


//?USER: Validate detail screen fields

// PAR.Status Flag 7  Y/N = CND.No
PAR.Status_Flag_7_Y_N = 'N';

//?Port Cut Date and Time must both be entered or both be zeros   E003143
CASE;

// IF DTL.OHE Port Cut Date is Entered
IF ( DTL.OHE_Port_Cut_Date <> *ZERO;

// AND DTL.USR Time 4.0 is Zero
AND DTL.USR_Time_4_0 = *ZERO );

// OR DTL.OHE Port Cut Date is not entered
OR ( DTL.OHE_Port_Cut_Date = *ZERO;

// AND DTL.USR Time 4.0 is Entered
AND DTL.USR_Time_4_0 <> 0 );

// Send error message - 'Port Cut Date and Time must both be entered or both be zeros'
ERROR(USR4722);
MSGPARM(DTL.OHE_Port_Cut_Date);
MSGPARM(DTL.USR_Time_4_0);

ENDIF;

//?Prompt and F-Keys
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?F4 ON SELECTED FIELDS
CASE;

// IF PGM.*Cursor field <IS> DTL.Shipping Line
IF PGM.*Cursor_field = DTL.Shipping_Line;

//?* Pass back state, as well                            E002989
// Call program SEL Shipping Line/PortsSR.
CALL PROGRAM(SEL Shipping Line/PortsSR) ('PDUMSRR');
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(DTL.Sail_Port_State);

//?RTV SHIP LINE NAME
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F4 ON SELECTED FIELDS
// IF PGM.*Cursor field <IS> DTL.OHE Discharge Port/Airprt
IF PGM.*Cursor_field = DTL.OHE_Discharge_Port_Airprt;

//?11/21/22 DN DO4595-Added Prompt on Discharge Port.
// Call program Sel Port of Unlading  SR.
CALL PROGRAM(Sel Port of Unlading  SR) ('PUXOSRR');
PARAMETER(DTL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.Country_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F4 ON SELECTED FIELDS
// IF PGM.*Cursor field <IS> 2ND.OHE Backhaul Truck Number
IF PGM.*Cursor_field = 2ND.LD_Stop_Drop;

// Call program Zzz by TD Last/First  SL.
CALL PROGRAM(Zzz by TD Last/First  SL) ('PNWLSRR');
PARAMETER(LCL.Last_Name);
PARAMETER(LCL.First_Name);
PARAMETER(2ND.LD_Stop_Drop);
PARAMETER(LCL.TD_Notes);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F4 ON SELECTED FIELDS
// IF PGM.*Cursor field <IS> DTL.Transloader Carrier Code
IF PGM.*Cursor_field = DTL.Transloader_Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Transloader_Carrier_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F4 ON SELECTED FIELDS
// IF PGM.*Cursor field <IS> 2ND.OHE Backhaul Carrier Code
IF PGM.*Cursor_field = 2ND.OHE_Backhaul_Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(2ND.OHE_Backhaul_Carrier_Code);

//?RTV BH CARRIER NAME
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(2ND.OHE_Backhaul_Carrier_Code);
PARAMETER(2ND.USR_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?F4 ON SELECTED FIELDS
// IF PGM.*Cursor field <IS> 2ND.OHE Backhaul Return to Co
IF PGM.*Cursor_field = 2ND.OHE_Backhaul_Return_to_Co;

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(2ND.OHE_Backhaul_Return_to_Co);

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(2ND.OHE_Backhaul_Return_to_Co);
PARAMETER(2ND.USR_Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?F4 ON SELECTED FIELDS
// IF PGM.*Cursor field <IS> DTL.OHE Container Number
IF PGM.*Cursor_field = DTL.OHE_Container_Number;

//?Error if shipping line is not entered                 E004079
CASE;

// IF DTL.Shipping Line is not entered
IF DTL.Shipping_Line = *BLANK;

// Send error message - 'Shipping line is required'
ERROR(USR2432);

ENDIF;

//?save original if container is being changed
CASE;

// IF DTL.OHE Container Number is Entered
IF DTL.OHE_Container_Number <> *BLANK;

// WRK.OHE Container Number = DTL.OHE Container Number
WRK.OHE_Container_Number = DTL.OHE_Container_Number;

ENDIF;

// LCL.Company Number = DTL.Company Number
LCL.Company_Number = DTL.Company_Number;

// Call program Sel Trailer           SR.
CALL PROGRAM(Sel Trailer           SR) ('PBRFSRR');
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(LCL.Company_Number);
PARAMETER(WRK.On_Yard_Status);
PARAMETER(WRK.On_Yard_Date);
PARAMETER(WRK.On_Yard_Time);
PARAMETER(WRK.Available_Status);

//?trailer company numbers don't match
CASE;

// IF DTL.Company Number NE LCL.Company Number
IF DTL.Company_Number <> LCL.Company_Number;

// Send information message - 'Trailer Co# & Load Start Co# do not match-Press enter'
MESSAGE(USR3902 *INFO);
MSGPARM(DTL.OHE_Container_Number);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Prompt and F-Keys
// IF DTL.*CMD key is *Copy Booking Info
IF DTL.*CMD_key = '08';

// Call program PMT Assign Bkg Info    PV.
CALL PROGRAM(PMT Assign Bkg Info    PV) ('PBLQPVR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(DTL.OHE_Vessel_Airline);
PARAMETER(DTL.OHE_Voyage_Flight);
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(DTL.OHE_Discharge_Port_Airprt);
PARAMETER(DTL.OHE_Sail_Flight_Date);
PARAMETER(DTL.OHE_Arrival_Date);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(DTL.OHE_Load_Haul_Type);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Carrier_Code);

//?Prompt and F-Keys
// IF DTL.*CMD key is CF10
IF DTL.*CMD_key = '10';

//?** Copy from an existing OHE Order, receive into par context
//?07/22/19 DN R15161-Replaced PAR.Voyage with PAR.OHE Voyage/Flight.
//?   Replaced PAR.Booking Number with PAR.OHE Booking Number.
//?10/17/19 DN R15161-Blank Out the OHE Booking Number.
// Call program SEL Copy OHE Record    SR.
CALL PROGRAM(SEL Copy OHE Record    SR) ('PMMLSRR');
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.Port_Delv_Terminal);
PARAMETER(PAR.Vessel_Name);
PARAMETER(PAR.Sail_Date);
PARAMETER(PAR.Discharge_Port);
PARAMETER(PAR.Container_Number);
PARAMETER(PAR.OHE_Port_Cut_Date);
PARAMETER(PAR.OHE_Load_Haul_Type);
PARAMETER(PAR.OHE_Arrival_Date);
PARAMETER(PAR.OHE_Est_Arrv_at_Dest_Date);
PARAMETER(PAR.OHE_PowerPro_Load#_Outbnd);
PARAMETER(PAR.OHE_Pier_Pass_Fee_Amount);
PARAMETER(PAR.OHE_Port_Check_Fee_Amount);
PARAMETER(PAR.OHE_Transload_Container#);
PARAMETER(PAR.OHE_Transload_Seal_Nbr);
PARAMETER(PAR.OHE_Abs_Rate_Override_Rsn);
PARAMETER(PAR.OHE_PowerPro_Load#_Bckhl);
PARAMETER(PAR.Transloader_Carrier_Code);
PARAMETER(PAR.OHE_Pier_Pass_Invoice);
PARAMETER(NLL.OHE_Carrier_Nm);
PARAMETER(PAR.OHE_Port_Pier_Paid_Date);
PARAMETER(PAR.OHE_Booking_Number);
PARAMETER(PAR.OHE_Voyage_Flight);
PARAMETER(WRK.Record_Selected_USR);

//?** Only update fields if a record was selected.
CASE;

// IF WRK.Record Selected       USR is yes
IF WRK.Record_Selected_USR = 'Y';

MOVE *ALL (To: DTL From: PAR);

// DTL.OHE Vessel/Airline = PAR.Vessel Name
DTL.OHE_Vessel_Airline = PAR.Vessel_Name;

//?07/22/19 DN R15161-Commented Out Voyage.
//?10/17/19 DN R15161-Clear OHE Booking Number.
// DTL.OHE Booking Number = CND.Not Entered
DTL.OHE_Booking_Number = *BLANK;

// DTL.OHE Sail/Flight Date = PAR.Sail Date
DTL.OHE_Sail_Flight_Date = PAR.Sail_Date;

// DTL.OHE Discharge Port/Airprt = PAR.Discharge Port
DTL.OHE_Discharge_Port_Airprt = PAR.Discharge_Port;

//?** Error if shipping line or port are wrong.
//?** Retrieve the Shipping Line name from the Carrier file
CASE;

// IF DTL.Shipping Line is entered
IF DTL.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Send error message if invalid shipping line entered  FT683 LJB
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping line &1 not found'
ERROR(USR2431);
MSGPARM(DTL.Shipping_Line);

ENDIF;

ENDIF;

//?** Retrieve the Port City and address
CASE;

// IF DTL.Port Delv Terminal is Entered
IF DTL.Port_Delv_Terminal <> *BLANK;

//?* Include Sail Port State                             E002989
EXECUTE FUNCTION(RTV Shp Line/Port All  RT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1502160;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(DTL.Sail_Port_State);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping Line_Port not found.'
ERROR(USR2419);

ENDIF;

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Prompt and F-Keys
// IF DTL.*CMD key is CF11
IF DTL.*CMD_key = '11';

//?** F11=Clear - clear the screen fields, update record.  C002567
//?** Don't delete the entire record. Clear Ship Line name as well
//?** Clear Sail Port State, as well                     E002989
EXECUTE FUNCTION(CHG Clr Exp Instr flds IF) TYPE(EXCINTFUN)                     AC2065548;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(DTL.OHE_Vessel_Airline);
PARAMETER(DTL.OHE_Voyage_Flight);
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(DTL.OHE_Discharge_Port_Airprt);
PARAMETER(DTL.OHE_Sail_Flight_Date);
PARAMETER(DTL.OHE_Port_Cut_Date);
PARAMETER(DTL.OHE_Arrival_Date);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(DTL.OHE_Comment_1);
PARAMETER(DTL.OHE_Comment_2);
PARAMETER(DTL.Transload_Terminal_Fees);
PARAMETER(DTL.OHE_Est_Arrv_at_Dest_Date);
PARAMETER(DTL.OHE_Port_Pier_Paid_Date);
PARAMETER(DTL.OHE_Actual_Ship_Date);
PARAMETER(DTL.OHE_Load_Haul_Type);
PARAMETER(DTL.OHE_Bookings_Confirmed);
PARAMETER(DTL.OHE_Transload_Seal_Nbr);
PARAMETER(DTL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(DTL.OHE_Transload_Container#);
PARAMETER(DTL.OHE_Pier_Pass_Invoice);
PARAMETER(DTL.OHE_Carrier_Nm);
PARAMETER(DTL.OHE_Pier_Pass_Fee_Amount);
PARAMETER(DTL.OHE_Port_Check_Fee_Amount);
PARAMETER(DTL.OHE_Port_Cut_Time);
PARAMETER(DTL.OHE_PowerPro_Load#_Outbnd);
PARAMETER(DTL.OHE_PowerPro_Load#_Bckhl);
PARAMETER(DTL.Transloader_Carrier_Code);
PARAMETER(DTL.Sail_Port_State);
{
 //?Execute internal function

 //?** Clear fields on the screen         C002567
 DO;

 MOVE *ALL (To: PAR From: CON);

 ENDDO;

 EXECUTE FUNCTION(CHG Clr Exp Instr flds CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2065546;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Port_Delv_Terminal);
 PARAMETER(PAR.OHE_City);
 PARAMETER(PAR.OHE_Vessel_Airline);
 PARAMETER(PAR.OHE_Voyage_Flight);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(PAR.OHE_Discharge_Port_Airprt);
 PARAMETER(PAR.OHE_Sail_Flight_Date);
 PARAMETER(PAR.OHE_Port_Cut_Date);
 PARAMETER(PAR.OHE_Arrival_Date);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(PAR.OHE_Comment_1);
 PARAMETER(PAR.OHE_Comment_2);
 PARAMETER(PAR.Transload_Terminal_Fees);
 PARAMETER(PAR.OHE_Est_Arrv_at_Dest_Date);
 PARAMETER(PAR.OHE_Port_Pier_Paid_Date);
 PARAMETER(PAR.OHE_Actual_Ship_Date);
 PARAMETER(PAR.OHE_Load_Haul_Type);
 PARAMETER(PAR.OHE_Bookings_Confirmed);
 PARAMETER(PAR.OHE_Transload_Seal_Nbr);
 PARAMETER(PAR.OHE_Abs_Rate_Override_Rsn);
 PARAMETER(PAR.OHE_Transload_Container#);
 PARAMETER(PAR.OHE_Pier_Pass_Invoice);
 PARAMETER(PAR.OHE_Carrier_Nm);
 PARAMETER(PAR.OHE_Pier_Pass_Fee_Amount);
 PARAMETER(PAR.OHE_Port_Check_Fee_Amount);
 PARAMETER(PAR.OHE_Port_Cut_Time);
 PARAMETER(PAR.OHE_PowerPro_Load#_Outbnd);
 PARAMETER(PAR.OHE_PowerPro_Load#_Bckhl);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(CHG Container for ExprtCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC2016604;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.OHE_Container_Number);
  PARAMETER(PAR.OHE_Container_Number);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(CHG Transloader for ExpCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1492004;
  PARAMETER(DB1.Load_ID);
  PARAMETER(WRK.Transloader_Carrier_Code);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


// DTL.USR Carrier Name = CND.not entered
DTL.USR_Carrier_Name = *BLANK;

// DTL.USR Time 4.0 = CND.Zero
DTL.USR_Time_4_0 = *ZERO;

// DTL.Transloader Carrier Code = CND.Not Entered
DTL.Transloader_Carrier_Code = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Prompt and F-Keys
// IF DTL.*CMD key is CF20
IF DTL.*CMD_key = '20';

//?** Traffic Comments
// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(DTL.Load_ID);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Prompt and F-Keys
// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

//?** Display/Edit MPC
// Call program Edt MPC/Dsp Orders     EF.
CALL PROGRAM(Edt MPC/Dsp Orders     EF) ('PDSQEFR');
PARAMETER(DTL.Load_ID);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Prompt and F-Keys
// IF DTL.*CMD key is CF14
IF DTL.*CMD_key = '14';

//?** Maintain Truck Driver file
// Call program EDT Truck File        EF.
CALL PROGRAM(EDT Truck File        EF) ('PNVQEFR');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Prompt and F-Keys
// IF DTL.*CMD key is CF15
IF DTL.*CMD_key = '15';

// Call program PMT Backhaul Download  PV.
CALL PROGRAM(PMT Backhaul Download  PV) ('PNXCPVR');
PARAMETER(2);
PARAMETER(LCL.Return_Code_Usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Backhaul status
CASE;

// IF 2ND.OHE Backhaul Status is Backhaul Status Entered
IF 2ND.OHE_Backhaul_Status = 'B'/'D'/'F';

// 2ND.Description 21a 4 Usr = Condition name of 2ND.OHE Backhaul Status
2ND.Description_21a_4_Usr = RTVCND(2ND.OHE_Backhaul_Status);

ENDIF;

// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

//?* Convert DDTime to 6.0 for testing                   E003143
// LCL.Deadline Departure Time = DTL.Deadline Depart Time 4,0 * CON.100 *
LCL.Deadline_Departure_Time = DTL.Deadline_Depart_Time_40 * 100;

//?11/21/22 DN DO4595-Validate Discharge Port.
CASE;

// IF DTL.OHE Discharge Port/Airprt is Not Blank
IF DTL.OHE_Discharge_Port_Airprt <> *BLANK;

EXECUTE FUNCTION(Rtv Port of Unlading  RT) TYPE(RTVOBJ) FILE(PUCRREP)           AC2210451;
PARAMETER(LCL.Country_Code);
PARAMETER(DTL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.CBP_Foreign_Port_Code);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Not Active, Throw Error Msg.
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - '&1'
ERROR(USR5085);
MSGPARM('Discharge Port not active');
MSGPARM(DTL.OHE_Discharge_Port_Airprt);

QUIT;

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - '&1'
ERROR(USR5085);
MSGPARM('Discharge Port not found.');
MSGPARM(DTL.OHE_Discharge_Port_Airprt);

QUIT;

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Carrier Name DRV) TYPE(DRVFLD)                                 AC1582201;
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(DTL.Carrier_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Carrier_Name_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// 2ND.Shipping Line = DTL.Shipping Line
2ND.Shipping_Line = DTL.Shipping_Line;

//?RTV SHIP LINE NAME for 2nd screen (Backhaul)
CASE;

// IF 2ND.Shipping Line is entered
IF 2ND.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(2ND.Shipping_Line);
PARAMETER(2ND.USR_Carrier_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Error if Shipping Line does not exist
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping line &1 not found'
ERROR(USR2431);
MSGPARM(2ND.Shipping_Line);

ENDIF;

ENDIF;

//?** Retrieve company name for Backhaul To company
CASE;

// IF 2ND.OHE Backhaul Return to Co is not equal to zero
IF 2ND.OHE_Backhaul_Return_to_Co <> *ZERO;

EXECUTE FUNCTION(RTV Company Name & Add RT) TYPE(RTVOBJ) FILE(CAABREP)          AC2022413;
PARAMETER(2ND.OHE_Backhaul_Return_to_Co);
PARAMETER(2ND.USR_Company_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.State_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Company Number &1 not found'
ERROR(USR2008);
MSGPARM(2ND.OHE_Backhaul_Return_to_Co);

ENDIF;

ENDIF;

//?** Retrieve carrier name for Backhaul carrier
CASE;

// IF 2ND.OHE Backhaul Carrier Code NE WRK.Blank for 3          USR
IF 2ND.OHE_Backhaul_Carrier_Code <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(2ND.OHE_Backhaul_Carrier_Code);
PARAMETER(2ND.USR_Name);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(2ND.OHE_Backhaul_Carrier_Code);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?Verify ship line or terminal have not been changed      E001634
//?** Retrieve Shipping Line name from carrier file
CASE;

// IF DTL.Shipping Line is entered
IF DTL.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Error if Shipping Line does not exist
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping line &1 not found'
ERROR(USR2431);
MSGPARM(DTL.Shipping_Line);

ENDIF;

ENDIF;

//?** Retrieve Port City from Shipping Line/Port file
CASE;

// IF DTL.Port Delv Terminal is Entered
IF DTL.Port_Delv_Terminal <> *BLANK;

EXECUTE FUNCTION(RTV Shp Line/Port All  RT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1502160;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(DTL.Sail_Port_State);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?** Error if Port Deliv Term does not exist
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping Line_Port not found.'
ERROR(USR2419);

ENDIF;

ENDIF;

//?** Retrieve company name for Backhaul To company
CASE;

// IF 2ND.OHE Backhaul Return to Co is not equal to zero
IF 2ND.OHE_Backhaul_Return_to_Co <> *ZERO;

EXECUTE FUNCTION(RTV Company Name & Add RT) TYPE(RTVOBJ) FILE(CAABREP)          AC2022413;
PARAMETER(2ND.OHE_Backhaul_Return_to_Co);
PARAMETER(2ND.USR_Company_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.State_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Company Number &1 not found'
ERROR(USR2008);
MSGPARM(2ND.OHE_Backhaul_Return_to_Co);

ENDIF;

ENDIF;

//?** Retrieve carrier name for Backhaul carrier
CASE;

// IF 2ND.OHE Backhaul Carrier Code NE WRK.Blank for 3          USR
IF 2ND.OHE_Backhaul_Carrier_Code <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(2ND.OHE_Backhaul_Carrier_Code);
PARAMETER(2ND.USR_Name);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(2ND.OHE_Backhaul_Carrier_Code);

ENDIF;

ENDIF;

// PAR.USR Carrier Code = DTL.Carrier Code
PAR.USR_Carrier_Code = DTL.Carrier_Code;

// PAR.USR Company Number = DTL.Company Number
PAR.USR_Company_Number = DTL.Company_Number;

//?Shipping Line required to enter a container           E001627
CASE;

// IF DTL.Shipping Line is not entered
IF DTL.Shipping_Line = *BLANK;

// AND DTL.OHE Container Number is Entered
AND DTL.OHE_Container_Number <> *BLANK;

// Send error message - 'Shipping line is required'
ERROR(USR2432);

ENDIF;

//?* Change to validate container for Shipping Line      E004079
//?Convert Container  to all caps                        E004079
CASE;

// IF DTL.OHE Container Number is Entered
IF DTL.OHE_Container_Number <> *BLANK;

// LCL.Case Sensitive Field = DTL.OHE Container Number
LCL.Case_Sensitive_Field = DTL.OHE_Container_Number;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.OHE Container Number = LCL.Case Upper Field
DTL.OHE_Container_Number = LCL.Case_Upper_Field;

ENDIF;

//?If not shipped, Validate Shipping line-Container
CASE;

// IF DTL.OHE Ship Status is Unshipped
IF DTL.OHE_Ship_Status = 'O'/'R';

//?Validate Container                     E001790
CASE;

// IF DTL.OHE Container Number is Entered
IF DTL.OHE_Container_Number <> *BLANK;

// AND DTL.Shipping Line is entered
AND DTL.Shipping_Line <> *BLANK;

//?07/22/19 DN R15161-Set Voyage to Null.
EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(LCL.Seal_1);
PARAMETER(LCL.Seal_2);
PARAMETER(LCL.Seal_3);
PARAMETER(LCL.Seal_4);
PARAMETER(LCL.Seal_2_Unused);
PARAMETER(LCL.Total_Load_Order_Weight);
PARAMETER(LCL.Flat_Amount);
PARAMETER(LCL.Allocate_Pounds_Miles);
PARAMETER(LCL.Total_Stops);
PARAMETER(LCL.Trailer_Id);
PARAMETER(LCL.Transloader_Carrier_Code);
PARAMETER(LCL.BOL_Time);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Truck_Size);
PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.Ship_Status);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Number_Pallets_Received);
PARAMETER(LCL.Number_Pallets_Loaded);
PARAMETER(LCL.Load_Carrier_Pay_Amt);
PARAMETER(LCL.Estimated_Arrival_Time);
PARAMETER(LCL.Actual_Arrival_Date);
PARAMETER(LCL.Actual_Arrival_Time);
PARAMETER(LCL.Trailer_IN_Weight);
PARAMETER(LCL.Trailer_OUT_Weight);
PARAMETER(LCL.Actual_Departure_Date);
PARAMETER(LCL.Departure_Time);
PARAMETER(LCL.Schedule_Sequence_Number);
PARAMETER(LCL.Product_Temperature);
PARAMETER(LCL.Number_Spacers_Loaded);
PARAMETER(LCL.Car_Veh_Initials);
PARAMETER(LCL.Total_Load_Miles);
PARAMETER(LCL.Recorder_ID);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Gross_Weight);
PARAMETER(LCL.Carrier_Broker);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Actual_Ship_Date);
PARAMETER(LCL.On_Time_Y_N);
PARAMETER(LCL.Truck_Ready_Date);
PARAMETER(LCL.Truck_Ready_Time);
PARAMETER(LCL.Spotted_Date);
PARAMETER(LCL.Spotted_Time);
PARAMETER(LCL.Load_Finished_Date);
PARAMETER(LCL.Load_Finished_Time);
PARAMETER(LCL.BOL_Complete_Date);
PARAMETER(LCL.BOL_Complete_Time);
PARAMETER(LCL.BOL_Received_Date);
PARAMETER(LCL.BOL_Received_Time);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
PARAMETER(LCL.Adjusted_Departure_Date);
PARAMETER(LCL.Adjusted_Departure_Time);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.Vessel_Name);
PARAMETER(NLL.Voyage);
PARAMETER(LCL.Sail_Date);
PARAMETER(LCL.Booking_Number);
PARAMETER(LCL.Discharge_Port);
PARAMETER(LCL.Arrival_Date);
PARAMETER(LCL.Container_Number);
PARAMETER(LCL.Date_In);
PARAMETER(LCL.Time_In);
PARAMETER(LCL.Date_Out);
PARAMETER(LCL.Time_Out);
PARAMETER(LCL.Load_Total_Freight);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(LCL.LH_Unused_Sts);
PARAMETER(LCL.LH_Carrier_Payment_Sts);
PARAMETER(LCL.Bring_Back_Miles);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
PARAMETER(LCL.Load_Held_Over);
PARAMETER(LCL.Load_Held_Over_Reason);
PARAMETER(LCL.Load_Held_Over_Rsn_Cmt);
PARAMETER(LCL.Ocean_BOL_Number);
PARAMETER(LCL.Express_Mail_Number);
PARAMETER(LCL.Express_Mail_Date);
PARAMETER(LCL.Load_Shag_Flag);
PARAMETER(LCL.Load_Wash_Flag);
PARAMETER(LCL.Product_Complete_Date);
PARAMETER(LCL.Product_Complete_Time);
PARAMETER(LCL.Pallets_Loaded);
PARAMETER(LCL.Avg_Pallet_Tare);
PARAMETER(LCL.Tot_Pallet_Tare);
PARAMETER(LCL.Load_Confirmed_Sts);
PARAMETER(LCL.Load_Confirmed_Contact);
PARAMETER(LCL.Load_Confirmation_Time);
PARAMETER(LCL.Load_Door_1);
PARAMETER(LCL.Override_Total_Load_Miles);
PARAMETER(LCL.Load_Door_2);
PARAMETER(LCL.Partial_Load);
PARAMETER(LCL.Load_Confirmation_Fax_Sts);
PARAMETER(LCL.Export_Load_USDA_OK);
PARAMETER(LCL.Late_Delivery_Email_Flag);
PARAMETER(LCL.Load_Actual_Freight);
PARAMETER(LCL.Hide_on_WW_Load_Sts);
PARAMETER(LCL.Late_Billing_Email_Flag);
PARAMETER(LCL.Shipping_Temp_C_F_txt);
PARAMETER(LCL.LH_Held_Over_Rsn_Cmt);
PARAMETER(LCL.Multi_Company_Load);
PARAMETER(LCL.Fax_Sent_to_SSI_Carrier);
PARAMETER(LCL.Schedule_Pos_Load_Grade);
PARAMETER(LCL.LH_Power_Only_Load);
PARAMETER(LCL.MG_Created_Load);
PARAMETER(LCL.LH_Unused_Sts_5);
PARAMETER(LCL.Load_U_M);
PARAMETER(LCL.TPM_Shipment_Status);
PARAMETER(LCL.LH_Unused_Sts_8);
PARAMETER(LCL.LH_On_Time_Reason_Code);
PARAMETER(LCL.LH_Held_Over_Reason);
PARAMETER(LCL.LH_Carrier_Paid_Dte);
PARAMETER(LCL.LH_Carrier_Paid_Time);
PARAMETER(LCL.LH_Last_Combo_Prod_Date);
PARAMETER(LCL.LH_Last_Combo_Prod_Time);
PARAMETER(LCL.LPT_Load_Plan_Start_Dt);
PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
PARAMETER(LCL.TPM_Planned_Ship_Date);
PARAMETER(LCL.LH_Unused_Time_4);
PARAMETER(LCL.LH_Unused_Date_5);
PARAMETER(LCL.LH_Unused_Time_5);
PARAMETER(LCL.LH_Unused_Date_6);
PARAMETER(LCL.LH_Unused_Time_6);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(NLL.Company_Number);
PARAMETER(LCL.USR_Load_Type);
PARAMETER(LCL.Trailer_Type);
PARAMETER(LCL.Seaboard_Owned_Status);
PARAMETER(LCL.On_Yard_Status);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.Assigned_Status);
PARAMETER(LCL.Available_Status);
PARAMETER(LCL.Not_Available_Reason_Code);
PARAMETER(LCL.Comment_Line);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?* Don't create trailer here, done in the CHGOBJ
// LCL.Load ID USR = CND.Not entered
LCL.Load_ID_USR = *ZERO;

// LCL.Load Id 2 = DTL.Load ID
LCL.Load_Id_2 = DTL.Load_ID;

EXECUTE FUNCTION(VAL Container assgnmt  IF) TYPE(EXCINTFUN)                     AC2111773;
PARAMETER(*ZERO);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(LCL.Load_Id_3);
{
 //?Execute internal function

 EXECUTE FUNCTION(VAL Container assgnmt RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2040217;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Container_Number);
 PARAMETER(PAR.USR_Load_ID);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.Trailer Available to assn
  PGM.*Return_code = 'TRLRAVL';

  //?USER: Process Data record

  CASE;

  // IF DB1.Load ID NE PAR.Load ID
  IF DB1.Load_ID <> PAR.Load_ID;

  CASE;

  // IF DB1.Load Status is Prior to Shipped
  IF DB1.Load_Status = 'C'/'E'/'L'/'U';

  // PGM.*Return code = CND.Trailer already assigned
  PGM.*Return_code = 'TRLRASN';

  // PAR.USR Load ID = DB1.Load ID
  PAR.USR_Load_ID = DB1.Load_ID;

  QUIT;

  // IF DB1.Load Status is Shipped or Invoiced
  IF DB1.Load_Status = 'I'/'S';

  // PGM.*Return code = CND.Trailer Available to assn
  PGM.*Return_code = 'TRLRAVL';

  ENDIF;

  ENDIF;

 }

}


//?load, carrier, trailer tests
CASE;

// IF LCL.Load Status is Shipped or Invoiced
IF LCL.Load_Status = 'I'/'S';

//?** OKAY if Load HDR is Shipped or Invoiced            E002021
//?load, carrier, trailer tests
// IF PGM.*Return code is Trailer already assigned
IF PGM.*Return_code = 'TRLRASN';

// AND LCL.Load Id 3 NE DTL.Load ID
AND LCL.Load_Id_3 <> DTL.Load_ID;

//?** Container exists in Order Header Extension file
// Send error message - 'Trailer is already assigned to load &2'
ERROR(USR2618);
MSGPARM(DTL.OHE_Container_Number);
MSGPARM(LCL.Load_Id_3);

// LCL.Status Flag 10 Y/N = CND.No
LCL.Status_Flag_10_Y_N = 'N';

//?load, carrier, trailer tests
// IF PGM.*Return code is Trailer Available to assn
IF PGM.*Return_code = 'TRLRAVL';

//?* Don't update here, Okay if available or
//?** Trailer exists but w/diff carrier/shipping line
//?load, carrier, trailer tests
// IF LCL.USR Load Type NE LCL.Load Type
IF LCL.USR_Load_Type <> LCL.Load_Type;

//?* Error message moved up above Info messages
// Send error message - 'Trailer Load Type &2 disagrees with Load Type &1 on the Load.'
ERROR(USR2613);
MSGPARM(LCL.Load_Type);
MSGPARM(LCL.USR_Load_Type);
MSGPARM(DTL.OHE_Container_Number);

//?load, carrier, trailer tests
// IF LCL.Available Status is Not Yes
IF LCL.Available_Status = *BLANK/'N';

// AND PAR.Load ID NE DTL.Load ID
AND PAR.Load_ID <> DTL.Load_ID;

// Send information message - 'Warning: Trailer is not Available for assignment.'
MESSAGE(USR2616 *INFO);
MSGPARM(DTL.OHE_Container_Number);

//?load, carrier, trailer tests
// IF LCL.Seaboard Owned Status is yes
IF LCL.Seaboard_Owned_Status = 'Y';

// Send information message - 'Warning:  Trailer is Seaboard Owned.'
MESSAGE(USR2617 *INFO);
MSGPARM(DTL.OHE_Container_Number);

//?load, carrier, trailer tests
// IF LCL.On Yard Date is not entered
IF LCL.On_Yard_Date = *ZERO;

// Send information message - 'Warning: Trailer is not On Yard.'
MESSAGE(USR2619 *INFO);
MSGPARM(DTL.OHE_Container_Number);

//?load, carrier, trailer tests
// IF LCL.Company Number NE DTL.Company Number
IF LCL.Company_Number <> DTL.Company_Number;

//?* Info error moved to bottom of list of tests
// Send information message - 'Trailer Co# & Load Start Co# do not match-Press enter'
MESSAGE(USR3902 *INFO);
MSGPARM(DTL.OHE_Container_Number);

ENDIF;

ENDIF;

ENDIF;

//?* If Container is entered, replace the Trailer ID     E004079
CASE;

// IF DTL.OHE Container Number is Entered
IF DTL.OHE_Container_Number <> *BLANK;

// DTL.Trailer Id = DTL.OHE Container Number
DTL.Trailer_Id = DTL.OHE_Container_Number;

ENDIF;

//?* If Container is cleared/chgd, chg Trailer ID     S00
CASE;

// IF DTL.OHE Container Number is Not Entered
IF DTL.OHE_Container_Number = *BLANK;

// AND WRK.OHE Container Number is Entered
AND WRK.OHE_Container_Number <> *BLANK;

// DTL.Trailer Id = DTL.OHE Container Number
DTL.Trailer_Id = DTL.OHE_Container_Number;

ENDIF;

//?DO4595 DN 11/29/22-Send Info Msg If EDI Interchange Not Active.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.EDI Interchange Active U = CND.No
LCL.EDI_Interchange_Active_U = 'N';

// LCL.Generic Message 80 USR = CND.Not Entered
LCL.Generic_Message_80_USR = *BLANK;

//?Validate if All Orders for Load NOW have the Same Booking #.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Orders have Same Booking# = PAR.Orders have Same Booking#
LCL.Orders_have_Same_Booking# = PAR.Orders_have_Same_Booking#;

//?Override 'Orders have Same Booking#'?
CASE;

// IF LCL.Orders have Same Booking# is No
IF LCL.Orders_have_Same_Booking# = 'N';

//?This means there were multiple Orders with different Booking #.
//?Validating prior to updating of OHE.
EXECUTE FUNCTION(Val Ord Same Booking# RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2215873;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(LCL.Same_Booking#_USR);
{
 //?USER: Initialize routine

 // PAR.Same Booking# USR = CND.No
 PAR.Same_Booking#_USR = 'N';

 // LCL.Same Booking# Count U = CON.*ZERO
 LCL.Same_Booking#_Count_U = *ZERO;

 // LCL.Not Same Booking# Count U = CON.*ZERO
 LCL.Not_Same_Booking#_Count_U = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Booking#/Type Code2RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2215875;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.OHE_Booking_Number);
 PARAMETER(LCL.OHE_Override_Type_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.OHE Override Type Code is ES
 IF LCL.OHE_Override_Type_Code = 'ES';

 CASE;

 // IF PAR.OHE Booking Number EQ LCL.OHE Booking Number
 IF PAR.OHE_Booking_Number = LCL.OHE_Booking_Number;

 // LCL.Same Booking# Count U = LCL.Same Booking# Count U + CON.1
 LCL.Same_Booking#_Count_U = LCL.Same_Booking#_Count_U + 1;

 // PAR.Same Booking# USR = CND.Yes
 PAR.Same_Booking#_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Not Same Booking# Count U = LCL.Not Same Booking# Count U + CON.1
 LCL.Not_Same_Booking#_Count_U = LCL.Not_Same_Booking#_Count_U + 1;

 // PAR.Same Booking# USR = CND.No
 PAR.Same_Booking#_USR = 'N';

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?If Only 1 Not Same Booking # Then Mark as Same Booking #.
 CASE;

 // IF LCL.Not Same Booking# Count U is 1
 IF LCL.Not_Same_Booking#_Count_U = 1;

 // AND LCL.Same Booking# Count U is GE 1
 AND LCL.Same_Booking#_Count_U >= 1;

 // PAR.Same Booking# USR = CND.Yes
 PAR.Same_Booking#_USR = 'Y';

 ENDIF;

}


//?Same Booking# Then Override 'Orders have Same Booking#=Y'.
CASE;

// IF LCL.Same Booking# USR is Yes
IF LCL.Same_Booking#_USR = 'Y';

// LCL.Orders have Same Booking# = CND.Yes
LCL.Orders_have_Same_Booking# = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Proceed If Order(s) Have Same Booking #.
CASE;

// IF LCL.Orders have Same Booking# is Not No
IF LCL.Orders_have_Same_Booking# = *BLANK/'Y';

EXECUTE FUNCTION(RTV Record Status     RT) TYPE(RTVOBJ) FILE(PNGNREP)           AC2210684;
PARAMETER('SHPEXP');
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Record Status is Active
IF LCL.Record_Status = 'A';

// LCL.EDI Interchange Active U = CND.Yes
LCL.EDI_Interchange_Active_U = 'Y';

//?Send Warning Message If CBP SCAC is Not Entered. EDI 601 Required Value.
CASE;

// IF DTL.Shipping Line is entered
IF DTL.Shipping_Line <> *BLANK;

// AND DTL.Port Delv Terminal is Entered
AND DTL.Port_Delv_Terminal <> *BLANK;

EXECUTE FUNCTION(Rtv CBP Info f/EDI 601 RT) TYPE(RTVOBJ) FILE(PUC1REP)          AC2211898;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(LCL.CBP_Export_Port_Code);
PARAMETER(LCL.CBP_Std_Carrier_Alpha_Cde);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Send Warning Message.
CASE;

// IF LCL.CBP Std Carrier Alpha Cde is Not Entered
IF LCL.CBP_Std_Carrier_Alpha_Cde = *BLANK;

// LCL.Generic Message 80 USR = CONCAT(CON.CBP SCAC not entered, EDI,CON.601 not created. WW Shipp,C
LCL.Generic_Message_80_USR = 'CBP SCAC not entered, EDI' + '601 not created. WW Shipp' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.ing Line Ports to assign.,CON.
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'ing Line Ports to assign.' (0);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.EDI Interchange SHPEXP is,CON.not active. EDI 601 data,CO
LCL.Generic_Message_80_USR = 'EDI Interchange SHPEXP is' + 'not active. EDI 601 data' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.sets will not be created.,CON.
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'sets will not be created.' (1);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT OHE for Exp Instr2 CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2013928;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(DTL.OHE_Vessel_Airline);
PARAMETER(DTL.OHE_Voyage_Flight);
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(DTL.OHE_Discharge_Port_Airprt);
PARAMETER(DTL.OHE_Sail_Flight_Date);
PARAMETER(DTL.OHE_Port_Cut_Date);
PARAMETER(DTL.OHE_Arrival_Date);
PARAMETER(DTL.OHE_Late_Delivery_Code);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(DTL.OHE_Comment_1);
PARAMETER(DTL.OHE_Comment_2);
PARAMETER(DTL.OHE_Unused_Number_1_11_0);
PARAMETER(DTL.OHE_Unused_Number_2_11_0);
PARAMETER(DTL.OHE_Unused_Number_3_11_0);
PARAMETER(DTL.OHE_Unused_Number_4_11_0);
PARAMETER(DTL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(DTL.OHE_HPB_RIN_Price);
PARAMETER(DTL.Transload_Terminal_Fees);
PARAMETER(DTL.OHE_Est_Arrv_at_Dest_Date);
PARAMETER(DTL.OHE_Backhaul_ETA_RtrnDate);
PARAMETER(DTL.OHE_Port_Pier_Paid_Date);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(DTL.OHE_Carrier_SCAC_Code);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(DTL.OHE_PO_ACK_Flag);
PARAMETER(DTL.OHE_Override_Type_Code);
PARAMETER(DTL.OHE_Backhaul_Status);
PARAMETER(DTL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(DTL.OHE_Load_Haul_Type);
PARAMETER(DTL.OHE_Backhaul_Carrier_Code);
PARAMETER(DTL.OHE_Bookings_Confirmed);
PARAMETER(DTL.OHE_EDI_Error_Reasons);
PARAMETER(DTL.OHE_EDI_Error_Reasons_2);
PARAMETER(DTL.HPB_COA_Batch_Number);
PARAMETER(DTL.Delivery_P_O_Number);
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(DTL.OHE_EDI_943_Action);
PARAMETER(DTL.OHE_EDI_944_Action);
PARAMETER(DTL.OHE_EDI_940_Action);
PARAMETER(DTL.OHE_EDI_945_Action);
PARAMETER(DTL.OHE_EDI_856_Action);
PARAMETER(DTL.OHE_EDI_824_Action);
PARAMETER(DTL.OHE_Transload_Seal_Nbr);
PARAMETER(DTL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Backhaul_Container#);
PARAMETER(DTL.OHE_Backhaul_Chassis_#);
PARAMETER(DTL.OHE_Transload_Container#);
PARAMETER(DTL.OHE_Pier_Pass_Invoice);
PARAMETER(*BLANK);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
PARAMETER(DTL.OHE_Backhaul_Comment);
PARAMETER(DTL.String_30);
PARAMETER(DTL.OHE_Backhaul_Return_to_Co);
PARAMETER(DTL.LD_Stop_Drop);
PARAMETER(DTL.OHE_Unused_Number_3_0);
PARAMETER(DTL.OHE_Pier_Pass_Fee_Amount);
PARAMETER(DTL.OHE_Port_Check_Fee_Amount);
PARAMETER(DTL.USR_Time_4_0);
PARAMETER(DTL.OHE_Backhaul_Truck_Number);
PARAMETER(DTL.OHE_Load_Sched_Seq_Num);
PARAMETER(DTL.Original_Appointment_Date);
PARAMETER(DTL.Original_Appointment_Time);
PARAMETER(DTL.OHE_PowerPro_Load#_Outbnd);
PARAMETER(DTL.OHE_PowerPro_Load#_Bckhl);
PARAMETER(DTL.OHE_Unused_Numeric_9_0_3);
PARAMETER(DTL.OHE_Orig_ABS_Freight_Rate);
PARAMETER(DTL.OHE_Genset_Number);
PARAMETER(DTL.OHE_Email_BOL_Sent);
PARAMETER(DTL.OHE_EDI_Order_Automated);
PARAMETER(DTL.OHE_EDI_601_Action);
PARAMETER(DTL.OHE_Unused_Status_4);
PARAMETER(DTL.OHE_Unused_Text_1);
PARAMETER(DTL.OHE_Unused_Text_2);
PARAMETER(DTL.OHE_Customer_Vendor_f_PO);
PARAMETER(DTL.OHE_EDI_824_AES_ITN_#);
PARAMETER(DTL.OHE_Unused_Text_5);
PARAMETER(DTL.OHE_Unused_Date_1);
PARAMETER(DTL.OHE_Unused_Date_2);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
PARAMETER(DTL.Trailer_Id);
PARAMETER(DTL.Transloader_Carrier_Code);
PARAMETER(LCL.Orders_have_Same_Booking#);
PARAMETER(LCL.EDI_Interchange_Active_U);
PARAMETER(LCL.Country_Code);
PARAMETER(LCL.CBP_Export_Port_Code);
PARAMETER(LCL.CBP_Std_Carrier_Alpha_Cde);
PARAMETER(LCL.CBP_Foreign_Port_Code);
PARAMETER(DTL.Warehouse_Type);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 //?USER: Processing after Data update

 //?** 05/19/16   RMC E4119  remove live with tpm check
 EXECUTE FUNCTION(CHG Transloader for ExpCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1492004;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?** Update Trailer ID with par.trailer id instead of container  E004008
 EXECUTE FUNCTION(CHG Container for ExprtCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC2016604;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Company_Number);
 PARAMETER(NLL.Scheduled_Ship_Date);
 PARAMETER(NLL.LTL_Flag);
 PARAMETER(NLL.Load_Status);
 PARAMETER(NLL.Reefer_Temperature);
 PARAMETER(NLL.Seal_1);
 PARAMETER(NLL.Seal_2);
 PARAMETER(NLL.Seal_3);
 PARAMETER(NLL.Seal_4);
 PARAMETER(NLL.Seal_2_Unused);
 PARAMETER(NLL.Total_Load_Order_Weight);
 PARAMETER(NLL.Flat_Amount);
 PARAMETER(NLL.Allocate_Pounds_Miles);
 PARAMETER(NLL.Total_Stops);
 PARAMETER(NLL.Trailer_Id);
 PARAMETER(NLL.Transloader_Carrier_Code);
 PARAMETER(NLL.BOL_Time);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(NLL.Truck_Size);
 PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
 PARAMETER(NLL.Rated_Freight);
 PARAMETER(NLL.Ship_Status);
 PARAMETER(LCL.Load_Type);
 PARAMETER(NLL.Number_Pallets_Received);
 PARAMETER(NLL.Number_Pallets_Loaded);
 PARAMETER(NLL.Load_Carrier_Pay_Amt);
 PARAMETER(NLL.Estimated_Arrival_Time);
 PARAMETER(NLL.Actual_Arrival_Date);
 PARAMETER(NLL.Actual_Arrival_Time);
 PARAMETER(NLL.Trailer_IN_Weight);
 PARAMETER(NLL.Trailer_OUT_Weight);
 PARAMETER(NLL.Actual_Departure_Date);
 PARAMETER(NLL.Departure_Time);
 PARAMETER(NLL.Schedule_Sequence_Number);
 PARAMETER(NLL.Product_Temperature);
 PARAMETER(NLL.Number_Spacers_Loaded);
 PARAMETER(NLL.Car_Veh_Initials);
 PARAMETER(NLL.Total_Load_Miles);
 PARAMETER(NLL.Recorder_ID);
 PARAMETER(NLL.Shipping_Method);
 PARAMETER(NLL.Ship_From_Warehouse);
 PARAMETER(NLL.Ship_To_State_Code);
 PARAMETER(NLL.Gross_Weight);
 PARAMETER(NLL.Carrier_Broker);
 PARAMETER(NLL.Export_Status);
 PARAMETER(NLL.Actual_Ship_Date);
 PARAMETER(NLL.On_Time_Y_N);
 PARAMETER(NLL.Truck_Ready_Date);
 PARAMETER(NLL.Truck_Ready_Time);
 PARAMETER(NLL.Spotted_Date);
 PARAMETER(NLL.Spotted_Time);
 PARAMETER(NLL.Load_Finished_Date);
 PARAMETER(NLL.Load_Finished_Time);
 PARAMETER(NLL.BOL_Complete_Date);
 PARAMETER(NLL.BOL_Complete_Time);
 PARAMETER(NLL.BOL_Received_Date);
 PARAMETER(NLL.BOL_Received_Time);
 PARAMETER(NLL.Truck_Departure_Date);
 PARAMETER(NLL.Truck_Departure_Time);
 PARAMETER(NLL.Adjusted_Departure_Date);
 PARAMETER(NLL.Adjusted_Departure_Time);
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(NLL.Port_Delv_Terminal);
 PARAMETER(NLL.Vessel_Name);
 PARAMETER(NLL.Voyage);
 PARAMETER(NLL.Sail_Date);
 PARAMETER(NLL.Booking_Number);
 PARAMETER(NLL.Discharge_Port);
 PARAMETER(NLL.Arrival_Date);
 PARAMETER(NLL.Container_Number);
 PARAMETER(NLL.Date_In);
 PARAMETER(NLL.Time_In);
 PARAMETER(NLL.Date_Out);
 PARAMETER(NLL.Time_Out);
 PARAMETER(NLL.Load_Total_Freight);
 PARAMETER(NLL.Scheduled_Delivery_Date);
 PARAMETER(NLL.Scheduled_Delivery_Time);
 PARAMETER(NLL.LH_Unused_Sts);
 PARAMETER(NLL.LH_Carrier_Payment_Sts);
 PARAMETER(NLL.Bring_Back_Miles);
 PARAMETER(NLL.Requested_Delivery_Date);
 PARAMETER(NLL.Load_Acceptance_Flag);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(NLL.On_Yard_Date);
 PARAMETER(NLL.On_Yard_Time);
 PARAMETER(NLL.Deadline_Departure_Date);
 PARAMETER(NLL.Deadline_Departure_Time);
 PARAMETER(NLL.Load_Held_Over);
 PARAMETER(NLL.Load_Held_Over_Reason);
 PARAMETER(NLL.Load_Held_Over_Rsn_Cmt);
 PARAMETER(NLL.Ocean_BOL_Number);
 PARAMETER(NLL.Express_Mail_Number);
 PARAMETER(NLL.Express_Mail_Date);
 PARAMETER(NLL.Load_Shag_Flag);
 PARAMETER(NLL.Load_Wash_Flag);
 PARAMETER(NLL.Product_Complete_Date);
 PARAMETER(NLL.Product_Complete_Time);
 PARAMETER(NLL.Pallets_Loaded);
 PARAMETER(NLL.Avg_Pallet_Tare);
 PARAMETER(NLL.Tot_Pallet_Tare);
 PARAMETER(NLL.Load_Confirmed_Sts);
 PARAMETER(NLL.Load_Confirmed_Contact);
 PARAMETER(NLL.Load_Confirmation_Time);
 PARAMETER(NLL.Load_Door_1);
 PARAMETER(NLL.Override_Total_Load_Miles);
 PARAMETER(NLL.Load_Door_2);
 PARAMETER(NLL.Partial_Load);
 PARAMETER(NLL.Load_Confirmation_Fax_Sts);
 PARAMETER(NLL.Export_Load_USDA_OK);
 PARAMETER(NLL.Late_Delivery_Email_Flag);
 PARAMETER(NLL.Load_Actual_Freight);
 PARAMETER(NLL.Hide_on_WW_Load_Sts);
 PARAMETER(NLL.Late_Billing_Email_Flag);
 PARAMETER(NLL.Shipping_Temp_C_F_txt);
 PARAMETER(NLL.LH_Held_Over_Rsn_Cmt);
 PARAMETER(NLL.Multi_Company_Load);
 PARAMETER(NLL.Fax_Sent_to_SSI_Carrier);
 PARAMETER(NLL.Schedule_Pos_Load_Grade);
 PARAMETER(NLL.LH_Power_Only_Load);
 PARAMETER(NLL.MG_Created_Load);
 PARAMETER(NLL.LH_Unused_Sts_5);
 PARAMETER(NLL.Load_U_M);
 PARAMETER(NLL.TPM_Shipment_Status);
 PARAMETER(NLL.LH_Unused_Sts_8);
 PARAMETER(NLL.LH_On_Time_Reason_Code);
 PARAMETER(NLL.LH_Held_Over_Reason);
 PARAMETER(NLL.LH_Carrier_Paid_Dte);
 PARAMETER(NLL.LH_Carrier_Paid_Time);
 PARAMETER(NLL.LH_Last_Combo_Prod_Date);
 PARAMETER(NLL.LH_Last_Combo_Prod_Time);
 PARAMETER(NLL.LPT_Load_Plan_Start_Dt);
 PARAMETER(NLL.LPT_Load_Plan_Start_Tm);
 PARAMETER(NLL.TPM_Planned_Ship_Date);
 PARAMETER(NLL.LH_Unused_Time_4);
 PARAMETER(NLL.LH_Unused_Date_5);
 PARAMETER(NLL.LH_Unused_Time_5);
 PARAMETER(NLL.LH_Unused_Date_6);
 PARAMETER(NLL.LH_Unused_Time_6);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Trailer_Type);
 PARAMETER(LCL.Seaboard_Owned_Status);
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER(LCL.Assigned_Status);
 PARAMETER(LCL.Available_Status);
 PARAMETER(LCL.Not_Available_Reason_Code);
 PARAMETER(LCL.Comment_Line);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(CHG Asgn, Avail, On Yd CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC2084912;
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Trailer_Type);
 PARAMETER(LCL.Seaboard_Owned_Status);
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Status_Unused_1);
 PARAMETER(LCL.Status_Unused_2);
 PARAMETER(LCL.Status_Unused_3);
 PARAMETER(LCL.Status_Unused_4);
 PARAMETER(LCL.Status_Unused_5);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?DO4595 DN 11/29/22-Create EDI 601 Data Sets.
 CASE;

 // IF PAR.Orders have Same Booking# is Not No
 IF PAR.Orders_have_Same_Booking# = *BLANK/'Y';

 // AND PAR.EDI Interchange Active U is Yes
 AND PAR.EDI_Interchange_Active_U = 'Y';

 // AND DB1.OHE City is Entered
 AND DB1.OHE_City <> *BLANK;

 // AND DB1.OHE Discharge Port/Airprt is Not Blank
 AND DB1.OHE_Discharge_Port_Airprt <> *BLANK;

 // AND DB1.OHE Sail/Flight Date is not equal zero
 AND DB1.OHE_Sail_Flight_Date <> *ZERO;

 // AND DB1.Shipping Line is entered
 AND DB1.Shipping_Line <> *BLANK;

 // AND DB1.OHE Vessel/Airline is Not Blank
 AND DB1.OHE_Vessel_Airline <> *BLANK;

 // AND DB1.OHE Booking Number is Entered
 AND DB1.OHE_Booking_Number <> *BLANK;

 // AND DB1.OHE Override Type Code is ES
 AND DB1.OHE_Override_Type_Code = 'ES';

 // AND DB1.Port Delv Terminal is Entered
 AND DB1.Port_Delv_Terminal <> *BLANK;

 // AND PAR.CBP Std Carrier Alpha Cde is Entered
 AND PAR.CBP_Std_Carrier_Alpha_Cde <> *BLANK;

 // AND NOT DB1.OHE EDI 824 AES ITN # is All 9s
 AND ! DB1.OHE_EDI_824_AES_ITN_# = '999999999999999';

 //?ITN # would only be populated once EDI 824 is received.
 // Call program Crt EDI 601 Exp Shp InfXF.
 CALL PROGRAM(Crt EDI 601 Exp Shp InfXF) ('PUXSXFR');
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Shipping_Line);
 PARAMETER(DB1.Port_Delv_Terminal);
 PARAMETER(DB1.OHE_Vessel_Airline);
 PARAMETER(DB1.OHE_Sail_Flight_Date);
 PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.CBP_Export_Port_Code);
 PARAMETER(PAR.CBP_Std_Carrier_Alpha_Cde);
 PARAMETER(PAR.CBP_Foreign_Port_Code);
 PARAMETER('A');

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG OHE for Exp Instr2 CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2013963;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(DTL.OHE_Vessel_Airline);
PARAMETER(DTL.OHE_Voyage_Flight);
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(DTL.OHE_Discharge_Port_Airprt);
PARAMETER(DTL.OHE_Sail_Flight_Date);
PARAMETER(DTL.OHE_Port_Cut_Date);
PARAMETER(DTL.OHE_Arrival_Date);
PARAMETER(DTL.OHE_Late_Delivery_Code);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(DTL.OHE_Comment_1);
PARAMETER(DTL.OHE_Comment_2);
PARAMETER(DTL.OHE_Unused_Number_1_11_0);
PARAMETER(DTL.OHE_Unused_Number_2_11_0);
PARAMETER(DTL.OHE_Unused_Number_3_11_0);
PARAMETER(DTL.OHE_Unused_Number_4_11_0);
PARAMETER(DTL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(DTL.OHE_HPB_RIN_Price);
PARAMETER(DTL.Transload_Terminal_Fees);
PARAMETER(DTL.OHE_Est_Arrv_at_Dest_Date);
PARAMETER(DTL.OHE_Backhaul_ETA_RtrnDate);
PARAMETER(DTL.OHE_Port_Pier_Paid_Date);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(DTL.OHE_Carrier_SCAC_Code);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(DTL.OHE_PO_ACK_Flag);
PARAMETER(DTL.OHE_Override_Type_Code);
PARAMETER(DTL.OHE_Backhaul_Status);
PARAMETER(DTL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(DTL.OHE_Load_Haul_Type);
PARAMETER(DTL.OHE_Backhaul_Carrier_Code);
PARAMETER(DTL.OHE_Bookings_Confirmed);
PARAMETER(DTL.OHE_EDI_Error_Reasons);
PARAMETER(DTL.OHE_EDI_Error_Reasons_2);
PARAMETER(DTL.HPB_COA_Batch_Number);
PARAMETER(DTL.Delivery_P_O_Number);
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(DTL.OHE_EDI_943_Action);
PARAMETER(DTL.OHE_EDI_944_Action);
PARAMETER(DTL.OHE_EDI_940_Action);
PARAMETER(DTL.OHE_EDI_945_Action);
PARAMETER(DTL.OHE_EDI_856_Action);
PARAMETER(DTL.OHE_EDI_824_Action);
PARAMETER(DTL.OHE_Transload_Seal_Nbr);
PARAMETER(DTL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Backhaul_Container#);
PARAMETER(DTL.OHE_Backhaul_Chassis_#);
PARAMETER(DTL.OHE_Transload_Container#);
PARAMETER(DTL.OHE_Pier_Pass_Invoice);
PARAMETER(DTL.OHE_Carrier_Nm);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
PARAMETER(DTL.OHE_Backhaul_Comment);
PARAMETER(DTL.String_30);
PARAMETER(DTL.OHE_Backhaul_Return_to_Co);
PARAMETER(DTL.LD_Stop_Drop);
PARAMETER(DTL.OHE_Unused_Number_3_0);
PARAMETER(DTL.OHE_Pier_Pass_Fee_Amount);
PARAMETER(DTL.OHE_Port_Check_Fee_Amount);
PARAMETER(DTL.USR_Time_4_0);
PARAMETER(DTL.OHE_Backhaul_Truck_Number);
PARAMETER(DTL.OHE_Load_Sched_Seq_Num);
PARAMETER(DTL.Original_Appointment_Date);
PARAMETER(DTL.Original_Appointment_Time);
PARAMETER(DTL.OHE_PowerPro_Load#_Outbnd);
PARAMETER(DTL.OHE_PowerPro_Load#_Bckhl);
PARAMETER(DTL.OHE_Unused_Numeric_9_0_3);
PARAMETER(DTL.OHE_Orig_ABS_Freight_Rate);
PARAMETER(DTL.OHE_Genset_Number);
PARAMETER(DTL.OHE_Email_BOL_Sent);
PARAMETER(DTL.OHE_EDI_Order_Automated);
PARAMETER(DTL.OHE_EDI_601_Action);
PARAMETER(DTL.OHE_Unused_Status_4);
PARAMETER(DTL.OHE_Unused_Text_1);
PARAMETER(DTL.OHE_Unused_Text_2);
PARAMETER(DTL.OHE_Customer_Vendor_f_PO);
PARAMETER(DTL.OHE_EDI_824_AES_ITN_#);
PARAMETER(DTL.OHE_Unused_Text_5);
PARAMETER(DTL.OHE_Unused_Date_1);
PARAMETER(DTL.OHE_Unused_Date_2);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
PARAMETER(DTL.Transloader_Carrier_Code);
PARAMETER(DTL.Trailer_Id);
PARAMETER(DTL.Carrier_Code);
PARAMETER(LCL.Load_Type);
PARAMETER(PAR.Container_Number_usr_1);
PARAMETER(PAR.Shipping_Line_1_USR);
PARAMETER(LCL.Orders_have_Same_Booking#);
PARAMETER(LCL.EDI_Interchange_Active_U);
PARAMETER(LCL.Country_Code);
PARAMETER(LCL.CBP_Export_Port_Code);
PARAMETER(LCL.CBP_Std_Carrier_Alpha_Cde);
PARAMETER(LCL.CBP_Foreign_Port_Code);
PARAMETER(DTL.Warehouse_Type);
{
 //?USER: Processing before Data read

 //?DO4595 DN 12/09/22-Initialize.
 // LCL.Create EDI 601 USR = CND.No
 LCL.Create_EDI_601_USR = 'N';

 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT OHE for Exp Instr2 CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2013928;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Port_Delv_Terminal);
 PARAMETER(PAR.OHE_City);
 PARAMETER(PAR.OHE_Vessel_Airline);
 PARAMETER(PAR.OHE_Voyage_Flight);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(PAR.OHE_Discharge_Port_Airprt);
 PARAMETER(PAR.OHE_Sail_Flight_Date);
 PARAMETER(PAR.OHE_Port_Cut_Date);
 PARAMETER(PAR.OHE_Arrival_Date);
 PARAMETER(PAR.OHE_Late_Delivery_Code);
 PARAMETER(PAR.OHE_Ship_Status);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(PAR.OHE_Comment_1);
 PARAMETER(PAR.OHE_Comment_2);
 PARAMETER(PAR.OHE_Unused_Number_1_11_0);
 PARAMETER(PAR.OHE_Unused_Number_2_11_0);
 PARAMETER(PAR.OHE_Unused_Number_3_11_0);
 PARAMETER(PAR.OHE_Unused_Number_4_11_0);
 PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
 PARAMETER(PAR.OHE_HPB_RIN_Price);
 PARAMETER(PAR.Transload_Terminal_Fees);
 PARAMETER(PAR.OHE_Est_Arrv_at_Dest_Date);
 PARAMETER(PAR.OHE_Backhaul_ETA_RtrnDate);
 PARAMETER(PAR.OHE_Port_Pier_Paid_Date);
 PARAMETER(PAR.OHE_Actual_Ship_Date);
 PARAMETER(PAR.OHE_Carrier_SCAC_Code);
 PARAMETER(PAR.OHE_Spot_Buy);
 PARAMETER(PAR.OHE_PO_ACK_Flag);
 PARAMETER(PAR.OHE_Override_Type_Code);
 PARAMETER(PAR.OHE_Backhaul_Status);
 PARAMETER(PAR.OHE_Backhaul_ETA_AM_PM);
 PARAMETER(PAR.OHE_Load_Haul_Type);
 PARAMETER(PAR.OHE_Backhaul_Carrier_Code);
 PARAMETER(PAR.OHE_Bookings_Confirmed);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER(PAR.OHE_EDI_Error_Reasons_2);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(PAR.Delivery_P_O_Number);
 PARAMETER(PAR.OHE_Intended_for_ExportCC);
 PARAMETER(PAR.OHE_EDI_943_Action);
 PARAMETER(PAR.OHE_EDI_944_Action);
 PARAMETER(PAR.OHE_EDI_940_Action);
 PARAMETER(PAR.OHE_EDI_945_Action);
 PARAMETER(PAR.OHE_EDI_856_Action);
 PARAMETER(PAR.OHE_EDI_824_Action);
 PARAMETER(PAR.OHE_Transload_Seal_Nbr);
 PARAMETER(PAR.OHE_Abs_Rate_Override_Rsn);
 PARAMETER(PAR.OHE_Appt_Confirmation_#);
 PARAMETER(PAR.OHE_Backhaul_Container#);
 PARAMETER(PAR.OHE_Backhaul_Chassis_#);
 PARAMETER(PAR.OHE_Transload_Container#);
 PARAMETER(PAR.OHE_Pier_Pass_Invoice);
 PARAMETER(PAR.OHE_Carrier_Nm);
 PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
 PARAMETER(PAR.OHE_Backhaul_Comment);
 PARAMETER(PAR.Letter_of_Credit_Number);
 PARAMETER(PAR.OHE_Backhaul_Return_to_Co);
 PARAMETER(PAR.LD_Stop_Drop);
 PARAMETER(PAR.OHE_Unused_Number_3_0);
 PARAMETER(PAR.OHE_Pier_Pass_Fee_Amount);
 PARAMETER(PAR.OHE_Port_Check_Fee_Amount);
 PARAMETER(PAR.OHE_Port_Cut_Time);
 PARAMETER(PAR.OHE_Backhaul_Truck_Number);
 PARAMETER(PAR.OHE_Load_Sched_Seq_Num);
 PARAMETER(PAR.Original_Appointment_Date);
 PARAMETER(PAR.Original_Appointment_Time);
 PARAMETER(PAR.OHE_PowerPro_Load#_Outbnd);
 PARAMETER(PAR.OHE_PowerPro_Load#_Bckhl);
 PARAMETER(PAR.OHE_Unused_Numeric_9_0_3);
 PARAMETER(PAR.OHE_Orig_ABS_Freight_Rate);
 PARAMETER(PAR.OHE_Genset_Number);
 PARAMETER(PAR.OHE_Email_BOL_Sent);
 PARAMETER(PAR.OHE_EDI_Order_Automated);
 PARAMETER(PAR.OHE_EDI_601_Action);
 PARAMETER(PAR.OHE_Unused_Status_4);
 PARAMETER(PAR.OHE_Unused_Text_1);
 PARAMETER(PAR.OHE_Unused_Text_2);
 PARAMETER(PAR.OHE_Customer_Vendor_f_PO);
 PARAMETER(PAR.OHE_EDI_824_AES_ITN_#);
 PARAMETER(PAR.OHE_Unused_Text_5);
 PARAMETER(PAR.OHE_Unused_Date_1);
 PARAMETER(PAR.OHE_Unused_Date_2);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(PAR.Orders_have_Same_Booking#);
 PARAMETER(PAR.EDI_Interchange_Active_U);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.CBP_Export_Port_Code);
 PARAMETER(PAR.CBP_Std_Carrier_Alpha_Cde);
 PARAMETER(PAR.CBP_Foreign_Port_Code);
 PARAMETER(PAR.Warehouse_Type);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  //?USER: Processing after Data update

  //?** 05/19/16   RMC E4119  remove live with tpm check
  EXECUTE FUNCTION(CHG Transloader for ExpCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1492004;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Transloader_Carrier_Code);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?** Update Trailer ID with par.trailer id instead of container  E004008
  EXECUTE FUNCTION(CHG Container for ExprtCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC2016604;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Trailer_Id);
  PARAMETER(PAR.OHE_Container_Number);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
  PARAMETER(DB1.Load_ID);
  PARAMETER(LCL.Company_Number);
  PARAMETER(NLL.Scheduled_Ship_Date);
  PARAMETER(NLL.LTL_Flag);
  PARAMETER(NLL.Load_Status);
  PARAMETER(NLL.Reefer_Temperature);
  PARAMETER(NLL.Seal_1);
  PARAMETER(NLL.Seal_2);
  PARAMETER(NLL.Seal_3);
  PARAMETER(NLL.Seal_4);
  PARAMETER(NLL.Seal_2_Unused);
  PARAMETER(NLL.Total_Load_Order_Weight);
  PARAMETER(NLL.Flat_Amount);
  PARAMETER(NLL.Allocate_Pounds_Miles);
  PARAMETER(NLL.Total_Stops);
  PARAMETER(NLL.Trailer_Id);
  PARAMETER(NLL.Transloader_Carrier_Code);
  PARAMETER(NLL.BOL_Time);
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(NLL.Truck_Size);
  PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
  PARAMETER(NLL.Rated_Freight);
  PARAMETER(NLL.Ship_Status);
  PARAMETER(LCL.Load_Type);
  PARAMETER(NLL.Number_Pallets_Received);
  PARAMETER(NLL.Number_Pallets_Loaded);
  PARAMETER(NLL.Load_Carrier_Pay_Amt);
  PARAMETER(NLL.Estimated_Arrival_Time);
  PARAMETER(NLL.Actual_Arrival_Date);
  PARAMETER(NLL.Actual_Arrival_Time);
  PARAMETER(NLL.Trailer_IN_Weight);
  PARAMETER(NLL.Trailer_OUT_Weight);
  PARAMETER(NLL.Actual_Departure_Date);
  PARAMETER(NLL.Departure_Time);
  PARAMETER(NLL.Schedule_Sequence_Number);
  PARAMETER(NLL.Product_Temperature);
  PARAMETER(NLL.Number_Spacers_Loaded);
  PARAMETER(NLL.Car_Veh_Initials);
  PARAMETER(NLL.Total_Load_Miles);
  PARAMETER(NLL.Recorder_ID);
  PARAMETER(NLL.Shipping_Method);
  PARAMETER(NLL.Ship_From_Warehouse);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(NLL.Gross_Weight);
  PARAMETER(NLL.Carrier_Broker);
  PARAMETER(NLL.Export_Status);
  PARAMETER(NLL.Actual_Ship_Date);
  PARAMETER(NLL.On_Time_Y_N);
  PARAMETER(NLL.Truck_Ready_Date);
  PARAMETER(NLL.Truck_Ready_Time);
  PARAMETER(NLL.Spotted_Date);
  PARAMETER(NLL.Spotted_Time);
  PARAMETER(NLL.Load_Finished_Date);
  PARAMETER(NLL.Load_Finished_Time);
  PARAMETER(NLL.BOL_Complete_Date);
  PARAMETER(NLL.BOL_Complete_Time);
  PARAMETER(NLL.BOL_Received_Date);
  PARAMETER(NLL.BOL_Received_Time);
  PARAMETER(NLL.Truck_Departure_Date);
  PARAMETER(NLL.Truck_Departure_Time);
  PARAMETER(NLL.Adjusted_Departure_Date);
  PARAMETER(NLL.Adjusted_Departure_Time);
  PARAMETER(LCL.Shipping_Line);
  PARAMETER(NLL.Port_Delv_Terminal);
  PARAMETER(NLL.Vessel_Name);
  PARAMETER(NLL.Voyage);
  PARAMETER(NLL.Sail_Date);
  PARAMETER(NLL.Booking_Number);
  PARAMETER(NLL.Discharge_Port);
  PARAMETER(NLL.Arrival_Date);
  PARAMETER(NLL.Container_Number);
  PARAMETER(NLL.Date_In);
  PARAMETER(NLL.Time_In);
  PARAMETER(NLL.Date_Out);
  PARAMETER(NLL.Time_Out);
  PARAMETER(NLL.Load_Total_Freight);
  PARAMETER(NLL.Scheduled_Delivery_Date);
  PARAMETER(NLL.Scheduled_Delivery_Time);
  PARAMETER(NLL.LH_Unused_Sts);
  PARAMETER(NLL.LH_Carrier_Payment_Sts);
  PARAMETER(NLL.Bring_Back_Miles);
  PARAMETER(NLL.Requested_Delivery_Date);
  PARAMETER(NLL.Load_Acceptance_Flag);
  PARAMETER(NLL.Warehouse_Code);
  PARAMETER(NLL.On_Yard_Date);
  PARAMETER(NLL.On_Yard_Time);
  PARAMETER(NLL.Deadline_Departure_Date);
  PARAMETER(NLL.Deadline_Departure_Time);
  PARAMETER(NLL.Load_Held_Over);
  PARAMETER(NLL.Load_Held_Over_Reason);
  PARAMETER(NLL.Load_Held_Over_Rsn_Cmt);
  PARAMETER(NLL.Ocean_BOL_Number);
  PARAMETER(NLL.Express_Mail_Number);
  PARAMETER(NLL.Express_Mail_Date);
  PARAMETER(NLL.Load_Shag_Flag);
  PARAMETER(NLL.Load_Wash_Flag);
  PARAMETER(NLL.Product_Complete_Date);
  PARAMETER(NLL.Product_Complete_Time);
  PARAMETER(NLL.Pallets_Loaded);
  PARAMETER(NLL.Avg_Pallet_Tare);
  PARAMETER(NLL.Tot_Pallet_Tare);
  PARAMETER(NLL.Load_Confirmed_Sts);
  PARAMETER(NLL.Load_Confirmed_Contact);
  PARAMETER(NLL.Load_Confirmation_Time);
  PARAMETER(NLL.Load_Door_1);
  PARAMETER(NLL.Override_Total_Load_Miles);
  PARAMETER(NLL.Load_Door_2);
  PARAMETER(NLL.Partial_Load);
  PARAMETER(NLL.Load_Confirmation_Fax_Sts);
  PARAMETER(NLL.Export_Load_USDA_OK);
  PARAMETER(NLL.Late_Delivery_Email_Flag);
  PARAMETER(NLL.Load_Actual_Freight);
  PARAMETER(NLL.Hide_on_WW_Load_Sts);
  PARAMETER(NLL.Late_Billing_Email_Flag);
  PARAMETER(NLL.Shipping_Temp_C_F_txt);
  PARAMETER(NLL.LH_Held_Over_Rsn_Cmt);
  PARAMETER(NLL.Multi_Company_Load);
  PARAMETER(NLL.Fax_Sent_to_SSI_Carrier);
  PARAMETER(NLL.Schedule_Pos_Load_Grade);
  PARAMETER(NLL.LH_Power_Only_Load);
  PARAMETER(NLL.MG_Created_Load);
  PARAMETER(NLL.LH_Unused_Sts_5);
  PARAMETER(NLL.Load_U_M);
  PARAMETER(NLL.TPM_Shipment_Status);
  PARAMETER(NLL.LH_Unused_Sts_8);
  PARAMETER(NLL.LH_On_Time_Reason_Code);
  PARAMETER(NLL.LH_Held_Over_Reason);
  PARAMETER(NLL.LH_Carrier_Paid_Dte);
  PARAMETER(NLL.LH_Carrier_Paid_Time);
  PARAMETER(NLL.LH_Last_Combo_Prod_Date);
  PARAMETER(NLL.LH_Last_Combo_Prod_Time);
  PARAMETER(NLL.LPT_Load_Plan_Start_Dt);
  PARAMETER(NLL.LPT_Load_Plan_Start_Tm);
  PARAMETER(NLL.TPM_Planned_Ship_Date);
  PARAMETER(NLL.LH_Unused_Time_4);
  PARAMETER(NLL.LH_Unused_Date_5);
  PARAMETER(NLL.LH_Unused_Time_5);
  PARAMETER(NLL.LH_Unused_Date_6);
  PARAMETER(NLL.LH_Unused_Time_6);
  PARAMETER(NLL.EDI_Status_1);
  PARAMETER(NLL.EDI_Status_2);
  PARAMETER(NLL.EDI_Status_3);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
  PARAMETER(LCL.Shipping_Line);
  PARAMETER(PAR.OHE_Container_Number);
  PARAMETER(LCL.Company_Number);
  PARAMETER(LCL.Load_Type);
  PARAMETER(LCL.Trailer_Type);
  PARAMETER(LCL.Seaboard_Owned_Status);
  PARAMETER(LCL.On_Yard_Status);
  PARAMETER(LCL.On_Yard_Date);
  PARAMETER(LCL.On_Yard_Time);
  PARAMETER(LCL.Assigned_Status);
  PARAMETER(LCL.Available_Status);
  PARAMETER(LCL.Not_Available_Reason_Code);
  PARAMETER(LCL.Comment_Line);
  PARAMETER(LCL.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  EXECUTE FUNCTION(CHG Asgn, Avail, On Yd CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC2084912;
  PARAMETER(LCL.Shipping_Line);
  PARAMETER(PAR.OHE_Container_Number);
  PARAMETER(LCL.Company_Number);
  PARAMETER(LCL.On_Yard_Status);
  PARAMETER(LCL.On_Yard_Date);
  PARAMETER(LCL.On_Yard_Time);
  PARAMETER('Y');
  PARAMETER('N');
  PARAMETER(LCL.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
  PARAMETER(LCL.Shipping_Line);
  PARAMETER(PAR.OHE_Container_Number);
  PARAMETER(LCL.Company_Number);
  PARAMETER(LCL.Load_Type);
  PARAMETER(LCL.Trailer_Type);
  PARAMETER(LCL.Seaboard_Owned_Status);
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('Y');
  PARAMETER('N');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Status_Unused_1);
  PARAMETER(LCL.Status_Unused_2);
  PARAMETER(LCL.Status_Unused_3);
  PARAMETER(LCL.Status_Unused_4);
  PARAMETER(LCL.Status_Unused_5);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?DO4595 DN 11/29/22-Create EDI 601 Data Sets.
  CASE;

  // IF PAR.Orders have Same Booking# is Not No
  IF PAR.Orders_have_Same_Booking# = *BLANK/'Y';

  // AND PAR.EDI Interchange Active U is Yes
  AND PAR.EDI_Interchange_Active_U = 'Y';

  // AND DB1.OHE City is Entered
  AND DB1.OHE_City <> *BLANK;

  // AND DB1.OHE Discharge Port/Airprt is Not Blank
  AND DB1.OHE_Discharge_Port_Airprt <> *BLANK;

  // AND DB1.OHE Sail/Flight Date is not equal zero
  AND DB1.OHE_Sail_Flight_Date <> *ZERO;

  // AND DB1.Shipping Line is entered
  AND DB1.Shipping_Line <> *BLANK;

  // AND DB1.OHE Vessel/Airline is Not Blank
  AND DB1.OHE_Vessel_Airline <> *BLANK;

  // AND DB1.OHE Booking Number is Entered
  AND DB1.OHE_Booking_Number <> *BLANK;

  // AND DB1.OHE Override Type Code is ES
  AND DB1.OHE_Override_Type_Code = 'ES';

  // AND DB1.Port Delv Terminal is Entered
  AND DB1.Port_Delv_Terminal <> *BLANK;

  // AND PAR.CBP Std Carrier Alpha Cde is Entered
  AND PAR.CBP_Std_Carrier_Alpha_Cde <> *BLANK;

  // AND NOT DB1.OHE EDI 824 AES ITN # is All 9s
  AND ! DB1.OHE_EDI_824_AES_ITN_# = '999999999999999';

  //?ITN # would only be populated once EDI 824 is received.
  // Call program Crt EDI 601 Exp Shp InfXF.
  CALL PROGRAM(Crt EDI 601 Exp Shp InfXF) ('PUXSXFR');
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Shipping_Line);
  PARAMETER(DB1.Port_Delv_Terminal);
  PARAMETER(DB1.OHE_Vessel_Airline);
  PARAMETER(DB1.OHE_Sail_Flight_Date);
  PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
  PARAMETER(PAR.Country_Code);
  PARAMETER(PAR.CBP_Export_Port_Code);
  PARAMETER(PAR.CBP_Std_Carrier_Alpha_Cde);
  PARAMETER(PAR.CBP_Foreign_Port_Code);
  PARAMETER('A');

  ENDIF;

 }

 //?USER: Processing after Data read

 //?DO4595 DN 12/07/22-When Required Data Changes, Set Create EDI 601 Flag.
 CASE;

 // IF PAR.Orders have Same Booking# is Not No
 IF PAR.Orders_have_Same_Booking# = *BLANK/'Y';

 // AND PAR.EDI Interchange Active U is Yes
 AND PAR.EDI_Interchange_Active_U = 'Y';

 // AND PAR.OHE Override Type Code is ES
 AND PAR.OHE_Override_Type_Code = 'ES';

 // AND PAR.Port Delv Terminal is Entered
 AND PAR.Port_Delv_Terminal <> *BLANK;

 // AND PAR.CBP Std Carrier Alpha Cde is Entered
 AND PAR.CBP_Std_Carrier_Alpha_Cde <> *BLANK;

 // AND NOT PAR.OHE EDI 824 AES ITN # is All 9s
 AND ! PAR.OHE_EDI_824_AES_ITN_# = '999999999999999';

 // AND PAR.OHE City NE DB1.OHE City
 AND ( PAR.OHE_City <> DB1.OHE_City;

 // OR PAR.OHE Discharge Port/Airprt NE DB1.OHE Discharge Port/Airprt
 OR PAR.OHE_Discharge_Port_Airprt <> DB1.OHE_Discharge_Port_Airprt;

 // OR PAR.OHE Sail/Flight Date NE DB1.OHE Sail/Flight Date
 OR PAR.OHE_Sail_Flight_Date <> DB1.OHE_Sail_Flight_Date;

 // OR PAR.Shipping Line NE DB1.Shipping Line
 OR PAR.Shipping_Line <> DB1.Shipping_Line;

 // OR PAR.OHE Vessel/Airline NE DB1.OHE Vessel/Airline
 OR PAR.OHE_Vessel_Airline <> DB1.OHE_Vessel_Airline;

 // OR PAR.OHE Booking Number NE DB1.OHE Booking Number
 OR PAR.OHE_Booking_Number <> DB1.OHE_Booking_Number;

 // OR PAR.Port Delv Terminal NE DB1.Port Delv Terminal
 OR PAR.Port_Delv_Terminal <> DB1.Port_Delv_Terminal );

 // LCL.Create EDI 601 USR = CND.Yes
 LCL.Create_EDI_601_USR = 'Y';

 ENDIF;

 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 //?USER: Processing after Data update

 //?** 05/19/16   RMC E4119  remove live with tpm check
 EXECUTE FUNCTION(CHG Transloader for ExpCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1492004;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?should not happen from here but don't make an error
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

 //?** Update trailer w/par.trailer id not container   E004008
 EXECUTE FUNCTION(CHG Container for ExprtCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC2016604;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?should not happen from here but don't make an error
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

 //?Only update/add container if Container & ShipLine are entered  E004079
 CASE;

 // IF PAR.Shipping Line is entered
 IF PAR.Shipping_Line <> *BLANK;

 // AND PAR.OHE Container Number is Entered
 AND PAR.OHE_Container_Number <> *BLANK;

 //?* Update Trailer file for newly assigned Container    E004079
 EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Trailer_Type);
 PARAMETER(LCL.Seaboard_Owned_Status);
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER(LCL.Assigned_Status);
 PARAMETER(LCL.Available_Status);
 PARAMETER(LCL.Not_Available_Reason_Code);
 PARAMETER(LCL.Comment_Line);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?update/add container as assigned
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(RTV/Upd Chgd Trlr/CntnrRT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2104613;
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Trailer_Type);
 PARAMETER(LCL.Seaboard_Owned_Status);
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Trailer_Id);
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Trailer_Type);
  PARAMETER(DB1.Seaboard_Owned_Status);
  PARAMETER(PAR.On_Yard_Status);
  PARAMETER(PAR.On_Yard_Date);
  PARAMETER(PAR.On_Yard_Time);
  PARAMETER(PAR.Assigned_Status);
  PARAMETER(PAR.Available_Status);
  PARAMETER(DB1.Not_Available_Reason_Code);
  PARAMETER(DB1.Comment_Line);
  PARAMETER(DB1.Status_Unused_1);
  PARAMETER(DB1.Status_Unused_2);
  PARAMETER(DB1.Status_Unused_3);
  PARAMETER(DB1.Status_Unused_4);
  PARAMETER(DB1.Status_Unused_5);
  PARAMETER(DB1.Date_Unused_1);
  PARAMETER(DB1.Date_Unused_2);
  PARAMETER(DB1.Date_Unused_3);
  PARAMETER(DB1.Date_Unused_4);
  PARAMETER(DB1.Date_Unused_5);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?update/add container as assigned
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Load Type is Regular
 IF PAR.Load_Type = 'R';

 EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('R');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Status_Unused_1);
 PARAMETER(LCL.Status_Unused_2);
 PARAMETER(LCL.Status_Unused_3);
 PARAMETER(LCL.Status_Unused_4);
 PARAMETER(LCL.Status_Unused_5);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(LCL.Job_Time);
 PARAMETER(LCL.User_Id);
 PARAMETER(LCL.Job_Name);
 PARAMETER(LCL.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // IF PAR.Load Type is Bulk
 IF PAR.Load_Type = 'B';

 EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('T');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Status_Unused_1);
 PARAMETER(LCL.Status_Unused_2);
 PARAMETER(LCL.Status_Unused_3);
 PARAMETER(LCL.Status_Unused_4);
 PARAMETER(LCL.Status_Unused_5);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(LCL.Job_Time);
 PARAMETER(LCL.User_Id);
 PARAMETER(LCL.Job_Name);
 PARAMETER(LCL.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Use old shipline if entered, else use par             E004079
 CASE;

 // IF PAR.Shipping Line 10 USR is Entered
 IF PAR.Shipping_Line_10_USR <> *BLANK;

 // LCL.Shipping Line = PAR.Shipping Line 10 USR
 LCL.Shipping_Line = PAR.Shipping_Line_10_USR;

 //?Use old shipline if entered, else use par             E004079
 // IF PAR.Shipping Line is entered
 IF PAR.Shipping_Line <> *BLANK;

 // LCL.Shipping Line = PAR.Shipping Line
 LCL.Shipping_Line = PAR.Shipping_Line;

 ENDIF;

 //?Only update/add original container if container# & carrier entered
 CASE;

 // IF PAR.Container Number is Entered
 IF PAR.Container_Number <> *BLANK;

 // AND LCL.Shipping Line is entered
 AND LCL.Shipping_Line <> *BLANK;

 //?* Update Trailer file for original Container          E004079
 EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(PAR.Container_Number);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Trailer_Type);
 PARAMETER(LCL.Seaboard_Owned_Status);
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER(LCL.Assigned_Status);
 PARAMETER(LCL.Available_Status);
 PARAMETER(LCL.Not_Available_Reason_Code);
 PARAMETER(LCL.Comment_Line);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Update/add original container as available            E004079
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(RTV/Upd Chgd Trlr/CntnrRT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2104613;
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(PAR.Container_Number);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Trailer_Type);
 PARAMETER(LCL.Seaboard_Owned_Status);
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Trailer_Id);
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Trailer_Type);
  PARAMETER(DB1.Seaboard_Owned_Status);
  PARAMETER(PAR.On_Yard_Status);
  PARAMETER(PAR.On_Yard_Date);
  PARAMETER(PAR.On_Yard_Time);
  PARAMETER(PAR.Assigned_Status);
  PARAMETER(PAR.Available_Status);
  PARAMETER(DB1.Not_Available_Reason_Code);
  PARAMETER(DB1.Comment_Line);
  PARAMETER(DB1.Status_Unused_1);
  PARAMETER(DB1.Status_Unused_2);
  PARAMETER(DB1.Status_Unused_3);
  PARAMETER(DB1.Status_Unused_4);
  PARAMETER(DB1.Status_Unused_5);
  PARAMETER(DB1.Date_Unused_1);
  PARAMETER(DB1.Date_Unused_2);
  PARAMETER(DB1.Date_Unused_3);
  PARAMETER(DB1.Date_Unused_4);
  PARAMETER(DB1.Date_Unused_5);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?Update/add original container as available            E004079
 ENDIF;

 ENDIF;

 //?DO4595 DN 12/09/22-Create EDI 601 Data Set for Changed Data.
 CASE;

 // IF LCL.Create EDI 601 USR is Yes
 IF LCL.Create_EDI_601_USR = 'Y';

 // Call program Crt EDI 601 Exp Shp InfXF.
 CALL PROGRAM(Crt EDI 601 Exp Shp InfXF) ('PUXSXFR');
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Port_Delv_Terminal);
 PARAMETER(PAR.OHE_Vessel_Airline);
 PARAMETER(PAR.OHE_Sail_Flight_Date);
 PARAMETER(PAR.OHE_EDI_824_AES_ITN_#);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.CBP_Export_Port_Code);
 PARAMETER(PAR.CBP_Std_Carrier_Alpha_Cde);
 PARAMETER(PAR.CBP_Foreign_Port_Code);
 PARAMETER('C');

 ENDIF;

}


//?USER: Process command keys

//?Update the container in the trailer file if newly assigned
//?Load Order Change Log record
CASE;

// IF DTL.OHE Container Number NE WRK.Blank for 12          USR
IF DTL.OHE_Container_Number <> WRK.Blank_for_12_USR;

// AND DTL.OHE Container Number NE WRK.OHE Container Number
AND DTL.OHE_Container_Number <> WRK.OHE_Container_Number;

// AND WRK.OHE Container Number EQ WRK.Blank for 12          USR
AND WRK.OHE_Container_Number = WRK.Blank_for_12_USR;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER('ASNTRL');
PARAMETER('TRF');
PARAMETER(WRK.OHE_Container_Number);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

ENDIF;

//?F3 = Exit without faxing
CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// PGM.*Return code = CND.*User QUIT requested
PGM.*Return_code = 'Y2U9999';

ENDIF;

//?USER: Exit program processing

//?** Re-Calculate the total load miles using the updated sail port
//?** city. Update the load header.
//?** Total Load Miles will be zeros if any leg of the journey
//?** is missing a Miles Between Cities record.
//?** Include Override Total Load Miles. If entered, they will
//?** take precedence
// Call program CLC Total Load Miles   XF.
CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);

// Call program CHG Total Load Miles   XF.
CALL PROGRAM(CHG Total Load Miles   XF) ('PMFSXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);

//?** Fax load confirmation to Ship Line &/or Transloader, if entered
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PAR.USR Exit Program = CND.yes
PAR.USR_Exit_Program = 'Y';

//?** Fax load confirmation to Ship Line &/or Transloader, if entered
// IF *OTHERWISE
IF *OTHERWISE;

//?** Can only fax confirmation if Carrier is assigned to the load
CASE;

// IF PAR.USR Carrier Code is entered
IF PAR.USR_Carrier_Code <> *BLANK;

//?** wrk.status-Y or N is to control faxing to PowerPro in the
//?** case of a carrier change. Carrier cannot be changed here so
//?** there is no PowerPro processing
// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

// WRK.Job Name CDE = JOB.*JOB
WRK.Job_Name_CDE = JOB.*JOB;

// Call program PMT Fax Load Confirmtn PV.
CALL PROGRAM(PMT Fax Load Confirmtn PV) ('POICPVR');
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.Transloader_Carrier_Code);
PARAMETER(PAR.USR_Carrier_Code);
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.OHE_Carrier_SCAC_Code);
PARAMETER(WRK.Status_Y_or_N);

ENDIF;

ENDIF;

