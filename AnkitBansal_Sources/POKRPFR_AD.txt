// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POKRPFR
// ?Date: 14.08.2025 Time: 12:06:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

//?USER: Record selection processing

//?Validate warehouse match if entered, quit if single company
CASE;

// IF PAR.Warehouse Code is Warehouse Code not Blank
IF PAR.Warehouse_Code <> *BLANK;

CASE;

// IF DB1.Warehouse Code NE PAR.Warehouse Code
IF DB1.Warehouse_Code <> PAR.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?>>  End of file only if one company selected to print
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// Execute function Prt End of File 'A'    US.
EXECUTE FUNCTION(Prt End of File 'A'    US) TYPE(EXCUSRSRC) ('USKXUFR');
{
 C                     MOVEL'1'       W0EOFA           END OF FILE
}


ENDIF;

ENDIF;

ENDIF;

//?Validate cycle code match if entered
CASE;

// IF PAR.Cycle Count Code - IB is Entered
IF PAR.Cycle_Count_Code_IB <> *BLANK;

CASE;

// IF DB1.Cycle Count Code - IB NE PAR.Cycle Count Code - IB
IF DB1.Cycle_Count_Code_IB <> PAR.Cycle_Count_Code_IB;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Itm Type/Sold Fzn RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1625035;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(LCL.Sold_100_Percent_Frozen);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Chk Zero Phys,Var  RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1625174;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DB1.Warehouse_Code);
PARAMETER(PAR.Record_Selected_USR);
PARAMETER(LCL.Variance_amount);
{
 //?USER: Initialize routine

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 // PAR.Variance amount = CND.equal to zero
 PAR.Variance_amount = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(Physical Variance Qty.) TYPE(DRVFLD)                           AC1122277;
 PARAMETER(PAR.Physical_Variance_Qty);
 PARAMETER(DB1.Physical_Start_UOM1);
 PARAMETER(DB1.Physical_Count_Qty_UOM1);
 {
  //?Calculate derived field

  // PAR.Physical Variance Qty. = PAR.Physical Primary U/M - PAR.On Hand Primary U/M
  PAR.Physical_Variance_Qty = PAR.Physical_Primary_U_M - PAR.On_Hand_Primary_U_M;

 }

 EXECUTE FUNCTION(Physical Variance Weight) TYPE(DRVFLD)                         AC1122278;
 PARAMETER(PAR.Physical_Variance_Weight);
 PARAMETER(DB1.Physical_Start_Weight);
 PARAMETER(DB1.Physical_Count_Weight);
 {
  //?Calculate derived field

  // PAR.Physical Variance Lbs. = PAR.Physical Count in Pounds - PAR.Quantity on Hand
  PAR.Physical_Variance_Weight = PAR.Physical_Count_Weight - PAR.Quantity_on_Hand_Weight;

 }

 // PAR.Variance amount = PAR.Variance amount + PAR.Physical Variance Qty.
 PAR.Variance_amount = PAR.Variance_amount + PAR.Physical_Variance_Qty;

 CASE;

 // IF PAR.Physical Variance Qty. is not equal zero
 IF PAR.Physical_Variance_Qty <> *ZERO;

 // OR PAR.Physical Variance Weight is Not equal zero
 OR PAR.Physical_Variance_Weight <> *ZERO;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 ENDIF;

}


CASE;

// IF PAR.Record Selected       USR is no
IF PAR.Record_Selected_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude Scale Check/Test Items?
CASE;

// IF PAR.Exclude Scale/Chk/Tst USR is yes
IF PAR.Exclude_Scale_Chk_Tst_USR = 'Y';

CASE;

// IF DB1.Item Code is Scale Check Item 888
IF DB1.Item_Code = 888;

// OR DB1.Item Code is Scale Check Item 2222
OR DB1.Item_Code = 2222;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Exclude 9xxxx(not Fat)?
CASE;

// IF PAR.Exclude 9xxxx(not fat)USR is yes
IF PAR.Exclude_9xxxxnot_fatUSR = 'Y';

CASE;

// IF DB1.Item Code is All 9xxxx
IF DB1.Item_Code >= 90000;
AND DB1.Item_Code <= 99999;

//?New  4/30/03
CASE;

// IF DB1.Item Structure Class Code is EQ 708
IF ( DB1.Item_Structure_Class_Code = 708;

// AND DB1.Item Structure Group Code is eq 708
AND DB1.Item_Structure_Group_Code = 708;

// AND DB1.Item Structure Type Code is EQ 700
AND DB1.Item_Structure_Type_Code = 700 );

// OR DB1.Item Structure Group Code is Edible Rendering
OR DB1.Item_Structure_Group_Code = 755;

//?New  4/30/03
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Exclude WP item type?
CASE;

// IF PAR.Exclude WIPs          USR is yes
IF PAR.Exclude_WIPs_USR = 'Y';

CASE;

// IF LCL.Item Type Code is Work in Process
IF LCL.Item_Type_Code = 'WP';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Exclude Immaterial Qtys?
CASE;

// IF PAR.Exclude Immtrl Qtys   USR is yes
IF PAR.Exclude_Immtrl_Qtys_USR = 'Y';

CASE;

// IF LCL.U/M - Primary is Combos
IF LCL.UOM_Primary = 'CB';

CASE;

// IF LCL.Variance amount is Between 1 and -1
IF LCL.Variance_amount >= -1;
AND LCL.Variance_amount <= 1;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Variance amount is Between 10 and -10
IF LCL.Variance_amount >= -10;
AND LCL.Variance_amount <= 10;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Exclude FZ Sched as Ordered?
CASE;

// IF PAR.Exclude Sold Frozen  USR is yes
IF PAR.Exclude_Sold_Frozen_USR = 'Y';

CASE;

// IF LCL.Sold 100% Frozen is yes
IF LCL.Sold_100_Percent_Frozen = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Warehouse Code = PAR.Warehouse Code
X1PG_Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// 1PG.Cycle Count Code = PAR.Cycle Count Code - IB
X1PG_Cycle_Count_Code = PAR.Cycle_Count_Code_IB;

// 1PG.Exclude Scale/Chk/Tst USR = PAR.Exclude Scale/Chk/Tst USR
X1PG_Exclude_Scale_Chk_Tst_USR = PAR.Exclude_Scale_Chk_Tst_USR;

// 1PG.Exclude 9xxxx(not fat)USR = PAR.Exclude 9xxxx(not fat)USR
X1PG_Exclude_9xxxxnot_fatUSR = PAR.Exclude_9xxxxnot_fatUSR;

// 1PG.Exclude WIPs          USR = PAR.Exclude WIPs          USR
X1PG_Exclude_WIPs_USR = PAR.Exclude_WIPs_USR;

// 1PG.Exclude CF1 Returns   USR = PAR.Exclude CF1 Returns   USR
X1PG_Exclude_Immtrl_Qtys_USR = PAR.Exclude_Immtrl_Qtys_USR;

// 1PG.Exclude FZ Sched Ord USR = PAR.Exclude FZ Sched Ord USR
X1PG_Exclude_Sold_Frozen_USR = PAR.Exclude_Sold_Frozen_USR;

// 1PG.Exclude neg QOH/Book USR = PAR.Exclude neg QOH/Book USR
X1PG_Exclude_neg_QOH_Book_USR = PAR.Exclude_neg_QOH_Book_USR;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Company Number - 3 header format
PRINT Company Number - 3 header format;

ENDIF;

CASE;

IF NEW Warehouse_Code;
EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// Print Warehouse Code header format
PRINT Warehouse Code header format;

ENDIF;

CASE;

IF NEW Cycle_Count_Code_IB;
EXECUTE FUNCTION(Physical Variance Qty.) TYPE(DRVFLD)                           AC1122277;
PARAMETER(CUR.Physical_Variance_Qty);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Calculate derived field

 // PAR.Physical Variance Qty. = PAR.Physical Primary U/M - PAR.On Hand Primary U/M
 PAR.Physical_Variance_Qty = PAR.Physical_Primary_U_M - PAR.On_Hand_Primary_U_M;

}


EXECUTE FUNCTION(Physical Variance Weight) TYPE(DRVFLD)                         AC1122278;
PARAMETER(CUR.Physical_Variance_Weight);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Calculate derived field

 // PAR.Physical Variance Lbs. = PAR.Physical Count in Pounds - PAR.Quantity on Hand
 PAR.Physical_Variance_Weight = PAR.Physical_Count_Weight - PAR.Quantity_on_Hand_Weight;

}


// Print Cycle Count Code header format
PRINT Cycle Count Code header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt AS Exceptions Dtl PO
EXECUTE FUNCTION(Prt AS Exceptions Dtl PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(PAR.Physical_Count_Weight);
PARAMETER(PAR.Physical_Count_Qty_UOM1);
PARAMETER(PAR.Quantity_on_Hand_Weight);
PARAMETER(PAR.Quantity_on_Hand_UOM1);
PARAMETER(PAR.Physical_Start_Weight);
PARAMETER(PAR.Physical_Start_UOM1);
PARAMETER('Y');
PARAMETER(PAR.Exclude_neg_QOH_Book_USR);
PARAMETER(PAR.Mark_Exception_USR);
PARAMETER(PAR.USR_Quantity);
PARAMETER(PAR.Weight_1_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

// NXT.USR Weight = NXT.USR Weight + PAR.Quantity on Hand - Weight
NXT.USR_Weight = NXT.USR_Weight + PAR.Quantity_on_Hand_Weight;

// NXT.USR Quantity alloc U/M1 s = NXT.USR Quantity alloc U/M1 s + PAR.Quantity on Hand - U/M1
NXT.USR_Quantity_alloc_U_M1_s = NXT.USR_Quantity_alloc_U_M1_s                                      +
+ PAR.Quantity_on_Hand_UOM1;

// PAR.Quantity on Hand - Weight = CON.*ZERO
PAR.Quantity_on_Hand_Weight = *ZERO;

// PAR.Quantity on Hand - U/M1 = CON.*ZERO
PAR.Quantity_on_Hand_UOM1 = *ZERO;

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

CASE;

IF NEW Cycle_Count_Code_IB;
// Print Cycle Count Code totals format
PRINT Cycle Count Code totals format;

// NXT.USR Weight = NXT.USR Weight + CUR.USR Weight
NXT.USR_Weight = NXT.USR_Weight + CUR.USR_Weight;

// NXT.USR Quantity alloc U/M1 s = NXT.USR Quantity alloc U/M1 s + CUR.USR Quantity
NXT.USR_Quantity_alloc_U_M1_s = NXT.USR_Quantity_alloc_U_M1_s                                      +
+ CUR.USR_Quantity_alloc_U_M1_s;

// NXT.USR Total on Hand Weight = NXT.USR Total on Hand Weight + CUR.USR Weight
NXT.USR_Total_on_Hand_Weight = NXT.USR_Total_on_Hand_Weight + CUR.USR_Weight;

// NXT.USR Total On Hand U/M1 = NXT.USR Total On Hand U/M1 + CUR.USR Quantity alloc
NXT.USR_Total_On_Hand_U_M1 = NXT.USR_Total_On_Hand_U_M1 + CUR.USR_Quantity_alloc_U_M1_s;

ENDIF;

CASE;

IF NEW Warehouse_Code;
// CUR.USR Total Physical Weight = PAR.Physical Count Weight
CUR.USR_Total_Physical_Weight = PAR.Physical_Count_Weight;

// CUR.USR Total Physical U/M1 = PAR.Physical Count Qty - U/M1
CUR.USR_Total_Physical_U_M1 = PAR.Physical_Count_Qty_UOM1;

// CUR.USR Total Variance Weight = PAR.Physical Start Weight
CUR.USR_Total_Variance_Weight = PAR.Physical_Start_Weight;

// CUR.USR Total Variance U/M1 = PAR.Physical Start U/M1
CUR.USR_Total_Variance_U_M1 = PAR.Physical_Start_UOM1;

// CUR.Weight 1 USR = PAR.Weight 1 USR
CUR.Weight_1_USR = PAR.Weight_1_USR;

// CUR.USR Quantity = PAR.USR Quantity
CUR.USR_Quantity = PAR.USR_Quantity;

// Print Warehouse Code totals format
PRINT Warehouse Code totals format;

// NXT.USR Weight = NXT.USR Weight + CUR.USR Weight
NXT.USR_Weight = NXT.USR_Weight + CUR.USR_Weight;

// NXT.USR Quantity alloc U/M1 s = NXT.USR Quantity alloc U/M1 s + CUR.USR Quantity alloc U/M1 s
NXT.USR_Quantity_alloc_U_M1_s = NXT.USR_Quantity_alloc_U_M1_s                                      +
+ CUR.USR_Quantity_alloc_U_M1_s;

// PAR.Physical Count Weight = CON.*ZERO
PAR.Physical_Count_Weight = *ZERO;

// PAR.Physical Count Qty - U/M1 = CON.*ZERO
PAR.Physical_Count_Qty_UOM1 = *ZERO;

// PAR.Physical Start Weight = CON.*ZERO
PAR.Physical_Start_Weight = *ZERO;

// PAR.Physical Start U/M1 = CON.*ZERO
PAR.Physical_Start_UOM1 = *ZERO;

// PAR.Weight 1 USR = CON.*ZERO
PAR.Weight_1_USR = *ZERO;

// PAR.USR Quantity = CON.*ZERO
PAR.USR_Quantity = *ZERO;

ENDIF;

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Company Number - 3 totals format

// NXT.USR Weight = NXT.USR Weight + CUR.USR Weight
NXT.USR_Weight = NXT.USR_Weight + CUR.USR_Weight;

// NXT.USR Quantity alloc U/M1 s = NXT.USR Quantity alloc U/M1 s + CUR.USR Quantity alloc U/M1 s
NXT.USR_Quantity_alloc_U_M1_s = NXT.USR_Quantity_alloc_U_M1_s                                      +
+ CUR.USR_Quantity_alloc_U_M1_s;

ENDIF;

