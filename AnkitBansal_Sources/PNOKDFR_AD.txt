// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNOKDFR
// ?Date: 14.08.2025 Time: 03:45:52
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('SHP');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.RFS Volume Corr Mthd  USR = CND.API Volume Corr Table
LCL.RFS_Volume_Corr_Mthd_USR = 'A';

//?USER: Initialize subfile control

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(CTL.Warehouse_Desc_DRV);
PARAMETER(CTL.COA_Ship_To_Warehouse);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


// CTL.Customer Purchase Order # = PAR.Customer Purchase Order #
CTL.Customer_Purchase_Order_# = PAR.Customer_Purchase_Order_#;

// CTL.COA Temperature Loadout = PAR.COA Temperature Loadout
CTL.COA_Temperature_Loadout = PAR.COA_Temperature_Loadout;

//?USER: Initialize subfile record from DBF record

CASE;

// IF CTL.Company Number is greater than zero
IF CTL.Company_Number > *ZERO;

// AND CTL.Company Number NE DB1.Company Number
AND CTL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF RCD.RFS Transaction Type is Buy
IF RCD.RFS_Transaction_Type = 'BUY';

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(RCD.Company_Number);
PARAMETER('HPBPLT');
PARAMETER(LCL.Company_Number_041405);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?T14912 RMC 7/16/19 added company to key
EXECUTE FUNCTION(Rtv Order for Ext Sel RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1963657;
PARAMETER(LCL.Company_Number_041405);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Batch_Header_RIN_Seq);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.COA_RIN_Gallons_Sold);
PARAMETER(RCD.COA_Shipping_Company);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 // PAR.Order Number = CON.*ZERO
 PAR.Order_Number = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.RFS Transaction Type is Sold or Delivered
 IF DB1.RFS_Transaction_Type = 'SEL';

 // AND LCL.First Time Flag is Yes
 AND LCL.First_Time_Flag = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 QUIT;

 ENDIF;

}


ENDIF;

EXECUTE FUNCTION(RTV HPB Gross Gall    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1879030;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Quantity_Sched_1_USR);
{
 //?USER: Process Data record

 // PAR.Quantity Shipped Total = PAR.Quantity Shipped Total + DB1.Case Quantity
 PAR.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total + DB1.Case_Quantity;

}


// LCL.HPB Meter Net Gallon = CON.*ZERO
LCL.HPB_Meter_Net_Gallon = *ZERO;

//?RMC added chk to compare batch to batch company 4/20/20
EXECUTE FUNCTION(RTV RIN Net Sold GallsRT) TYPE(RTVOBJ) FILE(PNFPCPP)           AC1971628;
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Batch_Header_RIN_Seq);
PARAMETER(RCD.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(RCD.Company_Number);
{
 //?USER: Process Data record

 //?RMC added chk to compare to shipping company 4/20/20
 CASE;

 // IF DB1.COA Batch Company Nbr EQ PAR.Shipping Company
 IF DB1.COA_Batch_Company_Nbr = PAR.Shipping_Company;

 EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Header Status is Closed or Cancelled
 IF LCL.Header_Status = 'X'/'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.HPB Meter Net Gallon = PAR.HPB Meter Net Gallon + DB1.HPB Meter Net Gallon
 PAR.HPB_Meter_Net_Gallon = PAR.HPB_Meter_Net_Gallon + DB1.HPB_Meter_Net_Gallon;

 ENDIF;

 ENDIF;

}


// RCD.COA BHR Net Galls to Sell = RCD.COA BHR Net Galls to Sell - LCL.HPB Meter Net Gallon
RCD.COA_BHR_Net_Galls_to_Sell = RCD.COA_BHR_Net_Galls_to_Sell - LCL.HPB_Meter_Net_Gallon;

CASE;

// IF RCD.COA BHR Net Galls to Sell is Not Entered
IF RCD.COA_BHR_Net_Galls_to_Sell = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Calc Factor or Use API Table - Calc  Gross to sell    6/13/12
CASE;

// IF LCL.RFS Volume Corr Mthd  USR is Calculate factor per Prop
IF LCL.RFS_Volume_Corr_Mthd_USR = 'C';

//?New formula - after 6/27/10 -  goes in with RFS2/EMTS    P000579
// WRK.COA Temp Conv Factor 1 = CON.-.00045767
WRK.COA_Temp_Conv_Factor_1 = -.00045767;

// WRK.COA Temp Conv Factor 2 = CON.1.02746025
WRK.COA_Temp_Conv_Factor_2 = 1.02746025;

// Compute: gross galls
LCL.Gross_Gallons_USR = RCD.COA_BHR_Net_Galls_to_Sell / WRK.HPB_Temperature_Adjustmnt;

//?Calc Factor or Use API Table - Calc  Gross to sell    6/13/12
// IF LCL.RFS Volume Corr Mthd  USR is API Volume Corr Table
IF LCL.RFS_Volume_Corr_Mthd_USR = 'A';

//?Gross gallons from new temp
CASE;

// IF CTL.COA Temperature Loadout is GT 0
IF CTL.COA_Temperature_Loadout > *ZERO;

// LCL.RFS Loadout Temperature = CTL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = CTL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

// Compute: gross galls
RCD.Quantity_Sched_2_USR = RCD.COA_BHR_Net_Galls_to_Sell / WRK.HPB_Temperature_Adjustmnt           +
'H';

ENDIF;

//?Gross gallons from orig temp
// LCL.RFS Loadout Temperature = DB1.COA BHR Loadout Temp
LCL.RFS_Loadout_Temperature = DB1.COA_BHR_Loadout_Temp;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

// Compute: gross galls
RCD.Quantity_Sched_1_USR = RCD.COA_BHR_Net_Galls_to_Sell / WRK.HPB_Temperature_Adjustmnt           +
'H';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Create SEL RIN from full volume on BUY RIN
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

//?Create Manifest & manifest rin sell rcd from order selected
CASE;

// IF RCD.Order Number is Greater then zero
IF RCD.Order_Number > *ZERO;

//?Selling all remaining gallons
// LCL.Quantity 7.0 USR = RCD.COA BHR Net Galls to Sell
LCL.Quantity_7_0_USR = RCD.COA_BHR_Net_Galls_to_Sell;

CASE;

// IF CTL.COA Temperature Loadout is GT 0
IF CTL.COA_Temperature_Loadout > *ZERO;

// AND CTL.COA Temperature Loadout NE RCD.COA BHR Loadout Temp
AND CTL.COA_Temperature_Loadout <> RCD.COA_BHR_Loadout_Temp;

//?E2079 code
//?Calc Factor or Use API Table - 5/03/12
CASE;

// IF LCL.RFS Volume Corr Mthd  USR is Calculate factor per Prop
IF LCL.RFS_Volume_Corr_Mthd_USR = 'C';

//?New formula - after 6/27/10 -  goes in with RFS2/EMTS    P000579
// WRK.COA Temp Conv Factor 1 = CON.-.00045767
WRK.COA_Temp_Conv_Factor_1 = -.00045767;

// WRK.COA Temp Conv Factor 2 = CON.1.02746025
WRK.COA_Temp_Conv_Factor_2 = 1.02746025;

// Compute: gross galls
LCL.Gross_Gallons_USR = RCD.COA_BHR_Net_Galls_to_Sell / WRK.HPB_Temperature_Adjustmnt;

//?Calc Factor or Use API Table - 5/03/12
// IF LCL.RFS Volume Corr Mthd  USR is API Volume Corr Table
IF LCL.RFS_Volume_Corr_Mthd_USR = 'A';

// LCL.RFS Loadout Temperature = CTL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = CTL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

// Compute: gross galls
LCL.Gross_Gallons_USR = RCD.COA_BHR_Net_Galls_to_Sell / WRK.HPB_Temperature_Adjustmnt;

ENDIF;

//?Do all processing for selling an order
DO;

//?lcl.quantity 7.0 usr = net gallons
//?lcl.gross gallons usr = gross gallons
//?----- Retrieve from selected order -----
EXECUTE FUNCTION(RTV HPB to Gen SEL RINRT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1962017;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.HPB_Meter_Start_Gallon);
PARAMETER(LCL.HPB_Meter_Ending_Gallon);
PARAMETER(LCL.HPB_Meter_Total_Gallon);
PARAMETER(LCL.HPB_Meter_Net_Weight);
PARAMETER(LCL.HPB_Density_Ref_Gravity);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?old - calc multiplier
CASE;

// IF LCL.Case Quantity is GT *ZERO
IF LCL.Case_Quantity > *ZERO;

//?multiplier with 7 dec
// PGM.*Synon (17,7) work field = LCL.Case Weight / LCL.Case Quantity *Rounded
PGM.*Synon_177_work_field = LCL.Case_Weight / LCL.Case_Quantity 'H';

// LCL.USR Quantity Shipped = LCL.Case Quantity
LCL.USR_Quantity_Shipped = LCL.Case_Quantity;

// LCL.USR Weight Billed = LCL.Case Weight
LCL.USR_Weight_Billed = LCL.Case_Weight;

ENDIF;

//?New gross gallon qty and weight  -- NEW use par coming back from edt pgm
// LCL.Case Weight = LCL.Gross Gallons        USR * PGM.*Synon (17,7) work field *Rounded
LCL.Case_Weight = LCL.Gross_Gallons_USR * PGM.*Synon_177_work_field 'H';

//?In case it rounds up greater than what was on the orig order
CASE;

// IF LCL.Case Weight GT LCL.USR Weight Billed
IF LCL.Case_Weight > LCL.USR_Weight_Billed;

// LCL.Case Weight = LCL.USR Weight Billed
LCL.Case_Weight = LCL.USR_Weight_Billed;

ENDIF;

// LCL.HPB Meter Total Gallon = LCL.Gross Gallons        USR
LCL.HPB_Meter_Total_Gallon = LCL.Gross_Gallons_USR;

// LCL.HPB Meter Start Gallon = CON.1
LCL.HPB_Meter_Start_Gallon = 1;

// LCL.HPB Meter Ending Gallon = LCL.Gross Gallons        USR
LCL.HPB_Meter_Ending_Gallon = LCL.Gross_Gallons_USR;

//?new net weight & net gallons
// LCL.HPB Meter Net Weight = LCL.Quantity 7.0 USR * PGM.*Synon (17,7) work field *
LCL.HPB_Meter_Net_Weight = LCL.Quantity_7_0_USR * PGM.*Synon_177_work_field;

// LCL.HPB Meter Net Gallon = LCL.Quantity 7.0 USR
LCL.HPB_Meter_Net_Gallon = LCL.Quantity_7_0_USR;

EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Load_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV HPB fields         RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1853458;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?----- Set from selected order per gallons entered
//?----- Create/ Update HPB data for the order that is being shipped
EXECUTE FUNCTION(Crt Manifest Detl-HPB IF) TYPE(EXCINTFUN)                      AC1962015;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Gross_Gallons_USR);
PARAMETER(LCL.Case_Weight);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.HPB_Meter_Start_Gallon);
PARAMETER(LCL.HPB_Meter_Ending_Gallon);
PARAMETER(LCL.HPB_Meter_Total_Gallon);
PARAMETER(LCL.HPB_Meter_Net_Weight);
PARAMETER(LCL.HPB_Density_Ref_Gravity);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Batch_Header_RIN_Seq);
PARAMETER(RCD.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(RCD.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Case Seq#    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1513160;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Case Sequence Number = CON.1
  PAR.Case_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.Case Sequence Number = DB1.Case Sequence Number + CON.1
  PAR.Case_Sequence_Number = DB1.Case_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Manifest Detail   CR) TYPE(CRTOBJ) FILE(OMFNCPP)           AC1513165;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(PAR.Case_Quantity);
 PARAMETER(PAR.Case_Weight);
 PARAMETER(PAR.Inventory_Updated_Flag);
 PARAMETER(PAR.Label_Date);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Manifest_Shift);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Manifest_Unused_Status_1A);
 PARAMETER(WRK.Manifest_Unused_Status_2A);
 PARAMETER(*ZERO);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(PAR.HPB_Meter_Start_Gallon);
 PARAMETER(PAR.HPB_Meter_Ending_Gallon);
 PARAMETER(PAR.HPB_Meter_Total_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(PAR.HPB_Density_Ref_Gravity);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?batch's company is in par.Company number 041405
 EXECUTE FUNCTION(Crt Manifest Dtl RIN  CR) TYPE(CRTOBJ) FILE(PNFPCPP)           AC1962249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.Company_Number_041405);
 PARAMETER(LCL.MDRS_Unused_sts);
 PARAMETER(PAR.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


EXECUTE FUNCTION(CHG Prod Temp-HPB     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1877057;
PARAMETER(PAR.Load_ID);
PARAMETER(CTL.COA_Temperature_Loadout);
PARAMETER(PAR.Carrier_Broker);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(RTV Crt/Chg HPB Batch RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1855749;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER('R');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OHE_Carrier_SCAC_Code);
 PARAMETER(LCL.OHE_Spot_Buy);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(LCL.OHE_Override_Type_Code);
 PARAMETER(LCL.OHE_Backhaul_Status);
 PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
 PARAMETER(LCL.OHE_Load_Haul_Type);
 PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
 PARAMETER(LCL.OHE_Bookings_Confirmed);
 PARAMETER(LCL.OHE_EDI_Error_Reasons);
 PARAMETER(LCL.OHE_EDI_Error_Reasons_2);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_EDI_943_Action);
 PARAMETER(LCL.OHE_EDI_944_Action);
 PARAMETER(LCL.OHE_EDI_940_Action);
 PARAMETER(LCL.OHE_EDI_945_Action);
 PARAMETER(LCL.OHE_EDI_856_Action);
 PARAMETER(LCL.OHE_EDI_824_Action);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_Email_BOL_Sent);
 PARAMETER(LCL.OHE_EDI_Order_Automated);
 PARAMETER(LCL.OHE_EDI_601_Action);
 PARAMETER(LCL.OHE_Unused_Status_4);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 // LCL.Load ID = PAR.Load ID
 LCL.Load_ID = PAR.Load_ID;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Load ID = DB1.Load ID
 LCL.Load_ID = DB1.Load_ID;

 ENDIF;

 CASE;

 // IF DB1.Stop/Drop Sequence Number is Not Entered
 IF DB1.Stop_Drop_Sequence_Number = *ZERO;

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Stop/Drop Sequence Number = DB1.Stop/Drop Sequence Number
 LCL.Stop_Drop_Sequence_Number = DB1.Stop_Drop_Sequence_Number;

 ENDIF;

 EXECUTE FUNCTION(CHG HPB Batch/Load    CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1855750;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

EXECUTE FUNCTION(RTV Chg for Confirm    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1310188;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(LCL.USR_Under_Min);
PARAMETER(LCL.USR_Over_Max);
PARAMETER(LCL.USR_Exit_Program);
{
 //?USER: Initialize routine

 // PAR.USR Exit Program = CND.yes
 PAR.USR_Exit_Program = 'Y';

 // PAR.USR Over Max = CND.no
 PAR.USR_Over_Max = 'N';

 // PAR.USR Under Min = CND.no
 PAR.USR_Under_Min = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 {
  //?USER: Initialize routine

  // PAR.USR Case Quantity = CND.EQ *ZERO
  PAR.USR_Case_Quantity = *ZERO;

  // PAR.USR Case Weight = CND.EQ *ZERO
  PAR.USR_Case_Weight = *ZERO;

  // PAR.HPB Meter Net Gallon = CND.Equal to zero
  PAR.HPB_Meter_Net_Gallon = *ZERO;

  // PAR.HPB Meter Net Weight = CND.Not Entered
  PAR.HPB_Meter_Net_Weight = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
  PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

  // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
  PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

  //?Only HPB will have these   4/14/08
  // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
  PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

  // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
  PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

 }

 //?Check min/max from the item master
 // PAR.USR Min Weight = CND.Not Entered
 PAR.USR_Min_Weight = *ZERO;

 // PAR.USR Max Weight = CND.Not Entered
 PAR.USR_Max_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Qty Min/Max        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1402211;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Min Weight = PAR.Minimum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Min_Weight = PAR.Minimum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 // PAR.USR Max Weight = PAR.Maximum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Max_Weight = PAR.Maximum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 //?Weight entered as shipped is less than Minimum
 CASE;

 // IF PAR.USR Case Weight LT PAR.USR Min Weight
 IF PAR.USR_Case_Weight < PAR.USR_Min_Weight;

 // PAR.USR Under Min = CND.yes
 PAR.USR_Under_Min = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit Prog. No  will set the program back to beginning
 ENDIF;

 //?Weight entered is greater than the maxiumum
 CASE;

 // IF PAR.USR Case Weight GT PAR.USR Max Weight
 IF PAR.USR_Case_Weight > PAR.USR_Max_Weight;

 // PAR.USR Over Max = CND.yes
 PAR.USR_Over_Max = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit prog. no will set program back to beginning
 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity GT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity > DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Overage
 WRK.Work_Over_Short_Status = 'O';

 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity LT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity < DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Short
 WRK.Work_Over_Short_Status = 'S';

 ENDIF;

 // WRK.Detail Line Status = CND.Confirmed
 WRK.Detail_Line_Status = 'R';

 // WRK.Detail Line Status Last = DB1.Detail Line Status
 WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

 //?FP1110 HPB ONLY 4/14/08 Output net gallons and net weight to Ord Dtl
 //?  if Warehouse is Req Meter Readings is YES.
 //?  Every other warehouse puts out the gross from manifest dtl
 EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.WHS Req Meter Reading Shp is Yes
 IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 ENDIF;

}


ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?orig code
//?Do all processing for selling an order
DO;

//?quantity 7.0 usr = net gallons
//?----- Retrieve from selected order -----
EXECUTE FUNCTION(RTV HPB to Gen SEL RINRT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1962017;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.HPB_Meter_Start_Gallon);
PARAMETER(LCL.HPB_Meter_Ending_Gallon);
PARAMETER(LCL.HPB_Meter_Total_Gallon);
PARAMETER(LCL.HPB_Meter_Net_Weight);
PARAMETER(LCL.HPB_Density_Ref_Gravity);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Case Quantity is GT *ZERO
IF LCL.Case_Quantity > *ZERO;

//?multiplier with 7 decimals
// PGM.*Synon (17,7) work field = LCL.Case Weight / LCL.Case Quantity *Rounded
PGM.*Synon_177_work_field = LCL.Case_Weight / LCL.Case_Quantity 'H';

// LCL.USR Quantity Shipped = LCL.Case Quantity
LCL.USR_Quantity_Shipped = LCL.Case_Quantity;

// LCL.USR Weight Billed = LCL.Case Weight
LCL.USR_Weight_Billed = LCL.Case_Weight;

ENDIF;

//?new gross gallon qty and weight
//?RMC round this calc for the multipler  3/29/10
// LCL.Numeric Value 1 USR = LCL.Case Quantity / LCL.HPB Meter Net Gallon *Rounded
LCL.Numeric_Value_1_USR = LCL.Case_Quantity / LCL.HPB_Meter_Net_Gallon 'H';

// LCL.Case Quantity = LCL.Quantity 7.0 USR * LCL.Numeric Value 1 USR *Rounded
LCL.Case_Quantity = LCL.Quantity_7_0_USR * LCL.Numeric_Value_1_USR 'H';

//?In case it rounds up greater than what was on the orig order
CASE;

// IF LCL.Case Quantity GT LCL.USR Quantity Shipped
IF LCL.Case_Quantity > LCL.USR_Quantity_Shipped;

// LCL.Case Quantity = LCL.USR Quantity Shipped
LCL.Case_Quantity = LCL.USR_Quantity_Shipped;

ENDIF;

// LCL.Case Weight = LCL.Case Quantity * PGM.*Synon (17,7) work field *Rounded
LCL.Case_Weight = LCL.Case_Quantity * PGM.*Synon_177_work_field 'H';

//?In case it rounds up greater than what was on the orig order
CASE;

// IF LCL.Case Weight GT LCL.USR Weight Billed
IF LCL.Case_Weight > LCL.USR_Weight_Billed;

// LCL.Case Weight = LCL.USR Weight Billed
LCL.Case_Weight = LCL.USR_Weight_Billed;

ENDIF;

// LCL.HPB Meter Total Gallon = LCL.Case Quantity
LCL.HPB_Meter_Total_Gallon = LCL.Case_Quantity;

// LCL.HPB Meter Start Gallon = CON.1
LCL.HPB_Meter_Start_Gallon = 1;

// LCL.HPB Meter Ending Gallon = LCL.Case Quantity
LCL.HPB_Meter_Ending_Gallon = LCL.Case_Quantity;

//?new net weight & net gallons
// LCL.HPB Meter Net Weight = LCL.Quantity 7.0 USR * PGM.*Synon (17,7) work field *
LCL.HPB_Meter_Net_Weight = LCL.Quantity_7_0_USR * PGM.*Synon_177_work_field;

// LCL.HPB Meter Net Gallon = LCL.Quantity 7.0 USR
LCL.HPB_Meter_Net_Gallon = LCL.Quantity_7_0_USR;

EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Load_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV HPB fields         RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1853458;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?----- Set from selected order per gallons entered
//?----- Create/ Update HPB data for the order that is being shipped
EXECUTE FUNCTION(Crt Manifest Detl-HPB IF) TYPE(EXCINTFUN)                      AC1962015;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.HPB_Meter_Start_Gallon);
PARAMETER(LCL.HPB_Meter_Ending_Gallon);
PARAMETER(LCL.HPB_Meter_Total_Gallon);
PARAMETER(LCL.HPB_Meter_Net_Weight);
PARAMETER(LCL.HPB_Density_Ref_Gravity);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Batch_Header_RIN_Seq);
PARAMETER(RCD.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(RCD.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Case Seq#    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1513160;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Case Sequence Number = CON.1
  PAR.Case_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.Case Sequence Number = DB1.Case Sequence Number + CON.1
  PAR.Case_Sequence_Number = DB1.Case_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Manifest Detail   CR) TYPE(CRTOBJ) FILE(OMFNCPP)           AC1513165;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(PAR.Case_Quantity);
 PARAMETER(PAR.Case_Weight);
 PARAMETER(PAR.Inventory_Updated_Flag);
 PARAMETER(PAR.Label_Date);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Manifest_Shift);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Manifest_Unused_Status_1A);
 PARAMETER(WRK.Manifest_Unused_Status_2A);
 PARAMETER(*ZERO);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(PAR.HPB_Meter_Start_Gallon);
 PARAMETER(PAR.HPB_Meter_Ending_Gallon);
 PARAMETER(PAR.HPB_Meter_Total_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(PAR.HPB_Density_Ref_Gravity);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?batch's company is in par.Company number 041405
 EXECUTE FUNCTION(Crt Manifest Dtl RIN  CR) TYPE(CRTOBJ) FILE(PNFPCPP)           AC1962249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.Company_Number_041405);
 PARAMETER(LCL.MDRS_Unused_sts);
 PARAMETER(PAR.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


EXECUTE FUNCTION(CHG Prod Temp-HPB     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1877057;
PARAMETER(PAR.Load_ID);
PARAMETER(RCD.COA_BHR_Loadout_Temp);
PARAMETER(PAR.Carrier_Broker);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(RTV Crt/Chg HPB Batch RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1855749;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER('R');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OHE_Carrier_SCAC_Code);
 PARAMETER(LCL.OHE_Spot_Buy);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(LCL.OHE_Override_Type_Code);
 PARAMETER(LCL.OHE_Backhaul_Status);
 PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
 PARAMETER(LCL.OHE_Load_Haul_Type);
 PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
 PARAMETER(LCL.OHE_Bookings_Confirmed);
 PARAMETER(LCL.OHE_EDI_Error_Reasons);
 PARAMETER(LCL.OHE_EDI_Error_Reasons_2);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_EDI_943_Action);
 PARAMETER(LCL.OHE_EDI_944_Action);
 PARAMETER(LCL.OHE_EDI_940_Action);
 PARAMETER(LCL.OHE_EDI_945_Action);
 PARAMETER(LCL.OHE_EDI_856_Action);
 PARAMETER(LCL.OHE_EDI_824_Action);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_Email_BOL_Sent);
 PARAMETER(LCL.OHE_EDI_Order_Automated);
 PARAMETER(LCL.OHE_EDI_601_Action);
 PARAMETER(LCL.OHE_Unused_Status_4);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 // LCL.Load ID = PAR.Load ID
 LCL.Load_ID = PAR.Load_ID;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Load ID = DB1.Load ID
 LCL.Load_ID = DB1.Load_ID;

 ENDIF;

 CASE;

 // IF DB1.Stop/Drop Sequence Number is Not Entered
 IF DB1.Stop_Drop_Sequence_Number = *ZERO;

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Stop/Drop Sequence Number = DB1.Stop/Drop Sequence Number
 LCL.Stop_Drop_Sequence_Number = DB1.Stop_Drop_Sequence_Number;

 ENDIF;

 EXECUTE FUNCTION(CHG HPB Batch/Load    CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1855750;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

EXECUTE FUNCTION(RTV Chg for Confirm    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1310188;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(LCL.USR_Under_Min);
PARAMETER(LCL.USR_Over_Max);
PARAMETER(LCL.USR_Exit_Program);
{
 //?USER: Initialize routine

 // PAR.USR Exit Program = CND.yes
 PAR.USR_Exit_Program = 'Y';

 // PAR.USR Over Max = CND.no
 PAR.USR_Over_Max = 'N';

 // PAR.USR Under Min = CND.no
 PAR.USR_Under_Min = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 {
  //?USER: Initialize routine

  // PAR.USR Case Quantity = CND.EQ *ZERO
  PAR.USR_Case_Quantity = *ZERO;

  // PAR.USR Case Weight = CND.EQ *ZERO
  PAR.USR_Case_Weight = *ZERO;

  // PAR.HPB Meter Net Gallon = CND.Equal to zero
  PAR.HPB_Meter_Net_Gallon = *ZERO;

  // PAR.HPB Meter Net Weight = CND.Not Entered
  PAR.HPB_Meter_Net_Weight = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
  PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

  // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
  PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

  //?Only HPB will have these   4/14/08
  // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
  PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

  // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
  PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

 }

 //?Check min/max from the item master
 // PAR.USR Min Weight = CND.Not Entered
 PAR.USR_Min_Weight = *ZERO;

 // PAR.USR Max Weight = CND.Not Entered
 PAR.USR_Max_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Qty Min/Max        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1402211;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Min Weight = PAR.Minimum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Min_Weight = PAR.Minimum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 // PAR.USR Max Weight = PAR.Maximum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Max_Weight = PAR.Maximum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 //?Weight entered as shipped is less than Minimum
 CASE;

 // IF PAR.USR Case Weight LT PAR.USR Min Weight
 IF PAR.USR_Case_Weight < PAR.USR_Min_Weight;

 // PAR.USR Under Min = CND.yes
 PAR.USR_Under_Min = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit Prog. No  will set the program back to beginning
 ENDIF;

 //?Weight entered is greater than the maxiumum
 CASE;

 // IF PAR.USR Case Weight GT PAR.USR Max Weight
 IF PAR.USR_Case_Weight > PAR.USR_Max_Weight;

 // PAR.USR Over Max = CND.yes
 PAR.USR_Over_Max = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit prog. no will set program back to beginning
 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity GT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity > DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Overage
 WRK.Work_Over_Short_Status = 'O';

 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity LT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity < DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Short
 WRK.Work_Over_Short_Status = 'S';

 ENDIF;

 // WRK.Detail Line Status = CND.Confirmed
 WRK.Detail_Line_Status = 'R';

 // WRK.Detail Line Status Last = DB1.Detail Line Status
 WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

 //?FP1110 HPB ONLY 4/14/08 Output net gallons and net weight to Ord Dtl
 //?  if Warehouse is Req Meter Readings is YES.
 //?  Every other warehouse puts out the gross from manifest dtl
 EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.WHS Req Meter Reading Shp is Yes
 IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 ENDIF;

}


ENDDO;

ENDIF;

ENDIF;

ENDIF;

//?Create SEL RIN by splitting the BUY RIN
CASE;

// IF RCD.*SFLSEL is Option 3
IF RCD.*SFLSEL = '3'/'3';

// LCL.COA Temperature Loadout = CTL.COA Temperature Loadout
LCL.COA_Temperature_Loadout = CTL.COA_Temperature_Loadout;

// Call program Edt SEL RIN-w/order ER.
CALL PROGRAM(Edt SEL RIN-w/order ER) ('PNOPE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Batch_Header_RIN_Seq);
PARAMETER(RCD.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Quantity_7_0_USR);
PARAMETER(LCL.COA_RIN_Volume_New_usr);
PARAMETER(LCL.COA_Temperature_Loadout);
PARAMETER(LCL.Gross_Gallons_USR);

//?Create Manifest & manifest rin sell rcd from order selected
CASE;

// IF RCD.Order Number is Greater then zero
IF RCD.Order_Number > *ZERO;

// AND LCL.Quantity 7.0 USR is Greater than Zero
AND LCL.Quantity_7_0_USR > *ZERO;

//?Ship at temperature on orig order
CASE;

// IF LCL.COA Temperature Loadout is Not Entered
IF LCL.COA_Temperature_Loadout = *ZERO;

// OR LCL.COA Temperature Loadout EQ RCD.COA BHR Loadout Temp
OR LCL.COA_Temperature_Loadout = RCD.COA_BHR_Loadout_Temp;

//?Do all processing for selling an order
DO;

//?quantity 7.0 usr = net gallons
//?----- Retrieve from selected order -----
EXECUTE FUNCTION(RTV HPB to Gen SEL RINRT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1962017;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.HPB_Meter_Start_Gallon);
PARAMETER(LCL.HPB_Meter_Ending_Gallon);
PARAMETER(LCL.HPB_Meter_Total_Gallon);
PARAMETER(LCL.HPB_Meter_Net_Weight);
PARAMETER(LCL.HPB_Density_Ref_Gravity);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Case Quantity is GT *ZERO
IF LCL.Case_Quantity > *ZERO;

//?multiplier with 7 dec
// PGM.*Synon (17,7) work field = LCL.Case Weight / LCL.Case Quantity *Rounded
PGM.*Synon_177_work_field = LCL.Case_Weight / LCL.Case_Quantity 'H';

// LCL.USR Quantity Shipped = LCL.Case Quantity
LCL.USR_Quantity_Shipped = LCL.Case_Quantity;

// LCL.USR Weight Billed = LCL.Case Weight
LCL.USR_Weight_Billed = LCL.Case_Weight;

ENDIF;

//?new gross gallon qty and weight
// LCL.Numeric Value 1 USR = LCL.Case Quantity / LCL.HPB Meter Net Gallon *Rounded
LCL.Numeric_Value_1_USR = LCL.Case_Quantity / LCL.HPB_Meter_Net_Gallon 'H';

// LCL.Case Quantity = LCL.Quantity 7.0 USR * LCL.Numeric Value 1 USR *Rounded
LCL.Case_Quantity = LCL.Quantity_7_0_USR * LCL.Numeric_Value_1_USR 'H';

//?In case it rounds up greater than what was on the orig order
CASE;

// IF LCL.Case Quantity GT LCL.USR Quantity Shipped
IF LCL.Case_Quantity > LCL.USR_Quantity_Shipped;

// LCL.Case Quantity = LCL.USR Quantity Shipped
LCL.Case_Quantity = LCL.USR_Quantity_Shipped;

ENDIF;

// LCL.Case Weight = LCL.Case Quantity * PGM.*Synon (17,7) work field *Rounded
LCL.Case_Weight = LCL.Case_Quantity * PGM.*Synon_177_work_field 'H';

//?In case it rounds up greater than what was on the orig order
CASE;

// IF LCL.Case Weight GT LCL.USR Weight Billed
IF LCL.Case_Weight > LCL.USR_Weight_Billed;

// LCL.Case Weight = LCL.USR Weight Billed
LCL.Case_Weight = LCL.USR_Weight_Billed;

ENDIF;

// LCL.HPB Meter Total Gallon = LCL.Case Quantity
LCL.HPB_Meter_Total_Gallon = LCL.Case_Quantity;

// LCL.HPB Meter Start Gallon = CON.1
LCL.HPB_Meter_Start_Gallon = 1;

// LCL.HPB Meter Ending Gallon = LCL.Case Quantity
LCL.HPB_Meter_Ending_Gallon = LCL.Case_Quantity;

//?new net weight & net gallons
// LCL.HPB Meter Net Weight = LCL.Quantity 7.0 USR * PGM.*Synon (17,7) work field *
LCL.HPB_Meter_Net_Weight = LCL.Quantity_7_0_USR * PGM.*Synon_177_work_field;

// LCL.HPB Meter Net Gallon = LCL.Quantity 7.0 USR
LCL.HPB_Meter_Net_Gallon = LCL.Quantity_7_0_USR;

EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Load_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV HPB fields         RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1853458;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?----- Set from selected order per gallons entered
//?----- Create/ Update HPB data for the order that is being shipped
EXECUTE FUNCTION(Crt Manifest Detl-HPB IF) TYPE(EXCINTFUN)                      AC1962015;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.HPB_Meter_Start_Gallon);
PARAMETER(LCL.HPB_Meter_Ending_Gallon);
PARAMETER(LCL.HPB_Meter_Total_Gallon);
PARAMETER(LCL.HPB_Meter_Net_Weight);
PARAMETER(LCL.HPB_Density_Ref_Gravity);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Batch_Header_RIN_Seq);
PARAMETER(RCD.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(RCD.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Case Seq#    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1513160;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Case Sequence Number = CON.1
  PAR.Case_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.Case Sequence Number = DB1.Case Sequence Number + CON.1
  PAR.Case_Sequence_Number = DB1.Case_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Manifest Detail   CR) TYPE(CRTOBJ) FILE(OMFNCPP)           AC1513165;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(PAR.Case_Quantity);
 PARAMETER(PAR.Case_Weight);
 PARAMETER(PAR.Inventory_Updated_Flag);
 PARAMETER(PAR.Label_Date);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Manifest_Shift);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Manifest_Unused_Status_1A);
 PARAMETER(WRK.Manifest_Unused_Status_2A);
 PARAMETER(*ZERO);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(PAR.HPB_Meter_Start_Gallon);
 PARAMETER(PAR.HPB_Meter_Ending_Gallon);
 PARAMETER(PAR.HPB_Meter_Total_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(PAR.HPB_Density_Ref_Gravity);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?batch's company is in par.Company number 041405
 EXECUTE FUNCTION(Crt Manifest Dtl RIN  CR) TYPE(CRTOBJ) FILE(PNFPCPP)           AC1962249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.Company_Number_041405);
 PARAMETER(LCL.MDRS_Unused_sts);
 PARAMETER(PAR.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


EXECUTE FUNCTION(CHG Prod Temp-HPB     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1877057;
PARAMETER(PAR.Load_ID);
PARAMETER(RCD.COA_BHR_Loadout_Temp);
PARAMETER(PAR.Carrier_Broker);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(RTV Crt/Chg HPB Batch RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1855749;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER('R');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OHE_Carrier_SCAC_Code);
 PARAMETER(LCL.OHE_Spot_Buy);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(LCL.OHE_Override_Type_Code);
 PARAMETER(LCL.OHE_Backhaul_Status);
 PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
 PARAMETER(LCL.OHE_Load_Haul_Type);
 PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
 PARAMETER(LCL.OHE_Bookings_Confirmed);
 PARAMETER(LCL.OHE_EDI_Error_Reasons);
 PARAMETER(LCL.OHE_EDI_Error_Reasons_2);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_EDI_943_Action);
 PARAMETER(LCL.OHE_EDI_944_Action);
 PARAMETER(LCL.OHE_EDI_940_Action);
 PARAMETER(LCL.OHE_EDI_945_Action);
 PARAMETER(LCL.OHE_EDI_856_Action);
 PARAMETER(LCL.OHE_EDI_824_Action);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_Email_BOL_Sent);
 PARAMETER(LCL.OHE_EDI_Order_Automated);
 PARAMETER(LCL.OHE_EDI_601_Action);
 PARAMETER(LCL.OHE_Unused_Status_4);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 // LCL.Load ID = PAR.Load ID
 LCL.Load_ID = PAR.Load_ID;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Load ID = DB1.Load ID
 LCL.Load_ID = DB1.Load_ID;

 ENDIF;

 CASE;

 // IF DB1.Stop/Drop Sequence Number is Not Entered
 IF DB1.Stop_Drop_Sequence_Number = *ZERO;

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Stop/Drop Sequence Number = DB1.Stop/Drop Sequence Number
 LCL.Stop_Drop_Sequence_Number = DB1.Stop_Drop_Sequence_Number;

 ENDIF;

 EXECUTE FUNCTION(CHG HPB Batch/Load    CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1855750;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

EXECUTE FUNCTION(RTV Chg for Confirm    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1310188;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(LCL.USR_Under_Min);
PARAMETER(LCL.USR_Over_Max);
PARAMETER(LCL.USR_Exit_Program);
{
 //?USER: Initialize routine

 // PAR.USR Exit Program = CND.yes
 PAR.USR_Exit_Program = 'Y';

 // PAR.USR Over Max = CND.no
 PAR.USR_Over_Max = 'N';

 // PAR.USR Under Min = CND.no
 PAR.USR_Under_Min = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 {
  //?USER: Initialize routine

  // PAR.USR Case Quantity = CND.EQ *ZERO
  PAR.USR_Case_Quantity = *ZERO;

  // PAR.USR Case Weight = CND.EQ *ZERO
  PAR.USR_Case_Weight = *ZERO;

  // PAR.HPB Meter Net Gallon = CND.Equal to zero
  PAR.HPB_Meter_Net_Gallon = *ZERO;

  // PAR.HPB Meter Net Weight = CND.Not Entered
  PAR.HPB_Meter_Net_Weight = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
  PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

  // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
  PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

  //?Only HPB will have these   4/14/08
  // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
  PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

  // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
  PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

 }

 //?Check min/max from the item master
 // PAR.USR Min Weight = CND.Not Entered
 PAR.USR_Min_Weight = *ZERO;

 // PAR.USR Max Weight = CND.Not Entered
 PAR.USR_Max_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Qty Min/Max        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1402211;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Min Weight = PAR.Minimum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Min_Weight = PAR.Minimum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 // PAR.USR Max Weight = PAR.Maximum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Max_Weight = PAR.Maximum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 //?Weight entered as shipped is less than Minimum
 CASE;

 // IF PAR.USR Case Weight LT PAR.USR Min Weight
 IF PAR.USR_Case_Weight < PAR.USR_Min_Weight;

 // PAR.USR Under Min = CND.yes
 PAR.USR_Under_Min = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit Prog. No  will set the program back to beginning
 ENDIF;

 //?Weight entered is greater than the maxiumum
 CASE;

 // IF PAR.USR Case Weight GT PAR.USR Max Weight
 IF PAR.USR_Case_Weight > PAR.USR_Max_Weight;

 // PAR.USR Over Max = CND.yes
 PAR.USR_Over_Max = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit prog. no will set program back to beginning
 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity GT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity > DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Overage
 WRK.Work_Over_Short_Status = 'O';

 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity LT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity < DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Short
 WRK.Work_Over_Short_Status = 'S';

 ENDIF;

 // WRK.Detail Line Status = CND.Confirmed
 WRK.Detail_Line_Status = 'R';

 // WRK.Detail Line Status Last = DB1.Detail Line Status
 WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

 //?FP1110 HPB ONLY 4/14/08 Output net gallons and net weight to Ord Dtl
 //?  if Warehouse is Req Meter Readings is YES.
 //?  Every other warehouse puts out the gross from manifest dtl
 EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.WHS Req Meter Reading Shp is Yes
 IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 ENDIF;

}


ENDDO;

ENDIF;

//?Ship at temp entered on order selection screen   E2079 5/03/12
CASE;

// IF LCL.COA Temperature Loadout is GT 0
IF LCL.COA_Temperature_Loadout > *ZERO;

// AND LCL.COA Temperature Loadout NE RCD.COA BHR Loadout Temp
AND LCL.COA_Temperature_Loadout <> RCD.COA_BHR_Loadout_Temp;

//?Do all processing for selling an order
DO;

//?lcl.quantity 7.0 usr = net gallons
//?lcl.gross gallons usr= gross gallons
//?----- Retrieve from selected order -----
EXECUTE FUNCTION(RTV HPB to Gen SEL RINRT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1962017;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.HPB_Meter_Start_Gallon);
PARAMETER(LCL.HPB_Meter_Ending_Gallon);
PARAMETER(LCL.HPB_Meter_Total_Gallon);
PARAMETER(LCL.HPB_Meter_Net_Weight);
PARAMETER(LCL.HPB_Density_Ref_Gravity);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?old - calc multiplier
CASE;

// IF LCL.Case Quantity is GT *ZERO
IF LCL.Case_Quantity > *ZERO;

//?multiplier with 7 dec
// PGM.*Synon (17,7) work field = LCL.Case Weight / LCL.Case Quantity *Rounded
PGM.*Synon_177_work_field = LCL.Case_Weight / LCL.Case_Quantity 'H';

// LCL.USR Quantity Shipped = LCL.Case Quantity
LCL.USR_Quantity_Shipped = LCL.Case_Quantity;

// LCL.USR Weight Billed = LCL.Case Weight
LCL.USR_Weight_Billed = LCL.Case_Weight;

ENDIF;

//?New gross gallon qty and weight  -- NEW use par coming back from edt pgm
// LCL.Case Weight = LCL.Gross Gallons        USR * PGM.*Synon (17,7) work field *Rounded
LCL.Case_Weight = LCL.Gross_Gallons_USR * PGM.*Synon_177_work_field 'H';

//?In case it rounds up greater than what was on the orig order
CASE;

// IF LCL.Case Weight GT LCL.USR Weight Billed
IF LCL.Case_Weight > LCL.USR_Weight_Billed;

// LCL.Case Weight = LCL.USR Weight Billed
LCL.Case_Weight = LCL.USR_Weight_Billed;

ENDIF;

// LCL.HPB Meter Total Gallon = LCL.Gross Gallons        USR
LCL.HPB_Meter_Total_Gallon = LCL.Gross_Gallons_USR;

// LCL.HPB Meter Start Gallon = CON.1
LCL.HPB_Meter_Start_Gallon = 1;

// LCL.HPB Meter Ending Gallon = LCL.Gross Gallons        USR
LCL.HPB_Meter_Ending_Gallon = LCL.Gross_Gallons_USR;

//?new net weight & net gallons
// LCL.HPB Meter Net Weight = LCL.Quantity 7.0 USR * PGM.*Synon (17,7) work field *
LCL.HPB_Meter_Net_Weight = LCL.Quantity_7_0_USR * PGM.*Synon_177_work_field;

// LCL.HPB Meter Net Gallon = LCL.Quantity 7.0 USR
LCL.HPB_Meter_Net_Gallon = LCL.Quantity_7_0_USR;

EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Load_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV HPB fields         RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1853458;
PARAMETER(RCD.COA_Shipping_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?----- Set from selected order per gallons entered
//?----- Create/ Update HPB data for the order that is being shipped
EXECUTE FUNCTION(Crt Manifest Detl-HPB IF) TYPE(EXCINTFUN)                      AC1962015;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Gross_Gallons_USR);
PARAMETER(LCL.Case_Weight);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.HPB_Meter_Start_Gallon);
PARAMETER(LCL.HPB_Meter_Ending_Gallon);
PARAMETER(LCL.HPB_Meter_Total_Gallon);
PARAMETER(LCL.HPB_Meter_Net_Weight);
PARAMETER(LCL.HPB_Density_Ref_Gravity);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Batch_Header_RIN_Seq);
PARAMETER(RCD.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(RCD.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Case Seq#    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1513160;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Case Sequence Number = CON.1
  PAR.Case_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.Case Sequence Number = DB1.Case Sequence Number + CON.1
  PAR.Case_Sequence_Number = DB1.Case_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Manifest Detail   CR) TYPE(CRTOBJ) FILE(OMFNCPP)           AC1513165;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(PAR.Case_Quantity);
 PARAMETER(PAR.Case_Weight);
 PARAMETER(PAR.Inventory_Updated_Flag);
 PARAMETER(PAR.Label_Date);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Manifest_Shift);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Manifest_Unused_Status_1A);
 PARAMETER(WRK.Manifest_Unused_Status_2A);
 PARAMETER(*ZERO);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(PAR.HPB_Meter_Start_Gallon);
 PARAMETER(PAR.HPB_Meter_Ending_Gallon);
 PARAMETER(PAR.HPB_Meter_Total_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(PAR.HPB_Density_Ref_Gravity);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?batch's company is in par.Company number 041405
 EXECUTE FUNCTION(Crt Manifest Dtl RIN  CR) TYPE(CRTOBJ) FILE(PNFPCPP)           AC1962249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.Company_Number_041405);
 PARAMETER(LCL.MDRS_Unused_sts);
 PARAMETER(PAR.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


EXECUTE FUNCTION(CHG Prod Temp-HPB     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1877057;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.COA_Temperature_Loadout);
PARAMETER(PAR.Carrier_Broker);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(RTV Crt/Chg HPB Batch RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1855749;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER('R');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OHE_Carrier_SCAC_Code);
 PARAMETER(LCL.OHE_Spot_Buy);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(LCL.OHE_Override_Type_Code);
 PARAMETER(LCL.OHE_Backhaul_Status);
 PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
 PARAMETER(LCL.OHE_Load_Haul_Type);
 PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
 PARAMETER(LCL.OHE_Bookings_Confirmed);
 PARAMETER(LCL.OHE_EDI_Error_Reasons);
 PARAMETER(LCL.OHE_EDI_Error_Reasons_2);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_EDI_943_Action);
 PARAMETER(LCL.OHE_EDI_944_Action);
 PARAMETER(LCL.OHE_EDI_940_Action);
 PARAMETER(LCL.OHE_EDI_945_Action);
 PARAMETER(LCL.OHE_EDI_856_Action);
 PARAMETER(LCL.OHE_EDI_824_Action);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_Email_BOL_Sent);
 PARAMETER(LCL.OHE_EDI_Order_Automated);
 PARAMETER(LCL.OHE_EDI_601_Action);
 PARAMETER(LCL.OHE_Unused_Status_4);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 // LCL.Load ID = PAR.Load ID
 LCL.Load_ID = PAR.Load_ID;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Load ID = DB1.Load ID
 LCL.Load_ID = DB1.Load_ID;

 ENDIF;

 CASE;

 // IF DB1.Stop/Drop Sequence Number is Not Entered
 IF DB1.Stop_Drop_Sequence_Number = *ZERO;

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Stop/Drop Sequence Number = DB1.Stop/Drop Sequence Number
 LCL.Stop_Drop_Sequence_Number = DB1.Stop_Drop_Sequence_Number;

 ENDIF;

 EXECUTE FUNCTION(CHG HPB Batch/Load    CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1855750;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

EXECUTE FUNCTION(RTV Chg for Confirm    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1310188;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(LCL.USR_Under_Min);
PARAMETER(LCL.USR_Over_Max);
PARAMETER(LCL.USR_Exit_Program);
{
 //?USER: Initialize routine

 // PAR.USR Exit Program = CND.yes
 PAR.USR_Exit_Program = 'Y';

 // PAR.USR Over Max = CND.no
 PAR.USR_Over_Max = 'N';

 // PAR.USR Under Min = CND.no
 PAR.USR_Under_Min = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 {
  //?USER: Initialize routine

  // PAR.USR Case Quantity = CND.EQ *ZERO
  PAR.USR_Case_Quantity = *ZERO;

  // PAR.USR Case Weight = CND.EQ *ZERO
  PAR.USR_Case_Weight = *ZERO;

  // PAR.HPB Meter Net Gallon = CND.Equal to zero
  PAR.HPB_Meter_Net_Gallon = *ZERO;

  // PAR.HPB Meter Net Weight = CND.Not Entered
  PAR.HPB_Meter_Net_Weight = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
  PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

  // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
  PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

  //?Only HPB will have these   4/14/08
  // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
  PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

  // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
  PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

 }

 //?Check min/max from the item master
 // PAR.USR Min Weight = CND.Not Entered
 PAR.USR_Min_Weight = *ZERO;

 // PAR.USR Max Weight = CND.Not Entered
 PAR.USR_Max_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Qty Min/Max        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1402211;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Min Weight = PAR.Minimum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Min_Weight = PAR.Minimum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 // PAR.USR Max Weight = PAR.Maximum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Max_Weight = PAR.Maximum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 //?Weight entered as shipped is less than Minimum
 CASE;

 // IF PAR.USR Case Weight LT PAR.USR Min Weight
 IF PAR.USR_Case_Weight < PAR.USR_Min_Weight;

 // PAR.USR Under Min = CND.yes
 PAR.USR_Under_Min = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit Prog. No  will set the program back to beginning
 ENDIF;

 //?Weight entered is greater than the maxiumum
 CASE;

 // IF PAR.USR Case Weight GT PAR.USR Max Weight
 IF PAR.USR_Case_Weight > PAR.USR_Max_Weight;

 // PAR.USR Over Max = CND.yes
 PAR.USR_Over_Max = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit prog. no will set program back to beginning
 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity GT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity > DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Overage
 WRK.Work_Over_Short_Status = 'O';

 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity LT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity < DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Short
 WRK.Work_Over_Short_Status = 'S';

 ENDIF;

 // WRK.Detail Line Status = CND.Confirmed
 WRK.Detail_Line_Status = 'R';

 // WRK.Detail Line Status Last = DB1.Detail Line Status
 WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

 //?FP1110 HPB ONLY 4/14/08 Output net gallons and net weight to Ord Dtl
 //?  if Warehouse is Req Meter Readings is YES.
 //?  Every other warehouse puts out the gross from manifest dtl
 EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.WHS Req Meter Reading Shp is Yes
 IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 ENDIF;

}


ENDDO;

ENDIF;

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

