// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWEGPVR
// ?Date: 14.08.2025 Time: 02:56:14
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E9904  JBB 09/06/17 - Push Payments from 440 to 961
//?- Remove Kill Date from screen
//?E9904  JBB 08/02/17 - Push Payments from 440 to 961
//?- Submit process using an executable message.
//?E9904  JBB 07/31/17 - Push Payments from 440 to 961
//?- This new function will prompt the user to process the push of
//?  payment information from company 440 to company 961.
//?E13291 JBB 08/02/17 - Push Payments from 440 to 961
//?- Added Push Type parameter to this function.  This parameter will
//?  be passed on the the Push to Pay driver program.
//?H16853 ISE 11/04/2020 - Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?If OMS Access Denied is Yes, exit program immediately
CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// LCL.Protect field = CND.No
LCL.Protect_field = 'N';

// LCL.Protect Ref fields = CND.No
LCL.Protect_Ref_fields = 'N';

// LCL.Error found Y/N = CND.No
LCL.Error_found_Y_N = 'N';

//?USER: Load screen

// DTL.CC Company Number = PAR.CC Company Number
DTL.CC_Company_Number = PAR.CC_Company_Number;

//?Retrieve the Push To Company number from the Company Values file
// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEPSHTOCO');
PARAMETER(DTL.Push_To_Company);

//?SNDERRMSG: Push To Company not found
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// OR DTL.Push To Company is *ZERO
OR DTL.Push_To_Company = *ZERO;

// Send error message - 'Company &1 not setup to push payment records.'
ERROR(PRK1457);
MSGPARM(DTL.CC_Company_Number);

ENDIF;

EXECUTE FUNCTION(Rtv Count Push records RT) TYPE(RTVOBJ) FILE(PKBLCPP)          AB1345694;
PARAMETER('TO');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(DTL.Nbr_of_Push_Rcds_Regular);
PARAMETER(DTL.Nbr_of_Push_Rcds_Repaymnt);
{
 //?USER: Initialize routine

 // PAR.Nbr of Push Rcds-Regular = CON.*ZERO
 PAR.Nbr_of_Push_Rcds_Regular = *ZERO;

 // PAR.Nbr of Push Rcds-Repaymnt = CON.*ZERO
 PAR.Nbr_of_Push_Rcds_Repaymnt = *ZERO;

 //?USER: Process Data record

 //?Count records where the Push Payment Status = N or blank
 CASE;

 // IF DB1.VCD Push Payment Status is Not Yes
 IF DB1.VCD_Push_Payment_Status = *BLANK/'N';

 //?Increment Regular Push and Repayment Push records
 CASE;

 // IF DB1.VCD Repayment Flag is Repayment
 IF DB1.VCD_Repayment_Flag = 'R';

 // PAR.Nbr of Push Rcds-Repaymnt = PAR.Nbr of Push Rcds-Repaymnt + CON.1
 PAR.Nbr_of_Push_Rcds_Repaymnt = PAR.Nbr_of_Push_Rcds_Repaymnt + 1;

 //?Increment Regular Push and Repayment Push records
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Nbr of Push Rcds-Regular = PAR.Nbr of Push Rcds-Regular + CON.1
 PAR.Nbr_of_Push_Rcds_Regular = PAR.Nbr_of_Push_Rcds_Regular + 1;

 ENDIF;

 ENDIF;

}


//?Check count of Regular Push and Repayment Push records
CASE;

// IF DTL.Nbr of Push Rcds-Regular is Not Zero
IF DTL.Nbr_of_Push_Rcds_Regular <> *ZERO;

// AND DTL.Nbr of Push Rcds-Repaymnt is Not Zero
AND DTL.Nbr_of_Push_Rcds_Repaymnt <> *ZERO;

// Send error message - 'Payment Push process cannot run. There are both Regular & Repayment records
ERROR(PRK1507);

// LCL.Error found Y/N = CND.Yes
LCL.Error_found_Y_N = 'Y';

//?Check count of Regular Push and Repayment Push records
// IF DTL.Nbr of Push Rcds-Regular is Not Zero
IF DTL.Nbr_of_Push_Rcds_Regular <> *ZERO;

// DTL.Text description = CONCAT(CON.          Ready for Regul,CON.ar Push to Pay.,CND.*None)
DTL.Text_description = '          Ready for Regul' + 'ar Push to Pay.' (*ZERO);

// LCL.Protect Ref fields = CND.Yes
LCL.Protect_Ref_fields = 'Y';

//?Check count of Regular Push and Repayment Push records
// IF DTL.Nbr of Push Rcds-Repaymnt is Not Zero
IF DTL.Nbr_of_Push_Rcds_Repaymnt <> *ZERO;

// DTL.Text description = CONCAT(CON.         Ready for Repaym,CON.ent Push to Pay.,CND.*None)
DTL.Text_description = '         Ready for Repaym' + 'ent Push to Pay.' (*ZERO);

// LCL.Protect field = CND.Yes
LCL.Protect_field = 'Y';

//?Check count of Regular Push and Repayment Push records
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'There are no Hog Voucher Detail records that are ready to Push.'
ERROR(PRK1508);

// LCL.Error found Y/N = CND.Yes
LCL.Error_found_Y_N = 'Y';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Oms_Name);
PARAMETER(NLL.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?USER: Validate relations

//?Check count of Regular Push and Repayment Push records
CASE;

// IF DTL.Nbr of Push Rcds-Regular is Not Zero
IF DTL.Nbr_of_Push_Rcds_Regular <> *ZERO;

// AND DTL.Nbr of Push Rcds-Repaymnt is Not Zero
AND DTL.Nbr_of_Push_Rcds_Repaymnt <> *ZERO;

// Send error message - 'Payment Push process cannot run. There are both Regular & Repayment records
ERROR(PRK1507);

// LCL.Error found Y/N = CND.Yes
LCL.Error_found_Y_N = 'Y';

//?Check count of Regular Push and Repayment Push records
// IF DTL.Nbr of Push Rcds-Regular is Not Zero
IF DTL.Nbr_of_Push_Rcds_Regular <> *ZERO;

// DTL.Text description = CONCAT(CON.          Ready for Regul,CON.ar Push to Pay.,CND.*None)
DTL.Text_description = '          Ready for Regul' + 'ar Push to Pay.' (*ZERO);

// LCL.Protect Ref fields = CND.Yes
LCL.Protect_Ref_fields = 'Y';

//?Check count of Regular Push and Repayment Push records
// IF DTL.Nbr of Push Rcds-Repaymnt is Not Zero
IF DTL.Nbr_of_Push_Rcds_Repaymnt <> *ZERO;

// DTL.Text description = CONCAT(CON.         Ready for Repaym,CON.ent Push to Pay.,CND.*None)
DTL.Text_description = '         Ready for Repaym' + 'ent Push to Pay.' (*ZERO);

// LCL.Protect field = CND.Yes
LCL.Protect_field = 'Y';

//?Check count of Regular Push and Repayment Push records
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'There are no Hog Voucher Detail records that are ready to Push.'
ERROR(PRK1508);

// LCL.Error found Y/N = CND.Yes
LCL.Error_found_Y_N = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv Chk Avail Push RcdsRT) TYPE(RTVOBJ) FILE(PKBLCPP)          AB1339812;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF NOT DB1.VCD Source Code is Triumph Member (Owner)
 IF ! DB1.VCD_Source_Code = 'TO';

 // IF NOT DB1.VCD BO Type is Contract
 IF ! DB1.VCD_BO_Type = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


//?SNDERRMSG: Push To Records not found
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'No records found that are eligible to be pushed to &1.'
ERROR(PRK1458);
MSGPARM(DTL.Push_To_Company);

ENDIF;

//?USER: User defined action

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Payment Push');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(1);

//?If F3 pressed from Print Options screen, remain on this screen
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

QUIT;

//?If F3 pressed from Print Options screen, remain on this screen
// IF *OTHERWISE
IF *OTHERWISE;

// Execute command - 'SBM TF2 Payment Push'
EXECUTE COMMAND(PRK1459);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('M');

ENDIF;

