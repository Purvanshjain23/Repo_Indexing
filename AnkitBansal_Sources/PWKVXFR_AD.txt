// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWKVXFR
// ?Date: 14.08.2025 Time: 02:56:44
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?DOC:  Maintenance Log CLONE from RTV NEXT TATTOO NBR
DO;

//?09/01/20 SLM Starting clone from RTV Next Tattoo Nbr
//?             The Tattoo process will now allow the plant
//?             to pre-defined the Tattoo number in a data base
//?             specified by the plant.  the number plus what
//?             sequence is used.
//?The following is information keep from the clone of this program
//?             Tattoo Number has now been opened from 1111 to 8999.
//?             All Tattoo will now be generated using the random
//?             method, as we do externals now.
//?*******>>>>>> susan check on this.
//?             and externals.  The internals do not need to be in
//?             the 7000 series and Top Loads also do not need to
//?             be in a special series.  The window for valid
//?             Tattoo Number has now been opened from 1111 to 8999.
//?             All Tattoo will now be generated using the random
//?             method, as we do externals now.
//?             LCL.Random Tattoo Sts USR has been added to overrided
//?             existing methods for generating the next tattoo number.
//?             If going back to original method, then change the
//?             Random Tattoo flag to No.
//?2/7/2007 slm Worked on completing the system date logic
//?         Read the Tattoo Pending from the calucalted Prv Date
//?         If Found in the Range from Prv thru Next date, then
//?         get the next tattoo number.
//?         This was only reading the Prev and the Next, if this was
//?         a day in between, then this records were not found
//?         and the tattoo number was used again.
ENDDO;

// LCL.Random Tattoo Sts USR = CND.No
LCL.Random_Tattoo_Sts_USR = 'N';

// LCL.Tattoo Off Truck USR = CND.Yes
LCL.Tattoo_Off_Truck_USR = 'Y';

//?Get 2 days previous and 1 day for next
DO;

//?USING of Prv for all companies record back now to 2 days
//?In the Payment Post for Tf we are purging only if 2days old
//?In the Payment Post for Guymon we are purging only if 1days old
//?since this is assigning and skipping number then for all companies
//?go two days for the prev date.
//?Use the System Kill date
//?USING of Prv for all companies record back to prev 1 day
// Call program Rtv Prev Kill Date    XF.
CALL PROGRAM(Rtv Prev Kill Date    XF) ('PDRUXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Kill_Date);

// LCL.First Prv Date Usr = LCL.TH Kill Date
LCL.First_Prv_Date_Usr = LCL.TH_Kill_Date;

//?Use the prev kill date from the first prv day
//?USING of Prv for all companies record back to prev 2nd day
// Call program Rtv Prev Kill Date    XF.
CALL PROGRAM(Rtv Prev Kill Date    XF) ('PDRUXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.TH_Kill_Date);
PARAMETER(LCL.TH_Kill_Date);

// LCL.Prv Date = LCL.TH Kill Date
LCL.Prv_Date = LCL.TH_Kill_Date;

//?USING of System Date and get the Next Kill Date
// Call program Rtv Nxt Kill Dt 2 OMS XF.
CALL PROGRAM(Rtv Nxt Kill Dt 2 OMS XF) ('PDUXXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.Next_Kill_Date);

ENDDO;

//?Set the cnd to retrieve the Tattoo nbr per the class type
CASE;

// IF PAR.HC Class Type is Market
IF PAR.HC_Class_Type = 'M';

// AND PAR.Creation Point of Ttt USR is Receiving
AND PAR.Creation_Point_of_Ttt_USR = 'R';

CASE;

// IF PAR.SBD Top Load Sts is No
IF PAR.SBD_Top_Load_Sts = 'N';

CASE;

// IF PAR.SR Type is Internal
IF PAR.SR_Type = 'I';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Value Code    USR = CND.Last Tattoo - Market
PAR.Company_Value_Code_USR = 'LSTTTTMKT';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Value Code    USR = CND.Last Tattoo - SBD Top
PAR.Company_Value_Code_USR = 'LSTTTTTOP';

ENDIF;

//?Set the cnd to retrieve the Tattoo nbr per the class type
// IF PAR.HC Class Type is Resale
IF PAR.HC_Class_Type = 'R';

// AND PAR.Creation Point of Ttt USR is Receiving
AND PAR.Creation_Point_of_Ttt_USR = 'R';

// PAR.Company Value Code    USR = CND.Last Tattoo - Market
PAR.Company_Value_Code_USR = 'LSTTTTMKT';

ENDIF;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

//?Get next unused tattoo number
// DOW WRK.Record Found USR is Record Found
DOW WRK.Record_Found_USR = 'Y';

EXECUTE FUNCTION(Rtv Tattoo Nbr Info   RT) TYPE(RTVOBJ) FILE(PKATREP)           AB1354214;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Tattoo_Nbr_Group);
PARAMETER(PAR.Tattoo_Nbr_Group_Seq);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.Tattoo_Number_USR);
{
 //?USER: Processing if Data record not found

 //?Not found need to restart at the beginning.
 //?Begining read at the first record
 //?The user status of "U" will need to be *blank out
 //?and then read again to get the tattoo number to start with
 //?USER: Process Data record

 // PAR.Tattoo Nbr Group = DB1.Tattoo Nbr Group
 PAR.Tattoo_Nbr_Group = DB1.Tattoo_Nbr_Group;

 // PAR.Tattoo Nbr Group Seq = DB1.Tattoo Nbr Group Seq
 PAR.Tattoo_Nbr_Group_Seq = DB1.Tattoo_Nbr_Group_Seq;

 // PAR.TH Tattoo Number = DB1.TH Tattoo Number
 PAR.TH_Tattoo_Number = DB1.TH_Tattoo_Number;

 // PAR.Tattoo Number USR = DB1.TH Tattoo Number
 PAR.Tattoo_Number_USR = DB1.TH_Tattoo_Number;

 QUIT;

}


// LCL.Text 25 #1 Usr = CON.*BLANK
LCL.Text_25_#1_Usr = *BLANK;

// LCL.Text 25 #2 Usr = CON.*BLANK
LCL.Text_25_#2_Usr = *BLANK;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

//?Tattoo Off Truck:  Chk Tattoo Pending for duplicate Prv to Nxt
CASE;

// IF LCL.Tattoo Off Truck USR is Yes
IF LCL.Tattoo_Off_Truck_USR = 'Y';

// WRK.Record Found USR = CND.Record Not Found
WRK.Record_Found_USR = 'N';

EXECUTE FUNCTION(Val TtoExt Co/Ta/DtRngRT) TYPE(RTVOBJ) FILE(PKFJCPP)           AB1275742;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Tattoo_Number_USR);
PARAMETER(LCL.Prv_Date);
PARAMETER(LCL.Prv_Date);
PARAMETER(LCL.Next_Kill_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Record Found USR = CND.Record Not Found
WRK.Record_Found_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

// LCL.Text 25 #1 Usr = Condition name of WRK.Record Found USR
LCL.Text_25_#1_Usr = RTVCND(WRK.Record_Found_USR);

ENDIF;

//?Check the tattoo number already existing. In the Tattoo Header
//?VAL:  If Tattoo Number already exists.
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

//?Kill date is the system date
EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Set Record Found USR
CASE;

// IF PAR.Company Value Code    USR is Last Tattoo - Market
IF PAR.Company_Value_Code_USR = 'LSTTTTMKT';

// OR LCL.Random Tattoo Sts USR is Yes
OR LCL.Random_Tattoo_Sts_USR = 'Y';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

//?Set Record Found USR
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

// WRK.System Value Numeric  USR = PAR.Tattoo Number USR
WRK.System_Value_Numeric_USR = PAR.Tattoo_Number_USR;

// Call program RTV/Chg Co Val Num    XF.
CALL PROGRAM(RTV/Chg Co Val Num    XF) ('PDHFXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Company_Value_Code_USR);
PARAMETER(WRK.System_Value_Numeric_USR);

ENDIF;

// LCL.Text 25 #2 Usr = Condition name of WRK.Record Found USR
LCL.Text_25_#2_Usr = RTVCND(WRK.Record_Found_USR);

// IF *OTHERWISE
IF *OTHERWISE;

//?Check Prev Kill Date & Next Kill Date
CASE;

// IF PAR.Company Value Code    USR is Last Tattoo - Market
IF PAR.Company_Value_Code_USR = 'LSTTTTMKT';

// OR LCL.Random Tattoo Sts USR is Yes
OR LCL.Random_Tattoo_Sts_USR = 'Y';

//?021207 slm Use first Prv Date only 1 day back
EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.First_Prv_Date_Usr);
PARAMETER(PAR.Tattoo_Number_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

//?** Check Next Kill Date **
EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.Next_Kill_Date);
PARAMETER(PAR.Tattoo_Number_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Record Found USR = CND.Record Not Found
WRK.Record_Found_USR = 'N';

ENDIF;

ENDIF;

//?Check Prev Kill Date & Next Kill Date
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Record Found USR = CND.Record Not Found
WRK.Record_Found_USR = 'N';

ENDIF;

// LCL.Text 25 #2 Usr = Condition name of WRK.Record Found USR
LCL.Text_25_#2_Usr = RTVCND(WRK.Record_Found_USR);

ENDIF;

ENDIF;

//?STOP LOOP
// WRK.Record Found USR = CND.Record Not Found
WRK.Record_Found_USR = 'N';

ENDDO;

//?Check the tattoo number's upper limit.
//?Tattoo - Number Limits
CASE;

// IF LCL.Random Tattoo Sts USR is Yes
IF LCL.Random_Tattoo_Sts_USR = 'Y';

CASE;

// IF PAR.Tattoo Number USR is Greater than 8999
IF PAR.Tattoo_Number_USR > 8999;

// PAR.Tattoo Number USR = CON.1111
PAR.Tattoo_Number_USR = 1111;

ENDIF;

//?Tattoo - Number Limits
// IF PAR.Company Value Code    USR is Last Tattoo - Market
IF PAR.Company_Value_Code_USR = 'LSTTTTMKT';

//?Not Internals
CASE;

// IF PAR.Tattoo Number USR is Greater than 6998
IF PAR.Tattoo_Number_USR > 6998;

// PAR.Tattoo Number USR = CON.1111
PAR.Tattoo_Number_USR = 1111;

ENDIF;

//?Tattoo - Number Limits
// IF PAR.Company Value Code    USR is Last Tattoo - Internal
IF PAR.Company_Value_Code_USR = 'LSTTTTINT';

//?Internals
CASE;

// IF PAR.Tattoo Number USR is Greater than 7998
IF PAR.Tattoo_Number_USR >= 7998;

// PAR.Tattoo Number USR = CON.7000
PAR.Tattoo_Number_USR = 7000;

//?RMC 4/12/05 update company values LSTTTTINT
// WRK.System Value Numeric  USR = PAR.Tattoo Number USR
WRK.System_Value_Numeric_USR = PAR.Tattoo_Number_USR;

// Call program RTV/Chg Co Val Num    XF.
CALL PROGRAM(RTV/Chg Co Val Num    XF) ('PDHFXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Company_Value_Code_USR);
PARAMETER(WRK.System_Value_Numeric_USR);

ENDIF;

//?Tattoo - Number Limits
// IF PAR.Company Value Code    USR is Last Tattoo - SBD Top
IF PAR.Company_Value_Code_USR = 'LSTTTTTOP';

//?SBD Top Tattoos   10/16/01 PK0313
CASE;

// IF PAR.Tattoo Number USR is Greater than 8999
IF PAR.Tattoo_Number_USR > 8999;

// PAR.Tattoo Number USR = CON.8000
PAR.Tattoo_Number_USR = 8000;

ENDIF;

//?Tattoo - Number Limits
// IF PAR.Company Value Code    USR is Last Tattoo - Research
IF PAR.Company_Value_Code_USR = 'LSTTTTRSC';

//?SBD Research    04/19/04 PKD
CASE;

// IF PAR.Tattoo Number USR is Greater than 9850
IF PAR.Tattoo_Number_USR >= 9850;

//?8/16/2006 slm this was 9500 WAS change to 9511
// PAR.Tattoo Number USR = CON.9511
PAR.Tattoo_Number_USR = 9511;

//?RMC 4/12/05 update company values LSTTTTRSC
// WRK.System Value Numeric  USR = PAR.Tattoo Number USR
WRK.System_Value_Numeric_USR = PAR.Tattoo_Number_USR;

// Call program RTV/Chg Co Val Num    XF.
CALL PROGRAM(RTV/Chg Co Val Num    XF) ('PDHFXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Company_Value_Code_USR);
PARAMETER(WRK.System_Value_Numeric_USR);

ENDIF;

ENDIF;

