// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDI9XFR
// ?Date: 14.08.2025 Time: 03:34:53
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// PAR.LckBx Number = CVTVAR(PAR.LckBx Number-Alpha    USR)
PAR.LckBx_Number = CVTVAR(PAR.LckBx_Number_Alpha_USR);

// PAR.LckBx Deposit Date = CVTVAR(PAR.Lckbx Dpst Dte-Alpha  USR)
PAR.LckBx_Deposit_Date = CVTVAR(PAR.LckBx_Dpst_Dte_Alpha_USR);

// PAR.LckBx Deposit Time = CVTVAR(PAR.lckBx Dpst Tme-Alpha  USR)
PAR.LckBx_Deposit_Time = CVTVAR(PAR.lckBx_Dpst_Tme_Alpha_USR);

EXECUTE FUNCTION(PRC System Gen Trans   RT) TYPE(RTVOBJ) FILE(PDMCCPP)          AC1508631;
PARAMETER(PAR.LckBx_Number);
PARAMETER(PAR.LckBx_Deposit_Date);
PARAMETER(PAR.LckBx_Deposit_Time);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(PRC System Gen Trans   RT) TYPE(RTVOBJ) FILE(PDMDCPP)          AC1508632;
 PARAMETER(DB1.LckBx_Number);
 PARAMETER(DB1.LckBx_Deposit_Date);
 PARAMETER(DB1.LckBx_Deposit_Time);
 PARAMETER(DB1.LckBx_Batch_Number);
 PARAMETER(DB1.LckBx_Item_Number);
 PARAMETER(DB1.LckBx_Check_Amount);
 PARAMETER(PAR.LckBx_Hold_Flag);
 {
  //?USER: Initialize routine

  // PAR.LckBx Hold Flag = CND.No
  PAR.LckBx_Hold_Flag = 'N';

  // PAR.Total Inv for Chk     USR = CON.*ZERO
  PAR.Total_Inv_for_Chk_USR = *ZERO;

  // PAR.Save Invoice Number   USR = CND.eq zero
  PAR.Save_Invoice_Number_USR = *ZERO;

  //?USER: Processing if Data record not found

  // PAR.LckBx Hold Flag = CND.Yes
  PAR.LckBx_Hold_Flag = 'Y';

  //?USER: Process Data record

  CASE;

  // IF DB1.LckBx Invoice Number is eq zero
  IF DB1.LckBx_Invoice_Number = *ZERO;

  //?Blank Invoice Number.
  DO;

  // PAR.LckBx Hold Flag = CND.Yes
  PAR.LckBx_Hold_Flag = 'Y';

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.LckBx Invoice Number EQ PAR.Save Invoice Number   USR
  IF DB1.LckBx_Invoice_Number = PAR.Save_Invoice_Number_USR;

  //?*** skip record ***
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Process Invoice
  DO;

  //?*** Calculate total Invoice Amount ***
  // PAR.Lckbx Total Inv Amt   USR = CON.*ZERO
  PAR.LckBx_Total_Inv_Amt_USR = *ZERO;

  // Call program RTV Total Invoice Amt  XF.
  CALL PROGRAM(RTV Total Invoice Amt  XF) ('PDJAXFR');
  PARAMETER(DB1.LckBx_Number);
  PARAMETER(DB1.LckBx_Deposit_Date);
  PARAMETER(DB1.LckBx_Deposit_Time);
  PARAMETER(DB1.LckBx_Batch_Number);
  PARAMETER(DB1.LckBx_Item_Number);
  PARAMETER(DB1.LckBx_Invoice_Number);
  PARAMETER(PAR.LckBx_Total_Inv_Amt_USR);

  //?*** Get A/R Remaining Balance ***
  EXECUTE FUNCTION(RTV Remaining/Open Inv RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1514841;
  PARAMETER(WRK.Company_Number);
  PARAMETER(DB1.LckBx_Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Remaining_Balance_Due);
  PARAMETER(WRK.Unused_Parm_CD7_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Process Payments against A/R Invoices.
  DO;

  CASE;

  // IF PAR.Lckbx Total Inv Amt   USR is less or equal to zero
  IF PAR.LckBx_Total_Inv_Amt_USR <= *ZERO;

  //?Net Payment <= 0            - Hold Check
  DO;

  // PAR.LckBx Hold Flag = CND.Yes
  PAR.LckBx_Hold_Flag = 'Y';

  ENDDO;

  // IF PAR.Remaining Balance Due is less or equal to zero
  IF PAR.Remaining_Balance_Due <= *ZERO;

  //?Remaining Balance <= 0      - Hold Check
  DO;

  // PAR.LckBx Hold Flag = CND.Yes
  PAR.LckBx_Hold_Flag = 'Y';

  ENDDO;

  // IF PAR.Lckbx Total Inv Amt   USR GT PAR.Remaining Balance Due
  IF PAR.LckBx_Total_Inv_Amt_USR > PAR.Remaining_Balance_Due;

  //?Payment > Remaining Balance - Hold Check
  DO;

  // PAR.LckBx Hold Flag = CND.Yes
  PAR.LckBx_Hold_Flag = 'Y';

  ENDDO;

  // IF PAR.Remaining Balance Due GT PAR.Lckbx Total Inv Amt   USR
  IF PAR.Remaining_Balance_Due > PAR.LckBx_Total_Inv_Amt_USR;

  //?Remaining Balance > Payment - (WO/CB)
  DO;

  //?Get Next Sequence Counter.
  DO;

  EXECUTE FUNCTION(RTV Highest Seq Cnter  RT) TYPE(RTVOBJ) FILE(PDMDCPP)          AC1508675;
  PARAMETER(DB1.LckBx_Number);
  PARAMETER(DB1.LckBx_Deposit_Date);
  PARAMETER(DB1.LckBx_Deposit_Time);
  PARAMETER(DB1.LckBx_Batch_Number);
  PARAMETER(DB1.LckBx_Item_Number);
  PARAMETER(DB1.LckBx_Seq_Number);
  PARAMETER(PAR.LckBx_Seq_Counter);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // PAR.LckBx Seq Counter = PAR.LckBx Seq Counter + CON.1
  PAR.LckBx_Seq_Counter = PAR.LckBx_Seq_Counter + 1;

  ENDDO;

  // PAR.Remaining Inv Diff    USR = PAR.Remaining Balance Due - PAR.Lckbx Total Inv
  PAR.Remaining_Inv_Diff_USR = PAR.Remaining_Balance_Due - PAR.LckBx_Total_Inv_Amt_USR;

  CASE;

  // IF PAR.Remaining Inv Diff    USR is less than 50
  IF PAR.Remaining_Inv_Diff_USR < 50;

  //?Create Write Off Transaction.
  DO;

  EXECUTE FUNCTION(CRT A/R Lockbox Invoic CR) TYPE(CRTOBJ) FILE(PDMDCPP)          AC1507060;
  PARAMETER(DB1.LckBx_Number);
  PARAMETER(DB1.LckBx_Deposit_Date);
  PARAMETER(DB1.LckBx_Deposit_Time);
  PARAMETER(DB1.LckBx_Batch_Number);
  PARAMETER(DB1.LckBx_Item_Number);
  PARAMETER(DB1.LckBx_Seq_Number);
  PARAMETER(PAR.LckBx_Seq_Counter);
  PARAMETER(DB1.LckBx_Invoice_Number);
  PARAMETER(PAR.Remaining_Inv_Diff_USR);
  PARAMETER(DB1.Company_Number);
  PARAMETER('WO');
  PARAMETER('S');
  PARAMETER(DB1.Explanation);
  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Create Charge Back Transaction.
  DO;

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs
  IF PAR.Invoice_Suffix = 'CB';

  //?*** No charge back trans against charge backs invoices. ***
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?*** create charge back ***
  //?*** PK0333 ***  No changes here.  This should make a CB record.
  EXECUTE FUNCTION(CRT A/R Lockbox Invoic CR) TYPE(CRTOBJ) FILE(PDMDCPP)          AC1507060;
  PARAMETER(DB1.LckBx_Number);
  PARAMETER(DB1.LckBx_Deposit_Date);
  PARAMETER(DB1.LckBx_Deposit_Time);
  PARAMETER(DB1.LckBx_Batch_Number);
  PARAMETER(DB1.LckBx_Item_Number);
  PARAMETER(DB1.LckBx_Seq_Number);
  PARAMETER(PAR.LckBx_Seq_Counter);
  PARAMETER(DB1.LckBx_Invoice_Number);
  PARAMETER(PAR.Remaining_Inv_Diff_USR);
  PARAMETER(DB1.Company_Number);
  PARAMETER('CB');
  PARAMETER('S');
  PARAMETER(DB1.Explanation);
  //?*** hold for verification ***
  // PAR.LckBx Hold Flag = CND.Yes
  PAR.LckBx_Hold_Flag = 'Y';

  ENDIF;

  ENDDO;

  ENDIF;

  ENDDO;

  ENDIF;

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.LckBx Hold Flag = CND.Yes
  PAR.LckBx_Hold_Flag = 'Y';

  ENDIF;

  ENDDO;

  ENDIF;

  ENDIF;

  // PAR.Save Invoice Number   USR = DB1.LckBx Invoice Number
  PAR.Save_Invoice_Number_USR = DB1.LckBx_Invoice_Number;

  // PAR.Total Inv for Chk     USR = PAR.Total Inv for Chk     USR + DB1.LckBx Invoic
  PAR.Total_Inv_for_Chk_USR = PAR.Total_Inv_for_Chk_USR + DB1.LckBx_Invoice_Amount;

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Exit processing

  CASE;

  // IF PAR.LckBx Check Amount LT PAR.Total Inv for Chk     USR
  IF PAR.LckBx_Check_Amount < PAR.Total_Inv_for_Chk_USR;

  //?payments < check
  DO;

  // PAR.LckBx Hold Flag = CND.Yes
  PAR.LckBx_Hold_Flag = 'Y';

  ENDDO;

  // IF PAR.LckBx Check Amount NE PAR.Total Inv for Chk     USR
  IF PAR.LckBx_Check_Amount <> PAR.Total_Inv_for_Chk_USR;

  //?payments not= check
  DO;

  // PAR.LckBx Hold Flag = CND.Yes
  PAR.LckBx_Hold_Flag = 'Y';

  ENDDO;

  ENDIF;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // PAR.LckBx Invoice Flag = CND.Yes
 PAR.LckBx_Invoice_Flag = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.LckBx Invoice Flag = CND.No
 PAR.LckBx_Invoice_Flag = 'N';

 ENDIF;

 EXECUTE FUNCTION(CHG Inv & Hld Flag     CH) TYPE(CHGOBJ) FILE(PDMCCPP)          AC1508633;
 PARAMETER(DB1.LckBx_Number);
 PARAMETER(DB1.LckBx_Deposit_Date);
 PARAMETER(DB1.LckBx_Deposit_Time);
 PARAMETER(DB1.LckBx_Batch_Number);
 PARAMETER(DB1.LckBx_Item_Number);
 PARAMETER(PAR.LckBx_Invoice_Flag);
 PARAMETER(PAR.LckBx_Hold_Flag);
}


