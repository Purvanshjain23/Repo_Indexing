// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNOPE1R
// ?Date: 14.08.2025 Time: 03:45:53
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Create SEL RIN Split transaction from a BUY RIN Transaction
//?E2079 RMC 5/01/12 Allow entry of gross gallons and temperature, then
//?  calculate the net gallons; pass back density, temp
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// LCL.RFS Volume Corr Mthd  USR = CND.API Volume Corr Table
LCL.RFS_Volume_Corr_Mthd_USR = 'A';

//?USER: Initialize detail screen (existing record)

// DTL.COA RIN Type Flag - SEL = DTL.COA RIN Type Flag
DTL.COA_RIN_Type_Flag_SEL = DTL.COA_RIN_Type_Flag;

//?get gallons taken but not invoiced yet  3/03/10
// LCL.HPB Meter Net Gallon = CON.*ZERO
LCL.HPB_Meter_Net_Gallon = *ZERO;

EXECUTE FUNCTION(RTV RIN Net Sold GallsRT) TYPE(RTVOBJ) FILE(PNFPCPP)           AC1971628;
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Batch_Header_RIN_Seq);
PARAMETER(DTL.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
{
 //?USER: Process Data record

 //?RMC added chk to compare to shipping company 4/20/20
 CASE;

 // IF DB1.COA Batch Company Nbr EQ PAR.Shipping Company
 IF DB1.COA_Batch_Company_Nbr = PAR.Shipping_Company;

 EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Header Status is Closed or Cancelled
 IF LCL.Header_Status = 'X'/'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.HPB Meter Net Gallon = PAR.HPB Meter Net Gallon + DB1.HPB Meter Net Gallon
 PAR.HPB_Meter_Net_Gallon = PAR.HPB_Meter_Net_Gallon + DB1.HPB_Meter_Net_Gallon;

 ENDIF;

 ENDIF;

}


// DTL.COA BHR Net Galls to Sell = DTL.COA BHR Net Galls to Sell - LCL.HPB Meter Net Gallon
DTL.COA_BHR_Net_Galls_to_Sell = DTL.COA_BHR_Net_Galls_to_Sell - LCL.HPB_Meter_Net_Gallon;

//?Calc to be RINS Taken but not invoiced yet.  NEW 1/05/12 RMC
// WRK.Quantity 7.0 USR 1 = DTL.COA BHR Equiv Value * LCL.HPB Meter Net Gallon *Rounded
WRK.Quantity_7_0_USR_1 = DTL.COA_BHR_Equiv_Value * LCL.HPB_Meter_Net_Gallon 'H';

// DTL.COA RIN Volume in Gallons = DTL.COA RIN Volume in Gallons - WRK.Quantity 7.0 USR 1
DTL.COA_RIN_Volume_in_Gallons = DTL.COA_RIN_Volume_in_Gallons - WRK.Quantity_7_0_USR_1;

// WRK.COA Density Ref Adj 4 dec = CON.*ZERO
WRK.COA_Density_Ref_Adj_4_dec = *ZERO;

// DTL.COA Temperature Loadout = PAR.COA Temperature Loadout
DTL.COA_Temperature_Loadout = PAR.COA_Temperature_Loadout;

//?USER: Validate detail screen fields

//?-------------------------------------------------------
//?E2079 5/01/12  Allow entry of gross gallons and temp, then calc net galls
//?If Gross Gallons entered
CASE;

// IF DTL.Case Quantity is NE *ZERO
IF DTL.Case_Quantity <> *ZERO;

CASE;

// IF DTL.COA Temperature Loadout is Not Entered
IF DTL.COA_Temperature_Loadout = *ZERO;

// Send error message - 'Temperature Loadout invalid'
ERROR(USR3925);
MSGPARM(DTL.COA_Temperature_Loadout);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.HPB Meter Total Gallon = DTL.Case Quantity
LCL.HPB_Meter_Total_Gallon = DTL.Case_Quantity;

//?Calc Factor or Use API Table - 7/14/10
CASE;

// IF LCL.RFS Volume Corr Mthd  USR is Calculate factor per Prop
IF LCL.RFS_Volume_Corr_Mthd_USR = 'C';

//?New formula - after 6/27/10 -  goes in with RFS2/EMTS    P000579
// WRK.COA Temp Conv Factor 1 = CON.-.00045767
WRK.COA_Temp_Conv_Factor_1 = -.00045767;

// WRK.COA Temp Conv Factor 2 = CON.1.02746025
WRK.COA_Temp_Conv_Factor_2 = 1.02746025;

// Compute: dtl.Net gallons
WRK.Quantity_7_0_USR = LCL.HPB_Meter_Total_Gallon * ( ( WRK.COA_Temp_Conv_Factor_1                 +
* LCL.COA_Temperature_Loadout ) + WRK.COA_Temp_Conv_Factor_2 ) 'H';

//?Calc Factor or Use API Table - 7/14/10
// IF LCL.RFS Volume Corr Mthd  USR is API Volume Corr Table
IF LCL.RFS_Volume_Corr_Mthd_USR = 'A';

// LCL.RFS Loadout Temperature = DTL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = DTL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

// Compute: dtl.Net gallons
DTL.Quantity_7_0_USR = LCL.HPB_Meter_Total_Gallon * WRK.HPB_Temperature_Adjustmnt 'H';

ENDIF;

ENDIF;

ENDIF;

//?-------------------------------------------------------
//?Validate quantity to sell
CASE;

// IF DTL.Quantity 7.0 USR is Equal to Zero
IF DTL.Quantity_7_0_USR = *ZERO;

// Send error message - 'Quantity must be entered.'
ERROR(USR0578);
MSGPARM(DTL.Quantity_7_0_USR);

QUIT;

//?Validate quantity to sell
// IF DTL.Quantity 7.0 USR GT DTL.COA BHR Net Galls to Sell
IF DTL.Quantity_7_0_USR > DTL.COA_BHR_Net_Galls_to_Sell;

// Send error message - 'Quantity to sell cannot be > the Net Gallons to Sell.'
ERROR(USR4259);
MSGPARM(DTL.Quantity_7_0_USR);

QUIT;

ENDIF;

CASE;

// IF DTL.Quantity 7.0 USR is Greater than Zero
IF DTL.Quantity_7_0_USR > *ZERO;

// LCL.COA BHR Net Galls to Sell = DTL.COA BHR Net Galls to Sell
LCL.COA_BHR_Net_Galls_to_Sell = DTL.COA_BHR_Net_Galls_to_Sell;

// LCL.COA RIN Gallons Sold = DTL.COA RIN Gallons Sold
LCL.COA_RIN_Gallons_Sold = DTL.COA_RIN_Gallons_Sold;

EXECUTE FUNCTION(Rtv Equiv Value f/btchRT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1992392;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(LCL.COA_RIN_Equivalence_Valu#);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Exc HPB RIN Gen Split  XF.
CALL PROGRAM(Exc HPB RIN Gen Split  XF) ('PNOMXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Batch_Header_RIN_Seq);
PARAMETER(DTL.COA_Batch_Header_RIN);
PARAMETER(DTL.COA_RIN_SSSSSSSS);
PARAMETER(DTL.COA_RIN_EEEEEEEE);
PARAMETER(DTL.COA_RIN_Volume_in_Gallons);
PARAMETER(LCL.COA_RIN_Gallons_Sold);
PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
PARAMETER(DTL.COA_RIN_Quantity);
PARAMETER(DTL.COA_BHR_RINs_to_Sell_Sep);
PARAMETER(DTL.COA_Batch_RIN);
PARAMETER(LCL.COA_RIN_SSSSSSSS_New_usr);
PARAMETER(LCL.COA_RIN_EEEEEEEE_New_usr);
PARAMETER(DTL.COA_RIN_Volume_New_usr);
PARAMETER(DTL.Quantity_7_0_USR);
PARAMETER(LCL.COA_RIN_Equivalence_Valu#);
PARAMETER(LCL.COA_Batch_RIN_Volume_new);

// PAR.COA RIN Volume New usr = DTL.COA RIN Volume New usr
PAR.COA_RIN_Volume_New_usr = DTL.COA_RIN_Volume_New_usr;

//?--- Display gross gallons - if not entered   E2079
//?Calc gross gallons if not entered
CASE;

// IF DTL.Case Quantity is EQ *ZERO
IF DTL.Case_Quantity = *ZERO;

CASE;

// IF LCL.RFS Loadout Temperature is Not Entered
IF LCL.RFS_Loadout_Temperature = *ZERO;

// LCL.RFS Loadout Temperature = DTL.COA BHR Loadout Temp
LCL.RFS_Loadout_Temperature = DTL.COA_BHR_Loadout_Temp;

ENDIF;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

// Compute: dtl.gross galls
DTL.Case_Quantity = DTL.Quantity_7_0_USR / WRK.HPB_Temperature_Adjustmnt 'H';

ENDIF;

//?--------------------------
CASE;

// IF LCL.COA BHR Net Galls to Sell is Not Entered
IF LCL.COA_BHR_Net_Galls_to_Sell = *ZERO;

// LCL.COA RIN SoldFull/Splt Sts = CND.Fully Sold
LCL.COA_RIN_SoldFull_Splt_Sts = 'F';

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg RIN Crt SEL Tr/OrdIF) TYPE(EXCINTFUN) FILE(PMDACPP)        AC1971428;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Batch_Header_RIN_Seq);
PARAMETER(DTL.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(DTL.COA_RIN_Volume_in_Gallons);
PARAMETER(LCL.COA_RIN_SoldFull_Splt_Sts);
PARAMETER(LCL.COA_RIN_Gallons_Sold);
PARAMETER(DTL.COA_RIN_Type_Flag);
PARAMETER(DTL.COA_RIN_Customer_PO#);
PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
PARAMETER(DTL.COA_BHR_Loadout_Temp);
PARAMETER(DTL.ULSD_Comp_ship_to_#);
PARAMETER(DTL.COA_Batch_RIN);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Date_To_USR);
PARAMETER(DTL.Time);
PARAMETER(DTL.COA_RIN_Volume_New_usr);
PARAMETER(LCL.COA_RIN_SSSSSSSS_New_usr);
PARAMETER(LCL.COA_RIN_EEEEEEEE_New_usr);
{
 //?Execute internal function

 //?Update BUY RIN Transaction with  sold sts, gallons sold
 //?Create SEL RIN Transaction
}


//?USER: Process command keys

//?Net gallons
// PAR.Quantity 7.0 USR = DTL.Quantity 7.0 USR
PAR.Quantity_7_0_USR = DTL.Quantity_7_0_USR;

//?E2079 new- pass out
// PAR.COA Temperature Loadout = DTL.COA Temperature Loadout
PAR.COA_Temperature_Loadout = DTL.COA_Temperature_Loadout;

//?   Gross gallons
// PAR.Case Quantity = DTL.Case Quantity
PAR.Case_Quantity = DTL.Case_Quantity;

