// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICQHPFR
// ?Date: 14.08.2025 Time: 12:03:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?****** Maintenance Log ******
//?** 01/24/07 LJB L70125A  Added "Include Zero Quantities" flag.
//?**          Skip record if flag = "N" and Transaction Quantity
//?**          is zeros.
//?10/27/04 PKD 1) Added Inventory Trans ID as an Input Parameter for
//?                printing in the Selection Criteria.
//?             2) Added selection for Adjustment Transaction Report
//?                Type.
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

// WRK.WF Inv Sequence number = CON.*ZERO
WRK.WF_Inv_Sequence_number = *ZERO;

//?USER: Record selection processing

CASE;

// IF DB1.Inventory Trans. Type is Physical Count
IF DB1.Inventory_Trans_Type = 'P';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Validate Export/Domestic from PA Group EXP
CASE;

// IF PAR.Export/Domestic is Export
IF PAR.Export_Domestic = 'E';

EXECUTE FUNCTION(Val Existance         RT) TYPE(RTVOBJ) FILE(PDKLREP)           AC1390296;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER('EXP');
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Validate Export/Domestic from PA Group EXP
// IF PAR.Export/Domestic is Domestic
IF PAR.Export_Domestic = 'D';

EXECUTE FUNCTION(Val Existance         RT) TYPE(RTVOBJ) FILE(PDKLREP)           AC1390296;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER('EXP');
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?10/27/04 PKD Selection for Adjustment Transactions Report Type
//?SEL:  Adjustment Transactions
CASE;

// IF PAR.Dtl/Sum/Ttl/Typ Sts   USR is Adjustment Transactions
IF PAR.Dtl_Sum_Ttl_Typ_Sts_USR = 'A';

//?Inventory Transaction ID & Types
CASE;

// IF DB1.Inventory Trans. ID is Issue
IF DB1.Inventory_Trans_ID = 'I';

CASE;

// IF DB1.Inventory Trans. Type is Issue Order Process
IF DB1.Inventory_Trans_Type = 'IO';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Inventory Transaction ID & Types
// IF DB1.Inventory Trans. ID is Receipt
IF DB1.Inventory_Trans_ID = 'R';

CASE;

// IF DB1.Inventory Trans. Type is Receipt Production
IF DB1.Inventory_Trans_Type = 'RR';

CASE;

// IF DB1.Reason Code is Production from Accu-Sort
IF DB1.Reason_Code = 'PRD';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Inventory Transaction ID & Types
// IF DB1.Inventory Trans. ID is Transfer
IF DB1.Inventory_Trans_ID = 'T';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Do not print if Weight and Quantity are zero
CASE;

// IF DB1.Transaction Quantity is Equal to zero
IF DB1.Transaction_Quantity = *ZERO;

// AND DB1.Transaction Weight is Equal to zero
AND DB1.Transaction_Weight = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** 01/25/07 LJB Skip record if Include Zero Quantity flag = "N"
//?** and the Transaction Quantity is zeros
//?** Do not print if select Transaction Quantity=zero is no
CASE;

// IF PAR.Status - Y or N is no
IF PAR.Status_Y_or_N = 'N';

// AND DB1.Transaction Quantity is Equal to zero
AND DB1.Transaction_Quantity = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

// 1PG.Accounting Company Number = PAR.Accounting Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Availability Group Code = PAR.Availability Group Code
X1PG_Availability_Group_Code = PAR.Availability_Group_Code;

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(X1PG_Availability_Group_Code);
PARAMETER(X1PG_Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// 1PG.Warehouse Code = PAR.Warehouse Code
X1PG_Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// 1PG.Item Code = PAR.Item Code
X1PG_Item_Code = PAR.Item_Code;

//?If company is selected, rtv co/item else rtv item
CASE;

// IF PAR.Accounting Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If company is selected, rtv co/item else rtv item
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// 1PG.Item Structure Type Code = PAR.Item Structure Type Code
X1PG_Item_Structure_Type_Code = PAR.Item_Structure_Type_Code;

EXECUTE FUNCTION(RTV  Description       RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1219219;
PARAMETER(X1PG_Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Structure Group Code = PAR.Item Structure Group Code
X1PG_Item_Structure_Group_Code = PAR.Item_Structure_Group_Code;

EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(X1PG_Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Structure Class Code = PAR.Item Structure Class Code
X1PG_Item_Structure_Class_Code = PAR.Item_Structure_Class_Code;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(X1PG_Item_Structure_Class_Code);
PARAMETER(X1PG_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR From Date = PAR.USR From Date
X1PG_USR_From_Date = PAR.USR_From_Date;

// 1PG.USR To Date = PAR.USR To Date
X1PG_USR_To_Date = PAR.USR_To_Date;

// 1PG.USR From Time 4.0 = PAR.USR From Time 6.0 / CON.100 *
X1PG_USR_From_Time_4_0 = PAR.USR_From_Time_6_0 / 100;

// 1PG.USR To Time 4.0 = PAR.USR To Time 6.0 / CON.100 *
X1PG_USR_To_Time_4_0 = PAR.USR_To_Time_6_0 / 100;

// 1PG.Inventory Trans. ID = PAR.Inventory Trans. ID
X1PG_Inventory_Trans_ID = PAR.Inventory_Trans_ID;

CASE;

// IF 1PG.Inventory Trans. ID is *ALL values
IF X1PG_Inventory_Trans_ID = 'I'/'R'/'A'/'T';

// 1PG.Condition Desc. 4  USR = Condition name of 1PG.Inventory Trans. ID
X1PG_Condition_Desc_4_USR = RTVCND(X1PG_Inventory_Trans_ID);

ENDIF;

// 1PG.Trans Type 1 PASS     USR = PAR.Trans Type 1 PASS     USR
X1PG_Trans_Type_1_PASS_USR = PAR.Trans_Type_1_PASS_USR;

// 1PG.Trans Type 2 PASS     USR = PAR.Trans Type 2 PASS     USR
X1PG_Trans_Type_2_PASS_USR = PAR.Trans_Type_2_PASS_USR;

// 1PG.Trans Type 3 PASS     USR = PAR.Trans Type 3 PASS     USR
X1PG_Trans_Type_3_PASS_USR = PAR.Trans_Type_3_PASS_USR;

// 1PG.Trans Type 4 PASS     USR = PAR.Trans Type 4 PASS     USR
X1PG_Trans_Type_4_PASS_USR = PAR.Trans_Type_4_PASS_USR;

// 1PG.Reason Code 1 PASS    USR = PAR.Reason Code 1 PASS    USR
X1PG_Reason_Code_1_PASS_USR = PAR.Reason_Code_1_PASS_USR;

// 1PG.Reason Code 2 PASS    USR = PAR.Reason Code 2 PASS    USR
X1PG_Reason_Code_2_PASS_USR = PAR.Reason_Code_2_PASS_USR;

// 1PG.Reason Code 3 PASS    USR = PAR.Reason Code 3 PASS    USR
X1PG_Reason_Code_3_PASS_USR = PAR.Reason_Code_3_PASS_USR;

// 1PG.Reason Code 4 PASS    USR = PAR.Reason Code 4 PASS    USR
X1PG_Reason_Code_4_PASS_USR = PAR.Reason_Code_4_PASS_USR;

//?** Print "Zeros Quantities" on the report
// 1PG.Status - Y or N = PAR.Status - Y or N
1PG.Status - Y or N = PAR.Status_Y_or_N;

// 1PG.USR User ID Selected = PAR.USR User ID Selected
X1PG_USR_User_ID_Selected = PAR.USR_User_ID_Selected;

EXECUTE FUNCTION(RTV Profile Desc.      RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1253264;
PARAMETER(X1PG_USR_User_ID_Selected);
PARAMETER(X1PG_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Condition Desc. 1  USR = Condition name of PAR.Dtl/Sum/Ttl/Typ Sts   USR
X1PG_Condition_Desc_1_USR = RTVCND(PAR.Dtl_Sum_Ttl_Typ_Sts_USR);

// 1PG.Condition Desc. 2  USR = Condition name of PAR.Date Type             USR
X1PG_Condition_Desc_2_USR = RTVCND(PAR.Date_Type_USR);

// 1PG.Shift Number = PAR.Shift Number
X1PG_Shift_Number = PAR.Shift_Number;

//?Export or Domestic or ALL
CASE;

// IF PAR.Export/Domestic is *ALL values
IF PAR.Export_Domestic = 'E'/'D';

// 1PG.Condition Desc. 3  USR = Condition name of PAR.Export/Domestic
X1PG_Condition_Desc_3_USR = RTVCND(PAR.Export_Domestic);

//?Export or Domestic or ALL
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 3  USR = CON.ALL
X1PG_Condition_Desc_3_USR = 'ALL';

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Company Number - 3 header format
PRINT Company Number - 3 header format;

ENDIF;

CASE;

IF NEW Warehouse_Code;
EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.USR_Warehouse_description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// Print Warehouse Code header format
PRINT Warehouse Code header format;

ENDIF;

CASE;

IF NEW Transaction_Date_Code;
// Print Transaction Date Calendar header format
PRINT Transaction Date Calendar header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(CUR.Unit_Weight);
PARAMETER(WRK.Production_Date_Control);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Reason Code Desc.  RT) TYPE(RTVOBJ) FILE(CAEFREP)          AC1148526;
PARAMETER(CUR.Reason_Code);
PARAMETER(CUR.Reason_Description);
{
 //?USER: Processing if Data record not found

 // PAR.Description = CON.*BLANK
 PAR.Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Unit Cost
CASE;

// IF CUR.Transaction Weight EQ WRK.ZERO
IF CUR.Transaction_Weight = WRK.ZERO;

// CUR.USR Transaction-Unit Cost = CON.*ZERO
CUR.USR_Transaction_Unit_Cost = *ZERO;

//?Unit Cost
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Transaction-Unit Cost = CUR.Extended Amount / CUR.Transaction Weight *Ro
CUR.USR_Transaction_Unit_Cost = CUR.Extended_Amount / CUR.Transaction_Weight 'H';

ENDIF;

EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unit  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1480428;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Item_Description);
PARAMETER(CUR.Unit_Weight);
PARAMETER(WRK.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Calculate Pieces
CUR.USR_Pieces = ( CUR.Transaction_Quantity * PAR.Pieces_Per_Bag 'H' ) * PAR.Bags_Per_Unit         +
'H';

//?** Don't print if transaction quantity is zeros
CASE;

// IF PAR.Status - Y or N is no
IF PAR.Status_Y_or_N = 'N';

CASE;

// IF CUR.Transaction Quantity is Equal to zero
IF CUR.Transaction_Quantity = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?E00320 slm 03/04/2009
//?Build data that will be sent via email
CASE;

// IF PGM.*Print format is Print format
IF PGM.*Print_format = 'Y';

CASE;

// IF WRK.WF Inv Sequence number is Less then Max
IF WRK.WF_Inv_Sequence_number < 99999;

// WRK.WF Inv Sequence number = WRK.WF Inv Sequence number + CON.1
WRK.WF_Inv_Sequence_number = WRK.WF_Inv_Sequence_number + 1;

EXECUTE FUNCTION(Crt WF Inv Trans Jrnl CO) TYPE(CRTOBJ) FILE(PMFCCPP)           AC1925258;
PARAMETER(WRK.WF_Inv_Sequence_number);
PARAMETER(DB1.ITD_Sequence_Number);
PARAMETER(DB1.Sequence_Number);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Shift_Number);
PARAMETER(*BLANK);
PARAMETER(CUR.Transaction_Date_Code);
PARAMETER(CUR.Inventory_Trans_ID);
PARAMETER(CUR.Inventory_Trans_Type);
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Transaction_Quantity);
PARAMETER(CUR.USR_Pieces);
PARAMETER(CUR.Transaction_Weight);
PARAMETER(CUR.Unit_Weight);
PARAMETER(CUR.USR_Transaction_Unit_Cost);
PARAMETER(CUR.Item_Description);
PARAMETER(*BLANK);
PARAMETER(CUR.UOM_Transaction);
PARAMETER(CUR.Extended_Amount);
PARAMETER(CUR.Reason_Code);
PARAMETER(CUR.Item_Transaction_Source);
PARAMETER(CUR.Production_Time);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Unused_Date);
PARAMETER(LCL.Unused_Date_2);
PARAMETER(LCL.Unused_Date_3);
PARAMETER(LCL.Unused_Number_1);
PARAMETER(LCL.Unused_Number_1_11_0);
PARAMETER(LCL.Unused_Number_2_11_0);

ENDIF;

ENDIF;

//?USER: Process after print of detail format

// NXT.Quantity Total 13.2   USR = NXT.Quantity Total 13.2   USR + CUR.Transaction
NXT.Quantity_Total_13_2_USR = NXT.Quantity_Total_13_2_USR + CUR.Transaction_Quantity;

// NXT.Pieces Total  13.2    USR = NXT.Pieces Total  13.2    USR + CUR.USR Pieces
NXT.Pieces_Total_13_2_USR = NXT.Pieces_Total_13_2_USR + CUR.USR_Pieces;

// NXT.Weight Total 13.2     USR = NXT.Weight Total 13.2     USR + CUR.Transaction
NXT.Weight_Total_13_2_USR = NXT.Weight_Total_13_2_USR + CUR.Transaction_Weight;

// NXT.USR Amount for CR = NXT.USR Amount for CR + CUR.Extended Amount
NXT.USR_Amount_for_CR = NXT.USR_Amount_for_CR + CUR.Extended_Amount;

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Transaction Date Calendar totals format

CASE;

IF NEW Warehouse_Code;
// Print Warehouse Code totals format
PRINT Warehouse Code totals format;

// NXT.Quantity Total 13.2   USR = NXT.Quantity Total 13.2   USR + CUR.Quantity Tot
NXT.Quantity_Total_13_2_USR = NXT.Quantity_Total_13_2_USR + CUR.Quantity_Total_13_2_USR;

// NXT.Pieces Total  13.2    USR = NXT.Pieces Total  13.2    USR + CUR.Pieces Total
NXT.Pieces_Total_13_2_USR = NXT.Pieces_Total_13_2_USR + CUR.Pieces_Total_13_2_USR;

// NXT.Weight Total 13.2     USR = NXT.Weight Total 13.2     USR + CUR.Weight Total
NXT.Weight_Total_13_2_USR = NXT.Weight_Total_13_2_USR + CUR.Weight_Total_13_2_USR;

// NXT.USR Amount for CR = NXT.USR Amount for CR + CUR.USR Amount for CR
NXT.USR_Amount_for_CR = NXT.USR_Amount_for_CR + CUR.USR_Amount_for_CR;

ENDIF;

CASE;

IF NEW Company_Number;
// Print Company Number - 3 totals format
PRINT Company Number - 3 totals format;

// NXT.Quantity Total 13.2   USR = NXT.Quantity Total 13.2   USR + CUR.Quantity Tot
NXT.Quantity_Total_13_2_USR = NXT.Quantity_Total_13_2_USR + CUR.Quantity_Total_13_2_USR;

// NXT.Pieces Total  13.2    USR = NXT.Pieces Total  13.2    USR + CUR.Pieces Total
NXT.Pieces_Total_13_2_USR = NXT.Pieces_Total_13_2_USR + CUR.Pieces_Total_13_2_USR;

// NXT.Weight Total 13.2     USR = NXT.Weight Total 13.2     USR + CUR.Weight Total
NXT.Weight_Total_13_2_USR = NXT.Weight_Total_13_2_USR + CUR.Weight_Total_13_2_USR;

// NXT.USR Amount for CR = NXT.USR Amount for CR + CUR.USR Amount for CR
NXT.USR_Amount_for_CR = NXT.USR_Amount_for_CR + CUR.USR_Amount_for_CR;

ENDIF;

