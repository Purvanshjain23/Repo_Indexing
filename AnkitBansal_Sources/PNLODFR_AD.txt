// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNLODFR
// ?Date: 14.08.2025 Time: 03:45:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// PAR.Application Code = CND.Production Scheduling
PAR.Application_Code = 'P/S';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?** Put par.co# on the screen, if zeros, use co# from user profile
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

//?** Put par.co# on the screen, if zeros, use co# from user profile
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

// PAR.Company Number = WRK.Company Number
PAR.Company_Number = WRK.Company_Number;

ENDIF;

//?** Put par whse on the screen, if blank, use whse from user profile
CASE;

// IF PAR.Warehouse Code PASS   USR is Warehouse Code not Blank
IF PAR.Warehouse_Code_PASS_USR <> *BLANK;

// CTL.Warehouse Code = PAR.Warehouse Code PASS   USR
CTL.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

//?** Put par whse on the screen, if blank, use whse from user profile
// IF *OTHERWISE
IF *OTHERWISE;

//?** get whse code using co# or else from security parms
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(Rtv Prd WHS w/AcctCo  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1917599;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

//?** get whse code using co# or else from security parms
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

ENDIF;

ENDIF;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Week Number = CON.1
PAR.Week_Number = 1;

EXECUTE FUNCTION(RTV Mon-Sat Dates      IF) TYPE(EXCINTFUN)                     AC1386891;
PARAMETER(PAR.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Accounting_Year_Code);
PARAMETER(WRK.Week_Number);
PARAMETER(PAR.Date_Mon_USR);
PARAMETER(WRK.Date_Tue_USR);
PARAMETER(WRK.Date_Wed_USR);
PARAMETER(WRK.Date_Thu_USR);
PARAMETER(WRK.Date_Fri_USR);
PARAMETER(WRK.Date_Sat_USR);
PARAMETER(WRK.Date_Sun_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Week Number       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1386894;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Post_to_G_L_Date);
 PARAMETER(PAR.Accounting_Year_Code);
 PARAMETER(PAR.Week_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Mon-Sat w/Wk#      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1386902;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Accounting_Year_Code);
 PARAMETER(PAR.Week_Number);
 PARAMETER(PAR.Date_Mon_USR);
 PARAMETER(PAR.Date_Tue_USR);
 PARAMETER(PAR.Date_Wed_USR);
 PARAMETER(PAR.Date_Thu_USR);
 PARAMETER(PAR.Date_Fri_USR);
 PARAMETER(PAR.Date_Sat_USR);
 PARAMETER(PAR.Date_Sun_USR);
 PARAMETER('Y');
 {
  //?USER: Initialize routine

  CASE;

  // IF PAR.First Time Flag is Yes
  IF PAR.First_Time_Flag = 'Y';

  MOVE *ALL (To: PAR From: CON);

  ENDIF;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Monday
  IF DB1.Day_of_Week = '2';

  // PAR.Date Mon USR = DB1.Post to G/L Date
  PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Tuesday
  IF DB1.Day_of_Week = '3';

  // PAR.Date Tue USR = DB1.Post to G/L Date
  PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Wednesday
  IF DB1.Day_of_Week = '4';

  // PAR.Date Wed USR = DB1.Post to G/L Date
  PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Thursday
  IF DB1.Day_of_Week = '5';

  // PAR.Date Thu USR = DB1.Post to G/L Date
  PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Friday
  IF DB1.Day_of_Week = '6';

  // PAR.Date Fri USR = DB1.Post to G/L Date
  PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  // PAR.Date Sat USR = DB1.Post to G/L Date
  PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

  ENDIF;

 }

 CASE;

 // IF PAR.Date Mon USR EQ WRK.ZERO
 IF PAR.Date_Mon_USR = WRK.ZERO;

 // OR PAR.Date Tue USR EQ WRK.ZERO
 OR PAR.Date_Tue_USR = WRK.ZERO;

 // OR PAR.Date Wed USR EQ WRK.ZERO
 OR PAR.Date_Wed_USR = WRK.ZERO;

 // OR PAR.Date Thu USR EQ WRK.ZERO
 OR PAR.Date_Thu_USR = WRK.ZERO;

 // OR PAR.Date Fri USR EQ WRK.ZERO
 OR PAR.Date_Fri_USR = WRK.ZERO;

 // OR PAR.Date Sat USR EQ WRK.ZERO
 OR PAR.Date_Sat_USR = WRK.ZERO;

 //?And the Week is 52 or 53
 CASE;

 // IF PAR.Week Number is Year End
 IF PAR.Week_Number >= 52;
 AND PAR.Week_Number <= 53;

 // PAR.Accounting Year Code = PAR.Accounting Year Code + CON.1
 PAR.Accounting_Year_Code = PAR.Accounting_Year_Code + 1;

 EXECUTE FUNCTION(RTV Mon-Sat w/Wk#      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1386902;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Accounting_Year_Code);
 PARAMETER(1);
 PARAMETER(PAR.Date_Mon_USR);
 PARAMETER(PAR.Date_Tue_USR);
 PARAMETER(PAR.Date_Wed_USR);
 PARAMETER(PAR.Date_Thu_USR);
 PARAMETER(PAR.Date_Fri_USR);
 PARAMETER(PAR.Date_Sat_USR);
 PARAMETER(PAR.Date_Sun_USR);
 PARAMETER('N');
 {
  //?USER: Initialize routine

  CASE;

  // IF PAR.First Time Flag is Yes
  IF PAR.First_Time_Flag = 'Y';

  MOVE *ALL (To: PAR From: CON);

  ENDIF;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Monday
  IF DB1.Day_of_Week = '2';

  // PAR.Date Mon USR = DB1.Post to G/L Date
  PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Tuesday
  IF DB1.Day_of_Week = '3';

  // PAR.Date Tue USR = DB1.Post to G/L Date
  PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Wednesday
  IF DB1.Day_of_Week = '4';

  // PAR.Date Wed USR = DB1.Post to G/L Date
  PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Thursday
  IF DB1.Day_of_Week = '5';

  // PAR.Date Thu USR = DB1.Post to G/L Date
  PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Friday
  IF DB1.Day_of_Week = '6';

  // PAR.Date Fri USR = DB1.Post to G/L Date
  PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  // PAR.Date Sat USR = DB1.Post to G/L Date
  PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

  ENDIF;

 }

 //?And the Week is 52 or 53
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Accounting Year Code = PAR.Accounting Year Code + CON.-1
 PAR.Accounting_Year_Code = PAR.Accounting_Year_Code + -1;

 EXECUTE FUNCTION(RTV Mon-Sat w/Wk#      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1386902;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Accounting_Year_Code);
 PARAMETER(53);
 PARAMETER(PAR.Date_Mon_USR);
 PARAMETER(PAR.Date_Tue_USR);
 PARAMETER(PAR.Date_Wed_USR);
 PARAMETER(PAR.Date_Thu_USR);
 PARAMETER(PAR.Date_Fri_USR);
 PARAMETER(PAR.Date_Sat_USR);
 PARAMETER(PAR.Date_Sun_USR);
 PARAMETER('N');
 {
  //?USER: Initialize routine

  CASE;

  // IF PAR.First Time Flag is Yes
  IF PAR.First_Time_Flag = 'Y';

  MOVE *ALL (To: PAR From: CON);

  ENDIF;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Monday
  IF DB1.Day_of_Week = '2';

  // PAR.Date Mon USR = DB1.Post to G/L Date
  PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Tuesday
  IF DB1.Day_of_Week = '3';

  // PAR.Date Tue USR = DB1.Post to G/L Date
  PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Wednesday
  IF DB1.Day_of_Week = '4';

  // PAR.Date Wed USR = DB1.Post to G/L Date
  PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Thursday
  IF DB1.Day_of_Week = '5';

  // PAR.Date Thu USR = DB1.Post to G/L Date
  PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Friday
  IF DB1.Day_of_Week = '6';

  // PAR.Date Fri USR = DB1.Post to G/L Date
  PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  // PAR.Date Sat USR = DB1.Post to G/L Date
  PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

  ENDIF;

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Ats ShpDte-21+Sun RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1621711;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Date_Mon_USR);
PARAMETER(PAR.Avail_Ship_Date_1_USR);
PARAMETER(PAR.Avail_Ship_Date_2_USR);
PARAMETER(PAR.Avail_Ship_Date_3_USR);
PARAMETER(PAR.Avail_Ship_Date_4_USR);
PARAMETER(PAR.Avail_Ship_Date_5_USR);
PARAMETER(PAR.Avail_Ship_Date_6_USR);
PARAMETER(PAR.Avail_Ship_Date_7_USR);
PARAMETER(PAR.Avail_Ship_Date_8_USR);
PARAMETER(PAR.Avail_Ship_Date_9_USR);
PARAMETER(PAR.Avail_Ship_Date_10_USR);
PARAMETER(PAR.Avail_Ship_Date_11_USR);
PARAMETER(PAR.Avail_Ship_Date_12_USR);
PARAMETER(PAR.Avail_Ship_Date_13_USR);
PARAMETER(PAR.Avail_Ship_Date_14_USR);
PARAMETER(PAR.Avail_Ship_Date_15_USR);
PARAMETER(PAR.Avail_Ship_Date_16_USR);
PARAMETER(PAR.Avail_Ship_Date_17_USR);
PARAMETER(PAR.Avail_Ship_Date_18_USR);
PARAMETER(PAR.Avail_Ship_Date_19_USR);
PARAMETER(PAR.Avail_Ship_Date_20_USR);
PARAMETER(PAR.Avail_Ship_Date_21_USR);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.1
 WRK.Count_USR = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR is GT 21
 IF WRK.Count_USR > 21;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Move Date
 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // PAR.USR Day 1 = DB1.Plant Date of Last Order
 PAR.USR_Day_1 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 1  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_1_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // PAR.USR Day 2 = DB1.Plant Date of Last Order
 PAR.USR_Day_2 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 2  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_2_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // PAR.USR Day 3 = DB1.Plant Date of Last Order
 PAR.USR_Day_3 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 3  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_3_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 // PAR.USR Day 4 = DB1.Plant Date of Last Order
 PAR.USR_Day_4 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 4  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_4_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 // PAR.USR Day 5 = DB1.Plant Date of Last Order
 PAR.USR_Day_5 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 5  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_5_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 // PAR.USR Day 6 = DB1.Plant Date of Last Order
 PAR.USR_Day_6 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 6  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_6_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Seven
 IF WRK.Count_USR = 7;

 // PAR.USR Day 7 = DB1.Plant Date of Last Order
 PAR.USR_Day_7 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 7  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_7_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Eight
 IF WRK.Count_USR = 8;

 // PAR.USR Day 8 = DB1.Plant Date of Last Order
 PAR.USR_Day_8 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nine
 IF WRK.Count_USR = 9;

 // PAR.USR Day 9 = DB1.Plant Date of Last Order
 PAR.USR_Day_9 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Ten
 IF WRK.Count_USR = 10;

 // PAR.USR Day 10 = DB1.Plant Date of Last Order
 PAR.USR_Day_10 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eleven
 IF WRK.Count_USR = 11;

 // PAR.USR Day 11 = DB1.Plant Date of Last Order
 PAR.USR_Day_11 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twelve
 IF WRK.Count_USR = 12;

 // PAR.USR Day 12 = DB1.Plant Date of Last Order
 PAR.USR_Day_12 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Thirteen
 IF WRK.Count_USR = 13;

 // PAR.USR Day 13 = DB1.Plant Date of Last Order
 PAR.USR_Day_13 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Fourteen
 IF WRK.Count_USR = 14;

 // PAR.USR Day 14 = DB1.Plant Date of Last Order
 PAR.USR_Day_14 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Fifteen
 IF WRK.Count_USR = 15;

 // PAR.USR Day 15 = DB1.Plant Date of Last Order
 PAR.USR_Day_15 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Sixteen
 IF WRK.Count_USR = 16;

 // PAR.USR Day 16 = DB1.Plant Date of Last Order
 PAR.USR_Day_16 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Seventeen
 IF WRK.Count_USR = 17;

 // PAR.USR Day 17 = DB1.Plant Date of Last Order
 PAR.USR_Day_17 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eighteen
 IF WRK.Count_USR = 18;

 // PAR.USR Day 18 = DB1.Plant Date of Last Order
 PAR.USR_Day_18 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nineteen
 IF WRK.Count_USR = 19;

 // PAR.USR Day 19 = DB1.Plant Date of Last Order
 PAR.USR_Day_19 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty
 IF WRK.Count_USR = 20;

 // PAR.USR Day 20 = DB1.Plant Date of Last Order
 PAR.USR_Day_20 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty One
 IF WRK.Count_USR = 21;

 // PAR.USR Day 21 = DB1.Plant Date of Last Order
 PAR.USR_Day_21 = DB1.Post_to_G_L_Date;

 ENDIF;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


// PAR.Display Flag 1 USR = CND.no
PAR.Display_Flag_1_USR = 'N';

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

//?Format Command Key Text
// Retrieve message - 'F2=Fld/Unfld   F3=Exit   F4=Prompt+  F5=Refresh   F7=Previous   F8=Next Week
LCL.CMDKEY_Line_1_130_Char = RTVMSG(USR4140);

// Retrieve message - 'F11=Primary/Loads   F12=WW Kill/Plan   F19=Eml Item Ords  F20=Dsp Tots   F21=
LCL.CMDKEY_Line_2_130_Char = RTVMSG(USR4141);

// Execute function Screen 132 Wide 2 CMDLN.
EXECUTE FUNCTION(Screen 132 Wide 2 CMDLN) TYPE(EXCUSRSRC) ('PNHBUFR');
PARAMETER(LCL.CMDKEY_Line_1_130_Char);
PARAMETER(LCL.CMDKEY_Line_2_130_Char);
{
 C                     MOVEL#IVIT1    ##VIT1
 C                     MOVEL#IVJT1    ##VJT1
}


//?** Change log and comments
//?** 07/24/09  FP1054   if plan prod is NO, get inv sched from OD
//?** 05/20/09  FP1054   show inventory in its own bucket, dont have
//?    inventory included in the avail daily buckets;show invent avail bucket
//?** 04/07/09  FP1054   longer cmd key test line , diff header/footer
//? Save Subfile position when Fnn are hit: scan for Status Flag 17 Y/N
//?** 02/16/09  FP1054    comment option 5=Dsp Detail call to PDGND1R
//?** 09/01/2006 LJB workin
//?** Change entry parms: Make Co# input/output & whse input.
//?** If Co# is passed in put it on the screen, if whse is passed
//?** in, put it on the screen. Otherwise, default them to the
//?** values from the user profile.
//?USER: Initialize subfile control

//?First Time Processing
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// CTL.Primary/Load Sts USR = CND.Load Size
CTL.Primary_Load_Sts_USR = 'L';

// CTL.Print Zeros USR = CND.no
CTL.Print_Zeros_USR = 'N';

//?** If Co# is passed in put it on the screen, if whse is passed
//?** in, put it on the screen. Otherwise, default them to the
//?** values from the user profile. Get warehouse name and type
//?** from the warehouse file.                   09/01/06 LJB workin
//?** Put par.co# on the screen, if zeros, use co# from user profile
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

//?** Put par.co# on the screen, if zeros, use co# from user profile
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

// PAR.Company Number = WRK.Company Number
PAR.Company_Number = WRK.Company_Number;

ENDIF;

//?** Put par whse on the screen, if blank, use whse from user profile
CASE;

// IF PAR.Warehouse Code PASS   USR is Warehouse Code not Blank
IF PAR.Warehouse_Code_PASS_USR <> *BLANK;

// CTL.Warehouse Code = PAR.Warehouse Code PASS   USR
CTL.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

// PAR.Warehouse Code = PAR.Warehouse Code PASS   USR
PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

//?** Put par whse on the screen, if blank, use whse from user profile
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(Rtv Prd WHS w/AcctCo  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1917599;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Warehouse Code = CND.Warehouse Code Blank
CTL.Warehouse_Code = *BLANK;

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

ENDIF;

ENDIF;

//?** Get Warehouse Description and type
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(CTL.Lot_Tracking_Flag);
PARAMETER(CTL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Get Warehouse Description and type
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Warehouse Description = CON.*ALL
CTL.Warehouse_Description = *ALL;

ENDIF;

//?C4455 use minimum truck pounds from 'T' record on Truck Size File
//?PER Judy Schaub    M Arensberg  5/22/98
//?10/01/03 PKD The Max Truck weight is a Gross Weight and not Net.  For
//?             Scheduing we need the Net (Meat).
// CTL.Load Size USR = CON.40500
CTL.Load_Size_USR = 40500;

EXECUTE FUNCTION(Rtv All Fields         RT) TYPE(RTVOBJ) FILE(PDNFREP)          AC1570242;
PARAMETER(PAR.Salesperson_Code);
PARAMETER(LCL.Email_Address);
PARAMETER(CTL.Availability_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?INIT:  Availability Group
CASE;

// IF CTL.Availability Group Code is Blank
IF CTL.Availability_Group_Code = *BLANK;

// CTL.Availability Group Code = CON.ALL
CTL.Availability_Group_Code = 'ALL';

ENDIF;

//?** Save par context co# if ctl co# changes         9/13/2006
CASE;

// IF PAR.Company Number NE CTL.Company Number
IF PAR.Company_Number <> CTL.Company_Number;

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

ENDIF;

//?** Save par context whse code if ctl whse changes      9/13/2006
CASE;

// IF PAR.Warehouse Code NE CTL.Warehouse Code
IF PAR.Warehouse_Code <> CTL.Warehouse_Code;

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

ENDIF;

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(CTL.Availability_Group_Code);
PARAMETER(CTL.Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Warehouse Description   and type
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(CTL.Lot_Tracking_Flag);
PARAMETER(CTL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Warehouse Description   and type
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Warehouse Description = CON.*ALL
CTL.Warehouse_Description = *ALL;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Primary/Load Sts USR = CTL.Primary/Load Sts USR
WRK.Primary_Load_Sts_USR = CTL.Primary_Load_Sts_USR;

// WRK.Load Size USR = CTL.Load Size USR
WRK.Load_Size_USR = CTL.Load_Size_USR;

SET CURSOR;

// CTL.Warehouse Type Desc = Condition name of CTL.Warehouse Type
CTL.Warehouse_Type_Desc = RTVCND(CTL.Warehouse_Type);

// WRK.Warehouse Type USR = CTL.Warehouse Type
WRK.Warehouse_Type_USR = CTL.Warehouse_Type;

//?Reload totals if F20 Display totals is on.
CASE;

// IF PAR.Display Flag 1 USR is yes
IF PAR.Display_Flag_1_USR = 'Y';

EXECUTE FUNCTION(Rtv Avail Ttls for Grp RT) TYPE(RTVOBJ) FILE(PDKLREP)          AC1553730;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Availability_Group_Code);
PARAMETER(PAR.Avail_Ship_Date_1_USR);
PARAMETER(PAR.Avail_Ship_Date_2_USR);
PARAMETER(PAR.Avail_Ship_Date_3_USR);
PARAMETER(PAR.Avail_Ship_Date_4_USR);
PARAMETER(PAR.Avail_Ship_Date_5_USR);
PARAMETER(PAR.Avail_Ship_Date_6_USR);
PARAMETER(PAR.Avail_Ship_Date_7_USR);
PARAMETER(PAR.Avail_Ship_Date_8_USR);
PARAMETER(PAR.Avail_Ship_Date_9_USR);
PARAMETER(PAR.Avail_Ship_Date_10_USR);
PARAMETER(PAR.Avail_Ship_Date_11_USR);
PARAMETER(PAR.Avail_Ship_Date_12_USR);
PARAMETER(PAR.Avail_Ship_Date_13_USR);
PARAMETER(PAR.Avail_Ship_Date_14_USR);
PARAMETER(PAR.Avail_Ship_Date_15_USR);
PARAMETER(PAR.Avail_Ship_Date_16_USR);
PARAMETER(PAR.Avail_Ship_Date_17_USR);
PARAMETER(PAR.Avail_Ship_Date_18_USR);
PARAMETER(PAR.Avail_Ship_Date_19_USR);
PARAMETER(PAR.Avail_Ship_Date_20_USR);
PARAMETER(PAR.Avail_Ship_Date_21_USR);
PARAMETER(PAR.Day_1_Avail_Total_USR);
PARAMETER(PAR.Day_2_Avail_Total_USR);
PARAMETER(PAR.Day_3_Avail_Total_USR);
PARAMETER(PAR.Day_4_Avail_Total_USR);
PARAMETER(PAR.Day_5_Avail_Total_USR);
PARAMETER(PAR.Day_6_Avail_Total_USR);
PARAMETER(PAR.Day_7_Avail_Total_USR);
PARAMETER(PAR.Day_8_Avail_Total_USR);
PARAMETER(PAR.Day_9_Avail_Total_USR);
PARAMETER(PAR.Day_10_Avail_Total_USR);
PARAMETER(PAR.Day_11_Avail_Total_USR);
PARAMETER(PAR.Day_12_Avail_Total_USR);
PARAMETER(PAR.Day_13_Avail_Total_USR);
PARAMETER(PAR.Day_14_Avail_Total_USR);
PARAMETER(PAR.Day_15_Avail_Total_USR);
PARAMETER(PAR.Day_16_Avail_Total_USR);
PARAMETER(PAR.Day_17_Avail_Total_USR);
PARAMETER(PAR.Day_18_Avail_Total_USR);
PARAMETER(PAR.Day_19_Avail_Total_USR);
PARAMETER(PAR.Day_20_Avail_Total_USR);
PARAMETER(PAR.Day_21_Avail_Total_USR);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Type);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(WRK.Item_Description);
 PARAMETER(WRK.Description_Line_Two);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(WRK.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Production_Date_Control);
 PARAMETER(WRK.Catch_Weight_Status);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv PA For 21 Days    RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1543177;
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(WRK.USR_Day_1);
 PARAMETER(WRK.USR_Day_2);
 PARAMETER(WRK.USR_Day_3);
 PARAMETER(WRK.USR_Day_4);
 PARAMETER(WRK.USR_Day_5);
 PARAMETER(WRK.USR_Day_6);
 PARAMETER(WRK.USR_Day_7);
 PARAMETER(WRK.USR_Day_8);
 PARAMETER(WRK.USR_Day_9);
 PARAMETER(WRK.USR_Day_10);
 PARAMETER(WRK.USR_Day_11);
 PARAMETER(WRK.USR_Day_12);
 PARAMETER(WRK.USR_Day_13);
 PARAMETER(WRK.USR_Day_14);
 PARAMETER(WRK.USR_Day_15);
 PARAMETER(WRK.USR_Day_16);
 PARAMETER(WRK.USR_Day_17);
 PARAMETER(WRK.USR_Day_18);
 PARAMETER(WRK.USR_Day_19);
 PARAMETER(WRK.USR_Day_20);
 PARAMETER(WRK.USR_Day_21);
 PARAMETER(WRK.Order_Hold_Over_USR);
 PARAMETER(WRK.Order_Hold_Over_Alloc_USR);
 PARAMETER(WRK.Day_1_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_2_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_3_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_4_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_5_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_6_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_7_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_8_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_9_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_10_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_11_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_12_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_13_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_14_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_15_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_16_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_17_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_18_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_19_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_20_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_21_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(WRK.Day_1_Inventory_USR);
 PARAMETER(WRK.Day_2_Inventory_USR);
 PARAMETER(WRK.Day_3_Inventory_USR);
 PARAMETER(WRK.Day_4_Inventory_USR);
 PARAMETER(WRK.Day_5_Inventory_USR);
 PARAMETER(WRK.Day_6_Inventory_USR);
 PARAMETER(WRK.Day_7_Inventory_USR);
 PARAMETER(WRK.Day_8_Inventory_USR);
 PARAMETER(WRK.Day_9_Inventory_USR);
 PARAMETER(WRK.Day_10_Inventory_USR);
 PARAMETER(WRK.Day_11_Inventory_USR);
 PARAMETER(WRK.Day_12_Inventory_USR);
 PARAMETER(WRK.Day_13_Inventory_USR);
 PARAMETER(WRK.Day_14_Inventory_USR);
 PARAMETER(WRK.Day_1_Production_USR);
 PARAMETER(WRK.Day_2_Production_USR);
 PARAMETER(WRK.Day_3_Production_USR);
 PARAMETER(WRK.Day_4_Production_USR);
 PARAMETER(WRK.Day_5_Production_USR);
 PARAMETER(WRK.Day_6_Production_USR);
 PARAMETER(WRK.Day_7_Production_USR);
 PARAMETER(WRK.Day_8_Production_USR);
 PARAMETER(WRK.Day_9_Production_USR);
 PARAMETER(WRK.Day_10_Production_USR);
 PARAMETER(WRK.Day_11_Production_USR);
 PARAMETER(WRK.Day_12_Production_USR);
 PARAMETER(WRK.Day_13_Production_USR);
 PARAMETER(WRK.Day_14_Production_USR);
 PARAMETER(WRK.Day_15_Production_USR);
 PARAMETER(WRK.Day_16_Production_USR);
 PARAMETER(WRK.Day_17_Production_USR);
 PARAMETER(WRK.Day_18_Production_USR);
 PARAMETER(WRK.Day_19_Production_USR);
 PARAMETER(WRK.Day_20_Production_USR);
 PARAMETER(WRK.Day_21_Production_USR);
 PARAMETER(WRK.Day_1_Sales_USR);
 PARAMETER(WRK.Day_2_Sales_USR);
 PARAMETER(WRK.Day_3_Sales_USR);
 PARAMETER(WRK.Day_4_Sales_USR);
 PARAMETER(WRK.Day_5_Sales_USR);
 PARAMETER(WRK.Day_6_Sales_USR);
 PARAMETER(WRK.Day_7_Sales_USR);
 PARAMETER(WRK.Day_8_Sales_USR);
 PARAMETER(WRK.Day_9_Sales_USR);
 PARAMETER(WRK.Day_10_Sales_USR);
 PARAMETER(WRK.Day_11_Sales_USR);
 PARAMETER(WRK.Day_12_Sales_USR);
 PARAMETER(WRK.Day_13_Sales_USR);
 PARAMETER(WRK.Day_14_Sales_USR);
 PARAMETER(WRK.Day_15_Sales_USR);
 PARAMETER(WRK.Day_16_Sales_USR);
 PARAMETER(WRK.Day_17_Sales_USR);
 PARAMETER(WRK.Day_18_Sales_USR);
 PARAMETER(WRK.Day_19_Sales_USR);
 PARAMETER(WRK.Day_20_Sales_USR);
 PARAMETER(WRK.Day_21_Sales_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(WRK.Day_1_Sched_Shipments_USR);
 PARAMETER(WRK.Day_2_Sched_Shipments_USR);
 PARAMETER(WRK.Day_3_Sched_Shipments_USR);
 PARAMETER(WRK.Day_4_Sched_Shipments_USR);
 PARAMETER(WRK.Day_5_Sched_Shipments_USR);
 PARAMETER(WRK.Day_6_Sched_Shipments_USR);
 PARAMETER(WRK.Day_7_Sched_Shipments_USR);
 PARAMETER(WRK.Day_8_Sched_Shipments_USR);
 PARAMETER(WRK.Day_9_Sched_Shipments_USR);
 PARAMETER(WRK.Day_10_Sched_Shipment_USR);
 PARAMETER(WRK.Day_11_Sched_Shipment_USR);
 PARAMETER(WRK.Day_12_Sched_Shipment_USR);
 PARAMETER(WRK.Day_13_Sched_Shipment_USR);
 PARAMETER(WRK.Day_14_Sched_Shipment_USR);
 PARAMETER(WRK.Day_15_Sched_Shipment_USR);
 PARAMETER(WRK.Day_16_Sched_Shipment_USR);
 PARAMETER(WRK.Day_17_Sched_Shipment_USR);
 PARAMETER(WRK.Day_18_SchdShip_Total_USR);
 PARAMETER(WRK.Day_19_Sched_Shipment_USR);
 PARAMETER(WRK.Day_20_Sched_Shipment_USR);
 PARAMETER(WRK.Day_21_Sched_Shipment_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

  //?USER: Process Data record

  //?Check for matching warehouse code and warehouse type
  CASE;

  // IF PAR.Warehouse Code is Warehouse Code Blank
  IF PAR.Warehouse_Code = *BLANK;

  // AND PAR.Warehouse Type is Equal blank
  AND PAR.Warehouse_Type = *BLANK;

  EXECUTE FUNCTION(Rtv PA For 21 Days    IF) TYPE(EXCINTFUN)                      AC1543204;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Order_Hold_Over_USR);
  PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_9_Inventory_USR);
  PARAMETER(PAR.Day_10_Inventory_USR);
  PARAMETER(PAR.Day_11_Inventory_USR);
  PARAMETER(PAR.Day_12_Inventory_USR);
  PARAMETER(PAR.Day_13_Inventory_USR);
  PARAMETER(PAR.Day_14_Inventory_USR);
  PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?Execute internal function

   MOVE *ALL (To: PAR From: CON);

   EXECUTE FUNCTION(Rtv Prod Whse/Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1560479;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Rtv PA Inv/Hold Overs XF.
   CALL PROGRAM(Rtv PA Inv/Hold Overs XF) ('PDS0XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Order_Hold_Over_USR);
   PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
   PARAMETER(PAR.Day_8_Inventory_USR);
   PARAMETER(PAR.Day_9_Inventory_USR);
   PARAMETER(PAR.Day_10_Inventory_USR);
   PARAMETER(PAR.Day_11_Inventory_USR);
   PARAMETER(PAR.Day_12_Inventory_USR);
   PARAMETER(PAR.Day_13_Inventory_USR);
   PARAMETER(PAR.Day_14_Inventory_USR);
   PARAMETER(PAR.Lot_Tracking_Flag);

   EXECUTE FUNCTION(Rtv PA Production     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543287;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?USER: Process Data record

    //?Is it time to Quit ??
    CASE;

    // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    CASE;

    // IF DB1.PA Available Ship Date GE JOB.*Job date
    IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

    //?Calculate Production based on Unit Weight or Pieces
    CASE;

    // IF PAR.Unit Weight is Greater than zero
    IF PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y';

    //?Retrieve production according to day
    CASE;

    // IF PAR.Avail Ship Date 1 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(PAR.USR_Day_1);
    PARAMETER(PAR.Day_1_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 2 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(PAR.USR_Day_2);
    PARAMETER(PAR.Day_2_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 3 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(PAR.USR_Day_3);
    PARAMETER(PAR.Day_3_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 4 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(PAR.USR_Day_4);
    PARAMETER(PAR.Day_4_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 5 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(PAR.USR_Day_5);
    PARAMETER(PAR.Day_5_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 6 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(PAR.USR_Day_6);
    PARAMETER(PAR.Day_6_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 7 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(PAR.USR_Day_7);
    PARAMETER(PAR.Day_7_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 8 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(PAR.USR_Day_8);
    PARAMETER(PAR.Day_8_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 9 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(PAR.USR_Day_9);
    PARAMETER(PAR.Day_9_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 10 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(PAR.USR_Day_10);
    PARAMETER(PAR.Day_10_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 11 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(PAR.USR_Day_11);
    PARAMETER(PAR.Day_11_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 12 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(PAR.USR_Day_12);
    PARAMETER(PAR.Day_12_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 13 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(PAR.USR_Day_13);
    PARAMETER(PAR.Day_13_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 14 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(PAR.USR_Day_14);
    PARAMETER(PAR.Day_14_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(PAR.USR_Day_15);
    PARAMETER(PAR.Day_15_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(PAR.USR_Day_16);
    PARAMETER(PAR.Day_16_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(PAR.USR_Day_17);
    PARAMETER(PAR.Day_17_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(PAR.USR_Day_18);
    PARAMETER(PAR.Day_18_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(PAR.USR_Day_19);
    PARAMETER(PAR.Day_19_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(PAR.USR_Day_20);
    PARAMETER(PAR.Day_20_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(PAR.USR_Day_21);
    PARAMETER(PAR.Day_21_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    ENDIF;

    ENDIF;

    ENDIF;

   }

   //?Create array to be used for PA Calc when orders are processed.
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   //?Clear PA Array
   EXECUTE FUNCTION(Del PA Work Array Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543710;
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del PA Work Array Roll DL) TYPE(DLTOBJ) ARRAY(PA_Work_Array_forAC1543711;
    PARAMETER(DB1.Avail_Ship_Date_USR);
   }

   // Day 1 Available
   PAR.Day_1_Availability_USR = ( ( PAR.Day_1_Inventory_USR + PAR.Day_1_Production_USR )
   - PAR.Day_1_Sched_Shipments_USR ) - PAR.Day_1_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER('N');
   // Day 2 Available
   PAR.Day_2_Availability_USR = ( ( PAR.Day_2_Inventory_USR + PAR.Day_2_Production_USR )
   - PAR.Day_2_Sched_Shipments_USR ) - PAR.Day_2_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER('N');
   // Day 3 Available
   PAR.Day_3_Availability_USR = ( ( PAR.Day_3_Inventory_USR + PAR.Day_3_Production_USR )
   - PAR.Day_3_Sched_Shipments_USR ) - PAR.Day_3_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER('N');
   // Day 4 Available
   PAR.Day_4_Availability_USR = ( ( PAR.Day_4_Inventory_USR + PAR.Day_4_Production_USR )
   - PAR.Day_4_Sched_Shipments_USR ) - PAR.Day_4_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER('N');
   // Day 5 Available
   PAR.Day_5_Availability_USR = ( ( PAR.Day_5_Inventory_USR + PAR.Day_5_Production_USR )
   - PAR.Day_5_Sched_Shipments_USR ) - PAR.Day_5_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER('N');
   // Day 6 Available
   PAR.Day_6_Availability_USR = ( ( PAR.Day_6_Inventory_USR + PAR.Day_6_Production_USR )
   - PAR.Day_6_Sched_Shipments_USR ) - PAR.Day_6_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER('N');
   // Day 7 Available
   PAR.Day_7_Availability_USR = ( ( PAR.Day_7_Inventory_USR + PAR.Day_7_Production_USR )
   - PAR.Day_7_Sched_Shipments_USR ) - PAR.Day_7_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER('N');
   // Day 8 Available
   PAR.Day_8_Availability_USR = ( PAR.Day_8_Production_USR - PAR.Day_8_Sched_Shipments_USR )
   - PAR.Day_8_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER('N');
   // Day 9 Available
   PAR.Day_9_Availability_USR = ( PAR.Day_9_Production_USR - PAR.Day_9_Sched_Shipments_USR )
   - PAR.Day_9_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER('N');
   // Day 10 Available
   PAR.Day_10_Availability_USR = ( PAR.Day_10_Production_USR
   - PAR.Day_10_Sched_Shipment_USR ) - PAR.Day_10_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER('N');
   // Day 11 Available
   PAR.Day_11_Availability_USR = ( PAR.Day_11_Production_USR
   - PAR.Day_11_Sched_Shipment_USR ) - PAR.Day_11_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER('N');
   // Day 12 Available
   PAR.Day_12_Availability_USR = ( PAR.Day_12_Production_USR
   - PAR.Day_12_Sched_Shipment_USR ) - PAR.Day_12_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER('N');
   // Day 13 Available
   PAR.Day_13_Availability_USR = ( PAR.Day_13_Production_USR
   - PAR.Day_13_Sched_Shipment_USR ) - PAR.Day_13_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER('N');
   // Day 14 Available
   PAR.Day_14_Availability_USR = ( PAR.Day_14_Production_USR
   - PAR.Day_14_Sched_Shipment_USR ) - PAR.Day_14_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER('N');
   // Day 15 Available
   PAR.Day_15_Availability_USR = ( PAR.Day_15_Production_USR
   - PAR.Day_15_Sched_Shipment_USR ) - PAR.Day_15_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER('N');
   // Day 16 Available
   PAR.Day_16_Availability_USR = ( PAR.Day_16_Production_USR
   - PAR.Day_16_Sched_Shipment_USR ) - PAR.Day_16_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER('N');
   // Day 17 Available
   PAR.Day_17_Availability_USR = ( PAR.Day_17_Production_USR
   - PAR.Day_17_Sched_Shipment_USR ) - PAR.Day_17_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER('N');
   // Day 18 Available
   PAR.Day_18_Availability_USR = ( PAR.Day_18_Production_USR
   - PAR.Day_18_Sched_Shipment_USR ) - PAR.Day_18_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER('N');
   // Day 19 Available
   PAR.Day_19_Availability_USR = ( PAR.Day_19_Production_USR
   - PAR.Day_19_Sched_Shipment_USR ) - PAR.Day_19_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER('N');
   // Day 20 Available
   PAR.Day_20_Availability_USR = ( PAR.Day_20_Production_USR
   - PAR.Day_20_Sched_Shipment_USR ) - PAR.Day_20_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER('N');
   // Day 21 Available
   PAR.Day_21_Availability_USR = ( PAR.Day_21_Production_USR
   - PAR.Day_21_Sched_Shipment_USR ) - PAR.Day_21_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER('N');
   ENDIF;

   EXECUTE FUNCTION(Rtv Sched Ship/Clc PA RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1543296;
   PARAMETER(PAR.Company_Number);
   PARAMETER(WRK.Order_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    PARAMETER(LCL.Billing_Activity_Type);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    // AND PAR.Order Number NE DB1.Order Number
    AND PAR.Order_Number <> DB1.Order_Number;

    // AND LCL.Billing Activity Type is Invoice or Transfer
    AND LCL.Billing_Activity_Type = '1'/'4';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship D
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship Dt
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

   }

   //?If this is a production whse, then reserve other whse orders.
   CASE;

   // IF PAR.Production Warehouse Code EQ PAR.Warehouse Code
   IF PAR.Production_Warehouse_Code = PAR.Warehouse_Code;

   // OR PAR.Production Warehouse Code is Warehouse Code Blank
   OR PAR.Production_Warehouse_Code = *BLANK;

   EXECUTE FUNCTION(Rtv Rsrvd Other Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1560700;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?If warehouse ordered not equal to warehouse scheduled, then reserve
    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    EXECUTE FUNCTION(Rtv Add to Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1560732;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER('Y');
    }

    ENDIF;

    ENDIF;

   }

   ENDIF;

   //?Retrieve Sched Ship/Allocation/Available from PA Array
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  //?Check for matching warehouse code and warehouse type
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If whse code is blank & whse type isn't, calculate for that whse type only
  CASE;

  // IF PAR.Warehouse Code is Warehouse Code Blank
  IF PAR.Warehouse_Code = *BLANK;

  // AND PAR.Warehouse Type EQ DB1.Warehouse Type
  AND PAR.Warehouse_Type = DB1.Warehouse_Type;

  EXECUTE FUNCTION(Rtv PA For 21 Days    IF) TYPE(EXCINTFUN)                      AC1543204;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Order_Hold_Over_USR);
  PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_9_Inventory_USR);
  PARAMETER(PAR.Day_10_Inventory_USR);
  PARAMETER(PAR.Day_11_Inventory_USR);
  PARAMETER(PAR.Day_12_Inventory_USR);
  PARAMETER(PAR.Day_13_Inventory_USR);
  PARAMETER(PAR.Day_14_Inventory_USR);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?Execute internal function

   MOVE *ALL (To: PAR From: CON);

   EXECUTE FUNCTION(Rtv Prod Whse/Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1560479;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Rtv PA Inv/Hold Overs XF.
   CALL PROGRAM(Rtv PA Inv/Hold Overs XF) ('PDS0XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Order_Hold_Over_USR);
   PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
   PARAMETER(PAR.Day_8_Inventory_USR);
   PARAMETER(PAR.Day_9_Inventory_USR);
   PARAMETER(PAR.Day_10_Inventory_USR);
   PARAMETER(PAR.Day_11_Inventory_USR);
   PARAMETER(PAR.Day_12_Inventory_USR);
   PARAMETER(PAR.Day_13_Inventory_USR);
   PARAMETER(PAR.Day_14_Inventory_USR);
   PARAMETER(PAR.Lot_Tracking_Flag);

   EXECUTE FUNCTION(Rtv PA Production     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543287;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?USER: Process Data record

    //?Is it time to Quit ??
    CASE;

    // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    CASE;

    // IF DB1.PA Available Ship Date GE JOB.*Job date
    IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

    //?Calculate Production based on Unit Weight or Pieces
    CASE;

    // IF PAR.Unit Weight is Greater than zero
    IF PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y';

    //?Retrieve production according to day
    CASE;

    // IF PAR.Avail Ship Date 1 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(PAR.USR_Day_1);
    PARAMETER(PAR.Day_1_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 2 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(PAR.USR_Day_2);
    PARAMETER(PAR.Day_2_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 3 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(PAR.USR_Day_3);
    PARAMETER(PAR.Day_3_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 4 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(PAR.USR_Day_4);
    PARAMETER(PAR.Day_4_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 5 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(PAR.USR_Day_5);
    PARAMETER(PAR.Day_5_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 6 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(PAR.USR_Day_6);
    PARAMETER(PAR.Day_6_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 7 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(PAR.USR_Day_7);
    PARAMETER(PAR.Day_7_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 8 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(PAR.USR_Day_8);
    PARAMETER(PAR.Day_8_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 9 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(PAR.USR_Day_9);
    PARAMETER(PAR.Day_9_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 10 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(PAR.USR_Day_10);
    PARAMETER(PAR.Day_10_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 11 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(PAR.USR_Day_11);
    PARAMETER(PAR.Day_11_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 12 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(PAR.USR_Day_12);
    PARAMETER(PAR.Day_12_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 13 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(PAR.USR_Day_13);
    PARAMETER(PAR.Day_13_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 14 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(PAR.USR_Day_14);
    PARAMETER(PAR.Day_14_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(PAR.USR_Day_15);
    PARAMETER(PAR.Day_15_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(PAR.USR_Day_16);
    PARAMETER(PAR.Day_16_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(PAR.USR_Day_17);
    PARAMETER(PAR.Day_17_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(PAR.USR_Day_18);
    PARAMETER(PAR.Day_18_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(PAR.USR_Day_19);
    PARAMETER(PAR.Day_19_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(PAR.USR_Day_20);
    PARAMETER(PAR.Day_20_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(PAR.USR_Day_21);
    PARAMETER(PAR.Day_21_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    ENDIF;

    ENDIF;

    ENDIF;

   }

   //?Create array to be used for PA Calc when orders are processed.
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   //?Clear PA Array
   EXECUTE FUNCTION(Del PA Work Array Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543710;
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del PA Work Array Roll DL) TYPE(DLTOBJ) ARRAY(PA_Work_Array_forAC1543711;
    PARAMETER(DB1.Avail_Ship_Date_USR);
   }

   // Day 1 Available
   PAR.Day_1_Availability_USR = ( ( PAR.Day_1_Inventory_USR + PAR.Day_1_Production_USR )
   - PAR.Day_1_Sched_Shipments_USR ) - PAR.Day_1_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER('N');
   // Day 2 Available
   PAR.Day_2_Availability_USR = ( ( PAR.Day_2_Inventory_USR + PAR.Day_2_Production_USR )
   - PAR.Day_2_Sched_Shipments_USR ) - PAR.Day_2_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER('N');
   // Day 3 Available
   PAR.Day_3_Availability_USR = ( ( PAR.Day_3_Inventory_USR + PAR.Day_3_Production_USR )
   - PAR.Day_3_Sched_Shipments_USR ) - PAR.Day_3_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER('N');
   // Day 4 Available
   PAR.Day_4_Availability_USR = ( ( PAR.Day_4_Inventory_USR + PAR.Day_4_Production_USR )
   - PAR.Day_4_Sched_Shipments_USR ) - PAR.Day_4_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER('N');
   // Day 5 Available
   PAR.Day_5_Availability_USR = ( ( PAR.Day_5_Inventory_USR + PAR.Day_5_Production_USR )
   - PAR.Day_5_Sched_Shipments_USR ) - PAR.Day_5_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER('N');
   // Day 6 Available
   PAR.Day_6_Availability_USR = ( ( PAR.Day_6_Inventory_USR + PAR.Day_6_Production_USR )
   - PAR.Day_6_Sched_Shipments_USR ) - PAR.Day_6_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER('N');
   // Day 7 Available
   PAR.Day_7_Availability_USR = ( ( PAR.Day_7_Inventory_USR + PAR.Day_7_Production_USR )
   - PAR.Day_7_Sched_Shipments_USR ) - PAR.Day_7_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER('N');
   // Day 8 Available
   PAR.Day_8_Availability_USR = ( PAR.Day_8_Production_USR - PAR.Day_8_Sched_Shipments_USR )
   - PAR.Day_8_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER('N');
   // Day 9 Available
   PAR.Day_9_Availability_USR = ( PAR.Day_9_Production_USR - PAR.Day_9_Sched_Shipments_USR )
   - PAR.Day_9_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER('N');
   // Day 10 Available
   PAR.Day_10_Availability_USR = ( PAR.Day_10_Production_USR
   - PAR.Day_10_Sched_Shipment_USR ) - PAR.Day_10_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER('N');
   // Day 11 Available
   PAR.Day_11_Availability_USR = ( PAR.Day_11_Production_USR
   - PAR.Day_11_Sched_Shipment_USR ) - PAR.Day_11_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER('N');
   // Day 12 Available
   PAR.Day_12_Availability_USR = ( PAR.Day_12_Production_USR
   - PAR.Day_12_Sched_Shipment_USR ) - PAR.Day_12_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER('N');
   // Day 13 Available
   PAR.Day_13_Availability_USR = ( PAR.Day_13_Production_USR
   - PAR.Day_13_Sched_Shipment_USR ) - PAR.Day_13_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER('N');
   // Day 14 Available
   PAR.Day_14_Availability_USR = ( PAR.Day_14_Production_USR
   - PAR.Day_14_Sched_Shipment_USR ) - PAR.Day_14_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER('N');
   // Day 15 Available
   PAR.Day_15_Availability_USR = ( PAR.Day_15_Production_USR
   - PAR.Day_15_Sched_Shipment_USR ) - PAR.Day_15_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER('N');
   // Day 16 Available
   PAR.Day_16_Availability_USR = ( PAR.Day_16_Production_USR
   - PAR.Day_16_Sched_Shipment_USR ) - PAR.Day_16_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER('N');
   // Day 17 Available
   PAR.Day_17_Availability_USR = ( PAR.Day_17_Production_USR
   - PAR.Day_17_Sched_Shipment_USR ) - PAR.Day_17_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER('N');
   // Day 18 Available
   PAR.Day_18_Availability_USR = ( PAR.Day_18_Production_USR
   - PAR.Day_18_Sched_Shipment_USR ) - PAR.Day_18_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER('N');
   // Day 19 Available
   PAR.Day_19_Availability_USR = ( PAR.Day_19_Production_USR
   - PAR.Day_19_Sched_Shipment_USR ) - PAR.Day_19_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER('N');
   // Day 20 Available
   PAR.Day_20_Availability_USR = ( PAR.Day_20_Production_USR
   - PAR.Day_20_Sched_Shipment_USR ) - PAR.Day_20_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER('N');
   // Day 21 Available
   PAR.Day_21_Availability_USR = ( PAR.Day_21_Production_USR
   - PAR.Day_21_Sched_Shipment_USR ) - PAR.Day_21_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER('N');
   ENDIF;

   EXECUTE FUNCTION(Rtv Sched Ship/Clc PA RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1543296;
   PARAMETER(PAR.Company_Number);
   PARAMETER(WRK.Order_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    PARAMETER(LCL.Billing_Activity_Type);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    // AND PAR.Order Number NE DB1.Order Number
    AND PAR.Order_Number <> DB1.Order_Number;

    // AND LCL.Billing Activity Type is Invoice or Transfer
    AND LCL.Billing_Activity_Type = '1'/'4';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship D
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship Dt
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

   }

   //?If this is a production whse, then reserve other whse orders.
   CASE;

   // IF PAR.Production Warehouse Code EQ PAR.Warehouse Code
   IF PAR.Production_Warehouse_Code = PAR.Warehouse_Code;

   // OR PAR.Production Warehouse Code is Warehouse Code Blank
   OR PAR.Production_Warehouse_Code = *BLANK;

   EXECUTE FUNCTION(Rtv Rsrvd Other Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1560700;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?If warehouse ordered not equal to warehouse scheduled, then reserve
    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    EXECUTE FUNCTION(Rtv Add to Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1560732;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER('Y');
    }

    ENDIF;

    ENDIF;

   }

   ENDIF;

   //?Retrieve Sched Ship/Allocation/Available from PA Array
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  //?If whse code is blank & whse type isn't, calculate for that whse type only
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If warehouse code is entered, calculate for that warehouse only
  CASE;

  // IF PAR.Warehouse Code EQ DB1.Warehouse Code
  IF PAR.Warehouse_Code = DB1.Warehouse_Code;

  EXECUTE FUNCTION(Rtv PA For 21 Days    IF) TYPE(EXCINTFUN)                      AC1543204;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Order_Hold_Over_USR);
  PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_9_Inventory_USR);
  PARAMETER(PAR.Day_10_Inventory_USR);
  PARAMETER(PAR.Day_11_Inventory_USR);
  PARAMETER(PAR.Day_12_Inventory_USR);
  PARAMETER(PAR.Day_13_Inventory_USR);
  PARAMETER(PAR.Day_14_Inventory_USR);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?Execute internal function

   MOVE *ALL (To: PAR From: CON);

   EXECUTE FUNCTION(Rtv Prod Whse/Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1560479;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Rtv PA Inv/Hold Overs XF.
   CALL PROGRAM(Rtv PA Inv/Hold Overs XF) ('PDS0XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Order_Hold_Over_USR);
   PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
   PARAMETER(PAR.Day_8_Inventory_USR);
   PARAMETER(PAR.Day_9_Inventory_USR);
   PARAMETER(PAR.Day_10_Inventory_USR);
   PARAMETER(PAR.Day_11_Inventory_USR);
   PARAMETER(PAR.Day_12_Inventory_USR);
   PARAMETER(PAR.Day_13_Inventory_USR);
   PARAMETER(PAR.Day_14_Inventory_USR);
   PARAMETER(PAR.Lot_Tracking_Flag);

   EXECUTE FUNCTION(Rtv PA Production     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543287;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?USER: Process Data record

    //?Is it time to Quit ??
    CASE;

    // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    CASE;

    // IF DB1.PA Available Ship Date GE JOB.*Job date
    IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

    //?Calculate Production based on Unit Weight or Pieces
    CASE;

    // IF PAR.Unit Weight is Greater than zero
    IF PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y';

    //?Retrieve production according to day
    CASE;

    // IF PAR.Avail Ship Date 1 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(PAR.USR_Day_1);
    PARAMETER(PAR.Day_1_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 2 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(PAR.USR_Day_2);
    PARAMETER(PAR.Day_2_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 3 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(PAR.USR_Day_3);
    PARAMETER(PAR.Day_3_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 4 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(PAR.USR_Day_4);
    PARAMETER(PAR.Day_4_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 5 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(PAR.USR_Day_5);
    PARAMETER(PAR.Day_5_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 6 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(PAR.USR_Day_6);
    PARAMETER(PAR.Day_6_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 7 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(PAR.USR_Day_7);
    PARAMETER(PAR.Day_7_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 8 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(PAR.USR_Day_8);
    PARAMETER(PAR.Day_8_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 9 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(PAR.USR_Day_9);
    PARAMETER(PAR.Day_9_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 10 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(PAR.USR_Day_10);
    PARAMETER(PAR.Day_10_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 11 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(PAR.USR_Day_11);
    PARAMETER(PAR.Day_11_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 12 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(PAR.USR_Day_12);
    PARAMETER(PAR.Day_12_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 13 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(PAR.USR_Day_13);
    PARAMETER(PAR.Day_13_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 14 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(PAR.USR_Day_14);
    PARAMETER(PAR.Day_14_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(PAR.USR_Day_15);
    PARAMETER(PAR.Day_15_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(PAR.USR_Day_16);
    PARAMETER(PAR.Day_16_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(PAR.USR_Day_17);
    PARAMETER(PAR.Day_17_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(PAR.USR_Day_18);
    PARAMETER(PAR.Day_18_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(PAR.USR_Day_19);
    PARAMETER(PAR.Day_19_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(PAR.USR_Day_20);
    PARAMETER(PAR.Day_20_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(PAR.USR_Day_21);
    PARAMETER(PAR.Day_21_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    ENDIF;

    ENDIF;

    ENDIF;

   }

   //?Create array to be used for PA Calc when orders are processed.
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   //?Clear PA Array
   EXECUTE FUNCTION(Del PA Work Array Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543710;
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del PA Work Array Roll DL) TYPE(DLTOBJ) ARRAY(PA_Work_Array_forAC1543711;
    PARAMETER(DB1.Avail_Ship_Date_USR);
   }

   // Day 1 Available
   PAR.Day_1_Availability_USR = ( ( PAR.Day_1_Inventory_USR + PAR.Day_1_Production_USR )
   - PAR.Day_1_Sched_Shipments_USR ) - PAR.Day_1_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER('N');
   // Day 2 Available
   PAR.Day_2_Availability_USR = ( ( PAR.Day_2_Inventory_USR + PAR.Day_2_Production_USR )
   - PAR.Day_2_Sched_Shipments_USR ) - PAR.Day_2_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER('N');
   // Day 3 Available
   PAR.Day_3_Availability_USR = ( ( PAR.Day_3_Inventory_USR + PAR.Day_3_Production_USR )
   - PAR.Day_3_Sched_Shipments_USR ) - PAR.Day_3_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER('N');
   // Day 4 Available
   PAR.Day_4_Availability_USR = ( ( PAR.Day_4_Inventory_USR + PAR.Day_4_Production_USR )
   - PAR.Day_4_Sched_Shipments_USR ) - PAR.Day_4_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER('N');
   // Day 5 Available
   PAR.Day_5_Availability_USR = ( ( PAR.Day_5_Inventory_USR + PAR.Day_5_Production_USR )
   - PAR.Day_5_Sched_Shipments_USR ) - PAR.Day_5_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER('N');
   // Day 6 Available
   PAR.Day_6_Availability_USR = ( ( PAR.Day_6_Inventory_USR + PAR.Day_6_Production_USR )
   - PAR.Day_6_Sched_Shipments_USR ) - PAR.Day_6_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER('N');
   // Day 7 Available
   PAR.Day_7_Availability_USR = ( ( PAR.Day_7_Inventory_USR + PAR.Day_7_Production_USR )
   - PAR.Day_7_Sched_Shipments_USR ) - PAR.Day_7_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER('N');
   // Day 8 Available
   PAR.Day_8_Availability_USR = ( PAR.Day_8_Production_USR - PAR.Day_8_Sched_Shipments_USR )
   - PAR.Day_8_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER('N');
   // Day 9 Available
   PAR.Day_9_Availability_USR = ( PAR.Day_9_Production_USR - PAR.Day_9_Sched_Shipments_USR )
   - PAR.Day_9_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER('N');
   // Day 10 Available
   PAR.Day_10_Availability_USR = ( PAR.Day_10_Production_USR
   - PAR.Day_10_Sched_Shipment_USR ) - PAR.Day_10_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER('N');
   // Day 11 Available
   PAR.Day_11_Availability_USR = ( PAR.Day_11_Production_USR
   - PAR.Day_11_Sched_Shipment_USR ) - PAR.Day_11_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER('N');
   // Day 12 Available
   PAR.Day_12_Availability_USR = ( PAR.Day_12_Production_USR
   - PAR.Day_12_Sched_Shipment_USR ) - PAR.Day_12_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER('N');
   // Day 13 Available
   PAR.Day_13_Availability_USR = ( PAR.Day_13_Production_USR
   - PAR.Day_13_Sched_Shipment_USR ) - PAR.Day_13_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER('N');
   // Day 14 Available
   PAR.Day_14_Availability_USR = ( PAR.Day_14_Production_USR
   - PAR.Day_14_Sched_Shipment_USR ) - PAR.Day_14_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER('N');
   // Day 15 Available
   PAR.Day_15_Availability_USR = ( PAR.Day_15_Production_USR
   - PAR.Day_15_Sched_Shipment_USR ) - PAR.Day_15_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER('N');
   // Day 16 Available
   PAR.Day_16_Availability_USR = ( PAR.Day_16_Production_USR
   - PAR.Day_16_Sched_Shipment_USR ) - PAR.Day_16_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER('N');
   // Day 17 Available
   PAR.Day_17_Availability_USR = ( PAR.Day_17_Production_USR
   - PAR.Day_17_Sched_Shipment_USR ) - PAR.Day_17_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER('N');
   // Day 18 Available
   PAR.Day_18_Availability_USR = ( PAR.Day_18_Production_USR
   - PAR.Day_18_Sched_Shipment_USR ) - PAR.Day_18_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER('N');
   // Day 19 Available
   PAR.Day_19_Availability_USR = ( PAR.Day_19_Production_USR
   - PAR.Day_19_Sched_Shipment_USR ) - PAR.Day_19_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER('N');
   // Day 20 Available
   PAR.Day_20_Availability_USR = ( PAR.Day_20_Production_USR
   - PAR.Day_20_Sched_Shipment_USR ) - PAR.Day_20_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER('N');
   // Day 21 Available
   PAR.Day_21_Availability_USR = ( PAR.Day_21_Production_USR
   - PAR.Day_21_Sched_Shipment_USR ) - PAR.Day_21_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER('N');
   ENDIF;

   EXECUTE FUNCTION(Rtv Sched Ship/Clc PA RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1543296;
   PARAMETER(PAR.Company_Number);
   PARAMETER(WRK.Order_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    PARAMETER(LCL.Billing_Activity_Type);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    // AND PAR.Order Number NE DB1.Order Number
    AND PAR.Order_Number <> DB1.Order_Number;

    // AND LCL.Billing Activity Type is Invoice or Transfer
    AND LCL.Billing_Activity_Type = '1'/'4';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship D
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship Dt
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

   }

   //?If this is a production whse, then reserve other whse orders.
   CASE;

   // IF PAR.Production Warehouse Code EQ PAR.Warehouse Code
   IF PAR.Production_Warehouse_Code = PAR.Warehouse_Code;

   // OR PAR.Production Warehouse Code is Warehouse Code Blank
   OR PAR.Production_Warehouse_Code = *BLANK;

   EXECUTE FUNCTION(Rtv Rsrvd Other Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1560700;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?If warehouse ordered not equal to warehouse scheduled, then reserve
    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    EXECUTE FUNCTION(Rtv Add to Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1560732;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER('Y');
    }

    ENDIF;

    ENDIF;

   }

   ENDIF;

   //?Retrieve Sched Ship/Allocation/Available from PA Array
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  //?If match found add up totals
  CASE;

  // IF PAR.Status - Y or N is yes
  IF PAR.Status_Y_or_N = 'Y';

  // PAR.Day 1 Inventory Total USR = PAR.Day 1 Inventory Total USR + PAR.Day 1 Invent
  PAR.Day_1_Inventory_Total_USR = PAR.Day_1_Inventory_Total_USR + PAR.Day_1_Inventory_USR;

  // PAR.Day 2 Inventory Total USR = PAR.Day 2 Inventory Total USR + PAR.Day 2 Invent
  PAR.Day_2_Inventory_Total_USR = PAR.Day_2_Inventory_Total_USR + PAR.Day_2_Inventory_USR;

  // PAR.Day 3 Inventory Total USR = PAR.Day 3 Inventory Total USR + PAR.Day 3 Invent
  PAR.Day_3_Inventory_Total_USR = PAR.Day_3_Inventory_Total_USR + PAR.Day_3_Inventory_USR;

  // PAR.Day 4 Inventory Total USR = PAR.Day 4 Inventory Total USR + PAR.Day 4 Invent
  PAR.Day_4_Inventory_Total_USR = PAR.Day_4_Inventory_Total_USR + PAR.Day_4_Inventory_USR;

  // PAR.Day 5 Inventory Total USR = PAR.Day 5 Inventory Total USR + PAR.Day 5 Invent
  PAR.Day_5_Inventory_Total_USR = PAR.Day_5_Inventory_Total_USR + PAR.Day_5_Inventory_USR;

  // PAR.Day 6 Inventory Total USR = PAR.Day 6 Inventory Total USR + PAR.Day 6 Invent
  PAR.Day_6_Inventory_Total_USR = PAR.Day_6_Inventory_Total_USR + PAR.Day_6_Inventory_USR;

  // PAR.Day 7 Inventory Total USR = PAR.Day 7 Inventory Total USR + PAR.Day 7 Invent
  PAR.Day_7_Inventory_Total_USR = PAR.Day_7_Inventory_Total_USR + PAR.Day_7_Inventory_USR;

  // PAR.Day 8 Inventory Total USR = PAR.Day 8 Inventory Total USR + PAR.Day 8 Invent
  PAR.Day_8_Inventory_Total_USR = PAR.Day_8_Inventory_Total_USR + PAR.Day_8_Inventory_USR;

  // PAR.Day 9 Inventory Total USR = PAR.Day 9 Inventory Total USR + PAR.Day 9 Invent
  PAR.Day_9_Inventory_Total_USR = PAR.Day_9_Inventory_Total_USR + PAR.Day_9_Inventory_USR;

  // PAR.Day 10 Inventory Totl USR = PAR.Day 10 Inventory Totl USR + PAR.Day 10 Inven
  PAR.Day_10_Inventory_Totl_USR = PAR.Day_10_Inventory_Totl_USR + PAR.Day_10_Inventory_USR;

  // PAR.Day 11 Inventory Totl USR = PAR.Day 11 Inventory Totl USR + PAR.Day 11 Inven
  PAR.Day_11_Inventory_Totl_USR = PAR.Day_11_Inventory_Totl_USR + PAR.Day_11_Inventory_USR;

  // PAR.Day 12 Inventory Totl USR = PAR.Day 12 Inventory Totl USR + PAR.Day 12 Inven
  PAR.Day_12_Inventory_Totl_USR = PAR.Day_12_Inventory_Totl_USR + PAR.Day_12_Inventory_USR;

  // PAR.Day 13 Inventory Totl USR = PAR.Day 13 Inventory Totl USR + PAR.Day 13 Inven
  PAR.Day_13_Inventory_Totl_USR = PAR.Day_13_Inventory_Totl_USR + PAR.Day_13_Inventory_USR;

  // PAR.Day 14 Inventory Totl USR = PAR.Day 14 Inventory Totl USR + PAR.Day 14 Inven
  PAR.Day_14_Inventory_Totl_USR = PAR.Day_14_Inventory_Totl_USR + PAR.Day_14_Inventory_USR;

  // PAR.Day 1 Production TotalUSR = PAR.Day 1 Production TotalUSR + PAR.Day 1 Produc
  PAR.Day_1_Production_TotalUSR = PAR.Day_1_Production_TotalUSR + PAR.Day_1_Production_USR;

  // PAR.Day 2 Production TotalUSR = PAR.Day 2 Production TotalUSR + PAR.Day 2 Produc
  PAR.Day_2_Production_TotalUSR = PAR.Day_2_Production_TotalUSR + PAR.Day_2_Production_USR;

  // PAR.Day 3 Production TotalUSR = PAR.Day 3 Production TotalUSR + PAR.Day 3 Produc
  PAR.Day_3_Production_TotalUSR = PAR.Day_3_Production_TotalUSR + PAR.Day_3_Production_USR;

  // PAR.Day 4 Production TotalUSR = PAR.Day 4 Production TotalUSR + PAR.Day 4 Produc
  PAR.Day_4_Production_TotalUSR = PAR.Day_4_Production_TotalUSR + PAR.Day_4_Production_USR;

  // PAR.Day 5 Production TotalUSR = PAR.Day 5 Production TotalUSR + PAR.Day 5 Produc
  PAR.Day_5_Production_TotalUSR = PAR.Day_5_Production_TotalUSR + PAR.Day_5_Production_USR;

  // PAR.Day 6 Production TotalUSR = PAR.Day 6 Production TotalUSR + PAR.Day 6 Produc
  PAR.Day_6_Production_TotalUSR = PAR.Day_6_Production_TotalUSR + PAR.Day_6_Production_USR;

  // PAR.Day 7 Production TotalUSR = PAR.Day 7 Production TotalUSR + PAR.Day 7 Produc
  PAR.Day_7_Production_TotalUSR = PAR.Day_7_Production_TotalUSR + PAR.Day_7_Production_USR;

  // PAR.Day 8 Prod Total      USR = PAR.Day 8 Prod Total      USR + PAR.Day 8 Produc
  PAR.Day_8_Prod_Total_USR = PAR.Day_8_Prod_Total_USR + PAR.Day_8_Production_USR;

  // PAR.Day 9 Prod Total      USR = PAR.Day 9 Prod Total      USR + PAR.Day 9 Produc
  PAR.Day_9_Prod_Total_USR = PAR.Day_9_Prod_Total_USR + PAR.Day_9_Production_USR;

  // PAR.Day 10 Prod Total     USR = PAR.Day 10 Prod Total     USR + PAR.Day 10 Produ
  PAR.Day_10_Prod_Total_USR = PAR.Day_10_Prod_Total_USR + PAR.Day_10_Production_USR;

  // PAR.Day 11 Prod Total     USR = PAR.Day 11 Prod Total     USR + PAR.Day 11 Produ
  PAR.Day_11_Prod_Total_USR = PAR.Day_11_Prod_Total_USR + PAR.Day_11_Production_USR;

  // PAR.Day 12 Prod Total     USR = PAR.Day 12 Prod Total     USR + PAR.Day 12 Produ
  PAR.Day_12_Prod_Total_USR = PAR.Day_12_Prod_Total_USR + PAR.Day_12_Production_USR;

  // PAR.Day 13 Prod Total     USR = PAR.Day 13 Prod Total     USR + PAR.Day 13 Produ
  PAR.Day_13_Prod_Total_USR = PAR.Day_13_Prod_Total_USR + PAR.Day_13_Production_USR;

  // PAR.Day 14 Prod Total     USR = PAR.Day 14 Prod Total     USR + PAR.Day 14 Produ
  PAR.Day_14_Prod_Total_USR = PAR.Day_14_Prod_Total_USR + PAR.Day_14_Production_USR;

  // PAR.Day 15 Prod Total     USR = PAR.Day 15 Prod Total     USR + PAR.Day 15 Produ
  PAR.Day_15_Prod_Total_USR = PAR.Day_15_Prod_Total_USR + PAR.Day_15_Production_USR;

  // PAR.Day 16 Prod Total     USR = PAR.Day 16 Prod Total     USR + PAR.Day 16 Produ
  PAR.Day_16_Prod_Total_USR = PAR.Day_16_Prod_Total_USR + PAR.Day_16_Production_USR;

  // PAR.Day 17 Prod Total     USR = PAR.Day 17 Prod Total     USR + PAR.Day 17 Produ
  PAR.Day_17_Prod_Total_USR = PAR.Day_17_Prod_Total_USR + PAR.Day_17_Production_USR;

  // PAR.Day 18 Prod Total     USR = PAR.Day 18 Prod Total     USR + PAR.Day 18 Produ
  PAR.Day_18_Prod_Total_USR = PAR.Day_18_Prod_Total_USR + PAR.Day_18_Production_USR;

  // PAR.Day 19 Prod Total     USR = PAR.Day 19 Prod Total     USR + PAR.Day 19 Produ
  PAR.Day_19_Prod_Total_USR = PAR.Day_19_Prod_Total_USR + PAR.Day_19_Production_USR;

  // PAR.Day 20 Prod Total     USR = PAR.Day 20 Prod Total     USR + PAR.Day 20 Produ
  PAR.Day_20_Prod_Total_USR = PAR.Day_20_Prod_Total_USR + PAR.Day_20_Production_USR;

  // PAR.Day 21 Prod Total     USR = PAR.Day 21 Prod Total     USR + PAR.Day 21 Produ
  PAR.Day_21_Prod_Total_USR = PAR.Day_21_Prod_Total_USR + PAR.Day_21_Production_USR;

  // PAR.Day 1 Schd Ship Total USR = PAR.Day 1 Schd Ship Total USR + PAR.Day 1 Sched
  PAR.Day_1_Schd_Ship_Total_USR = PAR.Day_1_Schd_Ship_Total_USR
  + PAR.Day_1_Sched_Shipments_USR;

  // PAR.Day 2 Schd Ship Total USR = PAR.Day 2 Schd Ship Total USR + PAR.Day 2 Sched
  PAR.Day_2_Schd_Ship_Total_USR = PAR.Day_2_Schd_Ship_Total_USR
  + PAR.Day_2_Sched_Shipments_USR;

  // PAR.Day 3 Schd Ship Total USR = PAR.Day 3 Schd Ship Total USR + PAR.Day 3 Sched
  PAR.Day_3_Schd_Ship_Total_USR = PAR.Day_3_Schd_Ship_Total_USR
  + PAR.Day_3_Sched_Shipments_USR;

  // PAR.Day 4 Schd Ship Total USR = PAR.Day 4 Schd Ship Total USR + PAR.Day 4 Sched
  PAR.Day_4_Schd_Ship_Total_USR = PAR.Day_4_Schd_Ship_Total_USR
  + PAR.Day_4_Sched_Shipments_USR;

  // PAR.Day 5 Schd Ship Total USR = PAR.Day 5 Schd Ship Total USR + PAR.Day 5 Sched
  PAR.Day_5_Schd_Ship_Total_USR = PAR.Day_5_Schd_Ship_Total_USR
  + PAR.Day_5_Sched_Shipments_USR;

  // PAR.Day 6 Schd Ship Total USR = PAR.Day 6 Schd Ship Total USR + PAR.Day 6 Sched
  PAR.Day_6_Schd_Ship_Total_USR = PAR.Day_6_Schd_Ship_Total_USR
  + PAR.Day_6_Sched_Shipments_USR;

  // PAR.Day 7 Schd Ship Total USR = PAR.Day 7 Schd Ship Total USR + PAR.Day 7 Sched
  PAR.Day_7_Schd_Ship_Total_USR = PAR.Day_7_Schd_Ship_Total_USR
  + PAR.Day_7_Sched_Shipments_USR;

  // PAR.Day 8 Schd Ship Total USR = PAR.Day 8 Schd Ship Total USR + PAR.Day 8 Sched
  PAR.Day_8_Schd_Ship_Total_USR = PAR.Day_8_Schd_Ship_Total_USR
  + PAR.Day_8_Sched_Shipments_USR;

  // PAR.Day 9 Schd Ship Total USR = PAR.Day 9 Schd Ship Total USR + PAR.Day 9 Sched
  PAR.Day_9_Schd_Ship_Total_USR = PAR.Day_9_Schd_Ship_Total_USR
  + PAR.Day_9_Sched_Shipments_USR;

  // PAR.Day 10 SchdShip Total USR = PAR.Day 10 SchdShip Total USR + PAR.Day 10 Sched
  PAR.Day_10_SchdShip_Total_USR = PAR.Day_10_SchdShip_Total_USR
  + PAR.Day_10_Sched_Shipment_USR;

  // PAR.Day 11 SchdShip Total USR = PAR.Day 11 SchdShip Total USR + PAR.Day 11 Sched
  PAR.Day_11_SchdShip_Total_USR = PAR.Day_11_SchdShip_Total_USR
  + PAR.Day_11_Sched_Shipment_USR;

  // PAR.Day 12 SchdShip Total USR = PAR.Day 12 SchdShip Total USR + PAR.Day 12 Sched
  PAR.Day_12_SchdShip_Total_USR = PAR.Day_12_SchdShip_Total_USR
  + PAR.Day_12_Sched_Shipment_USR;

  // PAR.Day 13 SchdShip Total USR = PAR.Day 13 SchdShip Total USR + PAR.Day 13 Sched
  PAR.Day_13_SchdShip_Total_USR = PAR.Day_13_SchdShip_Total_USR
  + PAR.Day_13_Sched_Shipment_USR;

  // PAR.Day 14 SchdShip Total USR = PAR.Day 14 SchdShip Total USR + PAR.Day 14 Sched
  PAR.Day_14_SchdShip_Total_USR = PAR.Day_14_SchdShip_Total_USR
  + PAR.Day_14_Sched_Shipment_USR;

  // PAR.Day 15 SchdShip Total USR = PAR.Day 15 SchdShip Total USR + PAR.Day 15 Sched
  PAR.Day_15_SchdShip_Total_USR = PAR.Day_15_SchdShip_Total_USR
  + PAR.Day_15_Sched_Shipment_USR;

  // PAR.Day 16 SchdShip Total USR = PAR.Day 16 SchdShip Total USR + PAR.Day 16 Sched
  PAR.Day_16_SchdShip_Total_USR = PAR.Day_16_SchdShip_Total_USR
  + PAR.Day_16_Sched_Shipment_USR;

  // PAR.Day 17 SchdShip Total USR = PAR.Day 17 SchdShip Total USR + PAR.Day 17 Sched
  PAR.Day_17_SchdShip_Total_USR = PAR.Day_17_SchdShip_Total_USR
  + PAR.Day_17_Sched_Shipment_USR;

  // PAR.Day 18 SchdShip Total USR = PAR.Day 18 SchdShip Total USR + PAR.Day 18 Sched
  PAR.Day_18_SchdShip_Total_USR = PAR.Day_18_SchdShip_Total_USR
  + PAR.Day_18_Sched_Shipment_USR;

  // PAR.Day 19 SchdShip Total USR = PAR.Day 19 SchdShip Total USR + PAR.Day 19 Sched
  PAR.Day_19_SchdShip_Total_USR = PAR.Day_19_SchdShip_Total_USR
  + PAR.Day_19_Sched_Shipment_USR;

  // PAR.Day 20 SchdShip Total USR = PAR.Day 20 SchdShip Total USR + PAR.Day 20 Sched
  PAR.Day_20_SchdShip_Total_USR = PAR.Day_20_SchdShip_Total_USR
  + PAR.Day_20_Sched_Shipment_USR;

  // PAR.Day 21 SchdShip Total USR = PAR.Day 21 SchdShip Total USR + PAR.Day 21 Sched
  PAR.Day_21_SchdShip_Total_USR = PAR.Day_21_SchdShip_Total_USR
  + PAR.Day_21_Sched_Shipment_USR;

  // PAR.Day 1 Sales Total     USR = PAR.Day 1 Sales Total     USR + PAR.Day 1 Sales
  PAR.Day_1_Sales_Total_USR = PAR.Day_1_Sales_Total_USR + PAR.Day_1_Sales_USR;

  // PAR.Day 2 Sales Total     USR = PAR.Day 2 Sales Total     USR + PAR.Day 2 Sales
  PAR.Day_2_Sales_Total_USR = PAR.Day_2_Sales_Total_USR + PAR.Day_2_Sales_USR;

  // PAR.Day 3 Sales Total     USR = PAR.Day 3 Sales Total     USR + PAR.Day 3 Sales
  PAR.Day_3_Sales_Total_USR = PAR.Day_3_Sales_Total_USR + PAR.Day_3_Sales_USR;

  // PAR.Day 4 Sales Total     USR = PAR.Day 4 Sales Total     USR + PAR.Day 4 Sales
  PAR.Day_4_Sales_Total_USR = PAR.Day_4_Sales_Total_USR + PAR.Day_4_Sales_USR;

  // PAR.Day 5 Sales Total     USR = PAR.Day 5 Sales Total     USR + PAR.Day 5 Sales
  PAR.Day_5_Sales_Total_USR = PAR.Day_5_Sales_Total_USR + PAR.Day_5_Sales_USR;

  // PAR.Day 6 Sales Total     USR = PAR.Day 6 Sales Total     USR + PAR.Day 6 Sales
  PAR.Day_6_Sales_Total_USR = PAR.Day_6_Sales_Total_USR + PAR.Day_6_Sales_USR;

  // PAR.Day 7 Sales Total     USR = PAR.Day 7 Sales Total     USR + PAR.Day 7 Sales
  PAR.Day_7_Sales_Total_USR = PAR.Day_7_Sales_Total_USR + PAR.Day_7_Sales_USR;

  // PAR.Day 8 Sales Total     USR = PAR.Day 8 Sales Total     USR + PAR.Day 8 Sales
  PAR.Day_8_Sales_Total_USR = PAR.Day_8_Sales_Total_USR + PAR.Day_8_Sales_USR;

  // PAR.Day 9 Sales Total     USR = PAR.Day 9 Sales Total     USR + PAR.Day 9 Sales
  PAR.Day_9_Sales_Total_USR = PAR.Day_9_Sales_Total_USR + PAR.Day_9_Sales_USR;

  // PAR.Day 10 Sales Total    USR = PAR.Day 10 Sales Total    USR + PAR.Day 10 Sales
  PAR.Day_10_Sales_Total_USR = PAR.Day_10_Sales_Total_USR + PAR.Day_10_Sales_USR;

  // PAR.Day 11 Sales Total    USR = PAR.Day 11 Sales Total    USR + PAR.Day 11 Sales
  PAR.Day_11_Sales_Total_USR = PAR.Day_11_Sales_Total_USR + PAR.Day_11_Sales_USR;

  // PAR.Day 12 Sales Total    USR = PAR.Day 12 Sales Total    USR + PAR.Day 12 Sales
  PAR.Day_12_Sales_Total_USR = PAR.Day_12_Sales_Total_USR + PAR.Day_12_Sales_USR;

  // PAR.Day 13 Sales Total    USR = PAR.Day 13 Sales Total    USR + PAR.Day 13 Sales
  PAR.Day_13_Sales_Total_USR = PAR.Day_13_Sales_Total_USR + PAR.Day_13_Sales_USR;

  // PAR.Day 14 Sales Total    USR = PAR.Day 14 Sales Total    USR + PAR.Day 14 Sales
  PAR.Day_14_Sales_Total_USR = PAR.Day_14_Sales_Total_USR + PAR.Day_14_Sales_USR;

  // PAR.Day 15 Sales Total    USR = PAR.Day 15 Sales Total    USR + PAR.Day 15 Sales
  PAR.Day_15_Sales_Total_USR = PAR.Day_15_Sales_Total_USR + PAR.Day_15_Sales_USR;

  // PAR.Day 16 Sales Total    USR = PAR.Day 16 Sales Total    USR + PAR.Day 16 Sales
  PAR.Day_16_Sales_Total_USR = PAR.Day_16_Sales_Total_USR + PAR.Day_16_Sales_USR;

  // PAR.Day 17 Sales Total    USR = PAR.Day 17 Sales Total    USR + PAR.Day 17 Sales
  PAR.Day_17_Sales_Total_USR = PAR.Day_17_Sales_Total_USR + PAR.Day_17_Sales_USR;

  // PAR.Day 18 Sales Total    USR = PAR.Day 18 Sales Total    USR + PAR.Day 18 Sales
  PAR.Day_18_Sales_Total_USR = PAR.Day_18_Sales_Total_USR + PAR.Day_18_Sales_USR;

  // PAR.Day 19 Sales Total    USR = PAR.Day 19 Sales Total    USR + PAR.Day 19 Sales
  PAR.Day_19_Sales_Total_USR = PAR.Day_19_Sales_Total_USR + PAR.Day_19_Sales_USR;

  // PAR.Day 20 Sales Total    USR = PAR.Day 20 Sales Total    USR + PAR.Day 20 Sales
  PAR.Day_20_Sales_Total_USR = PAR.Day_20_Sales_Total_USR + PAR.Day_20_Sales_USR;

  // PAR.Day 21 Sales Total    USR = PAR.Day 21 Sales Total    USR + PAR.Day 21 Sales
  PAR.Day_21_Sales_Total_USR = PAR.Day_21_Sales_Total_USR + PAR.Day_21_Sales_USR;

  // PAR.Day 1 Avail Total     USR = PAR.Day 1 Avail Total     USR + PAR.Day 1 Availa
  PAR.Day_1_Avail_Total_USR = PAR.Day_1_Avail_Total_USR + PAR.Day_1_Availability_USR;

  // PAR.Day 2 Avail Total     USR = PAR.Day 2 Avail Total     USR + PAR.Day 2 Availa
  PAR.Day_2_Avail_Total_USR = PAR.Day_2_Avail_Total_USR + PAR.Day_2_Availability_USR;

  // PAR.Day 3 Avail Total     USR = PAR.Day 3 Avail Total     USR + PAR.Day 3 Availa
  PAR.Day_3_Avail_Total_USR = PAR.Day_3_Avail_Total_USR + PAR.Day_3_Availability_USR;

  // PAR.Day 4 Avail Total     USR = PAR.Day 4 Avail Total     USR + PAR.Day 4 Availa
  PAR.Day_4_Avail_Total_USR = PAR.Day_4_Avail_Total_USR + PAR.Day_4_Availability_USR;

  // PAR.Day 5 Avail Total     USR = PAR.Day 5 Avail Total     USR + PAR.Day 5 Availa
  PAR.Day_5_Avail_Total_USR = PAR.Day_5_Avail_Total_USR + PAR.Day_5_Availability_USR;

  // PAR.Day 6 Avail Total     USR = PAR.Day 6 Avail Total     USR + PAR.Day 6 Availa
  PAR.Day_6_Avail_Total_USR = PAR.Day_6_Avail_Total_USR + PAR.Day_6_Availability_USR;

  // PAR.Day 7 Avail Total     USR = PAR.Day 7 Avail Total     USR + PAR.Day 7 Availa
  PAR.Day_7_Avail_Total_USR = PAR.Day_7_Avail_Total_USR + PAR.Day_7_Availability_USR;

  // PAR.Day 8 Avail Total     USR = PAR.Day 8 Avail Total     USR + PAR.Day 8 Availa
  PAR.Day_8_Avail_Total_USR = PAR.Day_8_Avail_Total_USR + PAR.Day_8_Availability_USR;

  // PAR.Day 9 Avail Total     USR = PAR.Day 9 Avail Total     USR + PAR.Day 9 Availa
  PAR.Day_9_Avail_Total_USR = PAR.Day_9_Avail_Total_USR + PAR.Day_9_Availability_USR;

  // PAR.Day 10 Avail Total    USR = PAR.Day 10 Avail Total    USR + PAR.Day 10 Avail
  PAR.Day_10_Avail_Total_USR = PAR.Day_10_Avail_Total_USR + PAR.Day_10_Availability_USR;

  // PAR.Day 11 Avail Total    USR = PAR.Day 11 Avail Total    USR + PAR.Day 11 Avail
  PAR.Day_11_Avail_Total_USR = PAR.Day_11_Avail_Total_USR + PAR.Day_11_Availability_USR;

  // PAR.Day 12 Avail Total    USR = PAR.Day 12 Avail Total    USR + PAR.Day 12 Avail
  PAR.Day_12_Avail_Total_USR = PAR.Day_12_Avail_Total_USR + PAR.Day_12_Availability_USR;

  // PAR.Day 13 Avail Total    USR = PAR.Day 13 Avail Total    USR + PAR.Day 13 Avail
  PAR.Day_13_Avail_Total_USR = PAR.Day_13_Avail_Total_USR + PAR.Day_13_Availability_USR;

  // PAR.Day 14 Avail Total    USR = PAR.Day 14 Avail Total    USR + PAR.Day 14 Avail
  PAR.Day_14_Avail_Total_USR = PAR.Day_14_Avail_Total_USR + PAR.Day_14_Availability_USR;

  // PAR.Day 15 Avail Total    USR = PAR.Day 15 Avail Total    USR + PAR.Day 15 Avail
  PAR.Day_15_Avail_Total_USR = PAR.Day_15_Avail_Total_USR + PAR.Day_15_Availability_USR;

  // PAR.Day 16 Avail Total    USR = PAR.Day 16 Avail Total    USR + PAR.Day 16 Avail
  PAR.Day_16_Avail_Total_USR = PAR.Day_16_Avail_Total_USR + PAR.Day_16_Availability_USR;

  // PAR.Day 17 Avail Total    USR = PAR.Day 17 Avail Total    USR + PAR.Day 17 Avail
  PAR.Day_17_Avail_Total_USR = PAR.Day_17_Avail_Total_USR + PAR.Day_17_Availability_USR;

  // PAR.Day 18 Avail Total    USR = PAR.Day 18 Avail Total    USR + PAR.Day 18 Avail
  PAR.Day_18_Avail_Total_USR = PAR.Day_18_Avail_Total_USR + PAR.Day_18_Availability_USR;

  // PAR.Day 19 Avail Total    USR = PAR.Day 19 Avail Total    USR + PAR.Day 19 Avail
  PAR.Day_19_Avail_Total_USR = PAR.Day_19_Avail_Total_USR + PAR.Day_19_Availability_USR;

  // PAR.Day 20 Avail Total    USR = PAR.Day 20 Avail Total    USR + PAR.Day 20 Avail
  PAR.Day_20_Avail_Total_USR = PAR.Day_20_Avail_Total_USR + PAR.Day_20_Availability_USR;

  // PAR.Day 21 Avail Total    USR = PAR.Day 21 Avail Total    USR + PAR.Day 21 Avail
  PAR.Day_21_Avail_Total_USR = PAR.Day_21_Avail_Total_USR + PAR.Day_21_Availability_USR;

  ENDIF;

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

 }

 //?Add up totals
 CASE;

 // IF WRK.USR Work Field 1 CDE EQ WRK.USR Work Field 1 CDE
 IF WRK.USR_Work_Field_1_CDE = WRK.USR_Work_Field_1_CDE;

 // PAR.Day 1 Avail Total     USR = PAR.Day 1 Avail Total     USR + PAR.Day 1 Availa
 PAR.Day_1_Avail_Total_USR = PAR.Day_1_Avail_Total_USR + PAR.Day_1_Availability_USR;

 // PAR.Day 2 Avail Total     USR = PAR.Day 2 Avail Total     USR + PAR.Day 2 Availa
 PAR.Day_2_Avail_Total_USR = PAR.Day_2_Avail_Total_USR + PAR.Day_2_Availability_USR;

 // PAR.Day 3 Avail Total     USR = PAR.Day 3 Avail Total     USR + PAR.Day 3 Availa
 PAR.Day_3_Avail_Total_USR = PAR.Day_3_Avail_Total_USR + PAR.Day_3_Availability_USR;

 // PAR.Day 4 Avail Total     USR = PAR.Day 4 Avail Total     USR + PAR.Day 4 Availa
 PAR.Day_4_Avail_Total_USR = PAR.Day_4_Avail_Total_USR + PAR.Day_4_Availability_USR;

 // PAR.Day 5 Avail Total     USR = PAR.Day 5 Avail Total     USR + PAR.Day 5 Availa
 PAR.Day_5_Avail_Total_USR = PAR.Day_5_Avail_Total_USR + PAR.Day_5_Availability_USR;

 // PAR.Day 6 Avail Total     USR = PAR.Day 6 Avail Total     USR + PAR.Day 6 Availa
 PAR.Day_6_Avail_Total_USR = PAR.Day_6_Avail_Total_USR + PAR.Day_6_Availability_USR;

 // PAR.Day 7 Avail Total     USR = PAR.Day 7 Avail Total     USR + PAR.Day 7 Availa
 PAR.Day_7_Avail_Total_USR = PAR.Day_7_Avail_Total_USR + PAR.Day_7_Availability_USR;

 // PAR.Day 8 Avail Total     USR = PAR.Day 8 Avail Total     USR + PAR.Day 8 Availa
 PAR.Day_8_Avail_Total_USR = PAR.Day_8_Avail_Total_USR + PAR.Day_8_Availability_USR;

 // PAR.Day 9 Avail Total     USR = PAR.Day 9 Avail Total     USR + PAR.Day 9 Availa
 PAR.Day_9_Avail_Total_USR = PAR.Day_9_Avail_Total_USR + PAR.Day_9_Availability_USR;

 // PAR.Day 10 Avail Total    USR = PAR.Day 10 Avail Total    USR + PAR.Day 10 Avail
 PAR.Day_10_Avail_Total_USR = PAR.Day_10_Avail_Total_USR + PAR.Day_10_Availability_USR;

 // PAR.Day 11 Avail Total    USR = PAR.Day 11 Avail Total    USR + PAR.Day 11 Avail
 PAR.Day_11_Avail_Total_USR = PAR.Day_11_Avail_Total_USR + PAR.Day_11_Availability_USR;

 // PAR.Day 12 Avail Total    USR = PAR.Day 12 Avail Total    USR + PAR.Day 12 Avail
 PAR.Day_12_Avail_Total_USR = PAR.Day_12_Avail_Total_USR + PAR.Day_12_Availability_USR;

 // PAR.Day 13 Avail Total    USR = PAR.Day 13 Avail Total    USR + PAR.Day 13 Avail
 PAR.Day_13_Avail_Total_USR = PAR.Day_13_Avail_Total_USR + PAR.Day_13_Availability_USR;

 // PAR.Day 14 Avail Total    USR = PAR.Day 14 Avail Total    USR + PAR.Day 14 Avail
 PAR.Day_14_Avail_Total_USR = PAR.Day_14_Avail_Total_USR + PAR.Day_14_Availability_USR;

 // PAR.Day 15 Avail Total    USR = PAR.Day 15 Avail Total    USR + PAR.Day 15 Avail
 PAR.Day_15_Avail_Total_USR = PAR.Day_15_Avail_Total_USR + PAR.Day_15_Availability_USR;

 // PAR.Day 16 Avail Total    USR = PAR.Day 16 Avail Total    USR + PAR.Day 16 Avail
 PAR.Day_16_Avail_Total_USR = PAR.Day_16_Avail_Total_USR + PAR.Day_16_Availability_USR;

 // PAR.Day 17 Avail Total    USR = PAR.Day 17 Avail Total    USR + PAR.Day 17 Avail
 PAR.Day_17_Avail_Total_USR = PAR.Day_17_Avail_Total_USR + PAR.Day_17_Availability_USR;

 // PAR.Day 18 Avail Total    USR = PAR.Day 18 Avail Total    USR + PAR.Day 18 Avail
 PAR.Day_18_Avail_Total_USR = PAR.Day_18_Avail_Total_USR + PAR.Day_18_Availability_USR;

 // PAR.Day 19 Avail Total    USR = PAR.Day 19 Avail Total    USR + PAR.Day 19 Avail
 PAR.Day_19_Avail_Total_USR = PAR.Day_19_Avail_Total_USR + PAR.Day_19_Availability_USR;

 // PAR.Day 20 Avail Total    USR = PAR.Day 20 Avail Total    USR + PAR.Day 20 Avail
 PAR.Day_20_Avail_Total_USR = PAR.Day_20_Avail_Total_USR + PAR.Day_20_Availability_USR;

 // PAR.Day 21 Avail Total    USR = PAR.Day 21 Avail Total    USR + PAR.Day 21 Avail
 PAR.Day_21_Avail_Total_USR = PAR.Day_21_Avail_Total_USR + PAR.Day_21_Availability_USR;

 ENDIF;

}


ENDIF;

//?Save subfile position
CASE;

// IF LCL.Status Flag 17 Y/N is Yes
IF LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Maintain Subfil PosUS.
EXECUTE FUNCTION(SFL Maintain Subfil PosUS) TYPE(EXCUSRSRC) ('PNG7UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           W1SFRC    IFGT *ZERO
 C                     Z-ADDW1SFRC    ##SFRC
 C                     Z-ADD##SFRC    @#SFRC
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


// LCL.Status Flag 17 Y/N = CND.No
LCL.Status_Flag_17_Y_N = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?RST:  Company Number
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND CTL.Company Number NE DB1.Company Number
AND CTL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST:  Availability Group
CASE;

// IF CTL.Availability Group Code is NE Blank
IF CTL.Availability_Group_Code <> *BLANK;

// AND CTL.Availability Group Code NE DB1.Availability Group Code
AND CTL.Availability_Group_Code <> DB1.Availability_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Retreive Item information for calculating Availability.
//?Other values needed for display warehouse inquiry
//?RST: Warehouse code if entered
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Item Bal Exist    RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1428561;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


ENDIF;

//?Record is selected if not warehouse code restricted, or record is found
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// OR PAR.Record Found USR is Record Found
OR PAR.Record_Found_USR = 'Y';

EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Conversion_Factor_1);
PARAMETER(RCD.Operation_Factor_1);
PARAMETER(RCD.UOM_Second);
PARAMETER(RCD.Conversion_Factor_2);
PARAMETER(RCD.Operation_Factor_2);
PARAMETER(RCD.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Fresh_Chilling_Time);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If item is a base mark with a "*".
CASE;

// IF PAR.Base/Conv/Loss Item is Base
IF PAR.Base_Conv_Loss_Item = 'B';

// RCD.Item Code is Base '*' USR = CON.*
RCD.Item_Code_is_Base_USR = *;

//?If item is a base mark with a "*".
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Item Code is Base '*' USR = CON.*BLANK
RCD.Item_Code_is_Base_USR = *BLANK;

ENDIF;

//?SEL: Record Status
CASE;

// IF LCL.Record Status is Deleted & Inactive
IF LCL.Record_Status = 'D'/'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Base
CASE;

// IF CTL.Item Code is Base '*' USR is Select Base
IF CTL.Item_Code_is_Base_USR = *;

// AND RCD.Item Code is Base '*' USR NE CTL.Item Code is Base '*' USR
AND RCD.Item_Code_is_Base_USR <> CTL.Item_Code_is_Base_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RTV:  Availability
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv PA Tot SD-21      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1652232;
PARAMETER(CTL.Warehouse_Type);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Avail_Ship_Date_1_USR);
PARAMETER(PAR.Avail_Ship_Date_1_USR);
PARAMETER(PAR.Avail_Ship_Date_2_USR);
PARAMETER(PAR.Avail_Ship_Date_3_USR);
PARAMETER(PAR.Avail_Ship_Date_4_USR);
PARAMETER(PAR.Avail_Ship_Date_5_USR);
PARAMETER(PAR.Avail_Ship_Date_6_USR);
PARAMETER(PAR.Avail_Ship_Date_7_USR);
PARAMETER(PAR.Avail_Ship_Date_8_USR);
PARAMETER(PAR.Avail_Ship_Date_9_USR);
PARAMETER(PAR.Avail_Ship_Date_10_USR);
PARAMETER(PAR.Avail_Ship_Date_11_USR);
PARAMETER(PAR.Avail_Ship_Date_12_USR);
PARAMETER(PAR.Avail_Ship_Date_13_USR);
PARAMETER(PAR.Avail_Ship_Date_14_USR);
PARAMETER(PAR.Avail_Ship_Date_15_USR);
PARAMETER(PAR.Avail_Ship_Date_16_USR);
PARAMETER(PAR.Avail_Ship_Date_17_USR);
PARAMETER(PAR.Avail_Ship_Date_18_USR);
PARAMETER(PAR.Avail_Ship_Date_19_USR);
PARAMETER(PAR.Avail_Ship_Date_20_USR);
PARAMETER(PAR.Avail_Ship_Date_21_USR);
PARAMETER(PAR.Day_1_Inventory_USR);
PARAMETER(PAR.Day_2_Inventory_USR);
PARAMETER(PAR.Day_3_Inventory_USR);
PARAMETER(PAR.Day_4_Inventory_USR);
PARAMETER(PAR.Day_5_Inventory_USR);
PARAMETER(PAR.Day_6_Inventory_USR);
PARAMETER(PAR.Day_7_Inventory_USR);
PARAMETER(CTL.Primary_Load_Sts_USR);
PARAMETER(CTL.Load_Size_USR);
PARAMETER(PAR.Day_8_Inventory_USR);
PARAMETER(PAR.Day_1_ATS_Qty_USR);
PARAMETER(PAR.Day_2_ATS_Qty_USR);
PARAMETER(PAR.Day_3_ATS_Qty_USR);
PARAMETER(PAR.Day_4_ATS_Qty_USR);
PARAMETER(PAR.Day_5_ATS_Qty_USR);
PARAMETER(PAR.Day_6_ATS_Qty_USR);
PARAMETER(PAR.Day_7_ATS_Qty_USR);
PARAMETER(PAR.Day_8_ATS_Qty_USR);
PARAMETER(PAR.Day_9_ATS_Qty_USR);
PARAMETER(PAR.Day_10_ATS_Qty_USR);
PARAMETER(PAR.Day_11_ATS_Qty_USR);
PARAMETER(PAR.Day_12_ATS_Qty_USR);
PARAMETER(PAR.Day_13_ATS_Qty_USR);
PARAMETER(PAR.Day_14_ATS_Qty_USR);
PARAMETER(PAR.Day_15_ATS_Qty_USR);
PARAMETER(PAR.Day_16_ATS_Qty_USR);
PARAMETER(PAR.Day_17_ATS_Qty_USR);
PARAMETER(PAR.Day_18_ATS_Qty_USR);
PARAMETER(PAR.Day_19_ATS_Qty_USR);
PARAMETER(PAR.Day_20_ATS_Qty_USR);
PARAMETER(PAR.Day_21_ATS_Qty_USR);
PARAMETER('T');
PARAMETER(PAR.Day_1_Availability_USR);
PARAMETER(PAR.Day_2_Availability_USR);
PARAMETER(PAR.Day_3_Availability_USR);
PARAMETER(PAR.Day_4_Availability_USR);
PARAMETER(PAR.Day_5_Availability_USR);
PARAMETER(PAR.Day_6_Availability_USR);
PARAMETER(PAR.Day_7_Availability_USR);
PARAMETER(PAR.Day_8_Availability_USR);
PARAMETER(PAR.Day_9_Availability_USR);
PARAMETER(PAR.Day_10_Availability_USR);
PARAMETER(PAR.Day_11_Availability_USR);
PARAMETER(PAR.Day_12_Availability_USR);
PARAMETER(PAR.Day_13_Availability_USR);
PARAMETER(PAR.Day_14_Availability_USR);
PARAMETER(PAR.Day_15_Availability_USR);
PARAMETER(PAR.Day_16_Availability_USR);
PARAMETER(PAR.Day_17_Availability_USR);
PARAMETER(PAR.Day_18_Availability_USR);
PARAMETER(PAR.Day_19_Availability_USR);
PARAMETER(PAR.Day_20_Availability_USR);
PARAMETER(PAR.Day_21_Availability_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
{
 //?USER: Initialize routine

 //?FP1054 5/20/09  made inventory parms "B"oth, they werent anything before
 MOVE *ALL (To: PAR From: CON);

 // LCL.Status - Y or N = CND.no
 LCL.Status_Y_or_N = 'N';

 //?USER: Process Data record

 //?Check for matching warehouse code and warehouse type
 CASE;

 // IF PAR.Warehouse Code is Warehouse Code Blank
 IF PAR.Warehouse_Code = *BLANK;

 // AND PAR.Warehouse Type is Equal blank
 AND PAR.Warehouse_Type = *BLANK;

 EXECUTE FUNCTION(RTV PA Tot SD-21      IF) TYPE(EXCINTFUN)                      AC1652249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(DB1.Warehouse_Type);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?FP1054 5/20/09 made inventory parms "B"oth, they were Neither
  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  {
   //?Execute internal function

   //?Retrieve Inventory and Scheduled Shipments
   EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
   PARAMETER(PAR.Company_Number);
   PARAMETER('S');
   PARAMETER(JOB.*Job_date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Inventory / Sales if Chilling Time > 0
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calculate Quantity based on Unit Weight or Pieces
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   //?Inventory / Sales if Chilling Time > 0
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate Quantity based on Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   ENDIF;

   //?Total Inventory
   CASE;

   // IF PAR.Avail Dsp/Prt Type USR is Display
   IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

   // Total Inventory
   PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
   + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )
   + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Dtl SD-21 WHS  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1652262;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_8_Adjustments_USR);
  PARAMETER(PAR.Day_9_Adjustments_USR);
  PARAMETER(PAR.Day_10_Adjustments_USR);
  PARAMETER(PAR.Day_11_Adjustments_USR);
  PARAMETER(PAR.Day_12_Adjustments_USR);
  PARAMETER(PAR.Day_13_Adjustments_USR);
  PARAMETER(PAR.Day_14_Adjustments_USR);
  PARAMETER(PAR.Day_15_Adjustments_USR);
  PARAMETER(PAR.Day_16_Adjustments_USR);
  PARAMETER(PAR.Day_17_Adjustments_USR);
  PARAMETER(PAR.Day_18_Adjustments_USR);
  PARAMETER(PAR.Day_19_Adjustments_USR);
  PARAMETER(PAR.Day_20_Adjustments_USR);
  PARAMETER(PAR.Day_21_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   //?fp1054 4/28/09 include whse txfr in PROD calc
   // PAR.Status Flag 1  Y/N = CND.No
   PAR.Status_Flag_1_Y_N = 'N';

   // PAR.Status Flag 2  Y/N = CND.No
   PAR.Status_Flag_2_Y_N = 'N';

   // PAR.Status Flag 3  Y/N = CND.No
   PAR.Status_Flag_3_Y_N = 'N';

   // PAR.Status Flag 4  Y/N = CND.no
   PAR.Status_Flag_4_Y_N = 'N';

   // PAR.Status Flag 5  Y/N = CND.No
   PAR.Status_Flag_5_Y_N = 'N';

   // PAR.Status Flag 6  Y/N = CND.No
   PAR.Status_Flag_6_Y_N = 'N';

   // PAR.Status Flag 7  Y/N = CND.No
   PAR.Status_Flag_7_Y_N = 'N';

   // PAR.Status Flag 8  Y/N = CND.No
   PAR.Status_Flag_8_Y_N = 'N';

   // PAR.Status Flag 9  Y/N = CND.No
   PAR.Status_Flag_9_Y_N = 'N';

   // PAR.Status Flag 10 Y/N = CND.No
   PAR.Status_Flag_10_Y_N = 'N';

   // PAR.Status Flag 11 Y/N = CND.No
   PAR.Status_Flag_11_Y_N = 'N';

   // PAR.Status Flag 12 Y/N = CND.No
   PAR.Status_Flag_12_Y_N = 'N';

   // PAR.Status Flag 13 Y/N = CND.No
   PAR.Status_Flag_13_Y_N = 'N';

   // PAR.Status Flag 14 Y/N = CND.No
   PAR.Status_Flag_14_Y_N = 'N';

   // PAR.Status Flag 15 Y/N = CND.No
   PAR.Status_Flag_15_Y_N = 'N';

   // PAR.Status Flag 16 Y/N = CND.No
   PAR.Status_Flag_16_Y_N = 'N';

   // PAR.Status Flag 17 Y/N = CND.No
   PAR.Status_Flag_17_Y_N = 'N';

   // PAR.Status Flag 18 Y/N = CND.No
   PAR.Status_Flag_18_Y_N = 'N';

   // PAR.Status Flag 19 Y/N = CND.No
   PAR.Status_Flag_19_Y_N = 'N';

   // PAR.Status Flag 20 Y/N = CND.No
   PAR.Status_Flag_20_Y_N = 'N';

   // PAR.Status Flag 21 Y/N = CND.No
   PAR.Status_Flag_21_Y_N = 'N';

   //?USER: Process Data record

   //?Quit:  Available Ship Date > Day 21
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PS Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   //?Calculate Availability
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calcualte PA w/Unit Weight
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   //?Calculate Availability
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate PA w/ Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

  }

 }

 // LCL.Status - Y or N = CND.yes
 LCL.Status_Y_or_N = 'Y';

 //?Check for matching warehouse code and warehouse type
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Warehouse Code Blank
 IF PAR.Warehouse_Code = *BLANK;

 // AND PAR.Warehouse Type EQ DB1.Warehouse Type
 AND PAR.Warehouse_Type = DB1.Warehouse_Type;

 EXECUTE FUNCTION(RTV PA Tot SD-21      IF) TYPE(EXCINTFUN)                      AC1652249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(DB1.Warehouse_Type);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?FP1054 5/20/09 made inventory parms "B"oth, they were Neither
  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  {
   //?Execute internal function

   //?Retrieve Inventory and Scheduled Shipments
   EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
   PARAMETER(PAR.Company_Number);
   PARAMETER('S');
   PARAMETER(JOB.*Job_date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Inventory / Sales if Chilling Time > 0
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calculate Quantity based on Unit Weight or Pieces
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   //?Inventory / Sales if Chilling Time > 0
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate Quantity based on Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   ENDIF;

   //?Total Inventory
   CASE;

   // IF PAR.Avail Dsp/Prt Type USR is Display
   IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

   // Total Inventory
   PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
   + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )
   + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Dtl SD-21 WHS  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1652262;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_8_Adjustments_USR);
  PARAMETER(PAR.Day_9_Adjustments_USR);
  PARAMETER(PAR.Day_10_Adjustments_USR);
  PARAMETER(PAR.Day_11_Adjustments_USR);
  PARAMETER(PAR.Day_12_Adjustments_USR);
  PARAMETER(PAR.Day_13_Adjustments_USR);
  PARAMETER(PAR.Day_14_Adjustments_USR);
  PARAMETER(PAR.Day_15_Adjustments_USR);
  PARAMETER(PAR.Day_16_Adjustments_USR);
  PARAMETER(PAR.Day_17_Adjustments_USR);
  PARAMETER(PAR.Day_18_Adjustments_USR);
  PARAMETER(PAR.Day_19_Adjustments_USR);
  PARAMETER(PAR.Day_20_Adjustments_USR);
  PARAMETER(PAR.Day_21_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   //?fp1054 4/28/09 include whse txfr in PROD calc
   // PAR.Status Flag 1  Y/N = CND.No
   PAR.Status_Flag_1_Y_N = 'N';

   // PAR.Status Flag 2  Y/N = CND.No
   PAR.Status_Flag_2_Y_N = 'N';

   // PAR.Status Flag 3  Y/N = CND.No
   PAR.Status_Flag_3_Y_N = 'N';

   // PAR.Status Flag 4  Y/N = CND.no
   PAR.Status_Flag_4_Y_N = 'N';

   // PAR.Status Flag 5  Y/N = CND.No
   PAR.Status_Flag_5_Y_N = 'N';

   // PAR.Status Flag 6  Y/N = CND.No
   PAR.Status_Flag_6_Y_N = 'N';

   // PAR.Status Flag 7  Y/N = CND.No
   PAR.Status_Flag_7_Y_N = 'N';

   // PAR.Status Flag 8  Y/N = CND.No
   PAR.Status_Flag_8_Y_N = 'N';

   // PAR.Status Flag 9  Y/N = CND.No
   PAR.Status_Flag_9_Y_N = 'N';

   // PAR.Status Flag 10 Y/N = CND.No
   PAR.Status_Flag_10_Y_N = 'N';

   // PAR.Status Flag 11 Y/N = CND.No
   PAR.Status_Flag_11_Y_N = 'N';

   // PAR.Status Flag 12 Y/N = CND.No
   PAR.Status_Flag_12_Y_N = 'N';

   // PAR.Status Flag 13 Y/N = CND.No
   PAR.Status_Flag_13_Y_N = 'N';

   // PAR.Status Flag 14 Y/N = CND.No
   PAR.Status_Flag_14_Y_N = 'N';

   // PAR.Status Flag 15 Y/N = CND.No
   PAR.Status_Flag_15_Y_N = 'N';

   // PAR.Status Flag 16 Y/N = CND.No
   PAR.Status_Flag_16_Y_N = 'N';

   // PAR.Status Flag 17 Y/N = CND.No
   PAR.Status_Flag_17_Y_N = 'N';

   // PAR.Status Flag 18 Y/N = CND.No
   PAR.Status_Flag_18_Y_N = 'N';

   // PAR.Status Flag 19 Y/N = CND.No
   PAR.Status_Flag_19_Y_N = 'N';

   // PAR.Status Flag 20 Y/N = CND.No
   PAR.Status_Flag_20_Y_N = 'N';

   // PAR.Status Flag 21 Y/N = CND.No
   PAR.Status_Flag_21_Y_N = 'N';

   //?USER: Process Data record

   //?Quit:  Available Ship Date > Day 21
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PS Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   //?Calculate Availability
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calcualte PA w/Unit Weight
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   //?Calculate Availability
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate PA w/ Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

  }

 }

 // LCL.Status - Y or N = CND.yes
 LCL.Status_Y_or_N = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code EQ DB1.Warehouse Code
 IF PAR.Warehouse_Code = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV PA Tot SD-21      IF) TYPE(EXCINTFUN)                      AC1652249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(DB1.Warehouse_Type);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?FP1054 5/20/09 made inventory parms "B"oth, they were Neither
  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  {
   //?Execute internal function

   //?Retrieve Inventory and Scheduled Shipments
   EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
   PARAMETER(PAR.Company_Number);
   PARAMETER('S');
   PARAMETER(JOB.*Job_date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Inventory / Sales if Chilling Time > 0
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calculate Quantity based on Unit Weight or Pieces
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   //?Inventory / Sales if Chilling Time > 0
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate Quantity based on Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   ENDIF;

   //?Total Inventory
   CASE;

   // IF PAR.Avail Dsp/Prt Type USR is Display
   IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

   // Total Inventory
   PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
   + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )
   + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Dtl SD-21 WHS  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1652262;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_8_Adjustments_USR);
  PARAMETER(PAR.Day_9_Adjustments_USR);
  PARAMETER(PAR.Day_10_Adjustments_USR);
  PARAMETER(PAR.Day_11_Adjustments_USR);
  PARAMETER(PAR.Day_12_Adjustments_USR);
  PARAMETER(PAR.Day_13_Adjustments_USR);
  PARAMETER(PAR.Day_14_Adjustments_USR);
  PARAMETER(PAR.Day_15_Adjustments_USR);
  PARAMETER(PAR.Day_16_Adjustments_USR);
  PARAMETER(PAR.Day_17_Adjustments_USR);
  PARAMETER(PAR.Day_18_Adjustments_USR);
  PARAMETER(PAR.Day_19_Adjustments_USR);
  PARAMETER(PAR.Day_20_Adjustments_USR);
  PARAMETER(PAR.Day_21_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   //?fp1054 4/28/09 include whse txfr in PROD calc
   // PAR.Status Flag 1  Y/N = CND.No
   PAR.Status_Flag_1_Y_N = 'N';

   // PAR.Status Flag 2  Y/N = CND.No
   PAR.Status_Flag_2_Y_N = 'N';

   // PAR.Status Flag 3  Y/N = CND.No
   PAR.Status_Flag_3_Y_N = 'N';

   // PAR.Status Flag 4  Y/N = CND.no
   PAR.Status_Flag_4_Y_N = 'N';

   // PAR.Status Flag 5  Y/N = CND.No
   PAR.Status_Flag_5_Y_N = 'N';

   // PAR.Status Flag 6  Y/N = CND.No
   PAR.Status_Flag_6_Y_N = 'N';

   // PAR.Status Flag 7  Y/N = CND.No
   PAR.Status_Flag_7_Y_N = 'N';

   // PAR.Status Flag 8  Y/N = CND.No
   PAR.Status_Flag_8_Y_N = 'N';

   // PAR.Status Flag 9  Y/N = CND.No
   PAR.Status_Flag_9_Y_N = 'N';

   // PAR.Status Flag 10 Y/N = CND.No
   PAR.Status_Flag_10_Y_N = 'N';

   // PAR.Status Flag 11 Y/N = CND.No
   PAR.Status_Flag_11_Y_N = 'N';

   // PAR.Status Flag 12 Y/N = CND.No
   PAR.Status_Flag_12_Y_N = 'N';

   // PAR.Status Flag 13 Y/N = CND.No
   PAR.Status_Flag_13_Y_N = 'N';

   // PAR.Status Flag 14 Y/N = CND.No
   PAR.Status_Flag_14_Y_N = 'N';

   // PAR.Status Flag 15 Y/N = CND.No
   PAR.Status_Flag_15_Y_N = 'N';

   // PAR.Status Flag 16 Y/N = CND.No
   PAR.Status_Flag_16_Y_N = 'N';

   // PAR.Status Flag 17 Y/N = CND.No
   PAR.Status_Flag_17_Y_N = 'N';

   // PAR.Status Flag 18 Y/N = CND.No
   PAR.Status_Flag_18_Y_N = 'N';

   // PAR.Status Flag 19 Y/N = CND.No
   PAR.Status_Flag_19_Y_N = 'N';

   // PAR.Status Flag 20 Y/N = CND.No
   PAR.Status_Flag_20_Y_N = 'N';

   // PAR.Status Flag 21 Y/N = CND.No
   PAR.Status_Flag_21_Y_N = 'N';

   //?USER: Process Data record

   //?Quit:  Available Ship Date > Day 21
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PS Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   //?Calculate Availability
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calcualte PA w/Unit Weight
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   //?Calculate Availability
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate PA w/ Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

  }

 }

 // LCL.Status - Y or N = CND.yes
 LCL.Status_Y_or_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?LEAVE NEGATIVE E1885 PER CURT 12/10/13
 //?Accumulate Availability
 CASE;

 // IF LCL.Status - Y or N is yes
 IF LCL.Status_Y_or_N = 'Y';

 // PAR.Day 1 Avail Total     USR = PAR.Day 1 Avail Total     USR + PAR.Day 1 Availability USR
 PAR.Day_1_Avail_Total_USR = PAR.Day_1_Avail_Total_USR + PAR.Day_1_Availability_USR;

 // PAR.Day 2 Avail Total     USR = PAR.Day 2 Avail Total     USR + PAR.Day 2 Availability USR
 PAR.Day_2_Avail_Total_USR = PAR.Day_2_Avail_Total_USR + PAR.Day_2_Availability_USR;

 // PAR.Day 3 Avail Total     USR = PAR.Day 3 Avail Total     USR + PAR.Day 3 Availability USR
 PAR.Day_3_Avail_Total_USR = PAR.Day_3_Avail_Total_USR + PAR.Day_3_Availability_USR;

 // PAR.Day 4 Avail Total     USR = PAR.Day 4 Avail Total     USR + PAR.Day 4 Availability USR
 PAR.Day_4_Avail_Total_USR = PAR.Day_4_Avail_Total_USR + PAR.Day_4_Availability_USR;

 // PAR.Day 5 Avail Total     USR = PAR.Day 5 Avail Total     USR + PAR.Day 5 Availability USR
 PAR.Day_5_Avail_Total_USR = PAR.Day_5_Avail_Total_USR + PAR.Day_5_Availability_USR;

 // PAR.Day 6 Avail Total     USR = PAR.Day 6 Avail Total     USR + PAR.Day 6 Availability USR
 PAR.Day_6_Avail_Total_USR = PAR.Day_6_Avail_Total_USR + PAR.Day_6_Availability_USR;

 // PAR.Day 7 Avail Total     USR = PAR.Day 7 Avail Total     USR + PAR.Day 7 Availability USR
 PAR.Day_7_Avail_Total_USR = PAR.Day_7_Avail_Total_USR + PAR.Day_7_Availability_USR;

 // PAR.Day 8 Avail Total     USR = PAR.Day 8 Avail Total     USR + PAR.Day 8 Availability USR
 PAR.Day_8_Avail_Total_USR = PAR.Day_8_Avail_Total_USR + PAR.Day_8_Availability_USR;

 // PAR.Day 9 Avail Total     USR = PAR.Day 9 Avail Total     USR + PAR.Day 9 Availability USR
 PAR.Day_9_Avail_Total_USR = PAR.Day_9_Avail_Total_USR + PAR.Day_9_Availability_USR;

 // PAR.Day 10 Avail Total    USR = PAR.Day 10 Avail Total    USR + PAR.Day 10 Availability USR
 PAR.Day_10_Avail_Total_USR = PAR.Day_10_Avail_Total_USR + PAR.Day_10_Availability_USR;

 // PAR.Day 11 Avail Total    USR = PAR.Day 11 Avail Total    USR + PAR.Day 11 Availability USR
 PAR.Day_11_Avail_Total_USR = PAR.Day_11_Avail_Total_USR + PAR.Day_11_Availability_USR;

 // PAR.Day 12 Avail Total    USR = PAR.Day 12 Avail Total    USR + PAR.Day 12 Availability USR
 PAR.Day_12_Avail_Total_USR = PAR.Day_12_Avail_Total_USR + PAR.Day_12_Availability_USR;

 // PAR.Day 13 Avail Total    USR = PAR.Day 13 Avail Total    USR + PAR.Day 13 Availability USR
 PAR.Day_13_Avail_Total_USR = PAR.Day_13_Avail_Total_USR + PAR.Day_13_Availability_USR;

 // PAR.Day 14 Avail Total    USR = PAR.Day 14 Avail Total    USR + PAR.Day 14 Availability USR
 PAR.Day_14_Avail_Total_USR = PAR.Day_14_Avail_Total_USR + PAR.Day_14_Availability_USR;

 // PAR.Day 15 Avail Total    USR = PAR.Day 15 Avail Total    USR + PAR.Day 15 Availability USR
 PAR.Day_15_Avail_Total_USR = PAR.Day_15_Avail_Total_USR + PAR.Day_15_Availability_USR;

 // PAR.Day 16 Avail Total    USR = PAR.Day 16 Avail Total    USR + PAR.Day 16 Availability USR
 PAR.Day_16_Avail_Total_USR = PAR.Day_16_Avail_Total_USR + PAR.Day_16_Availability_USR;

 // PAR.Day 17 Avail Total    USR = PAR.Day 17 Avail Total    USR + PAR.Day 17 Availability USR
 PAR.Day_17_Avail_Total_USR = PAR.Day_17_Avail_Total_USR + PAR.Day_17_Availability_USR;

 // PAR.Day 18 Avail Total    USR = PAR.Day 18 Avail Total    USR + PAR.Day 18 Availability USR
 PAR.Day_18_Avail_Total_USR = PAR.Day_18_Avail_Total_USR + PAR.Day_18_Availability_USR;

 // PAR.Day 19 Avail Total    USR = PAR.Day 19 Avail Total    USR + PAR.Day 19 Availability USR
 PAR.Day_19_Avail_Total_USR = PAR.Day_19_Avail_Total_USR + PAR.Day_19_Availability_USR;

 // PAR.Day 20 Avail Total    USR = PAR.Day 20 Avail Total    USR + PAR.Day 20 Availability USR
 PAR.Day_20_Avail_Total_USR = PAR.Day_20_Avail_Total_USR + PAR.Day_20_Availability_USR;

 // PAR.Day 21 Avail Total    USR = PAR.Day 21 Avail Total    USR + PAR.Day 21 Availability USR
 PAR.Day_21_Avail_Total_USR = PAR.Day_21_Avail_Total_USR + PAR.Day_21_Availability_USR;

 ENDIF;

 //?Cumulative Total
 CASE;

 // IF LCL.Status - Y or N is yes
 IF LCL.Status_Y_or_N = 'Y';

 // PAR.Day 1 ATS Qty USR = PAR.Day 1 Availability USR
 PAR.Day_1_ATS_Qty_USR = PAR.Day_1_Availability_USR;

 // PAR.Day 2 ATS Qty USR = PAR.Day 1 ATS Qty USR + PAR.Day 2 Availability USR
 PAR.Day_2_ATS_Qty_USR = PAR.Day_1_ATS_Qty_USR + PAR.Day_2_Availability_USR;

 // PAR.Day 3 ATS Qty USR = PAR.Day 2 ATS Qty USR + PAR.Day 3 Availability USR
 PAR.Day_3_ATS_Qty_USR = PAR.Day_2_ATS_Qty_USR + PAR.Day_3_Availability_USR;

 // PAR.Day 4 ATS Qty USR = PAR.Day 3 ATS Qty USR + PAR.Day 4 Availability USR
 PAR.Day_4_ATS_Qty_USR = PAR.Day_3_ATS_Qty_USR + PAR.Day_4_Availability_USR;

 // PAR.Day 5 ATS Qty USR = PAR.Day 4 ATS Qty USR + PAR.Day 5 Availability USR
 PAR.Day_5_ATS_Qty_USR = PAR.Day_4_ATS_Qty_USR + PAR.Day_5_Availability_USR;

 // PAR.Day 6 ATS Qty USR = PAR.Day 5 ATS Qty USR + PAR.Day 6 Availability USR
 PAR.Day_6_ATS_Qty_USR = PAR.Day_5_ATS_Qty_USR + PAR.Day_6_Availability_USR;

 // PAR.Day 7 ATS Qty USR = PAR.Day 6 ATS Qty USR + PAR.Day 7 Availability USR
 PAR.Day_7_ATS_Qty_USR = PAR.Day_6_ATS_Qty_USR + PAR.Day_7_Availability_USR;

 // PAR.Day 8 ATS Qty USR = PAR.Day 7 ATS Qty USR + PAR.Day 8 Availability USR
 PAR.Day_8_ATS_Qty_USR = PAR.Day_7_ATS_Qty_USR + PAR.Day_8_Availability_USR;

 // PAR.Day 9 ATS Qty USR = PAR.Day 8 ATS Qty USR + PAR.Day 9 Availability USR
 PAR.Day_9_ATS_Qty_USR = PAR.Day_8_ATS_Qty_USR + PAR.Day_9_Availability_USR;

 // PAR.Day 10 ATS Qty USR = PAR.Day 9 ATS Qty USR + PAR.Day 10 Availability USR
 PAR.Day_10_ATS_Qty_USR = PAR.Day_9_ATS_Qty_USR + PAR.Day_10_Availability_USR;

 // PAR.Day 11 ATS Qty USR = PAR.Day 10 ATS Qty USR + PAR.Day 11 Availability USR
 PAR.Day_11_ATS_Qty_USR = PAR.Day_10_ATS_Qty_USR + PAR.Day_11_Availability_USR;

 // PAR.Day 12 ATS Qty USR = PAR.Day 11 ATS Qty USR + PAR.Day 12 Availability USR
 PAR.Day_12_ATS_Qty_USR = PAR.Day_11_ATS_Qty_USR + PAR.Day_12_Availability_USR;

 // PAR.Day 13 ATS Qty USR = PAR.Day 12 ATS Qty USR + PAR.Day 13 Availability USR
 PAR.Day_13_ATS_Qty_USR = PAR.Day_12_ATS_Qty_USR + PAR.Day_13_Availability_USR;

 // PAR.Day 14 ATS Qty USR = PAR.Day 13 ATS Qty USR + PAR.Day 14 Availability USR
 PAR.Day_14_ATS_Qty_USR = PAR.Day_13_ATS_Qty_USR + PAR.Day_14_Availability_USR;

 // PAR.Day 15 ATS Qty USR = PAR.Day 14 ATS Qty USR + PAR.Day 15 Availability USR
 PAR.Day_15_ATS_Qty_USR = PAR.Day_14_ATS_Qty_USR + PAR.Day_15_Availability_USR;

 // PAR.Day 16 ATS Qty USR = PAR.Day 15 ATS Qty USR + PAR.Day 16 Availability USR
 PAR.Day_16_ATS_Qty_USR = PAR.Day_15_ATS_Qty_USR + PAR.Day_16_Availability_USR;

 // PAR.Day 17 ATS Qty USR = PAR.Day 16 ATS Qty USR + PAR.Day 17 Availability USR
 PAR.Day_17_ATS_Qty_USR = PAR.Day_16_ATS_Qty_USR + PAR.Day_17_Availability_USR;

 // PAR.Day 18 ATS Qty USR = PAR.Day 17 ATS Qty USR + PAR.Day 18 Availability USR
 PAR.Day_18_ATS_Qty_USR = PAR.Day_17_ATS_Qty_USR + PAR.Day_18_Availability_USR;

 // PAR.Day 19 ATS Qty USR = PAR.Day 18 ATS Qty USR + PAR.Day 19 Availability USR
 PAR.Day_19_ATS_Qty_USR = PAR.Day_18_ATS_Qty_USR + PAR.Day_19_Availability_USR;

 // PAR.Day 20 ATS Qty USR = PAR.Day 19 ATS Qty USR + PAR.Day 20 Availability USR
 PAR.Day_20_ATS_Qty_USR = PAR.Day_19_ATS_Qty_USR + PAR.Day_20_Availability_USR;

 // PAR.Day 21 ATS Qty USR = PAR.Day 20 ATS Qty USR + PAR.Day 21 Availability USR
 PAR.Day_21_ATS_Qty_USR = PAR.Day_20_ATS_Qty_USR + PAR.Day_21_Availability_USR;

 ENDIF;

 // LCL.Status - Y or N = CND.no
 LCL.Status_Y_or_N = 'N';

}


//?-----
//?5/20/09 RMC FP1054 take inventory out of daily bucket and total for rcd.
// PAR.Day 1 Availability USR = PAR.Day 1 Availability USR - PAR.Day 1 Inventory USR
PAR.Day_1_Availability_USR = PAR.Day_1_Availability_USR - PAR.Day_1_Inventory_USR;

// PAR.Day 2 Availability USR = PAR.Day 2 Availability USR - PAR.Day 2 Inventory USR
PAR.Day_2_Availability_USR = PAR.Day_2_Availability_USR - PAR.Day_2_Inventory_USR;

// PAR.Day 3 Availability USR = PAR.Day 3 Availability USR - PAR.Day 3 Inventory USR
PAR.Day_3_Availability_USR = PAR.Day_3_Availability_USR - PAR.Day_3_Inventory_USR;

// PAR.Day 4 Availability USR = PAR.Day 4 Availability USR - PAR.Day 4 Inventory USR
PAR.Day_4_Availability_USR = PAR.Day_4_Availability_USR - PAR.Day_4_Inventory_USR;

// PAR.Day 5 Availability USR = PAR.Day 5 Availability USR - PAR.Day 5 Inventory USR
PAR.Day_5_Availability_USR = PAR.Day_5_Availability_USR - PAR.Day_5_Inventory_USR;

// PAR.Day 6 Availability USR = PAR.Day 6 Availability USR - PAR.Day 6 Inventory USR
PAR.Day_6_Availability_USR = PAR.Day_6_Availability_USR - PAR.Day_6_Inventory_USR;

// PAR.Day 7 Availability USR = PAR.Day 7 Availability USR - PAR.Day 7 Inventory USR
PAR.Day_7_Availability_USR = PAR.Day_7_Availability_USR - PAR.Day_7_Inventory_USR;

//?Day 1 Availability USR < 0
CASE;

// IF PAR.Day 1 Availability USR is LT Zero
IF PAR.Day_1_Availability_USR < *ZERO;

// PAR.Day 1 Availability USR = CON.*ZERO
PAR.Day_1_Availability_USR = *ZERO;

ENDIF;

//?Day 2 Availability USR < 0
CASE;

// IF PAR.Day 2 Availability USR is LT Zero
IF PAR.Day_2_Availability_USR < *ZERO;

// PAR.Day 2 Availability USR = CON.*ZERO
PAR.Day_2_Availability_USR = *ZERO;

ENDIF;

//?Day 3 Availability USR < 0
CASE;

// IF PAR.Day 3 Availability USR is LT Zero
IF PAR.Day_3_Availability_USR < *ZERO;

// PAR.Day 3 Availability USR = CON.*ZERO
PAR.Day_3_Availability_USR = *ZERO;

ENDIF;

//?Day 4 Availability USR < 0
CASE;

// IF PAR.Day 4 Availability USR is LT Zero
IF PAR.Day_4_Availability_USR < *ZERO;

// PAR.Day 4 Availability USR = CON.*ZERO
PAR.Day_4_Availability_USR = *ZERO;

ENDIF;

//?Day 5 Availability USR < 0
CASE;

// IF PAR.Day 5 Availability USR is LT Zero
IF PAR.Day_5_Availability_USR < *ZERO;

// PAR.Day 5 Availability USR = CON.*ZERO
PAR.Day_5_Availability_USR = *ZERO;

ENDIF;

//?Day 6 Availability USR < 0
CASE;

// IF PAR.Day 6 Availability USR is LT Zero
IF PAR.Day_6_Availability_USR < *ZERO;

// PAR.Day 6 Availability USR = CON.*ZERO
PAR.Day_6_Availability_USR = *ZERO;

ENDIF;

//?Day 7 Availability USR < 0
CASE;

// IF PAR.Day 7 Availability USR is LT Zero
IF PAR.Day_7_Availability_USR < *ZERO;

// PAR.Day 7 Availability USR = CON.*ZERO
PAR.Day_7_Availability_USR = *ZERO;

ENDIF;

//?FP1054 Inventory Total
// RCD.Day 8 Inventory Total USR = PAR.Day 8 Inventory USR
RCD.Day_8_Inventory_Total_USR = PAR.Day_8_Inventory_USR;

//?FP1054 Inventory Avail = inventory total - sales
// Call program Rtv Plan Prod Sts     XF.
CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Plan_Production_Sts);

CASE;

// IF LCL.Plan Production Sts is No
IF LCL.Plan_Production_Sts = 'N';

EXECUTE FUNCTION(Rtv Sched Ship f/Itm  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1948324;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.OD_Quantity_Inv_Sched);
PARAMETER(LCL.OD_Weight_Inv_Sched);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Header Status is Not Comp/Canc/Conf
 IF LCL.Header_Status = 'L'/'A'/'E'/'H';

 // AND LCL.Billing Activity Type is Invoice or Transfer
 AND LCL.Billing_Activity_Type = '1'/'4';

 // PAR.OD Quantity Inv Sched = PAR.OD Quantity Inv Sched + DB1.Quantity Scheduled
 PAR.OD_Quantity_Inv_Sched = PAR.OD_Quantity_Inv_Sched + DB1.Quantity_Scheduled;

 // PAR.OD Weight Inv Sched = PAR.OD Weight Inv Sched + DB1.Weight Scheduled
 PAR.OD_Weight_Inv_Sched = PAR.OD_Weight_Inv_Sched + DB1.Weight_Scheduled;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Ord Dtl Sch-AllDysRT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1816857;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.OD_Quantity_Inv_Sched);
PARAMETER(LCL.OD_Weight_Inv_Sched);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.OD Quantity Inv Sched = PAR.OD Quantity Inv Sched + DB1.OD Quantity Inv Sched
 PAR.OD_Quantity_Inv_Sched = PAR.OD_Quantity_Inv_Sched + DB1.OD_Quantity_Inv_Sched;

 // PAR.OD Weight Inv Sched = PAR.OD Weight Inv Sched + DB1.OD Weight Inv Sched
 PAR.OD_Weight_Inv_Sched = PAR.OD_Weight_Inv_Sched + DB1.OD_Weight_Inv_Sched;

}


ENDIF;

//?Chg INV from primary/load size
CASE;

// IF CTL.Primary/Load Sts USR is Load Size
IF CTL.Primary_Load_Sts_USR = 'L';

// AND CTL.Load Size USR is GT Zero
AND CTL.Load_Size_USR > *ZERO;

// LCL.OD Weight Unused 1 = LCL.OD Weight Inv Sched / CTL.Load Size USR *
LCL.OD_Unused_weight_1 = LCL.OD_Weight_Inv_Sched / CTL.Load_Size_USR;

//?Chg INV from primary/load size
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.OD Weight Unused 1 = LCL.OD Quantity Inv Sched
LCL.OD_Unused_weight_1 = LCL.OD_Quantity_Inv_Sched;

ENDIF;

// RCD.Day 8 Inventory USR = RCD.Day 8 Inventory Total USR - LCL.OD Weight Unused 1
RCD.Day_8_Inventory_USR = RCD.Day_8_Inventory_Total_USR - LCL.OD_Unused_weight_1;

//?-----
//?4/11/07 PKD Include Sunday also
//?Setup fields according to week: 1=Current, 2=Next, 3=Third Week
CASE;

// IF PAR.Week Number is One
IF PAR.Week_Number = 1;

// CTL.Avail Ship Date 1 USR = PAR.Avail Ship Date 1 USR
CTL.Avail_Ship_Date_1_USR = PAR.Avail_Ship_Date_1_USR;

// CTL.Avail Ship Date 2 USR = PAR.Avail Ship Date 2 USR
CTL.Avail_Ship_Date_2_USR = PAR.Avail_Ship_Date_2_USR;

// CTL.Avail Ship Date 3 USR = PAR.Avail Ship Date 3 USR
CTL.Avail_Ship_Date_3_USR = PAR.Avail_Ship_Date_3_USR;

// CTL.Avail Ship Date 4 USR = PAR.Avail Ship Date 4 USR
CTL.Avail_Ship_Date_4_USR = PAR.Avail_Ship_Date_4_USR;

// CTL.Avail Ship Date 5 USR = PAR.Avail Ship Date 5 USR
CTL.Avail_Ship_Date_5_USR = PAR.Avail_Ship_Date_5_USR;

// CTL.Avail Ship Date 6 USR = PAR.Avail Ship Date 6 USR
CTL.Avail_Ship_Date_6_USR = PAR.Avail_Ship_Date_6_USR;

// CTL.Avail Ship Date 7 USR = PAR.Avail Ship Date 7 USR
CTL.Avail_Ship_Date_7_USR = PAR.Avail_Ship_Date_7_USR;

// RCD.Day 1 Availability USR = PAR.Day 1 Availability USR
RCD.Day_1_Availability_USR = PAR.Day_1_Availability_USR;

// RCD.Day 2 Availability USR = PAR.Day 2 Availability USR
RCD.Day_2_Availability_USR = PAR.Day_2_Availability_USR;

// RCD.Day 3 Availability USR = PAR.Day 3 Availability USR
RCD.Day_3_Availability_USR = PAR.Day_3_Availability_USR;

// RCD.Day 4 Availability USR = PAR.Day 4 Availability USR
RCD.Day_4_Availability_USR = PAR.Day_4_Availability_USR;

// RCD.Day 5 Availability USR = PAR.Day 5 Availability USR
RCD.Day_5_Availability_USR = PAR.Day_5_Availability_USR;

// RCD.Day 6 Availability USR = PAR.Day 6 Availability USR
RCD.Day_6_Availability_USR = PAR.Day_6_Availability_USR;

// RCD.Day 7 Availability USR = PAR.Day 7 Availability USR
RCD.Day_7_Availability_USR = PAR.Day_7_Availability_USR;

// RCD.Day 1 ATS Qty USR = PAR.Day 1 ATS Qty USR
RCD.Day_1_ATS_Qty_USR = PAR.Day_1_ATS_Qty_USR;

// RCD.Day 2 ATS Qty USR = PAR.Day 2 ATS Qty USR
RCD.Day_2_ATS_Qty_USR = PAR.Day_2_ATS_Qty_USR;

// RCD.Day 3 ATS Qty USR = PAR.Day 3 ATS Qty USR
RCD.Day_3_ATS_Qty_USR = PAR.Day_3_ATS_Qty_USR;

// RCD.Day 4 ATS Qty USR = PAR.Day 4 ATS Qty USR
RCD.Day_4_ATS_Qty_USR = PAR.Day_4_ATS_Qty_USR;

// RCD.Day 5 ATS Qty USR = PAR.Day 5 ATS Qty USR
RCD.Day_5_ATS_Qty_USR = PAR.Day_5_ATS_Qty_USR;

// RCD.Day 6 ATS Qty USR = PAR.Day 6 ATS Qty USR
RCD.Day_6_ATS_Qty_USR = PAR.Day_6_ATS_Qty_USR;

// RCD.Day 7 ATS Qty USR = PAR.Day 7 ATS Qty USR
RCD.Day_7_ATS_Qty_USR = PAR.Day_7_ATS_Qty_USR;

//?Setup fields according to week: 1=Current, 2=Next, 3=Third Week
// IF PAR.Week Number is Two
IF PAR.Week_Number = 2;

// CTL.Avail Ship Date 1 USR = PAR.Avail Ship Date 8 USR
CTL.Avail_Ship_Date_1_USR = PAR.Avail_Ship_Date_8_USR;

// CTL.Avail Ship Date 2 USR = PAR.Avail Ship Date 9 USR
CTL.Avail_Ship_Date_2_USR = PAR.Avail_Ship_Date_9_USR;

// CTL.Avail Ship Date 3 USR = PAR.Avail Ship Date 10 USR
CTL.Avail_Ship_Date_3_USR = PAR.Avail_Ship_Date_10_USR;

// CTL.Avail Ship Date 4 USR = PAR.Avail Ship Date 11 USR
CTL.Avail_Ship_Date_4_USR = PAR.Avail_Ship_Date_11_USR;

// CTL.Avail Ship Date 5 USR = PAR.Avail Ship Date 12 USR
CTL.Avail_Ship_Date_5_USR = PAR.Avail_Ship_Date_12_USR;

// CTL.Avail Ship Date 6 USR = PAR.Avail Ship Date 13 USR
CTL.Avail_Ship_Date_6_USR = PAR.Avail_Ship_Date_13_USR;

// CTL.Avail Ship Date 7 USR = PAR.Avail Ship Date 14 USR
CTL.Avail_Ship_Date_7_USR = PAR.Avail_Ship_Date_14_USR;

// RCD.Day 1 Availability USR = PAR.Day 8 Availability USR
RCD.Day_1_Availability_USR = PAR.Day_8_Availability_USR;

// RCD.Day 2 Availability USR = PAR.Day 9 Availability USR
RCD.Day_2_Availability_USR = PAR.Day_9_Availability_USR;

// RCD.Day 3 Availability USR = PAR.Day 10 Availability USR
RCD.Day_3_Availability_USR = PAR.Day_10_Availability_USR;

// RCD.Day 4 Availability USR = PAR.Day 11 Availability USR
RCD.Day_4_Availability_USR = PAR.Day_11_Availability_USR;

// RCD.Day 5 Availability USR = PAR.Day 12 Availability USR
RCD.Day_5_Availability_USR = PAR.Day_12_Availability_USR;

// RCD.Day 6 Availability USR = PAR.Day 13 Availability USR
RCD.Day_6_Availability_USR = PAR.Day_13_Availability_USR;

// RCD.Day 7 Availability USR = PAR.Day 14 Availability USR
RCD.Day_7_Availability_USR = PAR.Day_14_Availability_USR;

// RCD.Day 1 ATS Qty USR = PAR.Day 8 ATS Qty USR
RCD.Day_1_ATS_Qty_USR = PAR.Day_8_ATS_Qty_USR;

// RCD.Day 2 ATS Qty USR = PAR.Day 9 ATS Qty USR
RCD.Day_2_ATS_Qty_USR = PAR.Day_9_ATS_Qty_USR;

// RCD.Day 3 ATS Qty USR = PAR.Day 10 ATS Qty USR
RCD.Day_3_ATS_Qty_USR = PAR.Day_10_ATS_Qty_USR;

// RCD.Day 4 ATS Qty USR = PAR.Day 11 ATS Qty USR
RCD.Day_4_ATS_Qty_USR = PAR.Day_11_ATS_Qty_USR;

// RCD.Day 5 ATS Qty USR = PAR.Day 12 ATS Qty USR
RCD.Day_5_ATS_Qty_USR = PAR.Day_12_ATS_Qty_USR;

// RCD.Day 6 ATS Qty USR = PAR.Day 13 ATS Qty USR
RCD.Day_6_ATS_Qty_USR = PAR.Day_13_ATS_Qty_USR;

// RCD.Day 7 ATS Qty USR = PAR.Day 14 ATS Qty USR
RCD.Day_7_ATS_Qty_USR = PAR.Day_14_ATS_Qty_USR;

//?Setup fields according to week: 1=Current, 2=Next, 3=Third Week
// IF PAR.Week Number is Three
IF PAR.Week_Number = 3;

// CTL.Avail Ship Date 1 USR = PAR.Avail Ship Date 15 USR
CTL.Avail_Ship_Date_1_USR = PAR.Avail_Ship_Date_15_USR;

// CTL.Avail Ship Date 2 USR = PAR.Avail Ship Date 16 USR
CTL.Avail_Ship_Date_2_USR = PAR.Avail_Ship_Date_16_USR;

// CTL.Avail Ship Date 3 USR = PAR.Avail Ship Date 17 USR
CTL.Avail_Ship_Date_3_USR = PAR.Avail_Ship_Date_17_USR;

// CTL.Avail Ship Date 4 USR = PAR.Avail Ship Date 18 USR
CTL.Avail_Ship_Date_4_USR = PAR.Avail_Ship_Date_18_USR;

// CTL.Avail Ship Date 5 USR = PAR.Avail Ship Date 19 USR
CTL.Avail_Ship_Date_5_USR = PAR.Avail_Ship_Date_19_USR;

// CTL.Avail Ship Date 6 USR = PAR.Avail Ship Date 20 USR
CTL.Avail_Ship_Date_6_USR = PAR.Avail_Ship_Date_20_USR;

// CTL.Avail Ship Date 7 USR = PAR.Avail Ship Date 21 USR
CTL.Avail_Ship_Date_7_USR = PAR.Avail_Ship_Date_21_USR;

// RCD.Day 1 Availability USR = PAR.Day 15 Availability USR
RCD.Day_1_Availability_USR = PAR.Day_15_Availability_USR;

// RCD.Day 2 Availability USR = PAR.Day 16 Availability USR
RCD.Day_2_Availability_USR = PAR.Day_16_Availability_USR;

// RCD.Day 3 Availability USR = PAR.Day 17 Availability USR
RCD.Day_3_Availability_USR = PAR.Day_17_Availability_USR;

// RCD.Day 4 Availability USR = PAR.Day 18 Availability USR
RCD.Day_4_Availability_USR = PAR.Day_18_Availability_USR;

// RCD.Day 5 Availability USR = PAR.Day 19 Availability USR
RCD.Day_5_Availability_USR = PAR.Day_19_Availability_USR;

// RCD.Day 6 Availability USR = PAR.Day 20 Availability USR
RCD.Day_6_Availability_USR = PAR.Day_20_Availability_USR;

// RCD.Day 7 Availability USR = PAR.Day 21 Availability USR
RCD.Day_7_Availability_USR = PAR.Day_21_Availability_USR;

// RCD.Day 1 ATS Qty USR = PAR.Day 15 ATS Qty USR
RCD.Day_1_ATS_Qty_USR = PAR.Day_15_ATS_Qty_USR;

// RCD.Day 2 ATS Qty USR = PAR.Day 16 ATS Qty USR
RCD.Day_2_ATS_Qty_USR = PAR.Day_16_ATS_Qty_USR;

// RCD.Day 3 ATS Qty USR = PAR.Day 17 ATS Qty USR
RCD.Day_3_ATS_Qty_USR = PAR.Day_17_ATS_Qty_USR;

// RCD.Day 4 ATS Qty USR = PAR.Day 18 ATS Qty USR
RCD.Day_4_ATS_Qty_USR = PAR.Day_18_ATS_Qty_USR;

// RCD.Day 5 ATS Qty USR = PAR.Day 19 ATS Qty USR
RCD.Day_5_ATS_Qty_USR = PAR.Day_19_ATS_Qty_USR;

// RCD.Day 6 ATS Qty USR = PAR.Day 20 ATS Qty USR
RCD.Day_6_ATS_Qty_USR = PAR.Day_20_ATS_Qty_USR;

// RCD.Day 7 ATS Qty USR = PAR.Day 21 ATS Qty USR
RCD.Day_7_ATS_Qty_USR = PAR.Day_21_ATS_Qty_USR;

ENDIF;

//?-----
//?4/11/07 PKD The total is now Day 8
// Total Available
RCD.Day_8_Availability_USR = ( ( ( ( ( RCD.Day_1_Availability_USR                                  +
+ RCD.Day_2_Availability_USR ) + RCD.Day_3_Availability_USR )                                     +
+ RCD.Day_4_Availability_USR ) + RCD.Day_5_Availability_USR )                                     +
+ RCD.Day_6_Availability_USR ) + RCD.Day_7_Availability_USR;

//?ADD Avail inv to total avail
// RCD.Day 8 Availability USR = RCD.Day 8 Availability USR + RCD.Day 8 Inventory USR
RCD.Day_8_Availability_USR = RCD.Day_8_Availability_USR + RCD.Day_8_Inventory_USR;

//?-----
//?6/24/09 FP1054 RMC show total ordered-schedule= on hold qty or load wgt
EXECUTE FUNCTION(RTV Cur Wk Held Total  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1944662;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Avail_Ship_Date_1_USR);
PARAMETER(CTL.Avail_Ship_Date_7_USR);
PARAMETER(LCL.Quantity_on_Hold_USR);
PARAMETER(LCL.Weight_Total_Need_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF DB1.Scheduled Ship Date GT PAR.Week End Date
 IF DB1.Scheduled_Ship_Date > PAR.Week_End_Date;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Detail Line Status is Avail/Entered/Held
 IF DB1.Detail_Line_Status = 'A'/'E'/'H';

 // Compute:Qty on hold
 PAR.Quantity_on_Hold_USR = ( DB1.Quantity_Ordered - DB1.Quantity_Scheduled )
 + PAR.Quantity_on_Hold_USR;

 // Compute:Wgt on hold
 PAR.Weight_Total_Need_USR = ( DB1.Weight_Ordered - DB1.Weight_Scheduled )
 + PAR.Weight_Total_Need_USR;

 ENDIF;

 ENDIF;

}


//?Chg Held from primary/load size
CASE;

// IF CTL.Primary/Load Sts USR is Load Size
IF CTL.Primary_Load_Sts_USR = 'L';

// AND CTL.Load Size USR is GT Zero
AND CTL.Load_Size_USR > *ZERO;

// RCD.Day 8 Unsch Shp Total USR = LCL.Weight Total Need USR / CTL.Load Size USR *
RCD.Day_8_Unsch_Shp_Total_USR = LCL.Weight_Total_Need_USR / CTL.Load_Size_USR;

//?Chg Held from primary/load size
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Day 8 Unsch Shp Total USR = LCL.Quantity on Hold     USR
RCD.Day_8_Unsch_Shp_Total_USR = LCL.Quantity_on_Hold_USR;

ENDIF;

ENDIF;

//?Record is selected if not warehouse code restricted, or record is found
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// LCL.Status Flag 17 Y/N = CND.No
LCL.Status_Flag_17_Y_N = 'N';

//?F4=Prompt  (Company/Warehouse/PA Group)
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Availability Group Code
IF PGM.*Cursor_field = CTL.Availability_Group_Code;

// Call program SEL Avail Group        SR.
CALL PROGRAM(SEL Avail Group        SR) ('PDDVSRR');
PARAMETER(CTL.Availability_Group_Code);

ENDIF;

ENDIF;

//?Reload Subfile
CASE;

// IF CTL.Primary/Load Sts USR NE WRK.Primary/Load Sts USR
IF CTL.Primary_Load_Sts_USR <> WRK.Primary_Load_Sts_USR;

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload Subfile
// IF CTL.Load Size USR NE WRK.Load Size USR
IF CTL.Load_Size_USR <> WRK.Load_Size_USR;

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload Subfile
// IF CTL.Warehouse Type NE WRK.Warehouse Type USR
IF CTL.Warehouse_Type <> WRK.Warehouse_Type_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Val:  Company Number
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

ENDIF;

//?Val:  Load Size
CASE;

// IF CTL.Primary/Load Sts USR is Load Size
IF CTL.Primary_Load_Sts_USR = 'L';

// AND CTL.Load Size USR is Not Entered
AND CTL.Load_Size_USR = *ZERO;

// Send error message - 'Load Size is required'
ERROR(USR2017);
MSGPARM(CTL.Load_Size_USR);

ENDIF;

//?Val:  Warehouse Code
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// CTL.Warehouse Description = CON.*ALL
CTL.Warehouse_Description = *ALL;

//?Val:  Warehouse Code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Warehouse Description is equal to blank
IF WRK.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_Code);
MSGPARM(CTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(Rtv Warehouse/type Val RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1469740;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Type);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 // PAR.Warehouse Type = DB1.Warehouse Type
 PAR.Warehouse_Type = DB1.Warehouse_Type;

 QUIT;

}


CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Val:  Warehouse type
CASE;

// IF CTL.Warehouse Type NE WRK.BLANK 1               USR
IF CTL.Warehouse_Type <> WRK.BLANK_1_USR;

// CTL.Warehouse Type Desc = Condition name of CTL.Warehouse Type
CTL.Warehouse_Type_Desc = RTVCND(CTL.Warehouse_Type);

ENDIF;

//?Print PA               F21
CASE;

// IF CTL.*CMD key is *Print 21
IF CTL.*CMD_key = '21';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Product Availability');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(2);

//?Submit Print
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Submit Print
// IF *OTHERWISE
IF *OTHERWISE;

//?Set up start of print
CASE;

// IF CTL.Avail Ship Date 1 USR LE JOB.*Job date
IF CTL.Avail_Ship_Date_1_USR <= JOB.*Job_date;

// PAR.Prod Date Alpha USR = CVTVAR(JOB.*Job date)
PAR.Prod_Date_Alpha_USR = CVTVAR(JOB.*Job_date);

//?Set up start of print
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Prod Date Alpha USR = CVTVAR(CTL.Avail Ship Date 1 USR)
PAR.Prod_Date_Alpha_USR = CVTVAR(CTL.Avail_Ship_Date_1_USR);

ENDIF;

// Execute command - 'PS Print Production Scheduled/Plan'
EXECUTE COMMAND(USR2254);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('PDKJPFR');
PARAMETER('PDKJPFR$');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Type);
PARAMETER(PAR.Prod_Date_Alpha_USR);
PARAMETER(CTL.Primary_Load_Sts_USR);
PARAMETER(CTL.Load_Size_USR);
PARAMETER(CTL.Availability_Group_Code);
PARAMETER('PRTPRDAVL');
PARAMETER(CTL.Print_Zeros_USR);

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

ENDIF;

//?Print PA Detail         F24
CASE;

// IF CTL.*CMD key is CF24
IF CTL.*CMD_key = '24';

//?Load size is req for this print
CASE;

// IF CTL.Load Size USR is Not Entered
IF CTL.Load_Size_USR = *ZERO;

// Send error message - 'Load Size is required'
ERROR(USR2017);
MSGPARM(CTL.Load_Size_USR);

//?Load size is req for this print
// IF *OTHERWISE
IF *OTHERWISE;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Product Availability');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(2);

//?Submit Print
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Submit Print
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Prod Date Alpha USR = CVTVAR(CTL.Avail Ship Date 1 USR)
PAR.Prod_Date_Alpha_USR = CVTVAR(CTL.Avail_Ship_Date_1_USR);

// Execute command - 'PS Print Production Scheduled/Plan'
EXECUTE COMMAND(USR2254);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('PDSFPFR');
PARAMETER('PDSFPFR$');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Type);
PARAMETER(PAR.Prod_Date_Alpha_USR);
PARAMETER(CTL.Primary_Load_Sts_USR);
PARAMETER(CTL.Load_Size_USR);
PARAMETER(CTL.Availability_Group_Code);
PARAMETER('PRTPRDAVL');
PARAMETER(CTL.Print_Zeros_USR);

ENDIF;

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

ENDIF;

//?Print Item Orders     F23
CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Product Availability');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(2);

//?Submit Print
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Submit Print
// IF *OTHERWISE
IF *OTHERWISE;

//?Set up start of print
CASE;

// IF CTL.Avail Ship Date 1 USR LE JOB.*Job date
IF CTL.Avail_Ship_Date_1_USR <= JOB.*Job_date;

// PAR.Prod Date Alpha USR = CVTVAR(JOB.*Job date)
PAR.Prod_Date_Alpha_USR = CVTVAR(JOB.*Job_date);

//?Set up start of print
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Prod Date Alpha USR = CVTVAR(CTL.Avail Ship Date 1 USR)
PAR.Prod_Date_Alpha_USR = CVTVAR(CTL.Avail_Ship_Date_1_USR);

ENDIF;

// Execute command - 'PS Print Production Scheduled/Plan'
EXECUTE COMMAND(USR2380);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('PDQHPFR');
PARAMETER('PDQHPFR$');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Type);
PARAMETER(PAR.Prod_Date_Alpha_USR);
PARAMETER(CTL.Availability_Group_Code);
PARAMETER('PRTITMORDS');

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

ENDIF;

//?F10=Edit PA Group Items
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF CTL.Availability Group Code is ALL
IF CTL.Availability_Group_Code = 'ALL';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Availability Group Code is NE Blank
IF CTL.Availability_Group_Code <> *BLANK;

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(CTL.Availability_Group_Code);
PARAMETER(CTL.Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Call program EDT Availability Group E1.
CALL PROGRAM(EDT Availability Group E1) ('PDD3E1R');
PARAMETER(CTL.Availability_Group_Code);

ENDIF;

// Call program Edt Group Items       EF.
CALL PROGRAM(Edt Group Items       EF) ('PDD8EFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Availability_Group_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Dsp:  PA Details (NEW)  Opt 5     = FP1054 commented
CASE;

// IF RCD.*SFLSEL is *5
IF RCD.*SFLSEL = '5';

CASE;

// IF CTL.Load Size USR is Not Entered
IF CTL.Load_Size_USR = *ZERO;

// CTL.Load Size USR = CON.42000
CTL.Load_Size_USR = 42000;

ENDIF;

// Call program Dsp Product Availblty D1.
CALL PROGRAM(Dsp Product Availblty D1) ('PDGND1R');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Company_Name);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(CTL.Warehouse_Type);
PARAMETER('P');
PARAMETER(CTL.Load_Size_USR);
PARAMETER(CTL.Avail_Ship_Date_1_USR);
PARAMETER(CTL.Avail_Ship_Date_2_USR);
PARAMETER(CTL.Avail_Ship_Date_3_USR);
PARAMETER(CTL.Avail_Ship_Date_4_USR);
PARAMETER(CTL.Avail_Ship_Date_5_USR);
PARAMETER(CTL.Avail_Ship_Date_6_USR);
PARAMETER(CTL.Avail_Ship_Date_7_USR);
PARAMETER(LCL.Week_Number);

// CTL.Item Code = RCD.Item Code
CTL.Item_Code = RCD.Item_Code;

ENDIF;

//?Dsp:  Item Orders        opt 8
CASE;

// IF RCD.*SFLSEL is *8
IF RCD.*SFLSEL = '8';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(CTL.Company_Name);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.*Initial_call);
PARAMETER(CTL.Warehouse_Type);

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

//?Dsp:  Item Warehouse Inquiry Detail
CASE;

// IF RCD.*SFLSEL is 9
IF RCD.*SFLSEL = '9';

CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

CASE;

// IF CTL.Lot Tracking Flag is yes
IF CTL.Lot_Tracking_Flag = 'Y';

// Call program Dsp Item Lot Locs     DF.
CALL PROGRAM(Dsp Item Lot Locs     DF) ('PDH2DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.*Initial_call);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Item_Description);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Conversion_Factor_1);
PARAMETER(RCD.Operation_Factor_1);
PARAMETER(RCD.UOM_Second);
PARAMETER(RCD.Conversion_Factor_2);
PARAMETER(RCD.Operation_Factor_2);
PARAMETER(RCD.UOM_Third);
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(CTL.Company_Name);
PARAMETER(LCL.*Initial_call);

ENDIF;

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

ENDIF;

//?10=Work With Inventory Availability
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program WW Inv Allocation     DF.
CALL PROGRAM(WW Inv Allocation     DF) ('POP5DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

//?11=Work With Order Production Schedule
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

CASE;

// IF RCD.Item Code is Base '*' USR is Select Base
IF RCD.Item_Code_is_Base_USR = *;

// LCL.Component Item Code = RCD.Item Code
LCL.Component_Item_Code = RCD.Item_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv First Consumed Itm XF.
CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Component_Item_Code);

ENDIF;

EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program WW OrdPrdSch Edit     DF.
CALL PROGRAM(WW OrdPrdSch Edit     DF) ('POQJDFR');
PARAMETER(LCL.Component_Item_Code);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(RCD.Item_Code);
PARAMETER(*BLANK);

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

//?15=Display Item Specification
CASE;

// IF RCD.*SFLSEL is Option 15
IF RCD.*SFLSEL = '15';

// Call program Dsp Item Specs        DR.
CALL PROGRAM(Dsp Item Specs        DR) ('POQMD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F09=Dsp Item/Whse Inquiry DF
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// Call program Dsp Item/Whse Inquiry DF.
CALL PROGRAM(Dsp Item/Whse Inquiry DF) ('PDPVDFR');

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

//?F11=Primary/Load
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

CASE;

// IF CTL.Primary/Load Sts USR is Primary
IF CTL.Primary_Load_Sts_USR = 'P';

// CTL.Primary/Load Sts USR = CND.Load Size
CTL.Primary_Load_Sts_USR = 'L';

//?Val:  Load Size
CASE;

// IF CTL.Primary/Load Sts USR is Load Size
IF CTL.Primary_Load_Sts_USR = 'L';

// AND CTL.Load Size USR is Not Entered
AND CTL.Load_Size_USR = *ZERO;

// Send error message - 'Load Size is required'
ERROR(USR2017);
MSGPARM(CTL.Load_Size_USR);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Primary/Load Sts USR = CND.Primary
CTL.Primary_Load_Sts_USR = 'P';

ENDIF;

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

//?F07=Previous Week
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

CASE;

// IF PAR.Week Number is Weeks 2 & 3
IF PAR.Week_Number >= 2;
AND PAR.Week_Number <= 3;

// PAR.Week Number = PAR.Week Number - CON.1
PAR.Week_Number = PAR.Week_Number - 1;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Product Availability cannot be displayed for previous week.'
ERROR(USR2806);

ENDIF;

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

//?F08-Next Week
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

CASE;

// IF PAR.Week Number is Weeks 1 & 2
IF PAR.Week_Number >= 1;
AND PAR.Week_Number <= 2;

// PAR.Week Number = PAR.Week Number + CON.1
PAR.Week_Number = PAR.Week_Number + 1;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Product Availability cannot be displayed for next week.'
ERROR(USR2807);

ENDIF;

// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


ENDIF;

//?F20=Display totals
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

CASE;

// IF PAR.Display Flag 1 USR is no
IF PAR.Display_Flag_1_USR = 'N';

// PAR.Display Flag 1 USR = CND.yes
PAR.Display_Flag_1_USR = 'Y';

EXECUTE FUNCTION(Rtv Avail Ttls for Grp RT) TYPE(RTVOBJ) FILE(PDKLREP)          AC1553730;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Availability_Group_Code);
PARAMETER(PAR.Avail_Ship_Date_1_USR);
PARAMETER(PAR.Avail_Ship_Date_2_USR);
PARAMETER(PAR.Avail_Ship_Date_3_USR);
PARAMETER(PAR.Avail_Ship_Date_4_USR);
PARAMETER(PAR.Avail_Ship_Date_5_USR);
PARAMETER(PAR.Avail_Ship_Date_6_USR);
PARAMETER(PAR.Avail_Ship_Date_7_USR);
PARAMETER(PAR.Avail_Ship_Date_8_USR);
PARAMETER(PAR.Avail_Ship_Date_9_USR);
PARAMETER(PAR.Avail_Ship_Date_10_USR);
PARAMETER(PAR.Avail_Ship_Date_11_USR);
PARAMETER(PAR.Avail_Ship_Date_12_USR);
PARAMETER(PAR.Avail_Ship_Date_13_USR);
PARAMETER(PAR.Avail_Ship_Date_14_USR);
PARAMETER(PAR.Avail_Ship_Date_15_USR);
PARAMETER(PAR.Avail_Ship_Date_16_USR);
PARAMETER(PAR.Avail_Ship_Date_17_USR);
PARAMETER(PAR.Avail_Ship_Date_18_USR);
PARAMETER(PAR.Avail_Ship_Date_19_USR);
PARAMETER(PAR.Avail_Ship_Date_20_USR);
PARAMETER(PAR.Avail_Ship_Date_21_USR);
PARAMETER(PAR.Day_1_Avail_Total_USR);
PARAMETER(PAR.Day_2_Avail_Total_USR);
PARAMETER(PAR.Day_3_Avail_Total_USR);
PARAMETER(PAR.Day_4_Avail_Total_USR);
PARAMETER(PAR.Day_5_Avail_Total_USR);
PARAMETER(PAR.Day_6_Avail_Total_USR);
PARAMETER(PAR.Day_7_Avail_Total_USR);
PARAMETER(PAR.Day_8_Avail_Total_USR);
PARAMETER(PAR.Day_9_Avail_Total_USR);
PARAMETER(PAR.Day_10_Avail_Total_USR);
PARAMETER(PAR.Day_11_Avail_Total_USR);
PARAMETER(PAR.Day_12_Avail_Total_USR);
PARAMETER(PAR.Day_13_Avail_Total_USR);
PARAMETER(PAR.Day_14_Avail_Total_USR);
PARAMETER(PAR.Day_15_Avail_Total_USR);
PARAMETER(PAR.Day_16_Avail_Total_USR);
PARAMETER(PAR.Day_17_Avail_Total_USR);
PARAMETER(PAR.Day_18_Avail_Total_USR);
PARAMETER(PAR.Day_19_Avail_Total_USR);
PARAMETER(PAR.Day_20_Avail_Total_USR);
PARAMETER(PAR.Day_21_Avail_Total_USR);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Type);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(WRK.Item_Description);
 PARAMETER(WRK.Description_Line_Two);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(WRK.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Production_Date_Control);
 PARAMETER(WRK.Catch_Weight_Status);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv PA For 21 Days    RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1543177;
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(WRK.USR_Day_1);
 PARAMETER(WRK.USR_Day_2);
 PARAMETER(WRK.USR_Day_3);
 PARAMETER(WRK.USR_Day_4);
 PARAMETER(WRK.USR_Day_5);
 PARAMETER(WRK.USR_Day_6);
 PARAMETER(WRK.USR_Day_7);
 PARAMETER(WRK.USR_Day_8);
 PARAMETER(WRK.USR_Day_9);
 PARAMETER(WRK.USR_Day_10);
 PARAMETER(WRK.USR_Day_11);
 PARAMETER(WRK.USR_Day_12);
 PARAMETER(WRK.USR_Day_13);
 PARAMETER(WRK.USR_Day_14);
 PARAMETER(WRK.USR_Day_15);
 PARAMETER(WRK.USR_Day_16);
 PARAMETER(WRK.USR_Day_17);
 PARAMETER(WRK.USR_Day_18);
 PARAMETER(WRK.USR_Day_19);
 PARAMETER(WRK.USR_Day_20);
 PARAMETER(WRK.USR_Day_21);
 PARAMETER(WRK.Order_Hold_Over_USR);
 PARAMETER(WRK.Order_Hold_Over_Alloc_USR);
 PARAMETER(WRK.Day_1_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_2_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_3_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_4_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_5_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_6_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_7_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_8_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_9_Rsrvd_Other_Whse_Fl);
 PARAMETER(WRK.Day_10_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_11_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_12_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_13_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_14_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_15_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_16_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_17_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_18_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_19_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_20_Rsrv_Other_Whse_Fl);
 PARAMETER(WRK.Day_21_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(WRK.Day_1_Inventory_USR);
 PARAMETER(WRK.Day_2_Inventory_USR);
 PARAMETER(WRK.Day_3_Inventory_USR);
 PARAMETER(WRK.Day_4_Inventory_USR);
 PARAMETER(WRK.Day_5_Inventory_USR);
 PARAMETER(WRK.Day_6_Inventory_USR);
 PARAMETER(WRK.Day_7_Inventory_USR);
 PARAMETER(WRK.Day_8_Inventory_USR);
 PARAMETER(WRK.Day_9_Inventory_USR);
 PARAMETER(WRK.Day_10_Inventory_USR);
 PARAMETER(WRK.Day_11_Inventory_USR);
 PARAMETER(WRK.Day_12_Inventory_USR);
 PARAMETER(WRK.Day_13_Inventory_USR);
 PARAMETER(WRK.Day_14_Inventory_USR);
 PARAMETER(WRK.Day_1_Production_USR);
 PARAMETER(WRK.Day_2_Production_USR);
 PARAMETER(WRK.Day_3_Production_USR);
 PARAMETER(WRK.Day_4_Production_USR);
 PARAMETER(WRK.Day_5_Production_USR);
 PARAMETER(WRK.Day_6_Production_USR);
 PARAMETER(WRK.Day_7_Production_USR);
 PARAMETER(WRK.Day_8_Production_USR);
 PARAMETER(WRK.Day_9_Production_USR);
 PARAMETER(WRK.Day_10_Production_USR);
 PARAMETER(WRK.Day_11_Production_USR);
 PARAMETER(WRK.Day_12_Production_USR);
 PARAMETER(WRK.Day_13_Production_USR);
 PARAMETER(WRK.Day_14_Production_USR);
 PARAMETER(WRK.Day_15_Production_USR);
 PARAMETER(WRK.Day_16_Production_USR);
 PARAMETER(WRK.Day_17_Production_USR);
 PARAMETER(WRK.Day_18_Production_USR);
 PARAMETER(WRK.Day_19_Production_USR);
 PARAMETER(WRK.Day_20_Production_USR);
 PARAMETER(WRK.Day_21_Production_USR);
 PARAMETER(WRK.Day_1_Sales_USR);
 PARAMETER(WRK.Day_2_Sales_USR);
 PARAMETER(WRK.Day_3_Sales_USR);
 PARAMETER(WRK.Day_4_Sales_USR);
 PARAMETER(WRK.Day_5_Sales_USR);
 PARAMETER(WRK.Day_6_Sales_USR);
 PARAMETER(WRK.Day_7_Sales_USR);
 PARAMETER(WRK.Day_8_Sales_USR);
 PARAMETER(WRK.Day_9_Sales_USR);
 PARAMETER(WRK.Day_10_Sales_USR);
 PARAMETER(WRK.Day_11_Sales_USR);
 PARAMETER(WRK.Day_12_Sales_USR);
 PARAMETER(WRK.Day_13_Sales_USR);
 PARAMETER(WRK.Day_14_Sales_USR);
 PARAMETER(WRK.Day_15_Sales_USR);
 PARAMETER(WRK.Day_16_Sales_USR);
 PARAMETER(WRK.Day_17_Sales_USR);
 PARAMETER(WRK.Day_18_Sales_USR);
 PARAMETER(WRK.Day_19_Sales_USR);
 PARAMETER(WRK.Day_20_Sales_USR);
 PARAMETER(WRK.Day_21_Sales_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(WRK.Day_1_Sched_Shipments_USR);
 PARAMETER(WRK.Day_2_Sched_Shipments_USR);
 PARAMETER(WRK.Day_3_Sched_Shipments_USR);
 PARAMETER(WRK.Day_4_Sched_Shipments_USR);
 PARAMETER(WRK.Day_5_Sched_Shipments_USR);
 PARAMETER(WRK.Day_6_Sched_Shipments_USR);
 PARAMETER(WRK.Day_7_Sched_Shipments_USR);
 PARAMETER(WRK.Day_8_Sched_Shipments_USR);
 PARAMETER(WRK.Day_9_Sched_Shipments_USR);
 PARAMETER(WRK.Day_10_Sched_Shipment_USR);
 PARAMETER(WRK.Day_11_Sched_Shipment_USR);
 PARAMETER(WRK.Day_12_Sched_Shipment_USR);
 PARAMETER(WRK.Day_13_Sched_Shipment_USR);
 PARAMETER(WRK.Day_14_Sched_Shipment_USR);
 PARAMETER(WRK.Day_15_Sched_Shipment_USR);
 PARAMETER(WRK.Day_16_Sched_Shipment_USR);
 PARAMETER(WRK.Day_17_Sched_Shipment_USR);
 PARAMETER(WRK.Day_18_SchdShip_Total_USR);
 PARAMETER(WRK.Day_19_Sched_Shipment_USR);
 PARAMETER(WRK.Day_20_Sched_Shipment_USR);
 PARAMETER(WRK.Day_21_Sched_Shipment_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

  //?USER: Process Data record

  //?Check for matching warehouse code and warehouse type
  CASE;

  // IF PAR.Warehouse Code is Warehouse Code Blank
  IF PAR.Warehouse_Code = *BLANK;

  // AND PAR.Warehouse Type is Equal blank
  AND PAR.Warehouse_Type = *BLANK;

  EXECUTE FUNCTION(Rtv PA For 21 Days    IF) TYPE(EXCINTFUN)                      AC1543204;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Order_Hold_Over_USR);
  PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_9_Inventory_USR);
  PARAMETER(PAR.Day_10_Inventory_USR);
  PARAMETER(PAR.Day_11_Inventory_USR);
  PARAMETER(PAR.Day_12_Inventory_USR);
  PARAMETER(PAR.Day_13_Inventory_USR);
  PARAMETER(PAR.Day_14_Inventory_USR);
  PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
  PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?Execute internal function

   MOVE *ALL (To: PAR From: CON);

   EXECUTE FUNCTION(Rtv Prod Whse/Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1560479;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Rtv PA Inv/Hold Overs XF.
   CALL PROGRAM(Rtv PA Inv/Hold Overs XF) ('PDS0XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Order_Hold_Over_USR);
   PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
   PARAMETER(PAR.Day_8_Inventory_USR);
   PARAMETER(PAR.Day_9_Inventory_USR);
   PARAMETER(PAR.Day_10_Inventory_USR);
   PARAMETER(PAR.Day_11_Inventory_USR);
   PARAMETER(PAR.Day_12_Inventory_USR);
   PARAMETER(PAR.Day_13_Inventory_USR);
   PARAMETER(PAR.Day_14_Inventory_USR);
   PARAMETER(PAR.Lot_Tracking_Flag);

   EXECUTE FUNCTION(Rtv PA Production     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543287;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?USER: Process Data record

    //?Is it time to Quit ??
    CASE;

    // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    CASE;

    // IF DB1.PA Available Ship Date GE JOB.*Job date
    IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

    //?Calculate Production based on Unit Weight or Pieces
    CASE;

    // IF PAR.Unit Weight is Greater than zero
    IF PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y';

    //?Retrieve production according to day
    CASE;

    // IF PAR.Avail Ship Date 1 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(PAR.USR_Day_1);
    PARAMETER(PAR.Day_1_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 2 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(PAR.USR_Day_2);
    PARAMETER(PAR.Day_2_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 3 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(PAR.USR_Day_3);
    PARAMETER(PAR.Day_3_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 4 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(PAR.USR_Day_4);
    PARAMETER(PAR.Day_4_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 5 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(PAR.USR_Day_5);
    PARAMETER(PAR.Day_5_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 6 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(PAR.USR_Day_6);
    PARAMETER(PAR.Day_6_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 7 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(PAR.USR_Day_7);
    PARAMETER(PAR.Day_7_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 8 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(PAR.USR_Day_8);
    PARAMETER(PAR.Day_8_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 9 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(PAR.USR_Day_9);
    PARAMETER(PAR.Day_9_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 10 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(PAR.USR_Day_10);
    PARAMETER(PAR.Day_10_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 11 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(PAR.USR_Day_11);
    PARAMETER(PAR.Day_11_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 12 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(PAR.USR_Day_12);
    PARAMETER(PAR.Day_12_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 13 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(PAR.USR_Day_13);
    PARAMETER(PAR.Day_13_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 14 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(PAR.USR_Day_14);
    PARAMETER(PAR.Day_14_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(PAR.USR_Day_15);
    PARAMETER(PAR.Day_15_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(PAR.USR_Day_16);
    PARAMETER(PAR.Day_16_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(PAR.USR_Day_17);
    PARAMETER(PAR.Day_17_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(PAR.USR_Day_18);
    PARAMETER(PAR.Day_18_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(PAR.USR_Day_19);
    PARAMETER(PAR.Day_19_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(PAR.USR_Day_20);
    PARAMETER(PAR.Day_20_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(PAR.USR_Day_21);
    PARAMETER(PAR.Day_21_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    ENDIF;

    ENDIF;

    ENDIF;

   }

   //?Create array to be used for PA Calc when orders are processed.
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   //?Clear PA Array
   EXECUTE FUNCTION(Del PA Work Array Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543710;
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del PA Work Array Roll DL) TYPE(DLTOBJ) ARRAY(PA_Work_Array_forAC1543711;
    PARAMETER(DB1.Avail_Ship_Date_USR);
   }

   // Day 1 Available
   PAR.Day_1_Availability_USR = ( ( PAR.Day_1_Inventory_USR + PAR.Day_1_Production_USR )
   - PAR.Day_1_Sched_Shipments_USR ) - PAR.Day_1_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER('N');
   // Day 2 Available
   PAR.Day_2_Availability_USR = ( ( PAR.Day_2_Inventory_USR + PAR.Day_2_Production_USR )
   - PAR.Day_2_Sched_Shipments_USR ) - PAR.Day_2_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER('N');
   // Day 3 Available
   PAR.Day_3_Availability_USR = ( ( PAR.Day_3_Inventory_USR + PAR.Day_3_Production_USR )
   - PAR.Day_3_Sched_Shipments_USR ) - PAR.Day_3_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER('N');
   // Day 4 Available
   PAR.Day_4_Availability_USR = ( ( PAR.Day_4_Inventory_USR + PAR.Day_4_Production_USR )
   - PAR.Day_4_Sched_Shipments_USR ) - PAR.Day_4_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER('N');
   // Day 5 Available
   PAR.Day_5_Availability_USR = ( ( PAR.Day_5_Inventory_USR + PAR.Day_5_Production_USR )
   - PAR.Day_5_Sched_Shipments_USR ) - PAR.Day_5_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER('N');
   // Day 6 Available
   PAR.Day_6_Availability_USR = ( ( PAR.Day_6_Inventory_USR + PAR.Day_6_Production_USR )
   - PAR.Day_6_Sched_Shipments_USR ) - PAR.Day_6_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER('N');
   // Day 7 Available
   PAR.Day_7_Availability_USR = ( ( PAR.Day_7_Inventory_USR + PAR.Day_7_Production_USR )
   - PAR.Day_7_Sched_Shipments_USR ) - PAR.Day_7_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER('N');
   // Day 8 Available
   PAR.Day_8_Availability_USR = ( PAR.Day_8_Production_USR - PAR.Day_8_Sched_Shipments_USR )
   - PAR.Day_8_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER('N');
   // Day 9 Available
   PAR.Day_9_Availability_USR = ( PAR.Day_9_Production_USR - PAR.Day_9_Sched_Shipments_USR )
   - PAR.Day_9_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER('N');
   // Day 10 Available
   PAR.Day_10_Availability_USR = ( PAR.Day_10_Production_USR
   - PAR.Day_10_Sched_Shipment_USR ) - PAR.Day_10_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER('N');
   // Day 11 Available
   PAR.Day_11_Availability_USR = ( PAR.Day_11_Production_USR
   - PAR.Day_11_Sched_Shipment_USR ) - PAR.Day_11_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER('N');
   // Day 12 Available
   PAR.Day_12_Availability_USR = ( PAR.Day_12_Production_USR
   - PAR.Day_12_Sched_Shipment_USR ) - PAR.Day_12_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER('N');
   // Day 13 Available
   PAR.Day_13_Availability_USR = ( PAR.Day_13_Production_USR
   - PAR.Day_13_Sched_Shipment_USR ) - PAR.Day_13_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER('N');
   // Day 14 Available
   PAR.Day_14_Availability_USR = ( PAR.Day_14_Production_USR
   - PAR.Day_14_Sched_Shipment_USR ) - PAR.Day_14_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER('N');
   // Day 15 Available
   PAR.Day_15_Availability_USR = ( PAR.Day_15_Production_USR
   - PAR.Day_15_Sched_Shipment_USR ) - PAR.Day_15_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER('N');
   // Day 16 Available
   PAR.Day_16_Availability_USR = ( PAR.Day_16_Production_USR
   - PAR.Day_16_Sched_Shipment_USR ) - PAR.Day_16_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER('N');
   // Day 17 Available
   PAR.Day_17_Availability_USR = ( PAR.Day_17_Production_USR
   - PAR.Day_17_Sched_Shipment_USR ) - PAR.Day_17_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER('N');
   // Day 18 Available
   PAR.Day_18_Availability_USR = ( PAR.Day_18_Production_USR
   - PAR.Day_18_Sched_Shipment_USR ) - PAR.Day_18_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER('N');
   // Day 19 Available
   PAR.Day_19_Availability_USR = ( PAR.Day_19_Production_USR
   - PAR.Day_19_Sched_Shipment_USR ) - PAR.Day_19_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER('N');
   // Day 20 Available
   PAR.Day_20_Availability_USR = ( PAR.Day_20_Production_USR
   - PAR.Day_20_Sched_Shipment_USR ) - PAR.Day_20_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER('N');
   // Day 21 Available
   PAR.Day_21_Availability_USR = ( PAR.Day_21_Production_USR
   - PAR.Day_21_Sched_Shipment_USR ) - PAR.Day_21_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER('N');
   ENDIF;

   EXECUTE FUNCTION(Rtv Sched Ship/Clc PA RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1543296;
   PARAMETER(PAR.Company_Number);
   PARAMETER(WRK.Order_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    PARAMETER(LCL.Billing_Activity_Type);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    // AND PAR.Order Number NE DB1.Order Number
    AND PAR.Order_Number <> DB1.Order_Number;

    // AND LCL.Billing Activity Type is Invoice or Transfer
    AND LCL.Billing_Activity_Type = '1'/'4';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship D
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship Dt
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

   }

   //?If this is a production whse, then reserve other whse orders.
   CASE;

   // IF PAR.Production Warehouse Code EQ PAR.Warehouse Code
   IF PAR.Production_Warehouse_Code = PAR.Warehouse_Code;

   // OR PAR.Production Warehouse Code is Warehouse Code Blank
   OR PAR.Production_Warehouse_Code = *BLANK;

   EXECUTE FUNCTION(Rtv Rsrvd Other Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1560700;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?If warehouse ordered not equal to warehouse scheduled, then reserve
    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    EXECUTE FUNCTION(Rtv Add to Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1560732;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER('Y');
    }

    ENDIF;

    ENDIF;

   }

   ENDIF;

   //?Retrieve Sched Ship/Allocation/Available from PA Array
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  //?Check for matching warehouse code and warehouse type
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If whse code is blank & whse type isn't, calculate for that whse type only
  CASE;

  // IF PAR.Warehouse Code is Warehouse Code Blank
  IF PAR.Warehouse_Code = *BLANK;

  // AND PAR.Warehouse Type EQ DB1.Warehouse Type
  AND PAR.Warehouse_Type = DB1.Warehouse_Type;

  EXECUTE FUNCTION(Rtv PA For 21 Days    IF) TYPE(EXCINTFUN)                      AC1543204;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Order_Hold_Over_USR);
  PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_9_Inventory_USR);
  PARAMETER(PAR.Day_10_Inventory_USR);
  PARAMETER(PAR.Day_11_Inventory_USR);
  PARAMETER(PAR.Day_12_Inventory_USR);
  PARAMETER(PAR.Day_13_Inventory_USR);
  PARAMETER(PAR.Day_14_Inventory_USR);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?Execute internal function

   MOVE *ALL (To: PAR From: CON);

   EXECUTE FUNCTION(Rtv Prod Whse/Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1560479;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Rtv PA Inv/Hold Overs XF.
   CALL PROGRAM(Rtv PA Inv/Hold Overs XF) ('PDS0XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Order_Hold_Over_USR);
   PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
   PARAMETER(PAR.Day_8_Inventory_USR);
   PARAMETER(PAR.Day_9_Inventory_USR);
   PARAMETER(PAR.Day_10_Inventory_USR);
   PARAMETER(PAR.Day_11_Inventory_USR);
   PARAMETER(PAR.Day_12_Inventory_USR);
   PARAMETER(PAR.Day_13_Inventory_USR);
   PARAMETER(PAR.Day_14_Inventory_USR);
   PARAMETER(PAR.Lot_Tracking_Flag);

   EXECUTE FUNCTION(Rtv PA Production     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543287;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?USER: Process Data record

    //?Is it time to Quit ??
    CASE;

    // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    CASE;

    // IF DB1.PA Available Ship Date GE JOB.*Job date
    IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

    //?Calculate Production based on Unit Weight or Pieces
    CASE;

    // IF PAR.Unit Weight is Greater than zero
    IF PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y';

    //?Retrieve production according to day
    CASE;

    // IF PAR.Avail Ship Date 1 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(PAR.USR_Day_1);
    PARAMETER(PAR.Day_1_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 2 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(PAR.USR_Day_2);
    PARAMETER(PAR.Day_2_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 3 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(PAR.USR_Day_3);
    PARAMETER(PAR.Day_3_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 4 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(PAR.USR_Day_4);
    PARAMETER(PAR.Day_4_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 5 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(PAR.USR_Day_5);
    PARAMETER(PAR.Day_5_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 6 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(PAR.USR_Day_6);
    PARAMETER(PAR.Day_6_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 7 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(PAR.USR_Day_7);
    PARAMETER(PAR.Day_7_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 8 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(PAR.USR_Day_8);
    PARAMETER(PAR.Day_8_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 9 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(PAR.USR_Day_9);
    PARAMETER(PAR.Day_9_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 10 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(PAR.USR_Day_10);
    PARAMETER(PAR.Day_10_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 11 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(PAR.USR_Day_11);
    PARAMETER(PAR.Day_11_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 12 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(PAR.USR_Day_12);
    PARAMETER(PAR.Day_12_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 13 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(PAR.USR_Day_13);
    PARAMETER(PAR.Day_13_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 14 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(PAR.USR_Day_14);
    PARAMETER(PAR.Day_14_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(PAR.USR_Day_15);
    PARAMETER(PAR.Day_15_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(PAR.USR_Day_16);
    PARAMETER(PAR.Day_16_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(PAR.USR_Day_17);
    PARAMETER(PAR.Day_17_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(PAR.USR_Day_18);
    PARAMETER(PAR.Day_18_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(PAR.USR_Day_19);
    PARAMETER(PAR.Day_19_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(PAR.USR_Day_20);
    PARAMETER(PAR.Day_20_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(PAR.USR_Day_21);
    PARAMETER(PAR.Day_21_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    ENDIF;

    ENDIF;

    ENDIF;

   }

   //?Create array to be used for PA Calc when orders are processed.
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   //?Clear PA Array
   EXECUTE FUNCTION(Del PA Work Array Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543710;
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del PA Work Array Roll DL) TYPE(DLTOBJ) ARRAY(PA_Work_Array_forAC1543711;
    PARAMETER(DB1.Avail_Ship_Date_USR);
   }

   // Day 1 Available
   PAR.Day_1_Availability_USR = ( ( PAR.Day_1_Inventory_USR + PAR.Day_1_Production_USR )
   - PAR.Day_1_Sched_Shipments_USR ) - PAR.Day_1_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER('N');
   // Day 2 Available
   PAR.Day_2_Availability_USR = ( ( PAR.Day_2_Inventory_USR + PAR.Day_2_Production_USR )
   - PAR.Day_2_Sched_Shipments_USR ) - PAR.Day_2_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER('N');
   // Day 3 Available
   PAR.Day_3_Availability_USR = ( ( PAR.Day_3_Inventory_USR + PAR.Day_3_Production_USR )
   - PAR.Day_3_Sched_Shipments_USR ) - PAR.Day_3_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER('N');
   // Day 4 Available
   PAR.Day_4_Availability_USR = ( ( PAR.Day_4_Inventory_USR + PAR.Day_4_Production_USR )
   - PAR.Day_4_Sched_Shipments_USR ) - PAR.Day_4_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER('N');
   // Day 5 Available
   PAR.Day_5_Availability_USR = ( ( PAR.Day_5_Inventory_USR + PAR.Day_5_Production_USR )
   - PAR.Day_5_Sched_Shipments_USR ) - PAR.Day_5_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER('N');
   // Day 6 Available
   PAR.Day_6_Availability_USR = ( ( PAR.Day_6_Inventory_USR + PAR.Day_6_Production_USR )
   - PAR.Day_6_Sched_Shipments_USR ) - PAR.Day_6_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER('N');
   // Day 7 Available
   PAR.Day_7_Availability_USR = ( ( PAR.Day_7_Inventory_USR + PAR.Day_7_Production_USR )
   - PAR.Day_7_Sched_Shipments_USR ) - PAR.Day_7_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER('N');
   // Day 8 Available
   PAR.Day_8_Availability_USR = ( PAR.Day_8_Production_USR - PAR.Day_8_Sched_Shipments_USR )
   - PAR.Day_8_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER('N');
   // Day 9 Available
   PAR.Day_9_Availability_USR = ( PAR.Day_9_Production_USR - PAR.Day_9_Sched_Shipments_USR )
   - PAR.Day_9_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER('N');
   // Day 10 Available
   PAR.Day_10_Availability_USR = ( PAR.Day_10_Production_USR
   - PAR.Day_10_Sched_Shipment_USR ) - PAR.Day_10_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER('N');
   // Day 11 Available
   PAR.Day_11_Availability_USR = ( PAR.Day_11_Production_USR
   - PAR.Day_11_Sched_Shipment_USR ) - PAR.Day_11_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER('N');
   // Day 12 Available
   PAR.Day_12_Availability_USR = ( PAR.Day_12_Production_USR
   - PAR.Day_12_Sched_Shipment_USR ) - PAR.Day_12_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER('N');
   // Day 13 Available
   PAR.Day_13_Availability_USR = ( PAR.Day_13_Production_USR
   - PAR.Day_13_Sched_Shipment_USR ) - PAR.Day_13_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER('N');
   // Day 14 Available
   PAR.Day_14_Availability_USR = ( PAR.Day_14_Production_USR
   - PAR.Day_14_Sched_Shipment_USR ) - PAR.Day_14_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER('N');
   // Day 15 Available
   PAR.Day_15_Availability_USR = ( PAR.Day_15_Production_USR
   - PAR.Day_15_Sched_Shipment_USR ) - PAR.Day_15_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER('N');
   // Day 16 Available
   PAR.Day_16_Availability_USR = ( PAR.Day_16_Production_USR
   - PAR.Day_16_Sched_Shipment_USR ) - PAR.Day_16_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER('N');
   // Day 17 Available
   PAR.Day_17_Availability_USR = ( PAR.Day_17_Production_USR
   - PAR.Day_17_Sched_Shipment_USR ) - PAR.Day_17_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER('N');
   // Day 18 Available
   PAR.Day_18_Availability_USR = ( PAR.Day_18_Production_USR
   - PAR.Day_18_Sched_Shipment_USR ) - PAR.Day_18_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER('N');
   // Day 19 Available
   PAR.Day_19_Availability_USR = ( PAR.Day_19_Production_USR
   - PAR.Day_19_Sched_Shipment_USR ) - PAR.Day_19_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER('N');
   // Day 20 Available
   PAR.Day_20_Availability_USR = ( PAR.Day_20_Production_USR
   - PAR.Day_20_Sched_Shipment_USR ) - PAR.Day_20_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER('N');
   // Day 21 Available
   PAR.Day_21_Availability_USR = ( PAR.Day_21_Production_USR
   - PAR.Day_21_Sched_Shipment_USR ) - PAR.Day_21_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER('N');
   ENDIF;

   EXECUTE FUNCTION(Rtv Sched Ship/Clc PA RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1543296;
   PARAMETER(PAR.Company_Number);
   PARAMETER(WRK.Order_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    PARAMETER(LCL.Billing_Activity_Type);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    // AND PAR.Order Number NE DB1.Order Number
    AND PAR.Order_Number <> DB1.Order_Number;

    // AND LCL.Billing Activity Type is Invoice or Transfer
    AND LCL.Billing_Activity_Type = '1'/'4';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship D
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship Dt
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

   }

   //?If this is a production whse, then reserve other whse orders.
   CASE;

   // IF PAR.Production Warehouse Code EQ PAR.Warehouse Code
   IF PAR.Production_Warehouse_Code = PAR.Warehouse_Code;

   // OR PAR.Production Warehouse Code is Warehouse Code Blank
   OR PAR.Production_Warehouse_Code = *BLANK;

   EXECUTE FUNCTION(Rtv Rsrvd Other Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1560700;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?If warehouse ordered not equal to warehouse scheduled, then reserve
    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    EXECUTE FUNCTION(Rtv Add to Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1560732;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER('Y');
    }

    ENDIF;

    ENDIF;

   }

   ENDIF;

   //?Retrieve Sched Ship/Allocation/Available from PA Array
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  //?If whse code is blank & whse type isn't, calculate for that whse type only
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If warehouse code is entered, calculate for that warehouse only
  CASE;

  // IF PAR.Warehouse Code EQ DB1.Warehouse Code
  IF PAR.Warehouse_Code = DB1.Warehouse_Code;

  EXECUTE FUNCTION(Rtv PA For 21 Days    IF) TYPE(EXCINTFUN)                      AC1543204;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Order_Hold_Over_USR);
  PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_9_Inventory_USR);
  PARAMETER(PAR.Day_10_Inventory_USR);
  PARAMETER(PAR.Day_11_Inventory_USR);
  PARAMETER(PAR.Day_12_Inventory_USR);
  PARAMETER(PAR.Day_13_Inventory_USR);
  PARAMETER(PAR.Day_14_Inventory_USR);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?Execute internal function

   MOVE *ALL (To: PAR From: CON);

   EXECUTE FUNCTION(Rtv Prod Whse/Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1560479;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Rtv PA Inv/Hold Overs XF.
   CALL PROGRAM(Rtv PA Inv/Hold Overs XF) ('PDS0XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Order_Hold_Over_USR);
   PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
   PARAMETER(PAR.Day_8_Inventory_USR);
   PARAMETER(PAR.Day_9_Inventory_USR);
   PARAMETER(PAR.Day_10_Inventory_USR);
   PARAMETER(PAR.Day_11_Inventory_USR);
   PARAMETER(PAR.Day_12_Inventory_USR);
   PARAMETER(PAR.Day_13_Inventory_USR);
   PARAMETER(PAR.Day_14_Inventory_USR);
   PARAMETER(PAR.Lot_Tracking_Flag);

   EXECUTE FUNCTION(Rtv PA Production     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543287;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?USER: Process Data record

    //?Is it time to Quit ??
    CASE;

    // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    CASE;

    // IF DB1.PA Available Ship Date GE JOB.*Job date
    IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

    //?Calculate Production based on Unit Weight or Pieces
    CASE;

    // IF PAR.Unit Weight is Greater than zero
    IF PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y';

    //?Retrieve production according to day
    CASE;

    // IF PAR.Avail Ship Date 1 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(PAR.USR_Day_1);
    PARAMETER(PAR.Day_1_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 2 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(PAR.USR_Day_2);
    PARAMETER(PAR.Day_2_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 3 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(PAR.USR_Day_3);
    PARAMETER(PAR.Day_3_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 4 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(PAR.USR_Day_4);
    PARAMETER(PAR.Day_4_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 5 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(PAR.USR_Day_5);
    PARAMETER(PAR.Day_5_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 6 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(PAR.USR_Day_6);
    PARAMETER(PAR.Day_6_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 7 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(PAR.USR_Day_7);
    PARAMETER(PAR.Day_7_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 8 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(PAR.USR_Day_8);
    PARAMETER(PAR.Day_8_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 9 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(PAR.USR_Day_9);
    PARAMETER(PAR.Day_9_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 10 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(PAR.USR_Day_10);
    PARAMETER(PAR.Day_10_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 11 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(PAR.USR_Day_11);
    PARAMETER(PAR.Day_11_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 12 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(PAR.USR_Day_12);
    PARAMETER(PAR.Day_12_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 13 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(PAR.USR_Day_13);
    PARAMETER(PAR.Day_13_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 14 USR EQ DB1.PA Available Ship Date
    IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(PAR.USR_Day_14);
    PARAMETER(PAR.Day_14_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(PAR.USR_Day_15);
    PARAMETER(PAR.Day_15_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(PAR.USR_Day_16);
    PARAMETER(PAR.Day_16_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(PAR.USR_Day_17);
    PARAMETER(PAR.Day_17_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(PAR.USR_Day_18);
    PARAMETER(PAR.Day_18_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(PAR.USR_Day_19);
    PARAMETER(PAR.Day_19_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(PAR.USR_Day_20);
    PARAMETER(PAR.Day_20_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    //?Retrieve production according to day
    // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
    IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

    EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(PAR.USR_Day_21);
    PARAMETER(PAR.Day_21_Production_USR);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    PARAMETER(DB1.PS_Weight_Converted);
    PARAMETER(DB1.PS_Pieces_Converted);
    PARAMETER(DB1.PS_Weight_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Prod_Adj);
    PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Production Date EQ JOB.*Job date
     IF PAR.Production_Date = JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // IF PAR.Fresh Chilling Time is GT Zero
     IF PAR.Fresh_Chilling_Time > *ZERO;

     // AND PAR.Avail Ship Date USR EQ JOB.*Job date
     AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Production Type is Plan
     AND PAR.Production_Type = 'P';

     // AND PAR.Fresh Chilling Time is GT Zero
     AND PAR.Fresh_Chilling_Time > *ZERO;

     // IF PAR.Production Date LT JOB.*Job date
     IF PAR.Production_Date < JOB.*Job_date;

     // AND PAR.Avail Ship Date USR GT JOB.*Job date
     AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

     // IF PAR.Production Type is Schedule Saved in the am
     IF PAR.Production_Type = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Calculate Production
     CASE;

     // IF PAR.Piece Count Item is Not Yes
     IF PAR.Piece_Count_Item = *BLANK/'N';

     // AND PAR.Unit Weight is Greater than zero
     AND PAR.Unit_Weight > *ZERO;

     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
     - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

     //?Calculate Production
     // IF PAR.Piece Count Item is yes
     IF PAR.Piece_Count_Item = 'Y';

     // AND PAR.Pieces Per Bag is GT Zero
     AND PAR.Pieces_Per_Bag > *ZERO;

     // AND PAR.Bags Per Unit is GT Zero
     AND PAR.Bags_Per_Unit > *ZERO;

     //? **If Piece count item use  PIECE fields
     // Production (No Dec)
     PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
     - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

     ENDIF;

     //?If production is negative then make zero
     CASE;

     // IF PAR.Quantity Production USR is LT Zero
     IF PAR.Quantity_Production_USR < *ZERO;

     // PAR.Quantity Production USR = CON.*ZERO
     PAR.Quantity_Production_USR = *ZERO;

     ENDIF;

     // PAR.Production Date USR = PAR.Production Date
     PAR.Production_Date_USR = PAR.Production_Date;

     ENDIF;

    }

    ENDIF;

    ENDIF;

    ENDIF;

   }

   //?Create array to be used for PA Calc when orders are processed.
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   //?Clear PA Array
   EXECUTE FUNCTION(Del PA Work Array Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543710;
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del PA Work Array Roll DL) TYPE(DLTOBJ) ARRAY(PA_Work_Array_forAC1543711;
    PARAMETER(DB1.Avail_Ship_Date_USR);
   }

   // Day 1 Available
   PAR.Day_1_Availability_USR = ( ( PAR.Day_1_Inventory_USR + PAR.Day_1_Production_USR )
   - PAR.Day_1_Sched_Shipments_USR ) - PAR.Day_1_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER('N');
   // Day 2 Available
   PAR.Day_2_Availability_USR = ( ( PAR.Day_2_Inventory_USR + PAR.Day_2_Production_USR )
   - PAR.Day_2_Sched_Shipments_USR ) - PAR.Day_2_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER('N');
   // Day 3 Available
   PAR.Day_3_Availability_USR = ( ( PAR.Day_3_Inventory_USR + PAR.Day_3_Production_USR )
   - PAR.Day_3_Sched_Shipments_USR ) - PAR.Day_3_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER('N');
   // Day 4 Available
   PAR.Day_4_Availability_USR = ( ( PAR.Day_4_Inventory_USR + PAR.Day_4_Production_USR )
   - PAR.Day_4_Sched_Shipments_USR ) - PAR.Day_4_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER('N');
   // Day 5 Available
   PAR.Day_5_Availability_USR = ( ( PAR.Day_5_Inventory_USR + PAR.Day_5_Production_USR )
   - PAR.Day_5_Sched_Shipments_USR ) - PAR.Day_5_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER('N');
   // Day 6 Available
   PAR.Day_6_Availability_USR = ( ( PAR.Day_6_Inventory_USR + PAR.Day_6_Production_USR )
   - PAR.Day_6_Sched_Shipments_USR ) - PAR.Day_6_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER('N');
   // Day 7 Available
   PAR.Day_7_Availability_USR = ( ( PAR.Day_7_Inventory_USR + PAR.Day_7_Production_USR )
   - PAR.Day_7_Sched_Shipments_USR ) - PAR.Day_7_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER('N');
   // Day 8 Available
   PAR.Day_8_Availability_USR = ( PAR.Day_8_Production_USR - PAR.Day_8_Sched_Shipments_USR )
   - PAR.Day_8_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER('N');
   // Day 9 Available
   PAR.Day_9_Availability_USR = ( PAR.Day_9_Production_USR - PAR.Day_9_Sched_Shipments_USR )
   - PAR.Day_9_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER('N');
   // Day 10 Available
   PAR.Day_10_Availability_USR = ( PAR.Day_10_Production_USR
   - PAR.Day_10_Sched_Shipment_USR ) - PAR.Day_10_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER('N');
   // Day 11 Available
   PAR.Day_11_Availability_USR = ( PAR.Day_11_Production_USR
   - PAR.Day_11_Sched_Shipment_USR ) - PAR.Day_11_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER('N');
   // Day 12 Available
   PAR.Day_12_Availability_USR = ( PAR.Day_12_Production_USR
   - PAR.Day_12_Sched_Shipment_USR ) - PAR.Day_12_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER('N');
   // Day 13 Available
   PAR.Day_13_Availability_USR = ( PAR.Day_13_Production_USR
   - PAR.Day_13_Sched_Shipment_USR ) - PAR.Day_13_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER('N');
   // Day 14 Available
   PAR.Day_14_Availability_USR = ( PAR.Day_14_Production_USR
   - PAR.Day_14_Sched_Shipment_USR ) - PAR.Day_14_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER('N');
   // Day 15 Available
   PAR.Day_15_Availability_USR = ( PAR.Day_15_Production_USR
   - PAR.Day_15_Sched_Shipment_USR ) - PAR.Day_15_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER('N');
   // Day 16 Available
   PAR.Day_16_Availability_USR = ( PAR.Day_16_Production_USR
   - PAR.Day_16_Sched_Shipment_USR ) - PAR.Day_16_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER('N');
   // Day 17 Available
   PAR.Day_17_Availability_USR = ( PAR.Day_17_Production_USR
   - PAR.Day_17_Sched_Shipment_USR ) - PAR.Day_17_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER('N');
   // Day 18 Available
   PAR.Day_18_Availability_USR = ( PAR.Day_18_Production_USR
   - PAR.Day_18_Sched_Shipment_USR ) - PAR.Day_18_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER('N');
   // Day 19 Available
   PAR.Day_19_Availability_USR = ( PAR.Day_19_Production_USR
   - PAR.Day_19_Sched_Shipment_USR ) - PAR.Day_19_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER('N');
   // Day 20 Available
   PAR.Day_20_Availability_USR = ( PAR.Day_20_Production_USR
   - PAR.Day_20_Sched_Shipment_USR ) - PAR.Day_20_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER('N');
   // Day 21 Available
   PAR.Day_21_Availability_USR = ( PAR.Day_21_Production_USR
   - PAR.Day_21_Sched_Shipment_USR ) - PAR.Day_21_Sales_USR;

   EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER('N');
   ENDIF;

   EXECUTE FUNCTION(Rtv Sched Ship/Clc PA RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1543296;
   PARAMETER(PAR.Company_Number);
   PARAMETER(WRK.Order_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    PARAMETER(LCL.Billing_Activity_Type);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    // AND PAR.Order Number NE DB1.Order Number
    AND PAR.Order_Number <> DB1.Order_Number;

    // AND LCL.Billing Activity Type is Invoice or Transfer
    AND LCL.Billing_Activity_Type = '1'/'4';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship D
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    //?Retrieve Week End date for *JOB DATE
    //?Determine production type
    CASE;

    // IF DB1.Scheduled Ship Date EQ JOB.*Job date
    IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

    // PAR.Production Type = CND.Schedule
    PAR.Production_Type = 'S';

    //?Determine production type
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Production Type = CND.Plan
    PAR.Production_Type = 'P';

    ENDIF;

    EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(LCL.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Scheduled_Ship_Date);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
    PARAMETER(PAR.Company_Number);
    PARAMETER(JOB.*Job_date);
    PARAMETER(WRK.Julian_Date);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(WRK.OM_Week);
    PARAMETER(WRK.Day_of_Week);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Accounting_Year_Code);
    PARAMETER(PAR.Accounting_Period_Code);
    PARAMETER(7);
    PARAMETER(PAR.Week_Number);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    CASE;

    // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
    IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

    EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Initialize routine

     // PAR.OD Quantity Scheduled = CON.*ZERO
     PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Warehouse Code NE DB1.Order From Warehouse
     IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

     // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
     PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
     + DB1.OD_Qty_Cnsmd_Pieces_Sched;

     ENDIF;

    }

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship Dt
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

    //?If warehouse is not a production whse, rtv sched qty from prod whse
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
    PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

    // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
    PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    PARAMETER(LCL.Production_Date);
    PARAMETER(LCL.Order_Scheduled_Today_USR);
    {
     //?USER: Initialize routine

     // PAR.First Time Flag = CND.Yes
     PAR.First_Time_Flag = 'Y';

     // PAR.Order Scheduled Today USR = CND.no
     PAR.Order_Scheduled_Today_USR = 'N';

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

     CASE;

     // IF PAR.First Time Flag is Yes
     IF PAR.First_Time_Flag = 'Y';

     //?If ord ship is this day, updt Sched Ship/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     ENDIF;

     ENDIF;

     QUIT;

     ENDIF;

     //?Calc new avail with inv if current week, else calc with no inv
     CASE;

     // IF PAR.Production Date LE PAR.Week End Date        USR
     IF PAR.Production_Date <= PAR.Week_End_Date_USR;

     // OR PAR.Lot Tracking Flag is yes
     OR PAR.Lot_Tracking_Flag = 'Y';

     // Avail with inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Calc new avail with inv if current week, else calc with no inv
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Available    SUM = CON.*ZERO
     PAR.Quantity_Available_SUM = *ZERO;

     ENDIF;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Order Scheduled Today USR = CND.yes
     PAR.Order_Scheduled_Today_USR = 'Y';

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

     //?USER: Exit processing

     // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
     PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    }

    //?If order was not scheduled, then schedule
    CASE;

    // IF LCL.Order Scheduled Today USR is no
    IF LCL.Order_Scheduled_Today_USR = 'N';

    EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Quantity_Scheduled);
    {
     //?USER: Process Data record

     // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
     PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
     - DB1.Quantity_Sales_USR;

     EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Sched_Shipments_USR);
     PARAMETER(PAR.Total_Availability_USR);
    }

    ENDIF;

    //?DOC: 04/11/07 Change Log
    DO;

    //?04/10/07 Effective 04/23/07 representation of Age Code changes
    //?         will be such that Age Code A will be 0 day for boxes
    //?         and combos.  The labels on the cartons will not print
    //?         a date that is offset by Sunday or Holiday.  Instead of
    //?         Code Date, it will be the Pack Date.
    ENDDO;

    //?Set age code to specific day by number
    CASE;

    // IF DB1.Age Code is A: 0 Day
    IF DB1.Age_Code = 'A';

    // PAR.Aging Day = CON.*ZERO
    PAR.Aging_Day = 0;

    //?Set age code to specific day by number
    // IF DB1.Age Code is B: 1 Day
    IF DB1.Age_Code = 'B';

    // PAR.Aging Day = CON.1
    PAR.Aging_Day = 1;

    //?Set age code to specific day by number
    // IF DB1.Age Code is C: 2 Day
    IF DB1.Age_Code = 'C';

    // PAR.Aging Day = CON.2
    PAR.Aging_Day = 2;

    //?Set age code to specific day by number
    // IF DB1.Age Code is D: 3 Day
    IF DB1.Age_Code = 'D';

    // PAR.Aging Day = CON.3
    PAR.Aging_Day = 3;

    //?Set age code to specific day by number
    // IF DB1.Age Code is E: 4 Day
    IF DB1.Age_Code = 'E';

    // PAR.Aging Day = CON.4
    PAR.Aging_Day = 4;

    //?Set age code to specific day by number
    // IF DB1.Age Code is F: 5 Day
    IF DB1.Age_Code = 'F';

    // PAR.Aging Day = CON.5
    PAR.Aging_Day = 5;

    //?Set age code to specific day by number
    // IF DB1.Age Code is G: 6 Day
    IF DB1.Age_Code = 'G';

    // PAR.Aging Day = CON.6
    PAR.Aging_Day = 6;

    //?Set age code to specific day by number
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Aging Day = CON.999
    PAR.Aging_Day = 999;

    ENDIF;

    EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Aging_Day);
    PARAMETER(PAR.Week_End_Date_USR);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    PARAMETER(PAR.ATS_Quantity_Need_USR);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Initialize routine

     // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
     PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

     //?USER: Process Data record

     // PAR.Quantity Allocated USR = CON.*ZERO
     PAR.Quantity_Allocated_USR = *ZERO;

     //?If age day is zero or order has been allocated, then QUIT
     CASE;

     // IF PAR.Aging Day is equal to zero
     IF PAR.Aging_Day = *ZERO;

     // OR PAR.Quantity Sched 1 USR is LE Zero
     OR PAR.Quantity_Sched_1_USR <= *ZERO;

     QUIT;

     ENDIF;

     // Avail with no inventory
     PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
     - DB1.Quantity_Sales_USR;

     //?Allocate Order
     CASE;

     // IF PAR.Quantity Available    SUM is GT Zero
     IF PAR.Quantity_Available_SUM > *ZERO;

     CASE;

     // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
     IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
     PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

     // PAR.Quantity Sched 1 USR = CON.*ZERO
     PAR.Quantity_Sched_1_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
     PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

     // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
     PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

     ENDIF;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     CASE;

     // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
     IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

     //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
     // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
     PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

     ENDIF;

     ENDIF;

     // PAR.Aging Day = PAR.Aging Day - CON.1
     PAR.Aging_Day = PAR.Aging_Day - 1;

     // PAR.First Time Flag = CND.NO
     PAR.First_Time_Flag = 'N';

    }

    //?Change allocation for schedule shipments not scheduled on ship date
    CASE;

    // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
    IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

    EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER(DB1.Reserved_for_Other_Whse);
    }

    ENDIF;

   }

   //?If this is a production whse, then reserve other whse orders.
   CASE;

   // IF PAR.Production Warehouse Code EQ PAR.Warehouse Code
   IF PAR.Production_Warehouse_Code = PAR.Warehouse_Code;

   // OR PAR.Production Warehouse Code is Warehouse Code Blank
   OR PAR.Production_Warehouse_Code = *BLANK;

   EXECUTE FUNCTION(Rtv Rsrvd Other Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1560700;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.Header_Status);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Header Status is Not Comp/Canc/Conf
    IF PAR.Header_Status = 'L'/'A'/'E'/'H';

    //?Is it time to Quit ??
    CASE;

    // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
    IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

    QUIT;

    ENDIF;

    //?If warehouse ordered not equal to warehouse scheduled, then reserve
    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    EXECUTE FUNCTION(Rtv Add to Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1560732;
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
    {
     //?USER: Process Data record

     // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Qty Not Alloc on Shi
     PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Qty_Not_Alloc_on_Ship_Dt;

     // New Available
     PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
     + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
     - PAR.Total_Quantity_Alloc_USR;

     EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
     PARAMETER(DB1.Avail_Ship_Date_USR);
     PARAMETER(PAR.Total_Quantity_Alloc_USR);
     PARAMETER(PAR.Total_Availability_USR);
     PARAMETER('Y');
    }

    ENDIF;

    ENDIF;

   }

   ENDIF;

   //?Retrieve Sched Ship/Allocation/Available from PA Array
   CASE;

   // IF WRK.BLANK EQ WRK.BLANK
   IF WRK.BLANK = WRK.BLANK;

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  //?If match found add up totals
  CASE;

  // IF PAR.Status - Y or N is yes
  IF PAR.Status_Y_or_N = 'Y';

  // PAR.Day 1 Inventory Total USR = PAR.Day 1 Inventory Total USR + PAR.Day 1 Invent
  PAR.Day_1_Inventory_Total_USR = PAR.Day_1_Inventory_Total_USR + PAR.Day_1_Inventory_USR;

  // PAR.Day 2 Inventory Total USR = PAR.Day 2 Inventory Total USR + PAR.Day 2 Invent
  PAR.Day_2_Inventory_Total_USR = PAR.Day_2_Inventory_Total_USR + PAR.Day_2_Inventory_USR;

  // PAR.Day 3 Inventory Total USR = PAR.Day 3 Inventory Total USR + PAR.Day 3 Invent
  PAR.Day_3_Inventory_Total_USR = PAR.Day_3_Inventory_Total_USR + PAR.Day_3_Inventory_USR;

  // PAR.Day 4 Inventory Total USR = PAR.Day 4 Inventory Total USR + PAR.Day 4 Invent
  PAR.Day_4_Inventory_Total_USR = PAR.Day_4_Inventory_Total_USR + PAR.Day_4_Inventory_USR;

  // PAR.Day 5 Inventory Total USR = PAR.Day 5 Inventory Total USR + PAR.Day 5 Invent
  PAR.Day_5_Inventory_Total_USR = PAR.Day_5_Inventory_Total_USR + PAR.Day_5_Inventory_USR;

  // PAR.Day 6 Inventory Total USR = PAR.Day 6 Inventory Total USR + PAR.Day 6 Invent
  PAR.Day_6_Inventory_Total_USR = PAR.Day_6_Inventory_Total_USR + PAR.Day_6_Inventory_USR;

  // PAR.Day 7 Inventory Total USR = PAR.Day 7 Inventory Total USR + PAR.Day 7 Invent
  PAR.Day_7_Inventory_Total_USR = PAR.Day_7_Inventory_Total_USR + PAR.Day_7_Inventory_USR;

  // PAR.Day 8 Inventory Total USR = PAR.Day 8 Inventory Total USR + PAR.Day 8 Invent
  PAR.Day_8_Inventory_Total_USR = PAR.Day_8_Inventory_Total_USR + PAR.Day_8_Inventory_USR;

  // PAR.Day 9 Inventory Total USR = PAR.Day 9 Inventory Total USR + PAR.Day 9 Invent
  PAR.Day_9_Inventory_Total_USR = PAR.Day_9_Inventory_Total_USR + PAR.Day_9_Inventory_USR;

  // PAR.Day 10 Inventory Totl USR = PAR.Day 10 Inventory Totl USR + PAR.Day 10 Inven
  PAR.Day_10_Inventory_Totl_USR = PAR.Day_10_Inventory_Totl_USR + PAR.Day_10_Inventory_USR;

  // PAR.Day 11 Inventory Totl USR = PAR.Day 11 Inventory Totl USR + PAR.Day 11 Inven
  PAR.Day_11_Inventory_Totl_USR = PAR.Day_11_Inventory_Totl_USR + PAR.Day_11_Inventory_USR;

  // PAR.Day 12 Inventory Totl USR = PAR.Day 12 Inventory Totl USR + PAR.Day 12 Inven
  PAR.Day_12_Inventory_Totl_USR = PAR.Day_12_Inventory_Totl_USR + PAR.Day_12_Inventory_USR;

  // PAR.Day 13 Inventory Totl USR = PAR.Day 13 Inventory Totl USR + PAR.Day 13 Inven
  PAR.Day_13_Inventory_Totl_USR = PAR.Day_13_Inventory_Totl_USR + PAR.Day_13_Inventory_USR;

  // PAR.Day 14 Inventory Totl USR = PAR.Day 14 Inventory Totl USR + PAR.Day 14 Inven
  PAR.Day_14_Inventory_Totl_USR = PAR.Day_14_Inventory_Totl_USR + PAR.Day_14_Inventory_USR;

  // PAR.Day 1 Production TotalUSR = PAR.Day 1 Production TotalUSR + PAR.Day 1 Produc
  PAR.Day_1_Production_TotalUSR = PAR.Day_1_Production_TotalUSR + PAR.Day_1_Production_USR;

  // PAR.Day 2 Production TotalUSR = PAR.Day 2 Production TotalUSR + PAR.Day 2 Produc
  PAR.Day_2_Production_TotalUSR = PAR.Day_2_Production_TotalUSR + PAR.Day_2_Production_USR;

  // PAR.Day 3 Production TotalUSR = PAR.Day 3 Production TotalUSR + PAR.Day 3 Produc
  PAR.Day_3_Production_TotalUSR = PAR.Day_3_Production_TotalUSR + PAR.Day_3_Production_USR;

  // PAR.Day 4 Production TotalUSR = PAR.Day 4 Production TotalUSR + PAR.Day 4 Produc
  PAR.Day_4_Production_TotalUSR = PAR.Day_4_Production_TotalUSR + PAR.Day_4_Production_USR;

  // PAR.Day 5 Production TotalUSR = PAR.Day 5 Production TotalUSR + PAR.Day 5 Produc
  PAR.Day_5_Production_TotalUSR = PAR.Day_5_Production_TotalUSR + PAR.Day_5_Production_USR;

  // PAR.Day 6 Production TotalUSR = PAR.Day 6 Production TotalUSR + PAR.Day 6 Produc
  PAR.Day_6_Production_TotalUSR = PAR.Day_6_Production_TotalUSR + PAR.Day_6_Production_USR;

  // PAR.Day 7 Production TotalUSR = PAR.Day 7 Production TotalUSR + PAR.Day 7 Produc
  PAR.Day_7_Production_TotalUSR = PAR.Day_7_Production_TotalUSR + PAR.Day_7_Production_USR;

  // PAR.Day 8 Prod Total      USR = PAR.Day 8 Prod Total      USR + PAR.Day 8 Produc
  PAR.Day_8_Prod_Total_USR = PAR.Day_8_Prod_Total_USR + PAR.Day_8_Production_USR;

  // PAR.Day 9 Prod Total      USR = PAR.Day 9 Prod Total      USR + PAR.Day 9 Produc
  PAR.Day_9_Prod_Total_USR = PAR.Day_9_Prod_Total_USR + PAR.Day_9_Production_USR;

  // PAR.Day 10 Prod Total     USR = PAR.Day 10 Prod Total     USR + PAR.Day 10 Produ
  PAR.Day_10_Prod_Total_USR = PAR.Day_10_Prod_Total_USR + PAR.Day_10_Production_USR;

  // PAR.Day 11 Prod Total     USR = PAR.Day 11 Prod Total     USR + PAR.Day 11 Produ
  PAR.Day_11_Prod_Total_USR = PAR.Day_11_Prod_Total_USR + PAR.Day_11_Production_USR;

  // PAR.Day 12 Prod Total     USR = PAR.Day 12 Prod Total     USR + PAR.Day 12 Produ
  PAR.Day_12_Prod_Total_USR = PAR.Day_12_Prod_Total_USR + PAR.Day_12_Production_USR;

  // PAR.Day 13 Prod Total     USR = PAR.Day 13 Prod Total     USR + PAR.Day 13 Produ
  PAR.Day_13_Prod_Total_USR = PAR.Day_13_Prod_Total_USR + PAR.Day_13_Production_USR;

  // PAR.Day 14 Prod Total     USR = PAR.Day 14 Prod Total     USR + PAR.Day 14 Produ
  PAR.Day_14_Prod_Total_USR = PAR.Day_14_Prod_Total_USR + PAR.Day_14_Production_USR;

  // PAR.Day 15 Prod Total     USR = PAR.Day 15 Prod Total     USR + PAR.Day 15 Produ
  PAR.Day_15_Prod_Total_USR = PAR.Day_15_Prod_Total_USR + PAR.Day_15_Production_USR;

  // PAR.Day 16 Prod Total     USR = PAR.Day 16 Prod Total     USR + PAR.Day 16 Produ
  PAR.Day_16_Prod_Total_USR = PAR.Day_16_Prod_Total_USR + PAR.Day_16_Production_USR;

  // PAR.Day 17 Prod Total     USR = PAR.Day 17 Prod Total     USR + PAR.Day 17 Produ
  PAR.Day_17_Prod_Total_USR = PAR.Day_17_Prod_Total_USR + PAR.Day_17_Production_USR;

  // PAR.Day 18 Prod Total     USR = PAR.Day 18 Prod Total     USR + PAR.Day 18 Produ
  PAR.Day_18_Prod_Total_USR = PAR.Day_18_Prod_Total_USR + PAR.Day_18_Production_USR;

  // PAR.Day 19 Prod Total     USR = PAR.Day 19 Prod Total     USR + PAR.Day 19 Produ
  PAR.Day_19_Prod_Total_USR = PAR.Day_19_Prod_Total_USR + PAR.Day_19_Production_USR;

  // PAR.Day 20 Prod Total     USR = PAR.Day 20 Prod Total     USR + PAR.Day 20 Produ
  PAR.Day_20_Prod_Total_USR = PAR.Day_20_Prod_Total_USR + PAR.Day_20_Production_USR;

  // PAR.Day 21 Prod Total     USR = PAR.Day 21 Prod Total     USR + PAR.Day 21 Produ
  PAR.Day_21_Prod_Total_USR = PAR.Day_21_Prod_Total_USR + PAR.Day_21_Production_USR;

  // PAR.Day 1 Schd Ship Total USR = PAR.Day 1 Schd Ship Total USR + PAR.Day 1 Sched
  PAR.Day_1_Schd_Ship_Total_USR = PAR.Day_1_Schd_Ship_Total_USR
  + PAR.Day_1_Sched_Shipments_USR;

  // PAR.Day 2 Schd Ship Total USR = PAR.Day 2 Schd Ship Total USR + PAR.Day 2 Sched
  PAR.Day_2_Schd_Ship_Total_USR = PAR.Day_2_Schd_Ship_Total_USR
  + PAR.Day_2_Sched_Shipments_USR;

  // PAR.Day 3 Schd Ship Total USR = PAR.Day 3 Schd Ship Total USR + PAR.Day 3 Sched
  PAR.Day_3_Schd_Ship_Total_USR = PAR.Day_3_Schd_Ship_Total_USR
  + PAR.Day_3_Sched_Shipments_USR;

  // PAR.Day 4 Schd Ship Total USR = PAR.Day 4 Schd Ship Total USR + PAR.Day 4 Sched
  PAR.Day_4_Schd_Ship_Total_USR = PAR.Day_4_Schd_Ship_Total_USR
  + PAR.Day_4_Sched_Shipments_USR;

  // PAR.Day 5 Schd Ship Total USR = PAR.Day 5 Schd Ship Total USR + PAR.Day 5 Sched
  PAR.Day_5_Schd_Ship_Total_USR = PAR.Day_5_Schd_Ship_Total_USR
  + PAR.Day_5_Sched_Shipments_USR;

  // PAR.Day 6 Schd Ship Total USR = PAR.Day 6 Schd Ship Total USR + PAR.Day 6 Sched
  PAR.Day_6_Schd_Ship_Total_USR = PAR.Day_6_Schd_Ship_Total_USR
  + PAR.Day_6_Sched_Shipments_USR;

  // PAR.Day 7 Schd Ship Total USR = PAR.Day 7 Schd Ship Total USR + PAR.Day 7 Sched
  PAR.Day_7_Schd_Ship_Total_USR = PAR.Day_7_Schd_Ship_Total_USR
  + PAR.Day_7_Sched_Shipments_USR;

  // PAR.Day 8 Schd Ship Total USR = PAR.Day 8 Schd Ship Total USR + PAR.Day 8 Sched
  PAR.Day_8_Schd_Ship_Total_USR = PAR.Day_8_Schd_Ship_Total_USR
  + PAR.Day_8_Sched_Shipments_USR;

  // PAR.Day 9 Schd Ship Total USR = PAR.Day 9 Schd Ship Total USR + PAR.Day 9 Sched
  PAR.Day_9_Schd_Ship_Total_USR = PAR.Day_9_Schd_Ship_Total_USR
  + PAR.Day_9_Sched_Shipments_USR;

  // PAR.Day 10 SchdShip Total USR = PAR.Day 10 SchdShip Total USR + PAR.Day 10 Sched
  PAR.Day_10_SchdShip_Total_USR = PAR.Day_10_SchdShip_Total_USR
  + PAR.Day_10_Sched_Shipment_USR;

  // PAR.Day 11 SchdShip Total USR = PAR.Day 11 SchdShip Total USR + PAR.Day 11 Sched
  PAR.Day_11_SchdShip_Total_USR = PAR.Day_11_SchdShip_Total_USR
  + PAR.Day_11_Sched_Shipment_USR;

  // PAR.Day 12 SchdShip Total USR = PAR.Day 12 SchdShip Total USR + PAR.Day 12 Sched
  PAR.Day_12_SchdShip_Total_USR = PAR.Day_12_SchdShip_Total_USR
  + PAR.Day_12_Sched_Shipment_USR;

  // PAR.Day 13 SchdShip Total USR = PAR.Day 13 SchdShip Total USR + PAR.Day 13 Sched
  PAR.Day_13_SchdShip_Total_USR = PAR.Day_13_SchdShip_Total_USR
  + PAR.Day_13_Sched_Shipment_USR;

  // PAR.Day 14 SchdShip Total USR = PAR.Day 14 SchdShip Total USR + PAR.Day 14 Sched
  PAR.Day_14_SchdShip_Total_USR = PAR.Day_14_SchdShip_Total_USR
  + PAR.Day_14_Sched_Shipment_USR;

  // PAR.Day 15 SchdShip Total USR = PAR.Day 15 SchdShip Total USR + PAR.Day 15 Sched
  PAR.Day_15_SchdShip_Total_USR = PAR.Day_15_SchdShip_Total_USR
  + PAR.Day_15_Sched_Shipment_USR;

  // PAR.Day 16 SchdShip Total USR = PAR.Day 16 SchdShip Total USR + PAR.Day 16 Sched
  PAR.Day_16_SchdShip_Total_USR = PAR.Day_16_SchdShip_Total_USR
  + PAR.Day_16_Sched_Shipment_USR;

  // PAR.Day 17 SchdShip Total USR = PAR.Day 17 SchdShip Total USR + PAR.Day 17 Sched
  PAR.Day_17_SchdShip_Total_USR = PAR.Day_17_SchdShip_Total_USR
  + PAR.Day_17_Sched_Shipment_USR;

  // PAR.Day 18 SchdShip Total USR = PAR.Day 18 SchdShip Total USR + PAR.Day 18 Sched
  PAR.Day_18_SchdShip_Total_USR = PAR.Day_18_SchdShip_Total_USR
  + PAR.Day_18_Sched_Shipment_USR;

  // PAR.Day 19 SchdShip Total USR = PAR.Day 19 SchdShip Total USR + PAR.Day 19 Sched
  PAR.Day_19_SchdShip_Total_USR = PAR.Day_19_SchdShip_Total_USR
  + PAR.Day_19_Sched_Shipment_USR;

  // PAR.Day 20 SchdShip Total USR = PAR.Day 20 SchdShip Total USR + PAR.Day 20 Sched
  PAR.Day_20_SchdShip_Total_USR = PAR.Day_20_SchdShip_Total_USR
  + PAR.Day_20_Sched_Shipment_USR;

  // PAR.Day 21 SchdShip Total USR = PAR.Day 21 SchdShip Total USR + PAR.Day 21 Sched
  PAR.Day_21_SchdShip_Total_USR = PAR.Day_21_SchdShip_Total_USR
  + PAR.Day_21_Sched_Shipment_USR;

  // PAR.Day 1 Sales Total     USR = PAR.Day 1 Sales Total     USR + PAR.Day 1 Sales
  PAR.Day_1_Sales_Total_USR = PAR.Day_1_Sales_Total_USR + PAR.Day_1_Sales_USR;

  // PAR.Day 2 Sales Total     USR = PAR.Day 2 Sales Total     USR + PAR.Day 2 Sales
  PAR.Day_2_Sales_Total_USR = PAR.Day_2_Sales_Total_USR + PAR.Day_2_Sales_USR;

  // PAR.Day 3 Sales Total     USR = PAR.Day 3 Sales Total     USR + PAR.Day 3 Sales
  PAR.Day_3_Sales_Total_USR = PAR.Day_3_Sales_Total_USR + PAR.Day_3_Sales_USR;

  // PAR.Day 4 Sales Total     USR = PAR.Day 4 Sales Total     USR + PAR.Day 4 Sales
  PAR.Day_4_Sales_Total_USR = PAR.Day_4_Sales_Total_USR + PAR.Day_4_Sales_USR;

  // PAR.Day 5 Sales Total     USR = PAR.Day 5 Sales Total     USR + PAR.Day 5 Sales
  PAR.Day_5_Sales_Total_USR = PAR.Day_5_Sales_Total_USR + PAR.Day_5_Sales_USR;

  // PAR.Day 6 Sales Total     USR = PAR.Day 6 Sales Total     USR + PAR.Day 6 Sales
  PAR.Day_6_Sales_Total_USR = PAR.Day_6_Sales_Total_USR + PAR.Day_6_Sales_USR;

  // PAR.Day 7 Sales Total     USR = PAR.Day 7 Sales Total     USR + PAR.Day 7 Sales
  PAR.Day_7_Sales_Total_USR = PAR.Day_7_Sales_Total_USR + PAR.Day_7_Sales_USR;

  // PAR.Day 8 Sales Total     USR = PAR.Day 8 Sales Total     USR + PAR.Day 8 Sales
  PAR.Day_8_Sales_Total_USR = PAR.Day_8_Sales_Total_USR + PAR.Day_8_Sales_USR;

  // PAR.Day 9 Sales Total     USR = PAR.Day 9 Sales Total     USR + PAR.Day 9 Sales
  PAR.Day_9_Sales_Total_USR = PAR.Day_9_Sales_Total_USR + PAR.Day_9_Sales_USR;

  // PAR.Day 10 Sales Total    USR = PAR.Day 10 Sales Total    USR + PAR.Day 10 Sales
  PAR.Day_10_Sales_Total_USR = PAR.Day_10_Sales_Total_USR + PAR.Day_10_Sales_USR;

  // PAR.Day 11 Sales Total    USR = PAR.Day 11 Sales Total    USR + PAR.Day 11 Sales
  PAR.Day_11_Sales_Total_USR = PAR.Day_11_Sales_Total_USR + PAR.Day_11_Sales_USR;

  // PAR.Day 12 Sales Total    USR = PAR.Day 12 Sales Total    USR + PAR.Day 12 Sales
  PAR.Day_12_Sales_Total_USR = PAR.Day_12_Sales_Total_USR + PAR.Day_12_Sales_USR;

  // PAR.Day 13 Sales Total    USR = PAR.Day 13 Sales Total    USR + PAR.Day 13 Sales
  PAR.Day_13_Sales_Total_USR = PAR.Day_13_Sales_Total_USR + PAR.Day_13_Sales_USR;

  // PAR.Day 14 Sales Total    USR = PAR.Day 14 Sales Total    USR + PAR.Day 14 Sales
  PAR.Day_14_Sales_Total_USR = PAR.Day_14_Sales_Total_USR + PAR.Day_14_Sales_USR;

  // PAR.Day 15 Sales Total    USR = PAR.Day 15 Sales Total    USR + PAR.Day 15 Sales
  PAR.Day_15_Sales_Total_USR = PAR.Day_15_Sales_Total_USR + PAR.Day_15_Sales_USR;

  // PAR.Day 16 Sales Total    USR = PAR.Day 16 Sales Total    USR + PAR.Day 16 Sales
  PAR.Day_16_Sales_Total_USR = PAR.Day_16_Sales_Total_USR + PAR.Day_16_Sales_USR;

  // PAR.Day 17 Sales Total    USR = PAR.Day 17 Sales Total    USR + PAR.Day 17 Sales
  PAR.Day_17_Sales_Total_USR = PAR.Day_17_Sales_Total_USR + PAR.Day_17_Sales_USR;

  // PAR.Day 18 Sales Total    USR = PAR.Day 18 Sales Total    USR + PAR.Day 18 Sales
  PAR.Day_18_Sales_Total_USR = PAR.Day_18_Sales_Total_USR + PAR.Day_18_Sales_USR;

  // PAR.Day 19 Sales Total    USR = PAR.Day 19 Sales Total    USR + PAR.Day 19 Sales
  PAR.Day_19_Sales_Total_USR = PAR.Day_19_Sales_Total_USR + PAR.Day_19_Sales_USR;

  // PAR.Day 20 Sales Total    USR = PAR.Day 20 Sales Total    USR + PAR.Day 20 Sales
  PAR.Day_20_Sales_Total_USR = PAR.Day_20_Sales_Total_USR + PAR.Day_20_Sales_USR;

  // PAR.Day 21 Sales Total    USR = PAR.Day 21 Sales Total    USR + PAR.Day 21 Sales
  PAR.Day_21_Sales_Total_USR = PAR.Day_21_Sales_Total_USR + PAR.Day_21_Sales_USR;

  // PAR.Day 1 Avail Total     USR = PAR.Day 1 Avail Total     USR + PAR.Day 1 Availa
  PAR.Day_1_Avail_Total_USR = PAR.Day_1_Avail_Total_USR + PAR.Day_1_Availability_USR;

  // PAR.Day 2 Avail Total     USR = PAR.Day 2 Avail Total     USR + PAR.Day 2 Availa
  PAR.Day_2_Avail_Total_USR = PAR.Day_2_Avail_Total_USR + PAR.Day_2_Availability_USR;

  // PAR.Day 3 Avail Total     USR = PAR.Day 3 Avail Total     USR + PAR.Day 3 Availa
  PAR.Day_3_Avail_Total_USR = PAR.Day_3_Avail_Total_USR + PAR.Day_3_Availability_USR;

  // PAR.Day 4 Avail Total     USR = PAR.Day 4 Avail Total     USR + PAR.Day 4 Availa
  PAR.Day_4_Avail_Total_USR = PAR.Day_4_Avail_Total_USR + PAR.Day_4_Availability_USR;

  // PAR.Day 5 Avail Total     USR = PAR.Day 5 Avail Total     USR + PAR.Day 5 Availa
  PAR.Day_5_Avail_Total_USR = PAR.Day_5_Avail_Total_USR + PAR.Day_5_Availability_USR;

  // PAR.Day 6 Avail Total     USR = PAR.Day 6 Avail Total     USR + PAR.Day 6 Availa
  PAR.Day_6_Avail_Total_USR = PAR.Day_6_Avail_Total_USR + PAR.Day_6_Availability_USR;

  // PAR.Day 7 Avail Total     USR = PAR.Day 7 Avail Total     USR + PAR.Day 7 Availa
  PAR.Day_7_Avail_Total_USR = PAR.Day_7_Avail_Total_USR + PAR.Day_7_Availability_USR;

  // PAR.Day 8 Avail Total     USR = PAR.Day 8 Avail Total     USR + PAR.Day 8 Availa
  PAR.Day_8_Avail_Total_USR = PAR.Day_8_Avail_Total_USR + PAR.Day_8_Availability_USR;

  // PAR.Day 9 Avail Total     USR = PAR.Day 9 Avail Total     USR + PAR.Day 9 Availa
  PAR.Day_9_Avail_Total_USR = PAR.Day_9_Avail_Total_USR + PAR.Day_9_Availability_USR;

  // PAR.Day 10 Avail Total    USR = PAR.Day 10 Avail Total    USR + PAR.Day 10 Avail
  PAR.Day_10_Avail_Total_USR = PAR.Day_10_Avail_Total_USR + PAR.Day_10_Availability_USR;

  // PAR.Day 11 Avail Total    USR = PAR.Day 11 Avail Total    USR + PAR.Day 11 Avail
  PAR.Day_11_Avail_Total_USR = PAR.Day_11_Avail_Total_USR + PAR.Day_11_Availability_USR;

  // PAR.Day 12 Avail Total    USR = PAR.Day 12 Avail Total    USR + PAR.Day 12 Avail
  PAR.Day_12_Avail_Total_USR = PAR.Day_12_Avail_Total_USR + PAR.Day_12_Availability_USR;

  // PAR.Day 13 Avail Total    USR = PAR.Day 13 Avail Total    USR + PAR.Day 13 Avail
  PAR.Day_13_Avail_Total_USR = PAR.Day_13_Avail_Total_USR + PAR.Day_13_Availability_USR;

  // PAR.Day 14 Avail Total    USR = PAR.Day 14 Avail Total    USR + PAR.Day 14 Avail
  PAR.Day_14_Avail_Total_USR = PAR.Day_14_Avail_Total_USR + PAR.Day_14_Availability_USR;

  // PAR.Day 15 Avail Total    USR = PAR.Day 15 Avail Total    USR + PAR.Day 15 Avail
  PAR.Day_15_Avail_Total_USR = PAR.Day_15_Avail_Total_USR + PAR.Day_15_Availability_USR;

  // PAR.Day 16 Avail Total    USR = PAR.Day 16 Avail Total    USR + PAR.Day 16 Avail
  PAR.Day_16_Avail_Total_USR = PAR.Day_16_Avail_Total_USR + PAR.Day_16_Availability_USR;

  // PAR.Day 17 Avail Total    USR = PAR.Day 17 Avail Total    USR + PAR.Day 17 Avail
  PAR.Day_17_Avail_Total_USR = PAR.Day_17_Avail_Total_USR + PAR.Day_17_Availability_USR;

  // PAR.Day 18 Avail Total    USR = PAR.Day 18 Avail Total    USR + PAR.Day 18 Avail
  PAR.Day_18_Avail_Total_USR = PAR.Day_18_Avail_Total_USR + PAR.Day_18_Availability_USR;

  // PAR.Day 19 Avail Total    USR = PAR.Day 19 Avail Total    USR + PAR.Day 19 Avail
  PAR.Day_19_Avail_Total_USR = PAR.Day_19_Avail_Total_USR + PAR.Day_19_Availability_USR;

  // PAR.Day 20 Avail Total    USR = PAR.Day 20 Avail Total    USR + PAR.Day 20 Avail
  PAR.Day_20_Avail_Total_USR = PAR.Day_20_Avail_Total_USR + PAR.Day_20_Availability_USR;

  // PAR.Day 21 Avail Total    USR = PAR.Day 21 Avail Total    USR + PAR.Day 21 Avail
  PAR.Day_21_Avail_Total_USR = PAR.Day_21_Avail_Total_USR + PAR.Day_21_Availability_USR;

  ENDIF;

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

 }

 //?Add up totals
 CASE;

 // IF WRK.USR Work Field 1 CDE EQ WRK.USR Work Field 1 CDE
 IF WRK.USR_Work_Field_1_CDE = WRK.USR_Work_Field_1_CDE;

 // PAR.Day 1 Avail Total     USR = PAR.Day 1 Avail Total     USR + PAR.Day 1 Availa
 PAR.Day_1_Avail_Total_USR = PAR.Day_1_Avail_Total_USR + PAR.Day_1_Availability_USR;

 // PAR.Day 2 Avail Total     USR = PAR.Day 2 Avail Total     USR + PAR.Day 2 Availa
 PAR.Day_2_Avail_Total_USR = PAR.Day_2_Avail_Total_USR + PAR.Day_2_Availability_USR;

 // PAR.Day 3 Avail Total     USR = PAR.Day 3 Avail Total     USR + PAR.Day 3 Availa
 PAR.Day_3_Avail_Total_USR = PAR.Day_3_Avail_Total_USR + PAR.Day_3_Availability_USR;

 // PAR.Day 4 Avail Total     USR = PAR.Day 4 Avail Total     USR + PAR.Day 4 Availa
 PAR.Day_4_Avail_Total_USR = PAR.Day_4_Avail_Total_USR + PAR.Day_4_Availability_USR;

 // PAR.Day 5 Avail Total     USR = PAR.Day 5 Avail Total     USR + PAR.Day 5 Availa
 PAR.Day_5_Avail_Total_USR = PAR.Day_5_Avail_Total_USR + PAR.Day_5_Availability_USR;

 // PAR.Day 6 Avail Total     USR = PAR.Day 6 Avail Total     USR + PAR.Day 6 Availa
 PAR.Day_6_Avail_Total_USR = PAR.Day_6_Avail_Total_USR + PAR.Day_6_Availability_USR;

 // PAR.Day 7 Avail Total     USR = PAR.Day 7 Avail Total     USR + PAR.Day 7 Availa
 PAR.Day_7_Avail_Total_USR = PAR.Day_7_Avail_Total_USR + PAR.Day_7_Availability_USR;

 // PAR.Day 8 Avail Total     USR = PAR.Day 8 Avail Total     USR + PAR.Day 8 Availa
 PAR.Day_8_Avail_Total_USR = PAR.Day_8_Avail_Total_USR + PAR.Day_8_Availability_USR;

 // PAR.Day 9 Avail Total     USR = PAR.Day 9 Avail Total     USR + PAR.Day 9 Availa
 PAR.Day_9_Avail_Total_USR = PAR.Day_9_Avail_Total_USR + PAR.Day_9_Availability_USR;

 // PAR.Day 10 Avail Total    USR = PAR.Day 10 Avail Total    USR + PAR.Day 10 Avail
 PAR.Day_10_Avail_Total_USR = PAR.Day_10_Avail_Total_USR + PAR.Day_10_Availability_USR;

 // PAR.Day 11 Avail Total    USR = PAR.Day 11 Avail Total    USR + PAR.Day 11 Avail
 PAR.Day_11_Avail_Total_USR = PAR.Day_11_Avail_Total_USR + PAR.Day_11_Availability_USR;

 // PAR.Day 12 Avail Total    USR = PAR.Day 12 Avail Total    USR + PAR.Day 12 Avail
 PAR.Day_12_Avail_Total_USR = PAR.Day_12_Avail_Total_USR + PAR.Day_12_Availability_USR;

 // PAR.Day 13 Avail Total    USR = PAR.Day 13 Avail Total    USR + PAR.Day 13 Avail
 PAR.Day_13_Avail_Total_USR = PAR.Day_13_Avail_Total_USR + PAR.Day_13_Availability_USR;

 // PAR.Day 14 Avail Total    USR = PAR.Day 14 Avail Total    USR + PAR.Day 14 Avail
 PAR.Day_14_Avail_Total_USR = PAR.Day_14_Avail_Total_USR + PAR.Day_14_Availability_USR;

 // PAR.Day 15 Avail Total    USR = PAR.Day 15 Avail Total    USR + PAR.Day 15 Avail
 PAR.Day_15_Avail_Total_USR = PAR.Day_15_Avail_Total_USR + PAR.Day_15_Availability_USR;

 // PAR.Day 16 Avail Total    USR = PAR.Day 16 Avail Total    USR + PAR.Day 16 Avail
 PAR.Day_16_Avail_Total_USR = PAR.Day_16_Avail_Total_USR + PAR.Day_16_Availability_USR;

 // PAR.Day 17 Avail Total    USR = PAR.Day 17 Avail Total    USR + PAR.Day 17 Avail
 PAR.Day_17_Avail_Total_USR = PAR.Day_17_Avail_Total_USR + PAR.Day_17_Availability_USR;

 // PAR.Day 18 Avail Total    USR = PAR.Day 18 Avail Total    USR + PAR.Day 18 Avail
 PAR.Day_18_Avail_Total_USR = PAR.Day_18_Avail_Total_USR + PAR.Day_18_Availability_USR;

 // PAR.Day 19 Avail Total    USR = PAR.Day 19 Avail Total    USR + PAR.Day 19 Avail
 PAR.Day_19_Avail_Total_USR = PAR.Day_19_Avail_Total_USR + PAR.Day_19_Availability_USR;

 // PAR.Day 20 Avail Total    USR = PAR.Day 20 Avail Total    USR + PAR.Day 20 Avail
 PAR.Day_20_Avail_Total_USR = PAR.Day_20_Avail_Total_USR + PAR.Day_20_Availability_USR;

 // PAR.Day 21 Avail Total    USR = PAR.Day 21 Avail Total    USR + PAR.Day 21 Avail
 PAR.Day_21_Avail_Total_USR = PAR.Day_21_Avail_Total_USR + PAR.Day_21_Availability_USR;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Display Flag 1 USR = CND.no
PAR.Display_Flag_1_USR = 'N';

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

