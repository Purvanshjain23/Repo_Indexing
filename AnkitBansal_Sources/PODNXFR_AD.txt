// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PODNXFR
// ?Date: 14.08.2025 Time: 03:36:48
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Rollup matching IC Trans Dtl records by accuming qty,wt,ext amt
//?and putting that on the 1st rcd for a key, and deleting the subsequent
//?records
EXECUTE FUNCTION(RTV default Company    IF) TYPE(EXCINTFUN)                     AC1592222;
PARAMETER(PAR.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(JOB.*USER);
 PARAMETER('P/S');
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER('P/S');
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


EXECUTE FUNCTION(RTV Purge Retention    RT) TYPE(RTVOBJ) FILE(PDLPREP)          AC1477891;
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER('ICTRAN');
PARAMETER(WRK.Purge_Retention_Period);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Days to Pay = CON.*ZERO - WRK.Purge Retention # Days
WRK.Days_to_Pay = 0 - WRK.Purge_Retention_Period;

// PAR.USR Date - ATR = JOB.*Job date + WRK.Days to Pay *DAYS
PAR.USR_Date_ATR = DATEINCR(JOB.*Job_date WRK.Days_to_Pay 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv/Rollup Mtchng Rcds RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1595590;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Date_ATR);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Process Data record

 CASE;

 // IF DB1.Company Number NE LCL.Company Number
 IF DB1.Company_Number <> LCL.Company_Number;

 // OR DB1.Item Code NE LCL.Item Code
 OR DB1.Item_Code <> LCL.Item_Code;

 // OR DB1.Warehouse Code NE LCL.Warehouse Code
 OR DB1.Warehouse_Code <> LCL.Warehouse_Code;

 // OR DB1.Production Date NE LCL.Production Date
 OR DB1.Production_Date <> LCL.Production_Date;

 //?Update 1st rcd for the key with the rollup fields accumulated amts.
 CASE;

 // IF LCL.First Time Flag is NO
 IF LCL.First_Time_Flag = 'N';

 EXECUTE FUNCTION(Rtv/Chg rollup rcd     RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1595591;
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Inventory_Trans_ID);
 PARAMETER(LCL.Inventory_Trans_Type);
 PARAMETER(LCL.Transaction_Date_Code);
 PARAMETER(LCL.ITD_Sequence_Number);
 PARAMETER(LCL.Sequence_Number);
 PARAMETER(LCL.Transaction_Quantity);
 PARAMETER(LCL.Transaction_Weight);
 PARAMETER(LCL.Extended_Amount);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Rollup Fields      CH) TYPE(CHGOBJ) FILE(CAB7CPP)          AC1595607;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Inventory_Trans_ID);
  PARAMETER(DB1.Inventory_Trans_Type);
  PARAMETER(DB1.Transaction_Date_Code);
  PARAMETER(DB1.ITD_Sequence_Number);
  PARAMETER(DB1.Sequence_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(PAR.Extended_Amount);
  {
   //?USER: Processing before Data update

   //?01/29/02 PKD Do not change the Record Stamp per Tom Dye. This
   //?             causes inaccurate reporting on the Item Transaction
   //?             Journal.
  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 //?Save key fields -----------
 // LCL.Company Number = DB1.Company Number
 LCL.Company_Number = DB1.Company_Number;

 // LCL.Item Code = DB1.Item Code
 LCL.Item_Code = DB1.Item_Code;

 // LCL.Warehouse Code = DB1.Warehouse Code
 LCL.Warehouse_Code = DB1.Warehouse_Code;

 // LCL.Production Date = DB1.Production Date
 LCL.Production_Date = DB1.Production_Date;

 // LCL.Inventory Trans. ID = DB1.Inventory Trans. ID
 LCL.Inventory_Trans_ID = DB1.Inventory_Trans_ID;

 // LCL.Inventory Trans. Type = DB1.Inventory Trans. Type
 LCL.Inventory_Trans_Type = DB1.Inventory_Trans_Type;

 // LCL.Transaction Date Code = DB1.Transaction Date Code
 LCL.Transaction_Date_Code = DB1.Transaction_Date_Code;

 // LCL.ITD Sequence Number = DB1.ITD Sequence Number
 LCL.ITD_Sequence_Number = DB1.ITD_Sequence_Number;

 // LCL.Sequence Number = DB1.Sequence Number
 LCL.Sequence_Number = DB1.Sequence_Number;

 //?Zero out rollup fields
 // LCL.First time flag 2     USR = CND.Yes
 LCL.First_time_flag_2_USR = 'Y';

 // LCL.Transaction Quantity = CON.*ZERO
 LCL.Transaction_Quantity = *ZERO;

 // LCL.Transaction Weight = CON.*ZERO
 LCL.Transaction_Weight = *ZERO;

 // LCL.Extended Amount = CON.*ZERO
 LCL.Extended_Amount = 0;

 ENDIF;

 //?Accum Rollup fields
 // LCL.Transaction Quantity = LCL.Transaction Quantity + DB1.Transaction Quantity
 LCL.Transaction_Quantity = LCL.Transaction_Quantity + DB1.Transaction_Quantity;

 // LCL.Transaction Weight = LCL.Transaction Weight + DB1.Transaction Weight
 LCL.Transaction_Weight = LCL.Transaction_Weight + DB1.Transaction_Weight;

 // LCL.Extended Amount = LCL.Extended Amount + DB1.Extended Amount
 LCL.Extended_Amount = LCL.Extended_Amount + DB1.Extended_Amount;

 //?Delete the record if it isnt the 1st for the keys read.
 CASE;

 // IF LCL.First time flag 2     USR is No
 IF LCL.First_time_flag_2_USR = 'N';

 EXECUTE FUNCTION(DLT IC Trans. Detail   DL) TYPE(DLTOBJ) FILE(CAB7CPP)          AC1122300;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Trans_ID);
 PARAMETER(DB1.Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(DB1.ITD_Sequence_Number);
 PARAMETER(DB1.Sequence_Number);
 //?Delete the record if it isnt the 1st for the keys read.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.First time flag 2     USR = CND.No
 LCL.First_time_flag_2_USR = 'N';

 ENDIF;

}


