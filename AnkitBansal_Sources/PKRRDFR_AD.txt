// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKRRDFR
// ?Date: 14.08.2025 Time: 02:50:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 4/20/2021 JBB WI440 - M3 to JDE Financials
//?                       Check live with M3 flag value in Company
//?                       Values file.  If flag is Yes, process M3
//?                       logic, otherwise do not process M3.
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('C/S');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?If access denied, exit program
CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// Call program Rtv User Code Model   XF.
CALL PROGRAM(Rtv User Code Model   XF) ('POYBXFR');
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model_USR);

CASE;

// IF LCL.User Code Model USR is Accounting 6
IF LCL.User_Code_Model_USR = 'PORKACCT6';

// PAR.Oms Allow Multi-Company = CND.Yes
PAR.Oms_Allow_Multi_Company = 'Y';

ENDIF;

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?Retrieve Live with E1 flag
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('E1LIVE');
PARAMETER(LCL.Live_with_E1);

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag Usr is Yes
IF WRK.First_Time_Flag_Usr = 'Y';

// CTL.CC Company Number = PAR.CC Company Number
CTL.CC_Company_Number = PAR.CC_Company_Number;

// WRK.First Time Flag Usr = CND.No
WRK.First_Time_Flag_Usr = 'N';

ENDIF;

//?Validate Company Number
CASE;

// IF CTL.CC Company Number NE WRK.Zero USR
IF CTL.CC_Company_Number <> WRK.Zero_USR;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


ENDIF;

//?USER: Initialize subfile record from DBF record

//?RST: Company Number
CASE;

// IF CTL.CC Company Number NE WRK.Zero USR
IF CTL.CC_Company_Number <> WRK.Zero_USR;

// AND DB1.CC Company Number NE CTL.CC Company Number
AND DB1.CC_Company_Number <> CTL.CC_Company_Number;

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Record_selected = 'N';

ENDIF;

// WRK.CGl GL Acct ID = RCD.CGl GL Acct ID
WRK.CGl_GL_Acct_ID = RCD.CGl_GL_Acct_ID;

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(PGM.*Return_code);
PARAMETER(WRK.CGl_GL_Acct_ID);
PARAMETER(RCD.GL_Act_ID_ObjSubDsc_USR);

//? 4/20/2021 JBB WI440 - M3 to JDE Financials
//?M3 logic to perform if Live with E1 = No
CASE;

// IF RCD.GL Act ID-Obj,Sub,Dsc USR EQ WRK.Blank USR
IF RCD.GL_Act_ID_ObjSubDsc_USR = WRK.Blank_USR;

// AND LCL.Live with E1 is No
AND LCL.Live_with_E1 = 'N';

CASE;

// IF RCD.CGL Code EQ DB1.CGl GL Acct ID
IF RCD.CGL_Code = DB1.CGl_GL_Acct_ID;

EXECUTE FUNCTION(RTV Dim/Dsc f/CGL Code RT) TYPE(RTVOBJ) FILE(PLB8REP)          AB1335641;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.CGL_Code);
PARAMETER(WRK.MCR_GL_Acct_ID);
PARAMETER(WRK.MCR_M3_Dimension_1);
PARAMETER(WRK.MCR_M3_Dimension_2);
PARAMETER(WRK.MCR_M3_Dimension_3);
PARAMETER(WRK.MCR_M3_Dimension_4);
PARAMETER(WRK.MCR_M3_Dimension_5);
PARAMETER(WRK.MCR_M3_Dimension_6);
PARAMETER(WRK.MCR_M3_Dimension_7);
PARAMETER(WRK.MCR_M3_Account_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// WRK.MCR GL Acct ID = RCD.CGl GL Acct ID
WRK.MCR_GL_Acct_ID = RCD.CGl_GL_Acct_ID;

EXECUTE FUNCTION(Rtv M3 DIM/Dsc f/GLID RT) TYPE(RTVOBJ) FILE(PLB8REP)           AB1326253;
PARAMETER(WRK.CGl_GL_Acct_ID);
PARAMETER(WRK.MCR_M3_Dimension_1);
PARAMETER(WRK.MCR_M3_Dimension_2);
PARAMETER(WRK.MCR_M3_Dimension_3);
PARAMETER(WRK.MCR_M3_Dimension_4);
PARAMETER(WRK.MCR_M3_Dimension_5);
PARAMETER(WRK.MCR_M3_Dimension_6);
PARAMETER(WRK.MCR_M3_Dimension_7);
PARAMETER(WRK.MCR_M3_Account_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// RCD.GL Act ID-Obj,Sub,Dsc USR = CONCAT(WRK.MCR GL Acct ID,WRK.MCR M3 Account Desc,CON.21)
RCD.GL_Act_ID_ObjSubDsc_USR = WRK.MCR_GL_Acct_ID + WRK.MCR_M3_Account_Desc (21);

ENDIF;

CASE;

// IF RCD.GL Act ID-Obj,Sub,Dsc USR EQ WRK.Blank USR
IF RCD.GL_Act_ID_ObjSubDsc_USR = WRK.Blank_USR;

// RCD.GL Act ID-Obj,Sub,Dsc USR = RCD.CGL Code
RCD.GL_Act_ID_ObjSubDsc_USR = RCD.CGL_Code;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?SEL: Account Category
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.CGL Account Category Code
IF PGM.*Cursor_field = CTL.CGL_Account_Category_Code;

// Call program Sel Account Cat   OMS SR.
CALL PROGRAM(Sel Account Cat   OMS SR) ('PLRSSRR');
PARAMETER(CTL.CGL_Account_Category_Code);

ENDIF;

ENDIF;

//?Create
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// Call program Edt HPE G/L Accounts  ER.
CALL PROGRAM(Edt HPE G/L Accounts  ER) ('PKRSE1R');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.CGL_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F9=Create Account Category
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// Call program Edt Account Category  EF.
CALL PROGRAM(Edt Account Category  EF) ('PLRTEFR');

ENDIF;

//?F21=Print List
CASE;

// IF CTL.*CMD key is Print List
IF CTL.*CMD_key = '21';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print G/L Acounts List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Prt G/L Accts List'
EXECUTE COMMAND(PRK0512);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.CGl_System_Reference_Code);
PARAMETER(CTL.CGL_Control_Sts);
PARAMETER(CTL.CGL_Sub_Account_Type);
PARAMETER(CTL.CGL_Balance_Sheet_Act_Sts);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Display_Print_Prompt_Usr = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'N';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Edit
CASE;

// IF RCD.*SFLSEL is Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt HPE G/L Accounts  ER.
CALL PROGRAM(Edt HPE G/L Accounts  ER) ('PKRSE1R');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.CGL_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Copy
CASE;

// IF RCD.*SFLSEL is *Copy request
IF RCD.*SFLSEL = '3'/'3';

// Call program Cpy G/L Account Code  PV.
CALL PROGRAM(Cpy G/L Account Code  PV) ('PLOIPVR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.CGL_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Delete
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

CASE;

// IF RCD.CGL Control Sts is User
IF RCD.CGL_Control_Sts = 'U';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'N';

// IF RCD.CGL Control Sts is System
IF RCD.CGL_Control_Sts = 'S';

// Send error message - 'Delete Not Allowed for System Controled entry.'
ERROR(PRK0499);
MSGPARM(RCD.CGL_Control_Sts);

ENDIF;

ENDIF;

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Del HPE G/L Account   DL) TYPE(DLTOBJ) FILE(PKCWREP)           AB1143902;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.CGL_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

