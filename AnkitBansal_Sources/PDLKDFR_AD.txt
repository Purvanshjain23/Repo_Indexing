// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDLKDFR
// ?Date: 14.08.2025 Time: 03:32:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

// CTL.*Subfile mode = CND.Truncated
CTL.*Subfile_mode = 1;

//?***** Change Log
DO;

//?*****
//?05/23/16 RMC E4119 remove live with tpm check
//?** 04/13/1015 LJB E004019  Disable 2=Edt Truck Departure
//?** 09/02/2009 RMC S00930 Crt chg log for unpick events
//?** 03/09/2006 LJB  T00012
//?** F2 to change Actual Ship Date removed-See WW Shipped Orders
//?05/12/04 SLM PKTR01 Multi-Company - Order Header TRG Remove Co from LF
//?*****
ENDDO;

//?USER: Initialize subfile control

//?First time Through Program
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

// LCL.PFS Error Reason = CTL.PFS Error Reason
LCL.PFS_Error_Reason = CTL.PFS_Error_Reason;

// LCL.STATUS = CTL.STATUS
LCL.STATUS = CTL.STATUS;

//?USER: Initialize subfile record from DBF record

//?RST:  Company Number
CASE;

// IF CTL.Company Number EQ DB1.Company Number
IF CTL.Company_Number = DB1.Company_Number;

// OR CTL.Company Number EQ WRK.ZERO
OR CTL.Company_Number = WRK.ZERO;

//?RST:  Company Number
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv CO Error Reason   RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1953999;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('CO');
PARAMETER(RCD.PFS_Error_Reason);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?SEL: PFS Error Reason
CASE;

// IF CTL.PFS Error Reason is *ALL values
IF CTL.PFS_Error_Reason = 'WHSCDE'/'ITMCDE'/'PRDDTE'/'LBLDTE'/'ITMBAL'/'SHIFT'/'TSTLBL'            +
/'LOCCDE'/'LOCDTE'/'ORDNUM'/'ORDSTS'/'ORDEVT'/'TFRWHS'/'TFRLOC'/'TRKTYP'/'ORDLD'                   +
/'SHPQTY'/'SHPWGT'/*BLANK/'SHPRSN'/'ORDDTL'/'ORDTNF'/'LOADNF'/'LDINV'/'TRNTYP'/'WIPCDE'            +
/'INACTV'/'ORDSHP'/'ORDWHS'/'CLCPDT'/'WHSCO'/'LNEITM'/'REOPN'/'DUPCSE'/'DTLCAN'/'RSTIP'            +
/'DUPPUT'/'CMDMKT'/'CMDGRP'/'CMDDTE';

CASE;

// IF CTL.PFS Error Reason NE RCD.PFS Error Reason
IF CTL.PFS_Error_Reason <> RCD.PFS_Error_Reason;

// AND CTL.PFS Error Reason NE WRK.BLANK
AND CTL.PFS_Error_Reason <> WRK.BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Order Type
CASE;

// IF RCD.Order Type - Sales is Not a Transfer Order
IF RCD.Order_Type_Sales <> 'TR';

// AND RCD.Order Type - Sales is Not Regular Order
AND RCD.Order_Type_Sales <> 'OR';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Ord Dups Found    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1954462;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.STATUS);
{
 //?USER: Initialize routine

 // PAR.STATUS = CND.Active
 PAR.STATUS = *BLANK;

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Ord Dups Found    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1898212;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(LCL.STATUS);
 {
  //?USER: Initialize routine

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  // PAR.STATUS = CND.No
  PAR.STATUS = 'N';

  //?USER: Process Data record

  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // LCL.PT Serial Number = DB1.PT Serial Number
  LCL.PT_Serial_Number = DB1.PT_Serial_Number;

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.PT Serial Number EQ DB1.PT Serial Number
  IF LCL.PT_Serial_Number = DB1.PT_Serial_Number;

  // AND LCL.Production Date EQ DB1.Production Date
  AND LCL.Production_Date = DB1.Production_Date;

  // PAR.STATUS = CND.Yes
  PAR.STATUS = 'Y';

  QUIT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PT Serial Number = DB1.PT Serial Number
  LCL.PT_Serial_Number = DB1.PT_Serial_Number;

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.STATUS is Yes
 IF LCL.STATUS = 'Y';

 // PAR.STATUS = CND.Yes
 PAR.STATUS = 'Y';

 QUIT;

 ENDIF;

}


//?SEL: DUP Cases
CASE;

// IF CTL.STATUS is Y/N
IF CTL.STATUS = 'N'/'Y';

// AND CTL.STATUS NE RCD.STATUS
AND CTL.STATUS <> RCD.STATUS;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Event Code
IF PGM.*Cursor_field = CTL.Event_Code;

// Call program SEL Event Types Active SR.
CALL PROGRAM(SEL Event Types Active SR) ('PDEQSRR');
PARAMETER(CTL.Event_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

CASE;

// IF CTL.PFS Error Reason NE LCL.PFS Error Reason
IF CTL.PFS_Error_Reason <> LCL.PFS_Error_Reason;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.STATUS NE LCL.STATUS
IF CTL.STATUS <> LCL.STATUS;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PAR.Load ID = CTL.Load ID
PAR.Load_ID = CTL.Load_ID;

//?USER: Process subfile record (Pre-confirm)

//?2=Upd TR Departure Date/Time  Disable when Live w/TPM=Y  E004019
CASE;

// IF RCD.*SFLSEL is Option 2
IF RCD.*SFLSEL = '2'/'2';

//?05/23/16 RMC E4119 remove live with tpm check
CASE;

// IF RCD.Order Type - Sales is Transfer Order
IF RCD.Order_Type_Sales = 'TR';

// Call program EDT Cst Srv/Dispatcher XF.
CALL PROGRAM(EDT Cst Srv/Dispatcher XF) ('PDE4XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(*BLANK);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?5=Display Load/Order Status
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program WW Ship Load/Order- 1 DF.
CALL PROGRAM(WW Ship Load/Order- 1 DF) ('PPYVDFR');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.Access_Denied_Y_N);

ENDIF;

//?8=Display Order Vs. Ship  Not available after Live w/TPM  E004119
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

//?05/23/16 RMC E4119 remove live with tpm check
// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

ENDIF;

//?7=Select Orders to change Order in use flag
CASE;

// IF RCD.*SFLSEL is Edit Opt7
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program EDT Ord Chg In Use Flg E1.
CALL PROGRAM(EDT Ord Chg In Use Flg E1) ('PDL2E1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?9=Select Orders to change AS400/Plant Floor flag
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Header Status is Avail/Alloc/Enter/Hold
IF RCD.Header_Status = 'L'/'A'/'E'/'H';

// Call program EDT Ord Chg AS400/Plnt E1.
CALL PROGRAM(EDT Ord Chg AS400/Plnt E1) ('PDL3E1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order number is canceled or confirmed or completed.'
ERROR(USR2324);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?12=Select Orders to unpick 12=Unpick Chg OH/OD/OE Only
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Header Status is Avail/Alloc/Enter/Hold
IF RCD.Header_Status = 'L'/'A'/'E'/'H';

// AND RCD.Event Code is Entered Thru 03 Picked
AND RCD.Event_Code >= '01';
AND RCD.Event_Code <= '03';

EXECUTE FUNCTION(DLT Specific Event Cde RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1349580;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('03');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT OP Order Events    DL) TYPE(DLTOBJ) FILE(OPEYCPP)          AC1170143;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Event_Number);
}


EXECUTE FUNCTION(RTV Last Event Code    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1393013;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Event_Number);
PARAMETER(WRK.Event_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(CHG Evt,Sts,ShpDte,Mod CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1344857;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Header_Status_Last);
PARAMETER(WRK.Event_Code);
PARAMETER(RCD.Modified_Flag);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


EXECUTE FUNCTION(CHG Event Code ALL     RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1427863;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Event_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Event Code         CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1428750;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


//?S00930 RMC 9/03/09 Crt Change log for unpick
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('UNPOMS');
PARAMETER('SLS');
PARAMETER(03);
PARAMETER(02);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order number is canceled or confirmed or completed.'
ERROR(USR2324);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?10=Select Orders to unpick- PFS Ship Load/Order Sts  ONLY * 6/15/06 RMC
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//? THIS IS NOT A FULL UNPICK PROCESS. IT JUST SETS THE PFS UPLOADED
//? RECORD "PO" TO "XO" SO SALES/SCHED CAN DO SOMETHING.
CASE;

// IF RCD.Header Status is Avail/Alloc/Enter/Hold
IF RCD.Header_Status = 'L'/'A'/'E'/'H';

// AND RCD.Event Code is Entered Thru 03 Picked
AND RCD.Event_Code >= '01';
AND RCD.Event_Code <= '03';

EXECUTE FUNCTION(Upd Status -Pick Ord  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1783669;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 // WRK.Text 2 = CON.XO
 WRK.Text_2 = 'XO';

 EXECUTE FUNCTION(Chg Pick Ord to XO    CH) TYPE(CHGOBJ) FILE(PPBKCPP)           AC1783670;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
 PARAMETER(WRK.Text_2);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
  PARAMETER(DB1.PFS_Change_Date);
  PARAMETER(DB1.PFS_Change_Time);
  {
   //?Execute internal function

   // PAR.PFS Change Date = JOB.*Job date
   PAR.PFS_Change_Date = JOB.*Job_date;

   // PAR.PFS Change time = JOB.*Job time
   PAR.PFS_Change_Time = JOB.*Job_time;

  }

 }

}


//?S00930 RMC 9/03/09 Crt Change log for unpick
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('UNPCAR');
PARAMETER('SLS');
PARAMETER('PO');
PARAMETER('XO');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order number is canceled or confirmed or completed.'
ERROR(USR2324);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?11=Select Orders to pick- PFS Ship Load/Order Sts  ONLY * 6/15/06 RMC
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//? THIS IS NOT A FULL PICK PROCESS. IT JUST SETS THE PFS UPLOADED
//? RECORD "XO" TO "PO" after SALES/SCHED did SOMETHING.
CASE;

// IF RCD.Header Status is Avail/Alloc/Enter/Hold
IF RCD.Header_Status = 'L'/'A'/'E'/'H';

// AND RCD.Event Code is Entered Thru 03 Picked
AND RCD.Event_Code >= '01';
AND RCD.Event_Code <= '03';

// WRK.Text 2 = CON.XO
WRK.Text_2 = 'XO';

EXECUTE FUNCTION(Upd Status-rePick Ord RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1783672;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Text_2);
{
 //?USER: Process Data record

 //?change XO back to PO
 EXECUTE FUNCTION(Chg Pick Ord to XO    CH) TYPE(CHGOBJ) FILE(PPBKCPP)           AC1783670;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
 PARAMETER('PO');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
  PARAMETER(DB1.PFS_Change_Date);
  PARAMETER(DB1.PFS_Change_Time);
  {
   //?Execute internal function

   // PAR.PFS Change Date = JOB.*Job date
   PAR.PFS_Change_Date = JOB.*Job_date;

   // PAR.PFS Change time = JOB.*Job time
   PAR.PFS_Change_Time = JOB.*Job_time;

  }

 }

}


//?S00930 RMC 9/03/09 Crt Change log for pick
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('PCKCAR');
PARAMETER('SLS');
PARAMETER('XO');
PARAMETER('PO');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order number is canceled or confirmed or completed.'
ERROR(USR2324);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?13=Delete Dup Cases
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

// Call program Zzz DUP Serial Nos    XF.
CALL PROGRAM(Zzz DUP Serial Nos    XF) ('PPX1XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Final processing (Post-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

