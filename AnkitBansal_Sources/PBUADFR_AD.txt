// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBUADFR
// ?Date: 14.08.2025 Time: 03:49:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/A');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?03/06/25 DN DO23471-Get 'Restrict to P2P' Flag for CST Module.
// Call program Rtv Restrict to P2P    XF.
CALL PROGRAM(Rtv Restrict to P2P    XF) ('PVKAXFR');
PARAMETER('CST');
PARAMETER(1);
PARAMETER(LCL.Restrict_to_P2P);

//?03/06/25 DN DO23471-Get 'Company Organization' Value.
EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile control

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/A');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?First Time Logic
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// LCL.Sales Sold To Flag = CND.All
LCL.Sales_Sold_To_Flag = 'A';

// LCL.Sales Sold To Code = CND.Not Entered
LCL.Sales_Sold_To_Code = *ZERO;

// LCL.Sales Channel Code = CND.Not Entered
LCL.Sales_Channel_Code = *BLANK;

// LCL.SC Territory Code = CND.Not Entered
LCL.SC_Territory_Code = *BLANK;

// LCL.SC Market Code = CND.Not Entered
LCL.SC_Market_Code = *BLANK;

// LCL.Sales Sold To DP Class = CND.Not Entered
LCL.Sales_Sold_To_DP_Class = *BLANK;

// LCL.Sales Sold To Salesperson = CND.not entered
LCL.Sales_Sold_To_Salesperson = *BLANK;

// LCL.Field Representative = CND.not entered
LCL.Field_Representative = *BLANK;

// LCL.Broker Code = CND.Not entered
LCL.Broker_Code = *BLANK;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Initialize Subfile Record Fields
CASE;

// IF RCD.Ship To Customer Flag is Allow Use as Ship To Cust
IF RCD.Ship_To_Customer_Flag = 'Y';

EXECUTE FUNCTION(Rtv Sales Cst Sold To RT) TYPE(RTVOBJ) FILE(PBB6REP)           AC2114865;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Sales_Sold_To_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Sales Sold To Code is Entered
IF RCD.Sales_Sold_To_Code <> *ZERO;

//?R14719 DN 03/28/19-Added Sales Sold To Sub Class.
EXECUTE FUNCTION(Rtv Sales Sold To     RT) TYPE(RTVOBJ) FILE(PBB5REP)           AC2116214;
PARAMETER(RCD.Sales_Sold_To_Code);
PARAMETER(NLL.Sales_Sold_To_Desc);
PARAMETER(RCD.Sales_Sold_To_DP_Class);
PARAMETER(NLL.Sales_Sold_To_Sub_Class);
PARAMETER(RCD.Sales_Sold_To_Salesperson);
PARAMETER(RCD.Sales_Channel_Code);
PARAMETER(RCD.SC_Market_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Sales Chnl Mkt    RT) TYPE(RTVOBJ) FILE(PBCAREP)           AC2114822;
PARAMETER(RCD.Sales_Channel_Code);
PARAMETER(RCD.SC_Market_Code);
PARAMETER(NLL.SC_Market_Description);
PARAMETER(RCD.Field_Representative);
PARAMETER(RCD.Broker_Code);
PARAMETER(RCD.SC_Territory_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Initialize Subfile Record Fields
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selection for Sales to Code
CASE;

// IF CTL.Sales Sold To Code is Entered
IF CTL.Sales_Sold_To_Code <> *ZERO;

// AND RCD.Sales Sold To Code NE CTL.Sales Sold To Code
AND RCD.Sales_Sold_To_Code <> CTL.Sales_Sold_To_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selection for Sales Channel Code
CASE;

// IF CTL.Sales Channel Code is Entered
IF CTL.Sales_Channel_Code <> *BLANK;

// AND RCD.Sales Channel Code NE CTL.Sales Channel Code
AND RCD.Sales_Channel_Code <> CTL.Sales_Channel_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selection for SC Territory Code
CASE;

// IF CTL.SC Territory Code is Entered
IF CTL.SC_Territory_Code <> *BLANK;

// AND RCD.SC Territory Code NE CTL.SC Territory Code
AND RCD.SC_Territory_Code <> CTL.SC_Territory_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selection for SC Market Code
CASE;

// IF CTL.SC Market Code is Entered
IF CTL.SC_Market_Code <> *BLANK;

// AND RCD.SC Market Code NE CTL.SC Market Code
AND RCD.SC_Market_Code <> CTL.SC_Market_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selection for Sales Sold To DP Class
CASE;

// IF CTL.Sales Sold To DP Class is Valid Values
IF CTL.Sales_Sold_To_DP_Class = 'A'/'B'/'C';

// AND RCD.Sales Sold To DP Class NE CTL.Sales Sold To DP Class
AND RCD.Sales_Sold_To_DP_Class <> CTL.Sales_Sold_To_DP_Class;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selection for Sales Sold To Salesperson
CASE;

// IF CTL.Sales Sold To Salesperson is entered
IF CTL.Sales_Sold_To_Salesperson <> *BLANK;

// AND RCD.Sales Sold To Salesperson NE CTL.Sales Sold To Salesperson
AND RCD.Sales_Sold_To_Salesperson <> CTL.Sales_Sold_To_Salesperson;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selection for Field Representative
CASE;

// IF CTL.Field Representative is entered
IF CTL.Field_Representative <> *BLANK;

// AND RCD.Field Representative NE CTL.Field Representative
AND RCD.Field_Representative <> CTL.Field_Representative;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selection for Broker Code
CASE;

// IF CTL.Broker Code is Entered
IF CTL.Broker_Code <> *BLANK;

// AND RCD.Broker Code NE CTL.Broker Code
AND RCD.Broker_Code <> CTL.Broker_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sales Sold To Flag is Unassigned
CASE;

// IF LCL.Sales Sold To Flag is Unassigned
IF LCL.Sales_Sold_To_Flag = 'U';

CASE;

// IF RCD.Sales Sold To Code is Entered
IF RCD.Sales_Sold_To_Code <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Set LCL Values from CTL Values
DO;

// LCL.Sales Sold To Code = CTL.Sales Sold To Code
LCL.Sales_Sold_To_Code = CTL.Sales_Sold_To_Code;

// LCL.Sales Channel Code = CTL.Sales Channel Code
LCL.Sales_Channel_Code = CTL.Sales_Channel_Code;

// LCL.SC Territory Code = CTL.SC Territory Code
LCL.SC_Territory_Code = CTL.SC_Territory_Code;

// LCL.SC Market Code = CTL.SC Market Code
LCL.SC_Market_Code = CTL.SC_Market_Code;

// LCL.Sales Sold To DP Class = CTL.Sales Sold To DP Class
LCL.Sales_Sold_To_DP_Class = CTL.Sales_Sold_To_DP_Class;

// LCL.Sales Sold To Salesperson = CTL.Sales Sold To Salesperson
LCL.Sales_Sold_To_Salesperson = CTL.Sales_Sold_To_Salesperson;

// LCL.Field Representative = CTL.Field Representative
LCL.Field_Representative = CTL.Field_Representative;

// LCL.Broker Code = CTL.Broker Code
LCL.Broker_Code = CTL.Broker_Code;

ENDDO;

//?USER: Process subfile control (Pre-confirm)

//?S16143 DN 02/13/20-Reload Subfile When CTL Positioners Changes.
//?Determine if Subfile Control Values changed.  S16143 DN 02/13/20
CASE;

// IF CTL.Sales Sold To Code NE LCL.Sales Sold To Code
IF CTL.Sales_Sold_To_Code <> LCL.Sales_Sold_To_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Determine if Subfile Control Values changed.  S16143 DN 02/13/20
// IF CTL.Sales Channel Code NE LCL.Sales Channel Code
IF CTL.Sales_Channel_Code <> LCL.Sales_Channel_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Determine if Subfile Control Values changed.  S16143 DN 02/13/20
// IF CTL.SC Territory Code NE LCL.SC Territory Code
IF CTL.SC_Territory_Code <> LCL.SC_Territory_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Determine if Subfile Control Values changed.  S16143 DN 02/13/20
// IF CTL.SC Market Code NE LCL.SC Market Code
IF CTL.SC_Market_Code <> LCL.SC_Market_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Determine if Subfile Control Values changed.  S16143 DN 02/13/20
// IF CTL.Sales Sold To DP Class NE LCL.Sales Sold To DP Class
IF CTL.Sales_Sold_To_DP_Class <> LCL.Sales_Sold_To_DP_Class;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Determine if Subfile Control Values changed.  S16143 DN 02/13/20
// IF CTL.Sales Sold To Salesperson NE LCL.Sales Sold To Salesperson
IF CTL.Sales_Sold_To_Salesperson <> LCL.Sales_Sold_To_Salesperson;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Determine if Subfile Control Values changed.  S16143 DN 02/13/20
// IF CTL.Field Representative NE LCL.Field Representative
IF CTL.Field_Representative <> LCL.Field_Representative;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Determine if Subfile Control Values changed.  S16143 DN 02/13/20
// IF CTL.Broker Code NE LCL.Broker Code
IF CTL.Broker_Code <> LCL.Broker_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt Sales Sold To Code
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Sales Sold To Code
AND PGM.*Cursor_field = CTL.Sales_Sold_To_Code;

// Call program Sel Sales Sold To     DF.
CALL PROGRAM(Sel Sales Sold To     DF) ('PBUEDFR');
PARAMETER(CTL.Sales_Channel_Code);
PARAMETER(CTL.SC_Market_Code);
PARAMETER(CTL.Sales_Sold_To_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt Sales Channel Code
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Sales Channel Code
AND PGM.*Cursor_field = CTL.Sales_Channel_Code;

// Call program Sel Sales Channel     SR.
CALL PROGRAM(Sel Sales Channel     SR) ('PBTOSRR');
PARAMETER(CTL.Sales_Channel_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt SC Territory Code
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.SC Territory Code
AND PGM.*Cursor_field = CTL.SC_Territory_Code;

// Call program Sel Sales Chnl Terr   DF.
CALL PROGRAM(Sel Sales Chnl Terr   DF) ('PBUPSRR');
PARAMETER(CTL.Sales_Channel_Code);
PARAMETER(CTL.SC_Territory_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt SC Market Code
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.SC Market Code
AND PGM.*Cursor_field = CTL.SC_Market_Code;

// Call program Sel Sales Chnl Mkt    DF.
CALL PROGRAM(Sel Sales Chnl Mkt    DF) ('PBUGDFR');
PARAMETER(CTL.Sales_Channel_Code);
PARAMETER(CTL.SC_Market_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt Salesperson
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Sales Sold To Salesperson
AND PGM.*Cursor_field = CTL.Sales_Sold_To_Salesperson;

// Call program SEL Salesperson        SR.
CALL PROGRAM(SEL Salesperson        SR) ('PDE6SRR');
PARAMETER(CTL.Sales_Sold_To_Salesperson);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt Field Representative
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Field Representative
AND PGM.*Cursor_field = CTL.Field_Representative;

// Call program SEL Salesperson        SR.
CALL PROGRAM(SEL Salesperson        SR) ('PDE6SRR');
PARAMETER(CTL.Field_Representative);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt Broker Code
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Broker Code
AND PGM.*Cursor_field = CTL.Broker_Code;

// Call program Sel Broker            SL.
CALL PROGRAM(Sel Broker            SL) ('POY6SRR');
PARAMETER(CTL.Broker_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F7=WW Sales Channel/Territory/Market
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program W/W Sales Channel     DF.
CALL PROGRAM(W/W Sales Channel     DF) ('PBTUDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F8=WW Sales Sold To
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// Call program W/W Sales Sold To     DF.
CALL PROGRAM(W/W Sales Sold To     DF) ('PBT5DFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F9=Edit DP Class
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// Call program Edt Sales Sold To DPC EF.
CALL PROGRAM(Edt Sales Sold To DPC EF) ('PBUHEFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F10=Sales Customer Sold To Toggle
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

CASE;

// IF LCL.Sales Sold To Flag is All
IF LCL.Sales_Sold_To_Flag = 'A';

// LCL.Sales Sold To Flag = CND.Unassigned
LCL.Sales_Sold_To_Flag = 'U';

// IF LCL.Sales Sold To Flag is Unassigned
IF LCL.Sales_Sold_To_Flag = 'U';

// LCL.Sales Sold To Flag = CND.All
LCL.Sales_Sold_To_Flag = 'A';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F11=WW Sales Cust Sold To Log                 S16143 DN 02/13/20
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Call program WW Sls Cust Sold To LogDF.
CALL PROGRAM(WW Sls Cust Sold To LogDF) ('PUPEDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Email List in xls
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

// Execute command - 'EXECUTE SQL VIEW'
EXECUTE COMMAND(USR4959);
PARAMETER(LCL.Email_Address);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit Sales Customer Sold To
CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

// LCL.Parent Customer = RCD.Parent Customer
LCL.Parent_Customer = RCD.Parent_Customer;

//?Create Sales Customer Sold To record if it does not exist
EXECUTE FUNCTION(Crt Sales Cst Sold To RT) TYPE(RTVOBJ) FILE(PBB6REP)           AC2114794;
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Initialize routine

 //?The purpose of this function is to create a Customer Sales Sold To
 //?record if it does not exist.
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Sales Cst Sold To CR) TYPE(CRTOBJ) FILE(PBB6REP)           AC2113553;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(*ZERO);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


//?E3882SS JJH 02/11/16 - Add loop to allow Sales Sold To Updates
// LCL.F-Key Selected USR = CND.Yes
LCL.F_Key_Selected_USR = 'Y';

// DOW LCL.F-Key Selected USR is Yes
DOW LCL.F_Key_Selected_USR = 'Y';

// Call program Edt Sales Cst Sold To E1.
CALL PROGRAM(Edt Sales Cst Sold To E1) ('PBUCE1R');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Sales_Sold_To_Code);
PARAMETER(RCD.Customer_Name);
PARAMETER(RCD.Address_Line_1);
PARAMETER(RCD.Address_Line_2);
PARAMETER(RCD.Address_Line_3);
PARAMETER(RCD.City);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.Zip_Postal_Code);
PARAMETER(RCD.Parent_Customer);
PARAMETER(LCL.F_Key_Selected_USR);

ENDDO;

// CTL.Parent Customer = LCL.Parent Customer
CTL.Parent_Customer = LCL.Parent_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?5=Dsp Sales Customer Sold To
CASE;

// IF RCD.*SFLSEL is *5
IF RCD.*SFLSEL = '5';

// LCL.Parent Customer = RCD.Parent Customer
LCL.Parent_Customer = RCD.Parent_Customer;

// Call program Dsp Sales Cst Sold To D1.
CALL PROGRAM(Dsp Sales Cst Sold To D1) ('PBUND1R');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Sales_Sold_To_Code);
PARAMETER(RCD.Customer_Name);
PARAMETER(RCD.Address_Line_1);
PARAMETER(RCD.Address_Line_2);
PARAMETER(RCD.Address_Line_3);
PARAMETER(RCD.City);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.Zip_Postal_Code);
PARAMETER(RCD.Parent_Customer);

// CTL.Parent Customer = LCL.Parent Customer
CTL.Parent_Customer = LCL.Parent_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?7=Dsp Customer
CASE;

// IF RCD.*SFLSEL is *7
IF RCD.*SFLSEL = '7';

//?03/06/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// LCL.Parent Customer = RCD.Parent Customer
LCL.Parent_Customer = RCD.Parent_Customer;

// Call program Dsp Customer/Co Cust  D2.
CALL PROGRAM(Dsp Customer/Co Cust  D2) ('PMDKD2R');
PARAMETER(RCD.Ship_To_Customer);

// CTL.Parent Customer = LCL.Parent Customer
CTL.Parent_Customer = LCL.Parent_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile control (Post-confirm)

//?Set LCL Values from CTL Values
DO;

// LCL.Sales Sold To Code = CTL.Sales Sold To Code
LCL.Sales_Sold_To_Code = CTL.Sales_Sold_To_Code;

// LCL.Sales Channel Code = CTL.Sales Channel Code
LCL.Sales_Channel_Code = CTL.Sales_Channel_Code;

// LCL.SC Territory Code = CTL.SC Territory Code
LCL.SC_Territory_Code = CTL.SC_Territory_Code;

// LCL.SC Market Code = CTL.SC Market Code
LCL.SC_Market_Code = CTL.SC_Market_Code;

// LCL.Sales Sold To DP Class = CTL.Sales Sold To DP Class
LCL.Sales_Sold_To_DP_Class = CTL.Sales_Sold_To_DP_Class;

// LCL.Sales Sold To Salesperson = CTL.Sales Sold To Salesperson
LCL.Sales_Sold_To_Salesperson = CTL.Sales_Sold_To_Salesperson;

// LCL.Field Representative = CTL.Field Representative
LCL.Field_Representative = CTL.Field_Representative;

// LCL.Broker Code = CTL.Broker Code
LCL.Broker_Code = CTL.Broker_Code;

ENDDO;

