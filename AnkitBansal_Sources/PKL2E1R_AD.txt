// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKL2E1R
// ?Date: 14.08.2025 Time: 02:52:07
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize detail screen (existing record)

// DTL.Sex Desc Usr = Condition name of DB1.TH Sex
DTL.Sex_Desc_Usr = RTVCND(DB1.TH_Sex);

EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(DB1.HC_Class_Code);
PARAMETER(DTL.HC_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.HC_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(DB1.GN_Genetic_Code);
PARAMETER(DTL.GN_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.TH_Source_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.SR Type Desc = Condition name of DTL.TH Source Type
DTL.SR_Type_Desc = RTVCND(DTL.TH_Source_Type);

// DTL.HC Class Type Desc Usr = Condition name of DTL.TH Hog Class Type
DTL.HC_Class_Type_Desc_Usr = RTVCND(DTL.TH_Hog_Class_Type);

//?Save to check for a change to BOL in Change IF
// PAR.Head Total USR = DB1.TH Head Received
PAR.Head_Total_USR = DB1.TH_Head_Received;

//?USER: Validate detail screen fields

CASE;

// IF DTL.TH Yard Deads GT DTL.TH Head Received
IF DTL.TH_Yard_Deads > DTL.TH_Head_Received;

// Send error message - 'Yard dead head cannot be greater than received head.'
ERROR(PRK0781);

ENDIF;

//?CALC: Detail screen function fields

// DTL.Sex Desc Usr = Condition name of DTL.TH Sex
DTL.Sex_Desc_Usr = RTVCND(DTL.TH_Sex);

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.GN_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Tattoo Hdr,Td,Pen IF) TYPE(EXCINTFUN) FILE(PKA1CPP)        AB1201900;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_Purchase_Date);
PARAMETER(DTL.TH_Group_Reference);
PARAMETER(DTL.TH_Live_Purchase_UOM);
PARAMETER(DTL.TH_Live_Purchase_Price);
PARAMETER(DTL.TH_Live_Gross_Amt);
PARAMETER(DTL.TH_LIve_Net_Amt);
PARAMETER(DTL.TH_Resale_UOM);
PARAMETER(DTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(DTL.TH_Pricing_Date);
PARAMETER(DTL.TH_Resale_Spread_Sts);
PARAMETER(DTL.TH_Dead_On_Arrival);
PARAMETER(DTL.TH_Head_Received);
PARAMETER(DTL.TH_Yard_Deads);
PARAMETER(DTL.TH_Held_Over);
PARAMETER(DTL.TH_Head_Condemned);
PARAMETER(DTL.TH_Head_Killed);
PARAMETER(DTL.TH_Head_Adds);
PARAMETER(DTL.TH_Head_Accepted);
PARAMETER(DTL.TH_Live_Wgt);
PARAMETER(DTL.TH_Adj_Live_Wgt);
PARAMETER(DTL.TH_Hot_Wgt);
PARAMETER(DTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(DTL.TH_Tot_Backfat_Inches);
PARAMETER(DTL.TH_Tot_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Live_Wgt);
PARAMETER(DTL.TH_Avg_Hot_Wgt);
PARAMETER(DTL.TH_Avg_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Lean_Percent);
PARAMETER(DTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(DTL.TH_Avg_Backfat);
PARAMETER(DTL.TH_Std_Yield_Percent);
PARAMETER(DTL.TH_Actual_Yield);
PARAMETER(DTL.TH_Adj_Actual_Yield);
PARAMETER(DTL.TH_Yield_Difference);
PARAMETER(DTL.TH_Recalc_Live_Wgt);
PARAMETER(DTL.TH_CM_Market_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(DTL.TH_CM_Sort_Discount_Amt);
PARAMETER(DTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(DTL.TH_CM_Base_Carcass_Value);
PARAMETER(DTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(DTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(DTL.TH_Deduction_Amt);
PARAMETER(DTL.TH_Total_Net_WO_Adds);
PARAMETER(DTL.TH_Carcass_Net_Amt);
PARAMETER(DTL.TH_Additions_Amt);
PARAMETER(DTL.TH_Payment_Gross);
PARAMETER(DTL.Th_Payment_Net_Amt);
PARAMETER(DTL.TH_AP_Voucher_Document#);
PARAMETER(DTL.TH_Freight_Amount);
PARAMETER(DTL.TH_Accrual_Amount);
PARAMETER(DTL.TH_Fixed_Cost_Amount);
PARAMETER(DTL.TH_Calc_Net_Sts);
PARAMETER(DTL.TH_Payment_Sts);
PARAMETER(DTL.TH_Header_Error_Sts);
PARAMETER(DTL.TH_Detail_Error_Sts);
PARAMETER(DTL.TH_Kill_Balancing_Sts);
PARAMETER(DTL.TH_Bal_to_Kill_Gen);
PARAMETER(DTL.TH_Commission_A_P_Voucher);
PARAMETER(DTL.TH_Voucher_Payment_Date);
PARAMETER(DTL.TH_User_Error_Override);
PARAMETER(DTL.TH_Held_Over_Record);
PARAMETER(DTL.TH_Sex);
PARAMETER(DTL.TH_Held_Ovr_Completed_Dte);
PARAMETER(DTL.TH_Commission_Paid_Date);
PARAMETER(DTL.TH_Actual_Check_Date);
PARAMETER(DTL.TH_Shipped_Weight);
PARAMETER(DTL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(DTL.TH_FFLI);
PARAMETER(DTL.TH_Kill_Product_Value);
PARAMETER(DTL.TH_Cut_Product_Value);
PARAMETER(DTL.TH_Render_Product_Value);
PARAMETER(DTL.TH_Head_Excluded);
PARAMETER(DTL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(DTL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(DTL.TH_CM_Gross_Live_CWT);
PARAMETER(DTL.TH_CM_Gross_Carc_CWT);
PARAMETER(DTL.TH_Source_Type);
PARAMETER(DTL.TH_Scale_Ticket_Sts);
PARAMETER(DTL.TH_Payment_Type);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(DTL.TH_Posted_to_HPS_Flag);
PARAMETER(DTL.TH_Schedule_Kill_Shift);
PARAMETER(DTL.TH_Shift_Held_Over);
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.THP_Process_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(PAR.Head_Total_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(Chg Tattoo Header     CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1101744;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(PAR.TH_Header_Error_Sts);
 PARAMETER(PAR.TH_Detail_Error_Sts);
 PARAMETER(PAR.TH_Kill_Balancing_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 EXECUTE FUNCTION(Rtv/Chg TttDtl hd,yd  RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1201901;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(DB1.TD_Live_Wgt);
  PARAMETER(PAR.TD_Pen_Head);
  PARAMETER(PAR.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // PAR.Pen Number = DB1.Pen Number
  PAR.Pen_Number = DB1.Pen_Number;

  QUIT;

 }

 //?Chg BOL if head received changed. Update with the head diff.
 CASE;

 // IF PAR.Head Total USR NE PAR.TH Head Received
 IF PAR.Head_Total_USR <> PAR.TH_Head_Received;

 // PAR.Head Total Usr 2 = PAR.TH Head Received - PAR.Head Total USR
 PAR.Head_Total_Usr_2 = PAR.TH_Head_Received - PAR.Head_Total_USR;

 // PAR.BOL Live Wgt Received = CON.*ZERO
 PAR.BOL_Live_Wgt_Received = *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Bol Hd rcvd   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1184135;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.Head_Total_Usr_2);
 PARAMETER(PAR.BOL_Live_Wgt_Received);
 {
  //?USER: Process Data record

  // WRK.BOL Head Received = DB1.BOL Head Received + PAR.BOL Head Received
  WRK.BOL_Head_Received = DB1.BOL_Head_Received + PAR.BOL_Head_Received;

  // WRK.BOL Live Wgt Received = DB1.BOL Live Wgt Received + PAR.BOL Live Wgt Receive
  WRK.BOL_Live_Wgt_Received = DB1.BOL_Live_Wgt_Received + PAR.BOL_Live_Wgt_Received;

  //?Calculate freight based on the unit of measure
  // WRK.BOL Freight Amt = DB1.BOL Freight Amt
  WRK.BOL_Freight_Amt = DB1.BOL_Freight_Amt;

  EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.Tattoo_is_paid_Usr);
  PARAMETER(WRK.Held_Over_Records_Y_N);
  PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
  {
   //?USER: Initialize routine

   // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
   PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

   // PAR.Held Over Records Y/N = CND.No
   PAR.Held_Over_Records_Y_N = 'N';

   // PAR.Tattoo is paid Usr = CND.No
   PAR.Tattoo_is_paid_Usr = 'N';

   //?USER: Process Data record

   //?If one tattoo is paid but freight was spread then accumulate
   //?what is paid, for held over respread problem
   //?when this probelm goes away, then just flag that there is one paid
   CASE;

   // IF DB1.TH Payment Sts is Paid Anything
   IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

   //?CHECK IF FREIGHT AMOUNT IS IN RECORD
   CASE;

   // IF DB1.TH Freight Amount is Not Zeros
   IF DB1.TH_Freight_Amount <> *ZERO;

   // PAR.Tattoo is paid Usr = CND.Yes
   PAR.Tattoo_is_paid_Usr = 'Y';

   ENDIF;

   // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
   PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?CHECK FOR HELD OVER RECORD
   CASE;

   // IF DB1.TH Held Over Record is Yes
   IF DB1.TH_Held_Over_Record = 'Y';

   // OR DB1.TH Held Over is greater than 0
   OR DB1.TH_Held_Over > *ZERO;

   // PAR.Held Over Records Y/N = CND.Yes
   PAR.Held_Over_Records_Y_N = 'Y';

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF DB1.BOL Freight Allocation is Freight is Allocated
  IF DB1.BOL_Freight_Allocation = 'Y';

  // AND WRK.Tattoo is paid Usr is Yes
  AND WRK.Tattoo_is_paid_Usr = 'Y';

  // IF DB1.BOL Trucker Payment Sts is Paid Trucker
  IF DB1.BOL_Trucker_Payment_Sts = 'PT';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Clc Freight Amt       XF.
  CALL PROGRAM(Clc Freight Amt       XF) ('PKQ5XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);

  ENDIF;

  CASE;

  // IF WRK.BOL Freight Amt is Not Zeros
  IF WRK.BOL_Freight_Amt <> *ZERO;

  // AND WRK.BOL Head Received is Greater then Zero
  AND WRK.BOL_Head_Received > *ZERO;

  // AND DB1.BOL Trucker Payment Sts is Blank
  AND DB1.BOL_Trucker_Payment_Sts = *BLANK;

  // WRK.BOL Trucker Payment Sts = CND.Select Trucker
  WRK.BOL_Trucker_Payment_Sts = 'ST';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.BOL Trucker Payment Sts = DB1.BOL Trucker Payment Sts
  WRK.BOL_Trucker_Payment_Sts = DB1.BOL_Trucker_Payment_Sts;

  ENDIF;

  EXECUTE FUNCTION(Chg Buy Order Detail  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1100531;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Kill_Date);
  PARAMETER(DB1.BOL_Pln_Delv_Start_Time);
  PARAMETER(DB1.BOL_Pln_Delv_End_Time);
  PARAMETER(DB1.BOL_Pln_Head_Delv);
  PARAMETER(DB1.BOL_Shipped_Wgt);
  PARAMETER(DB1.BOL_Pln_Delv_Date);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);
  PARAMETER(WRK.BOL_Trucker_Payment_Sts);
  PARAMETER(DB1.BOL_Trucker_Check_Number);
  PARAMETER(DB1.BOL_Trucker_Check_Date);
  PARAMETER(DB1.BOL_AP_Voucher);
  PARAMETER(DB1.BOL_Trailer);
  PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
  PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
  PARAMETER(DB1.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
  PARAMETER(DB1.TRK_Trucker_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Initialize routine

  EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(*ZERO);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Processing if Data record not found

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  {
   //?USER: Process Data record

   // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
   WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

   // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
   WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(DB1.Pen_Description);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(WRK.Pen_Current_Head);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(DB1.GN_Genetic_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Exit processing

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.TDP Process Code is Drive Card Printed
   IF DB1.TDP_Process_Code = 'D';

   // OR DB1.TDP Process Code is Open
   OR DB1.TDP_Process_Code = 'O';

   EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.Genetic_Code_USR);
   PARAMETER(WRK.Pen_Desc_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    //?USER: Process Data record

    // PAR.GN Genetic Code = DB1.GN Genetic Code
    PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

    EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(PAR.Pen_Description);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Description = *BLANK;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   CASE;

   // IF PAR.GN Genetic Code is BLANKS
   IF PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = WRK.Pen_Desc_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
   IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = 'MIXED';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


