      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP7006
      * TITLE:       View  Farms for a BGF Target Table
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     09/20/00
      *
      *
      * FUNCTION: This is a View that displays the records in the BGF Target Table/Farm Links
      *           file.
      *
      *           Restrictors:
      *               Target table code
      *                Show current entries only flag
      *
      *           Positioners:
      *               Farm site
      *
      *           Selectors:
      *               None
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 06/05/01  LeAnne Fedor
      *           Recompile only. New field 'multisite' added to Farm Site file.
      *
      * 06/28/01  LeAnne Fedor
      *           Recompile only.
      *           Three fields (manager/supervisor/multisite) renamed in Farm Site file.
      *
      * 09/04/01  LeAnne Fedor
      *           Recompile only. New 'square feet' fields added to Farm Site file.
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd7006   cf   e             workstn
     F                                     sfile(hp7006s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsl097a   if   e           k disk
     F                                     infds(dbfeed)
      *    BGF target table/farm links
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields and save fields for restrictors, positioners and selectors
      *
     D svynfl          s                   like(c1ynfl)
     D svfscd          s                   like(c1fscd)
     D svcell          s                   like(c1cell)
     D svptcd          s                   like(c1ptcd)
     D svfsbo          s                   like(c1fsbo)
     D gotmatch        s              1a
      *
      *
      * Work fields for date manipulation
      *
     D wkmdydate       s               D   datfmt(*mdy)
     D wkcymdiso       s               D   datfmt(*iso)
     D wksysdt         s              8  0
      *
      *
      * Parms
      *
     D xxynfl          s                   like(c1ynfl)
     D xxfsbo          s                   like(fsfsbo)
     D xxbods          s             30
     D xxdvcd          s              5
     D xxptcd          s                   like(c1ptcd)
     D xxptds          s             10
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * $set1 - set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $scrn1 - perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp7006k1
     C                   write     hp7006ec
     C                   exfmt     hp7006c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   if        fld = 'C1YNFL' and
     C                             c1ynfl <> svynfl
     C                   exsr      $ynfl
     C                   endif
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in05 = *on and                              F5-refresh
     C                             (c1ynfl = yes or c1ynfl = no)
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      c1ynfl <> svynfl or                          Positioners
     C                             svfscd <> c1fscd or
     C                             svcell <> c1cell or
     C                             c1fsbo <> svfsbo or
     C                             c1ptcd <> svptcd
      *
     C                   if        c1ynfl <> svynfl
     C                   exsr      $ynfl
     C                   endif
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in25 = *on                                  F25-ROLLUP
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = set1
     C                   move      yes           reset
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $chksv - Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   move      c1ynfl        svynfl
     C                   z-add     c1fscd        svfscd
     C                   z-add     c1cell        svcell
     C                   move      c1fsbo        svfsbo
     C                   move      c1ptcd        svptcd
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $ynfl - Validate 'show current entries only-yes/no' flag
      *---------------------------------------------------------------
      *
     C     $ynfl         begsr
      *
     C                   if        c1ynfl <> yes and
     C                             c1ynfl <> no
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $f4s1 - F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      *
      * Show current entries only yes/no flag
      *
     C                   when      fld = 'C1YNFL'
     C                   call      'HP522'
     C                   parm                    xxynfl
     C                   seton                                        51
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1ynfl
     C                   endif
      *
     C                   when      fld = 'C1FSBO'
     C                   call      'HP503'
     C                   parm      *blank        xxfsbo
     C                   parm      *blank        xxbods
     C                   parm      'LIVE '       xxdvcd
     C                   seton                                        53
     C                   if        xxfsbo <> *blank
     C                   movel     xxfsbo        c1fsbo
     C                   endif
      *
      *  Production type
     C                   when      fld = 'C1PTCD'
     C                   call      'HP504'
     C                   parm      *blank        xxptcd
     C                   parm      *blank        xxptds
     C                   seton                                        54
     C                   if        xxptcd <> *blank
     C                   movel     xxptcd        c1ptcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $clr1  - clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   hp7006s1
     C                   seton                                        83        sflclr
     C                   write     hp7006c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $frsh1 - refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     c1fscd        setll     hsp018
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $load1- load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      hsp018                                 82
     C                   if        *in82 = *off and fsppcd = 'BGF  '            If read
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1cell <> 0 and                              If cell
     C                             c1cell <> fscell
     C                   else
      *
     C                   if        c1fsbo > *blank and                          If office
     C                             c1fsbo <> fsfsbo
     C                   else
      *
     C                   if        c1ptcd > *blank and                          If type
     C                             c1ptcd <> fsptcd
     C                   else
      *
      *
      * Processing is conditional at this point based on whether the user
      * elected to a) show current entries only or b) show all entries.
      *
     C                   select
     C                   when      c1ynfl = yes
     C                   exsr      $current
     C                   other
     C                   exsr      $all
     C                   endsl
      *
     C                   endif                                                  If type
     C                   endif                                                  If office
     C                   endif                                                  If cell
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write a subfile record
      *---------------------------------------------------------------
      *
     C     $writesfl     begsr
      *
      *
     C                   add       1             count
     C                   add       1             hdrrn1
      *
     C                   z-add     fsfscd        d1fscd
     C                   z-add     fscell        d1cell
     C                   move      fsfsnm        d1fsnm
     C                   move      fsptcd        d1ptcd
     C                   move      fsfsbo        d1fsbo
     C                   write     hp7006s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Go the the target table/farm link file and determine if this farm
      * is currently set up to use this table.
      *---------------------------------------------------------------
      *
     C     $current      begsr
      *
     C                   move      no            gotmatch
      *
     C     fsfscd        setll     hsl097a
      *
     C                   dou       *in91 = *on or bfefdt <= wksysdt             Do loop
     C     fsfscd        reade     hsl097a                                91
     C                   if        *in91 = *off and                             If not EOF
     C                             gotmatch = no and
     C                             bfefdt <= wksysdt and
     C                             bfttbcd = c1ttbcd
     C                   move      yes           gotmatch
      *
      * Flip effective date from CCYYMMDD to MMDDYY using a date format field.
      *
     C     *iso          move      bfefdt        wkmdydate
     C                   move      wkmdydate     d1mdyefdt
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
      * If you found a current link to the target table for this farm, then
      * write a subfile record.
      *
     C                   if        gotmatch = yes                               If got a match
     C                   exsr      $writesfl
     C                   endif                                                  If got a match
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Go the the target table/farm link file and display all links of
      * this table/farm.....both current and historical.
      *---------------------------------------------------------------
      *
     C     $all          begsr
      *
     C     fsfscd        setll     hsl097a
      *
     C                   dou       *in91 = *on                                  Do loop
     C     fsfscd        reade     hsl097a                                91
     C                   if        *in91 = *off and                             If not EOF
     C                             bfttbcd = c1ttbcd
      *
      * Flip effective date from CCYYMMDD to MMDDYY using a date format field.
      *
     C     *iso          move      bfefdt        wkmdydate
     C                   move      wkmdydate     d1mdyefdt
     C                   exsr      $writesfl
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * $exit - seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * $wrmsg - write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * $clmsg - clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * *inzsr - initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
     C     *entry        plist
     C                   parm                    c1ttbcd
     C                   parm                    c1ttbds
     C                   parm                    rtncd
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     12            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * Get the system date into CCYYMMDD format.
      *
     C                   move      *date         wkcymdiso
     C                   move      wkcymdiso     wksysdt
      *
      *
      * Default to 'yes' the value for control field 'show current entries only'
      *
     C                   move      yes           c1ynfl
     C                   move      yes           svynfl
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
