// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPG0DFR
// ?Date: 14.08.2025 Time: 03:40:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?See Narrative for ARS032 changes in EDT Customer function
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV Sys Date Format    RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1264543;
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.System_Date_Format);

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

//?JBB WI-440  4/14/21 - M3 to JDE E1 Financials
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('E1LIVE');
PARAMETER(LCL.Live_with_E1_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?03/04/25 DN DO23471-Get 'Restrict to P2P' Flag for CST Module.
// Call program Rtv Restrict to P2P    XF.
CALL PROGRAM(Rtv Restrict to P2P    XF) ('PVKAXFR');
PARAMETER('CST');
PARAMETER(1);
PARAMETER(LCL.Restrict_to_P2P);

//?03/04/25 DN DO23471-Get 'Company Organization' Value.
EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

// CTL.City = CTL.USR 15 Text           USR
CTL.City = CTL.USR_15_Text_USR;

// CTL.Type of Customer USR SAV = CTL.Type of Customer USR
CTL.Type_of_Customer_USR_SAV = CTL.Type_of_Customer_USR;

//?USER: Initialize subfile record from DBF record

// RCD.Type of Customer = CND.*BLANKS
RCD.Type_of_Customer_USR = *BLANK;

//?Create Type of Customer
CASE;

// IF DB1.Ship To Customer Flag is Allow Use as Ship To Cust
IF DB1.Ship_To_Customer_Flag = 'Y';

// RCD.Type of Customer = CND.ShipTo
RCD.Type_of_Customer_USR = 'S';

CASE;

// IF DB1.A/R Customer Number EQ DB1.Ship To Customer
IF DB1.AR_Customer_Number = DB1.Ship_To_Customer;

// RCD.Type of Customer = CND.Ship to Bill To
RCD.Type_of_Customer_USR = 'X';

ENDIF;

//?Create Type of Customer
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.A/R Customer Number EQ DB1.Ship To Customer
IF DB1.AR_Customer_Number = DB1.Ship_To_Customer;

// RCD.Type of Customer = CND.Bill To
RCD.Type_of_Customer_USR = 'B';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Parent Customer EQ DB1.Ship To Customer
IF DB1.Parent_Customer = DB1.Ship_To_Customer;

CASE;

// IF DB1.Parent Customer NE DB1.A/R Customer Number
IF DB1.Parent_Customer <> DB1.AR_Customer_Number;

// RCD.Type of Customer = CND.Parent
RCD.Type_of_Customer_USR = 'P';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If Type of Customer select but not equal to db1 then do not select
CASE;

// IF CTL.Type of Customer NE WRK.BLANK
IF CTL.Type_of_Customer_USR <> WRK.BLANK;

CASE;

// IF CTL.Type of Customer EQ RCD.Type of Customer
IF CTL.Type_of_Customer_USR = RCD.Type_of_Customer_USR;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If Type of Customer select but not equal to db1 then do not select
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

// RCD.Name  25A  USR = DB1.Customer Name
RCD.Name_25A_USR = DB1.Customer_Name;

//?Customer Name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Name  25A  USR NE WRK.BLANK
IF CTL.Name_25A_USR <> WRK.BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Name_25A_USR);
PARAMETER(25);
PARAMETER(1);
PARAMETER(CTL.Name_25A_USR);
PARAMETER(25);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Record Selected= yes
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// WRK.Text 1 Length USR = SUBSTRING(CTL.Name  25A  USR,CON.2,CON.1)
WRK.Text_1_Length_USR = SUBSTRING(CTL.Name_25A_USR:2:1);

// RCD.USR First New Subfile Rcd = CND.yes
RCD.USR_First_New_Subfile_Rcd = 'Y';

// RCD.USR Desc. 10 = DB1.Telephone Number FF
RCD.USR_Desc_10 = DB1.Telephone_Number_FF;

// PGM.*Scan limit = CON.999999
PGM.*Scan_limit = 999999;

//?PK0357  Display asterisk if A/R Comments exist  1/09/2002
EXECUTE FUNCTION(Rtv Record count      RT) TYPE(RTVOBJ) FILE(POAVCPP)           AC1603538;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('AR');
PARAMETER(LCL.USR_Count);
{
 //?USER: Processing if Data record not found

 // PAR.USR Count = CON.*ZERO
 PAR.USR_Count = 0;

 //?USER: Process Data record

 // PAR.USR Count = PAR.USR Count + CON.1
 PAR.USR_Count = PAR.USR_Count + 1;

}


CASE;

// IF LCL.USR Count is GT 0
IF LCL.USR_Count > *ZERO;

// RCD.USR Asterisk = CND.asterisk
RCD.USR_Asterisk = *;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Asterisk = CND.blank
RCD.USR_Asterisk = *BLANK;

ENDIF;

//?** ACTIVE Accrual Exists **
// RCD.Reverse Image Flag USR = CND.No
RCD.Reverse_Image_Flag_USR = 'N';

EXECUTE FUNCTION(Val Accrual Exists    RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1680822;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Period Ending Date GE JOB.*Job date
 IF DB1.Period_Ending_Date >= JOB.*Job_date;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

ENDIF;

ENDIF;

// WRK.Record Status = DB1.Record Status
WRK.Record_Status = DB1.Record_Status;

//?USER: Process subfile control (Pre-confirm)

// CTL.USR Name = CTL.Name 25A USR
CTL.USR_Name = CTL.Name_25A_USR;

CASE;

// IF CTL.USR Name NE WRK.USR Name
IF CTL.USR_Name <> WRK.USR_Name;

//?** Allow and leave special characters when searching    FP1251
// Execute function CVT to Upper w/SpclChr US.
EXECUTE FUNCTION(CVT to Upper w/SpclChr US) TYPE(EXCUSRSRC) ('POODUFR');
PARAMETER(CTL.USR_Name);
PARAMETER(CTL.USR_Name);
{
 E                    AR1        30  1               ARRAY 2
 C                     MOVEA#IMKTX    AR1              LOAD ARRAY
 C                     Z-ADD1         X1      20       SET COUNTER
 C                     Z-ADD1         Y1      20       SET COUNTER
 * * * * * * * CHECK FOR ALPHABETIC CHARACTERS * * * * * * *
 C                     Z-ADD1         Y1
 C           Y1        DOWLT31
 C           AR1,Y1    IFEQ 'a'
 C                     MOVEL'A'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'b'
 C                     MOVEL'B'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'c'
 C                     MOVEL'C'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'd'
 C                     MOVEL'D'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'e'
 C                     MOVEL'E'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'f'
 C                     MOVEL'F'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'g'
 C                     MOVEL'G'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'h'
 C                     MOVEL'H'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'i'
 C                     MOVEL'I'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'j'
 C                     MOVEL'J'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'k'
 C                     MOVEL'K'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'l'
 C                     MOVEL'L'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'm'
 C                     MOVEL'M'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'n'
 C                     MOVEL'N'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'o'
 C                     MOVEL'O'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'p'
 C                     MOVEL'P'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'q'
 C                     MOVEL'Q'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'r'
 C                     MOVEL'R'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 's'
 C                     MOVEL'S'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 't'
 C                     MOVEL'T'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'u'
 C                     MOVEL'U'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'v'
 C                     MOVEL'V'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'w'
 C                     MOVEL'W'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'x'
 C                     MOVEL'X'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'y'
 C                     MOVEL'Y'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'z'
 C                     MOVEL'Z'       AR1,Y1
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     ADD  1         Y1
 C                     END
 C                     MOVEAAR1       #OMLTX           LOAD OUTPUT
}


// WRK.USR Name = CTL.USR Name
WRK.USR_Name = CTL.USR_Name;

// CTL.Name 25A USR = CTL.USR Name
CTL.Name_25A_USR = CTL.USR_Name;

// WRK.Name 25A USR = CTL.USR Name
WRK.Name_25A_USR = CTL.USR_Name;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

CASE;

// IF CTL.Type of Customer Sav NE CTL.Type of Customer
IF CTL.Type_of_Customer_USR_SAV <> CTL.Type_of_Customer_USR;

// CTL.Type of Customer Sav = CTL.Type of Customer
CTL.Type_of_Customer_USR_SAV = CTL.Type_of_Customer_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?NEW 12/20/04 RMC -  to position on customers ge ctl.ship to
CASE;

// IF CTL.Ship To Customer NE CTL.Ship to Customer      USR
IF CTL.Ship_To_Customer <> CTL.Ship_to_Customer_USR;

// CTL.Ship to Customer      USR = CTL.Ship To Customer
CTL.Ship_to_Customer_USR = CTL.Ship_To_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

CASE;

// IF CTL.City NE CTL.USR 15 Text           USR
IF CTL.City <> CTL.USR_15_Text_USR;

// CTL.City = CTL.USR 15 Text           USR
CTL.City = CTL.USR_15_Text_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Process create customer request
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

//?03/04/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// CTL.Ship To Customer = CON.*ZERO
CTL.Ship_To_Customer = *ZERO;

// Call program CRT Customer/Co        XF.
CALL PROGRAM(CRT Customer/Co        XF) ('PPHBXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(CTL.Ship_To_Customer);

// CTL.Ship To Customer = CON.*ZERO
CTL.Ship_To_Customer = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Process Print listing
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.Customer Number Pass  USR = CTL.Ship To Customer
PAR.Customer_Number_Pass_USR = CTL.Ship_To_Customer;

// Call program PRT Pass Cst/Cty/St/StsUP.
CALL PROGRAM(PRT Pass Cst/Cty/St/StsUP) ('PDYQUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('A/R');
PARAMETER('PDCOPCLP');
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(CTL.City);
PARAMETER(CTL.State_Code);
PARAMETER(CTL.Record_Status);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Print Customer');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*BLANK);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?Process Print Accrual List
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

//?PK0519 11/21/03  New report by sales route
// Call program Pmt Cust Acrl - both  PV.
CALL PROGRAM(Pmt Cust Acrl - both  PV) ('PPBVPVR');

ENDIF;

//?F8=Phone lookup
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// Call program PMT Phone Lookup      PV.
CALL PROGRAM(PMT Phone Lookup      PV) ('PNXZPVR');
PARAMETER(LCL.Telephone_Number_FF);

CASE;

// IF LCL.Telephone Number FF is Not equal to blanks
IF LCL.Telephone_Number_FF <> *BLANK;

// Call program Exc Phone Lookup      XF.
CALL PROGRAM(Exc Phone Lookup      XF) ('PNX0XFR');
PARAMETER(LCL.Telephone_Number_FF);
PARAMETER(CTL.Ship_To_Customer);

CASE;

// IF CTL.Ship To Customer is not equal to zero
IF CTL.Ship_To_Customer <> *ZERO;

// CTL.Ship to Customer      USR = CTL.Ship To Customer
CTL.Ship_to_Customer_USR = CTL.Ship_To_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?F9=M3 Supplier. Live with E1 flag must be "N". JBB WI440 4/14/21
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

CASE;

// IF LCL.Live with E1 usr is No
IF LCL.Live_with_E1_usr = 'N';

// Call program WW M3 Supplier        DF.
CALL PROGRAM(WW M3 Supplier        DF) ('PWAZDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function Key is not allowed for companies that are live with JDE Enterprise
ERROR(USR5200);

ENDIF;

ENDIF;

//?F23=Print Collection Notes
CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

CASE;

// IF PAR.PRT Number of Copies is Zero
IF PAR.PRT_Number_of_Copies = *ZERO;

// PAR.PRT Number of Copies = CON.1
PAR.PRT_Number_of_Copies = 1;

ENDIF;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Collection Notes');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('CLCTNNOTES');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = CVTVAR(PAR.PRT Number of Copies)
LCL.Copies_NBR_USR = CVTVAR(PAR.PRT_Number_of_Copies);

// Call program Prt Collection Notes  CL.
SBMJOB;
CALL PROGRAM(Prt Collection Notes  CL) ('PMYFUPC');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(*BLANK);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
SBMJOBEND;

ENDIF;

ENDIF;

//?F24=Work With Follow Up Notes
CASE;

// IF CTL.*CMD key is CF24
IF CTL.*CMD_key = '24';

// Call program WW Follow Up Notes    DF.
CALL PROGRAM(WW Follow Up Notes    DF) ('PMYKDFR');

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?2: Process change customer request
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

//?03/04/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// Call program EDT Customer/Co Cust   E2.
CALL PROGRAM(EDT Customer/Co Cust   E2) ('PPG1E2R');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(PAR.Origination_Point);
PARAMETER(*ZERO);

// Call program Val Cust/Plnt Ship/WareXF.
CALL PROGRAM(Val Cust/Plnt Ship/WareXF) ('PPINXFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Need_Ship_Ware_Info_Usr);

ENDIF;

//?3: Process copy customer request
CASE;

// IF RCD.*SFLSEL is *Copy request
IF RCD.*SFLSEL = '3'/'3';

//?03/04/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// Call program EDT Customer Copy Prc  XF.
CALL PROGRAM(EDT Customer Copy Prc  XF) ('PPHDXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Ship_To_Customer);

SET CURSOR;

ENDIF;

//?4: Process Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

//?03/04/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// RCD.Record Status = CND.Deleted
RCD.Record_Status = 'D';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?5: Display A/R Summary
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?RMC 9/16/04  PKTR01
//?** Put blanks in new input parm for the DSP A/R Summary  03/27/06 LJB
// WRK.USR Check Y/N Status = CND.blank
WRK.USR_Check_Y_N_Status = *BLANK;

// Call program DSP A/R Summary       XF.
CALL PROGRAM(DSP A/R Summary       XF) ('PPG5XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(WRK.USR_Check_Y_N_Status);

ENDIF;

//?7: Edit comment
CASE;

// IF RCD.*SFLSEL is Edit Opt7
IF RCD.*SFLSEL = '7'/'7';

//?03/04/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// Call program Edt Customer Comment  EF.
CALL PROGRAM(Edt Customer Comment  EF) ('POF9EFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Blank_for_4_USR);

ENDIF;

//?9: Edit Customer Item Reference
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Edt Cust Item Ref     EF.
CALL PROGRAM(Edt Cust Item Ref     EF) ('POMXEFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?10: WW Cust/Invs        PK0357   1/11/2002
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program WW Customer/Invoices   DF.
CALL PROGRAM(WW Customer/Invoices   DF) ('POONDFR');
PARAMETER(*ZERO);
PARAMETER(RCD.AR_Customer_Number);

ENDIF;

//?The A/R Summary will automatically be added with the CO/Cust
//?     the user will not be able to update the A/R Summary Record
//?8: WW Customer/company
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

//?03/04/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// LCL.Company Number = CND.Equal to zero
LCL.Company_Number = *ZERO;

// Call program WW Customer/Company    EF.
CALL PROGRAM(WW Customer/Company    EF) ('PPIQEFR');
PARAMETER(LCL.Company_Number);
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

//?11: Process cust accruals request- RMC EXPCM 10/22/04 moved f/ ww cust/co
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program WW Cust Accruals      DF.
CALL PROGRAM(WW Cust Accruals      DF) ('POAXDFR');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

//?15=Edit customer more        (new E01654 8/18/2011)
CASE;

// IF RCD.*SFLSEL is Option 15
IF RCD.*SFLSEL = '15';

//?03/04/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

//?par.display -> allow edit to gl sales acct type
// Call program Edt More Customer     E1.
CALL PROGRAM(Edt More Customer     E1) ('PNY7E1R');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('Y');

ENDIF;

//?16: Process Activate/Inactivate Customer       E002031 4/10/2012
CASE;

// IF RCD.*SFLSEL is *Active/Inactive
IF RCD.*SFLSEL = '16';

//?03/04/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

//?** Save the original record status in wrk. Update rcd record
//?** status with the new status (Active or Inactive)
CASE;

// IF RCD.Record Status is Inactive
IF RCD.Record_Status = 'I';

// WRK.Record Status = CND.Inactive
WRK.Record_Status = 'I';

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

// IF RCD.Record Status is Active
IF RCD.Record_Status = 'A';

// WRK.Record Status = CND.Active
WRK.Record_Status = 'A';

// RCD.Record Status = CND.Inactive
RCD.Record_Status = 'I';

// IF RCD.Record Status is Deleted
IF RCD.Record_Status = 'D';

// WRK.Record Status = CND.Deleted
WRK.Record_Status = 'D';

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

ENDIF;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process subfile record (Post-confirm)

//?Process delete customer request
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

//?Cannot delete if any of the following exist for the customer:
//?History, A/R Header, Order Header, Order Detail,
//?A/R Summary, Item Contract, Customer/Item Price Overage, Order Events
//?IF Company/Customer exists, make inactive in delete routine E000900
//?First check for other customer dependencies
//?Changed tp remove hard coded company num 06/08/07 JRB
// Call program RTV Vry/Dlt Cust Rec   XF.
CALL PROGRAM(RTV Vry/Dlt Cust Rec   XF) ('PMHXXFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(PAR.USR_Return_Code);

CASE;

// IF PAR.USR Return Code is Exists
IF PAR.USR_Return_Code = 'E';

// Send error message - 'Customer &1 is inelligible for deletion due to existing dependencies.'
ERROR(USR2470);
MSGPARM(RCD.Ship_To_Customer);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?16=Process Activate/Inactivate Customer request  E002031
CASE;

// IF RCD.*SFLSEL is *Active/Inactive
IF RCD.*SFLSEL = '16';

// WRK.USR Return Code = CND.Does Not Exist
WRK.USR_Return_Code = 'N';

CASE;

// IF WRK.Record Status is Inactive
IF WRK.Record_Status = 'I';

// OR WRK.Record Status is Deleted
OR WRK.Record_Status = 'D';

//?If record was inactive or deleted, set to active without validating
// Call program UPD Match Cust RecSts  XF.
CALL PROGRAM(UPD Match Cust RecSts  XF) ('PBCXXFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Record_Status);

EXECUTE FUNCTION(CHG Customer           CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1107938;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);
PARAMETER(RCD.Address_Line_1);
PARAMETER(RCD.Address_Line_2);
PARAMETER(RCD.Address_Line_3);
PARAMETER(RCD.City);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.County_Code);
PARAMETER(RCD.Zip_Postal_Code);
PARAMETER(RCD.Telephone_Number_FF);
PARAMETER(RCD.Fax_Number_FF);
PARAMETER(RCD.Alpha_Search);
PARAMETER(RCD.Federal_Tax_Id);
PARAMETER(RCD.New_Customer_Status);
PARAMETER(RCD.SIC_Number);
PARAMETER(RCD.D_B_Number);
PARAMETER(RCD.D_B_Rating);
PARAMETER(RCD.Date_of_D_B_Rating);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Parent_Customer);
PARAMETER(RCD.Credit_Check_AR_Customer);
PARAMETER(RCD.Credit_Check_Parent_Cust);
PARAMETER(RCD.Country_Code);
PARAMETER(RCD.EDI_Invoice_Sts);
PARAMETER(RCD.Order_Entry_Hold);
PARAMETER(RCD.Parent_Credit_Limit);
PARAMETER(RCD.AR_Credit_Limit);
PARAMETER(RCD.Order_Entry_Hold_Date);
PARAMETER(RCD.Ship_To_Customer_Flag);
PARAMETER(RCD.Field_vs_In_House_flag);
PARAMETER(RCD.Email_When_Order_Shipped);
PARAMETER(RCD.Print_Invoice_Sts);
PARAMETER(RCD.Item_Reference_Status);
PARAMETER(RCD.Statement_Print_Frequency);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// Send information message - 'Customer Status has been changed for customer &1'
MESSAGE(USR4513 *INFO);
MSGPARM(RCD.Ship_To_Customer);

// WRK.Record Status = CND.*blank
WRK.Record_Status = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?Cannot Inactivate customer if any of the following exist:
//?Order Header records, Order Detail records, A/R Summary,
//?Item Contract, Customer/Item Price Overage, Order Events
//?and other customer dependencies
//?Inactivate even if Sales History or A/R Header exists per Tim Wood
// PAR.USR Return Code = CND.Not Returned
PAR.USR_Return_Code = *BLANK;

// Call program Zzz Match Cust RecSts  XF.
CALL PROGRAM(Zzz Match Cust RecSts  XF) ('PBCZXFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(PAR.USR_Return_Code);
PARAMETER(RCD.Record_Status);

//?** Existing History or A/R Headers is valid, set var to "N" E002031
CASE;

// IF PAR.USR Return Code is A/R Header
IF PAR.USR_Return_Code = 'H';

// PAR.USR Return Code = CND.Does Not Exist
PAR.USR_Return_Code = 'N';

//?** Existing History or A/R Headers is valid, set var to "N" E002031
// IF PAR.USR Return Code is Sales History
IF PAR.USR_Return_Code = 'S';

// PAR.USR Return Code = CND.Does Not Exist
PAR.USR_Return_Code = 'N';

ENDIF;

//?Send message if USR Return Code is not blank, else update Customer
CASE;

// IF PAR.USR Return Code NE WRK.USR Blank Field
IF PAR.USR_Return_Code <> WRK.USR_Blank_Field;

// AND PAR.USR Return Code NE WRK.USR Return Code
AND PAR.USR_Return_Code <> WRK.USR_Return_Code;

CASE;

// IF PAR.USR Return Code is A/R Customer
IF PAR.USR_Return_Code = 'A';

// Send error message - 'A/R customer can not be inactivated due other customer dependencies.'
ERROR(USR2473);
MSGPARM(RCD.AR_Customer_Number);

// IF PAR.USR Return Code is Parent Customer
IF PAR.USR_Return_Code = 'P';

// Send error message - 'A/R Parent still exists with active Dependencies'
ERROR(USR4511);
MSGPARM(RCD.Ship_To_Customer);

// IF PAR.USR Return Code is Open Orders
IF PAR.USR_Return_Code = 'O';

// WRK.Order Number = CON.*ZERO
WRK.Order_Number = *ZERO;

// WRK.Block Order Flag = CND.*Blank
WRK.Block_Order_Flag = *BLANK;

EXECUTE FUNCTION(RTV Val Opn Block Ord  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2041625;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Block_Order_Flag);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 // PAR.Order Number = DB1.Order Number
 PAR.Order_Number = DB1.Order_Number;

 QUIT;

 ENDIF;

}


//?send order still open message
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

//?If Order is Block Order, display appropriate message
CASE;

// IF WRK.Block Order Flag is Block Order
IF WRK.Block_Order_Flag = 'B';

// Send error message - 'Order &1 is a Block Order'
ERROR(USR4508);
MSGPARM(WRK.Order_Number);

//?If Order is Block Order, display appropriate message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order &1 is still open'
ERROR(USR4509);
MSGPARM(WRK.Order_Number);

ENDIF;

ENDIF;

// IF PAR.USR Return Code is Order Detail
IF PAR.USR_Return_Code = 'D';

// Send error message - 'Open Order line items exist in Order Detail for &1'
ERROR(USR4512);
MSGPARM(RCD.Ship_To_Customer);

ENDIF;

//?Send message if USR Return Code is not blank, else update Customer
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Customer           CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1107938;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);
PARAMETER(RCD.Address_Line_1);
PARAMETER(RCD.Address_Line_2);
PARAMETER(RCD.Address_Line_3);
PARAMETER(RCD.City);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.County_Code);
PARAMETER(RCD.Zip_Postal_Code);
PARAMETER(RCD.Telephone_Number_FF);
PARAMETER(RCD.Fax_Number_FF);
PARAMETER(RCD.Alpha_Search);
PARAMETER(RCD.Federal_Tax_Id);
PARAMETER(RCD.New_Customer_Status);
PARAMETER(RCD.SIC_Number);
PARAMETER(RCD.D_B_Number);
PARAMETER(RCD.D_B_Rating);
PARAMETER(RCD.Date_of_D_B_Rating);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Parent_Customer);
PARAMETER(RCD.Credit_Check_AR_Customer);
PARAMETER(RCD.Credit_Check_Parent_Cust);
PARAMETER(RCD.Country_Code);
PARAMETER(RCD.EDI_Invoice_Sts);
PARAMETER(RCD.Order_Entry_Hold);
PARAMETER(RCD.Parent_Credit_Limit);
PARAMETER(RCD.AR_Credit_Limit);
PARAMETER(RCD.Order_Entry_Hold_Date);
PARAMETER(RCD.Ship_To_Customer_Flag);
PARAMETER(RCD.Field_vs_In_House_flag);
PARAMETER(RCD.Email_When_Order_Shipped);
PARAMETER(RCD.Print_Invoice_Sts);
PARAMETER(RCD.Item_Reference_Status);
PARAMETER(RCD.Statement_Print_Frequency);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// Send information message - 'Customer Status has been changed for customer &1'
MESSAGE(USR4513 *INFO);
MSGPARM(RCD.Ship_To_Customer);

// WRK.Record Status = CND.*blank
WRK.Record_Status = *BLANK;

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

