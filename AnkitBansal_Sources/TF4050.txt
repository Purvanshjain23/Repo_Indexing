      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF4050
      * TITLE:       Confirm Cash Distribution Header to Post
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     09/20/05
      *
      *
      * FUNCTION: This screen displays a specific record from the Cash Distribution
      *           Header file.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 05/11/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      *
      * 10/14/09  LeAnne Ramsey
      *           Recompile only. Cash Distribution Header was changed.
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd4050   cf   e             workstn infds(iofeed)
      *
      *
     Ftfp012    if   e           k disk
      *    Cash distribution header
      *
      *
     Ftfp097    if   e           k disk
      *    Status codes
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      *
      * Work fields for date manipulation
      *
     D wkisodt         s               D   datfmt(*iso)
      *
      *
      * Parm fields
      *
     D xxoutq          s                   like(ldoutq)
     D xxhold          s                   like(ldhold)
     D xxsave          s                   like(ldsave)
     D xxcopy          s                   like(ldcopy)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      *  Local data area
      *---------------------------------------------------------------
      *
     d lda            uds                  dtaara(*lda)
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for Screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Retrieve the Cash Distribution Header record.
      *
     C     d1btsn        chain     tfp012                             92
     C                   if        *in92 = *on                                  If not found
     C                   add       1             error
     C                   movel     'HS09008'     mgid(e)
     C                   else
      *
     C                   z-add     chdpdccam     d1dpdccam
     C                   z-add     chdcdccam     d1dcdccam
     C                   z-add     chbpdccam     d1bpdccam
     C                   z-add     chbcdccam     d1bcdccam
     C                   z-add     chboaam       d1boaam
     C                   z-add     chbcdiaam     d1bcdiaam
     C                   z-add     chscmam       d1scmam
     C                   z-add     chwtppam      d1wtppam
     C                   z-add     chrbam        d1rbam
     C                   z-add     chcpam        d1cpam
     C                   z-add     chtdaam       d1tdaam
     C                   move      chtdacom      d1tdacom
     C                   z-add     chasxcdam     d1asxcdam
     C                   z-add     chscdam       d1scdam
     C                   z-add     chtcdam       d1tcdam
     C                   z-add     chttpam       d1ttpam
      *
     C                   z-add     chsexam       d1sexam
     C                   z-add     chtexam       d1texam
     C                   z-add     chaexam       d1aexam
      *
      * Flip Daily Date to MMDDYY format
      *
     C     *iso          test(d)                 chddt                  92
     C                   if        *in92 = *off                                 If OK daily
     C                   move      chddt         wkisodt
     C     *mdy          move      wkisodt       d1mdy
     C                   endif                                                  If OK daily
      *
      *
      * Retrieve Status description
      *
     C     chchstcd      chain     tfp097                             92
     C                   if        *in92 = *off
     C                   move      ststds        d1stds
     C                   endif
     C                   endif                                                  If not found
      *
      * Display screen 1
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT
      *
     C                   write     tf4050k1
     C                   write     tf4050ec
     C                   exfmt     tf4050r1
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      *
      * Process user's entry and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      '03'          rtncd
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in08 = *on                                  F8-submit
     C                   eval      routne = exit
     C                   move      '08'          rtncd
      *
     C                   when      *in17 = *on                                  F17-print opt
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * End job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    d1btsn
     C                   parm                    rtncd
     C                   parm      ldoutq        xxoutq
     C                   parm      ldhold        xxhold
     C                   parm      ldsave        xxsave
     C                   parm      ldcopy        xxcopy
      *
      * Key lists
      *    None
      *
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
