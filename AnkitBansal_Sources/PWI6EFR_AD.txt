// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWI6EFR
// ?Date: 14.08.2025 Time: 02:56:37
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//? 5/28/2019 JBB E14981 - Allow Business User to Change Head Received
//?- This new program will allow the user to change the head received
//?  for the current Payment Date in the Payment Processing Parms
//?  file.  Only Market hogs can have the received head changed.
//?  Also, there must be a Drive Card Number and the Tattoo Header
//?  Payment Sts must be SC and the Process Code must be SLG.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

//?This program displays all Tattoo Detail records associated with a
//?Company, Buy Order, and Load.  The only Tattoo Detail records that
//?can be updated are the ones that match the incoming Tattoo and
//?Kill Date.  The other records are used for reference only.
// PAR.Tattoo Number Selected = PAR.TH Tattoo Number
PAR.Tattoo_Number_Selected = PAR.TH_Tattoo_Number;

// PAR.Kill Date Selected = PAR.TH Kill Date
PAR.Kill_Date_Selected = PAR.TH_Kill_Date;

// LCL.Update Flag = CND.No
LCL.Update_Flag = 'N';

//?USER: Initialize subfile header

// CTL.Kill Date Usr = PAR.TH Kill Date
CTL.Kill_Date_Usr = PAR.TH_Kill_Date;

// CTL.Tattoo Number USR = PAR.TH Tattoo Number
CTL.Tattoo_Number_USR = PAR.TH_Tattoo_Number;

//?Retrieve the original BOL Head Received value
EXECUTE FUNCTION(Rtv Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1192881;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(LCL.BOL_Kill_Date);
PARAMETER(NLL.BOL_Pln_Delv_Start_Time);
PARAMETER(NLL.BOL_Pln_Delv_End_Time);
PARAMETER(NLL.BOL_Pln_Head_Delv);
PARAMETER(NLL.BOL_Shipped_Wgt);
PARAMETER(NLL.BOL_Pln_Delv_Date);
PARAMETER(NLL.BOL_Freight_UOM);
PARAMETER(NLL.BOL_Freight_Unit_Amt);
PARAMETER(NLL.BOL_Freight_Amt);
PARAMETER(NLL.BOL_Freight_Allocation);
PARAMETER(CTL.BOL_Head_Received_3_0);
PARAMETER(NLL.BOL_Live_Wgt_Received);
PARAMETER(NLL.BOL_Trucker_Payment_Sts);
PARAMETER(NLL.BOL_Trucker_Check_Number);
PARAMETER(NLL.BOL_Trucker_Check_Date);
PARAMETER(NLL.BOL_AP_Voucher);
PARAMETER(NLL.BOL_Trailer);
PARAMETER(NLL.BOL_Freight_Exp_Paid_By);
PARAMETER(NLL.BOL_Scheduled_Kill_Shift);
PARAMETER(NLL.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(NLL.Reported_to_USDA);
PARAMETER(NLL.BOL_MPR_Prior_Day_Prch);
PARAMETER(NLL.BOL_Violated_Auth_Tme_Sts);
PARAMETER(NLL.TRK_Trucker_Code);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve the original TH Head Received value
EXECUTE FUNCTION(Rtv Tattoos 4 Chg Head RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1351596;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(CTL.Head_Rcvd_1);
PARAMETER(CTL.TH_Payment_Sts);
PARAMETER(CTL.TH_Held_Over_Record);
PARAMETER(CTL.TH_Held_Ovr_Completed_Dte);
PARAMETER(CTL.TH_Hog_Class_Type);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.Head_Rcvd_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Position to the first Tattoo for the Company, Buy Order, and Load
EXECUTE FUNCTION(Rtv 1st Tattoo f/BOL  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1351605;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Tattoo_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CTL.Calc BOL Head Rcvd USR = CON.*ZERO
CTL.Calc_BOL_Head_Rcvd_USR = *ZERO;

// CTL.Calc Head Rcvd 1 = CON.*ZERO
CTL.Calc_Head_Rcvd_1 = *ZERO;

//?USER: Initialize subfile record (existing record)

//?Process records where the Process Code is Sent to Kill/Resold
CASE;

// IF RCD.TDP Process Code is Not Sent to Kill
IF RCD.TDP_Process_Code <> 'K';

// RCD.Display Output Only Usr = CND.Yes
RCD.Display_Output_Only_Usr = 'Y';

//?If Process Code <> K, do not allow input into Pen Head
//?Process records where the Process Code is Sent to Kill/Resold
// IF *OTHERWISE
IF *OTHERWISE;

//?Determine if New Pen Head field on screen is input or output
CASE;

// IF RCD.TH Tattoo Number EQ PAR.TH Tattoo Number
IF RCD.TH_Tattoo_Number = PAR.TH_Tattoo_Number;

// AND RCD.TH Kill Date EQ PAR.TH Kill Date
AND RCD.TH_Kill_Date = PAR.TH_Kill_Date;

//?The New Pen Head subfile field is input capable
// RCD.Display Output Only Usr = CND.No
RCD.Display_Output_Only_Usr = 'N';

//?Determine if New Pen Head field on screen is input or output
// IF *OTHERWISE
IF *OTHERWISE;

//?Protect the New Pen Head subfile field - no input allowed
// RCD.Display Output Only Usr = CND.Yes
RCD.Display_Output_Only_Usr = 'Y';

ENDIF;

ENDIF;

// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

//?USER: Validate subfile control

//?Signifies if a New Pen Head value was entered.  If yes, display
//?the confirm prompt after processing all subfile records.
// LCL.Update Flag = CND.No
LCL.Update_Flag = 'N';

//?Initialize the new Tattoo Header and Buy Order Load screen fields.
// CTL.Calc Head Rcvd 1 = CTL.Head Rcvd 1
CTL.Calc_Head_Rcvd_1 = CTL.Head_Rcvd_1;

// CTL.Calc BOL Head Rcvd USR = CTL.BOL Head Received 3.0
CTL.Calc_BOL_Head_Rcvd_USR = CTL.BOL_Head_Received_3_0;

//?USER: Validate subfile record fields

//?Calculate difference
CASE;

// IF RCD.Calc Pen Head USR is not Zero
IF RCD.Calc_Pen_Head_USR <> *ZERO;

// RCD.DIFF Total Head = RCD.Calc Pen Head USR - RCD.TD Pen Head
RCD.DIFF_Total_Head = RCD.Calc_Pen_Head_USR - RCD.TD_Pen_Head;

// CTL.Calc BOL Head Rcvd USR = CTL.Calc BOL Head Rcvd USR + RCD.DIFF Total Head
CTL.Calc_BOL_Head_Rcvd_USR = CTL.Calc_BOL_Head_Rcvd_USR + RCD.DIFF_Total_Head;

// CTL.Calc Head Rcvd 1 = CTL.Calc Head Rcvd 1 + RCD.DIFF Total Head
CTL.Calc_Head_Rcvd_1 = CTL.Calc_Head_Rcvd_1 + RCD.DIFF_Total_Head;

// LCL.Update Flag = CND.Yes
LCL.Update_Flag = 'Y';

ENDIF;

//?USER: Validate subfile record relations

//?Determine if confirm prompt is displayed
CASE;

// IF LCL.Update Flag is Yes
IF LCL.Update_Flag = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Determine if confirm prompt is displayed
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Head Received     IF) TYPE(EXCINTFUN) FILE(PKA2CPP)        AB1351072;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TD_Sequence_Number);
PARAMETER(RCD.TD_Pen_Head);
PARAMETER(RCD.Pen_Number);
PARAMETER(CTL.Calc_BOL_Head_Rcvd_USR);
PARAMETER(RCD.Calc_Pen_Head_USR);
PARAMETER(PAR.Tattoo_Number_Selected);
PARAMETER(PAR.Kill_Date_Selected);
PARAMETER(CTL.Calc_Head_Rcvd_1);
{
 //?Execute internal function

 //?Only update records for the selected Tattoo and Kill Date
 CASE;

 // IF PAR.TH Tattoo Number EQ PAR.Tattoo Number Selected
 IF PAR.TH_Tattoo_Number = PAR.Tattoo_Number_Selected;

 // AND PAR.TH Kill Date EQ PAR.Kill Date Selected
 AND PAR.TH_Kill_Date = PAR.Kill_Date_Selected;

 //?Only update Tattoo Detail if Pen Head has changed
 CASE;

 // IF PAR.Calc Pen Head USR is not Zero
 IF PAR.Calc_Pen_Head_USR <> *ZERO;

 EXECUTE FUNCTION(Rtv Crt/Chg hd, pen  RT) TYPE(RTVOBJ) FILE(PKA2CPP)            AB1203946;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TD_Sequence_Number);
 PARAMETER(PAR.Calc_Pen_Head_USR);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Processing if Data record not found

  // Call program Zzz Tattoo Dtl Rsl    XF.
  CALL PROGRAM(Zzz Tattoo Dtl Rsl    XF) ('PKMMXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TD_Pen_Head);

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(DB1.TD_Live_Wgt);
  PARAMETER(PAR.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?Update Tattoo Header and Buy Order Load only the first time
 CASE;

 // IF NOT PAR.Update Flag is Yes
 IF ! PAR.Update_Flag = 'Y';

 EXECUTE FUNCTION(Rtv/chg Head Received RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1351073;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.Tattoo_Number_Selected);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.Calc_Head_Rcvd_1);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Hdr Rec           CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1308471;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(DB1.TH_Kill_Balancing_Sts);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Rtv/chg BOL Rcvd Head RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1351074;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.Calc_BOL_Head_Rcvd_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg BOL Head Received CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1351161;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Head_Received);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 // PAR.Update Flag = CND.Yes
 PAR.Update_Flag = 'Y';

 ENDIF;

 ENDIF;

}


//?USER: Process command keys

//?Exit program after update
RETURN;

