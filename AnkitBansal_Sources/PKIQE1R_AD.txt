// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKIQE1R
// ?Date: 14.08.2025 Time: 02:51:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 01/23/21 - Increased the length from 5 to 7 and corrected the
//?                      alignment of Buy Order Number field.
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize key screen

CASE;

// IF KEY.TST Sequence Number EQ WRK.Zero USR
IF KEY.TST_Sequence_Number = WRK.Zero_USR;

EXECUTE FUNCTION(Rtv Last Seq Nbr      RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1128234;
PARAMETER(KEY.BOH_Company_Number);
PARAMETER(KEY.BOH_Buy_Order_Number);
PARAMETER(KEY.BOL_Load_Number);
PARAMETER(KEY.TH_Tattoo_Number);
PARAMETER(KEY.TH_Kill_Date);
PARAMETER(KEY.TST_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TST_Sequence_Number = *ZERO;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TST_Sequence_Number = DB1.TST_Sequence_Number;

 QUIT;

}


// KEY.TST Sequence Number = KEY.TST Sequence Number + CON.1
KEY.TST_Sequence_Number = KEY.TST_Sequence_Number + 1;

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Pen Company Number = DTL.BOH Company Number
DTL.Pen_Company_Number = DTL.BOH_Company_Number;

EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.HC_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.TST Record Created Status = CND.PC Uploaded Record
DTL.TST_Record_Created_Status = 'P';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.HC_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen fields

EXECUTE FUNCTION(Rtv Hog Class         RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127629;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
PARAMETER(WRK.HC_Defect_Required);
PARAMETER(WRK.HC_Price_Required);
PARAMETER(WRK.HC_Resolution);
PARAMETER(WRK.HC_Qualification);
PARAMETER(WRK.HC_Class_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Val Pen,Type      RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1170306;
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(WRK.Pen_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen relations

CASE;

// IF DTL.*CMD key is CF22
IF DTL.*CMD_key = '22';

// IF *OTHERWISE
IF *OTHERWISE;

QUIT;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Tattoo Scale Tkt  CR) TYPE(CRTOBJ) FILE(PKB3CPP)           AB1113769;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TST_Sequence_Number);
PARAMETER(DTL.TST_Head);
PARAMETER(DTL.TST_Wgt);
PARAMETER(DTL.TST_Wgt_Date);
PARAMETER(DTL.TST_Wgt_Time);
PARAMETER(*MISSING);
PARAMETER(DTL.TST_Last_Zero_Date);
PARAMETER(DTL.TST_Last_Zero_Time);
PARAMETER(DTL.TST_Record_Created_Status);
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Tattoo Scale Tkt  CH) TYPE(CHGOBJ) FILE(PKB3CPP)           AB1113770;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TST_Sequence_Number);
PARAMETER(DTL.TST_Head);
PARAMETER(DTL.TST_Wgt);
PARAMETER(DTL.TST_Wgt_Date);
PARAMETER(DTL.TST_Wgt_Time);
PARAMETER(*MISSING);
PARAMETER(DTL.TST_Last_Zero_Date);
PARAMETER(DTL.TST_Last_Zero_Time);
PARAMETER(DTL.TST_Record_Created_Status);
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

