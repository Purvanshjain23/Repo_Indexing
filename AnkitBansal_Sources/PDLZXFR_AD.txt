// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDLZXFR
// ?Date: 14.08.2025 Time: 03:32:16
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV A/R for Parents    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1411950;
PARAMETER(PAR.Parent_Customer);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Value_Open_Orders);
PARAMETER(PAR.USR_Parent_Current_Due);
PARAMETER(PAR.USR_Parent_Past_Due);
PARAMETER(PAR.USR_Parent_Total_Due);
{
 //?USER: Process Data record

 //?If Ship number is equal to A/R number then this is an A/R Customer
 CASE;

 // IF DB1.Ship To Customer EQ DB1.A/R Customer Number
 IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

 // AND PAR.Parent Customer EQ DB1.Parent Customer
 AND PAR.Parent_Customer = DB1.Parent_Customer;

 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 EXECUTE FUNCTION(RTV Total Due Sum/Inq  RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1412672;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.Age_Due_Current_W_O_CB);
 PARAMETER(PAR.Value_of_Open_Orders);
 PARAMETER(PAR.USR_tot_past_due_W_CB);
 {
  //?USER: Initialize routine

  // PAR.USR tot past due W/CB = CND.Zero
  PAR.USR_tot_past_due_W_CB = *ZERO;

  // PAR.Value of Open Orders = CON.*ZERO
  PAR.Value_of_Open_Orders = *ZERO;

  // PAR.Age $ Due-Current-W/O CB = CON.*ZERO
  PAR.Age_Due_Current_W_O_CB = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.Value of Open Orders = DB1.Value of Open Orders
  PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders;

  // PAR.Age $ Due-Current-W/O CB = DB1.Age $ Due-Current-W/O CB
  PAR.Age_Due_Current_W_O_CB = DB1.Age_Due_Current_W_O_CB;

  //?Calculate past due
  // PAR.USR tot past due W/CB = DB1.Age $ Due-Aging 1-W/O CB + DB1.Age $ Due-Aging 2
  PAR.USR_tot_past_due_W_CB = DB1.Age_Due_Aging_1_W_O_CB + DB1.Age_Due_Aging_2_W_O_CB;

  // PAR.USR tot past due W/CB = DB1.Age $ Due-Aging 3-W/O CB + PAR.USR tot past due
  PAR.USR_tot_past_due_W_CB = DB1.Age_Due_Aging_3_W_O_CB + PAR.USR_tot_past_due_W_CB;

  // PAR.USR tot past due W/CB = DB1.Age $ Due-Aging 4-W/O CB + PAR.USR tot past due
  PAR.USR_tot_past_due_W_CB = DB1.Age_Due_Aging_4_W_O_CB + PAR.USR_tot_past_due_W_CB;

  // PAR.USR tot past due W/CB = DB1.Age $ Due-Aging 5-W/O CB + PAR.USR tot past due
  PAR.USR_tot_past_due_W_CB = DB1.Age_Due_Aging_5_W_O_CB + PAR.USR_tot_past_due_W_CB;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Total Due Sum ALL RT) TYPE(RTVOBJ) FILE(ARBCREP)           AC1708949;
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.Age_Due_Current_W_O_CB);
 PARAMETER(PAR.Value_of_Open_Orders);
 PARAMETER(PAR.USR_tot_past_due_W_CB);
 {
  //?USER: Initialize routine

  // PAR.USR tot past due W/CB = CND.Zero
  PAR.USR_tot_past_due_W_CB = *ZERO;

  // PAR.Value of Open Orders = CON.*ZERO
  PAR.Value_of_Open_Orders = *ZERO;

  // PAR.Age $ Due-Current-W/O CB = CON.*ZERO
  PAR.Age_Due_Current_W_O_CB = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.Value of Open Orders = PAR.Value of Open Orders + DB1.Value of Open Orders
  PAR.Value_of_Open_Orders = PAR.Value_of_Open_Orders + DB1.Value_of_Open_Orders;

  // PAR.Age $ Due-Current-W/O CB = PAR.Age $ Due-Current-W/O CB + DB1.Age $ Due-Current-W/O CB
  PAR.Age_Due_Current_W_O_CB = PAR.Age_Due_Current_W_O_CB + DB1.Age_Due_Current_W_O_CB;

  //?Calculate past due
  // Comp:Past w/CB
  PAR.USR_tot_past_due_W_CB = ( ( ( ( DB1.Age_Due_Aging_1_W_O_CB
  + DB1.Age_Due_Aging_2_W_O_CB ) + DB1.Age_Due_Aging_3_W_O_CB )
  + DB1.Age_Due_Aging_4_W_O_CB ) + DB1.Age_Due_Aging_5_W_O_CB ) + PAR.USR_tot_past_due_W_CB;

 }

 ENDIF;

 // WRK.USR Parent Current Due = PAR.Age $ Due-Current-W/O CB + WRK.USR Parent Curre
 WRK.USR_Parent_Current_Due = PAR.Age_Due_Current_W_O_CB + WRK.USR_Parent_Current_Due;

 // WRK.USR Parent Past Due = PAR.USR tot past due W/CB + WRK.USR Parent Past Due
 WRK.USR_Parent_Past_Due = PAR.USR_tot_past_due_W_CB + WRK.USR_Parent_Past_Due;

 // WRK.Value of Open Orders = PAR.Value of Open Orders + WRK.Value of Open Orders
 WRK.Value_of_Open_Orders = PAR.Value_of_Open_Orders + WRK.Value_of_Open_Orders;

 ENDIF;

 //?USER: Exit processing

 // PAR.USR Value Open Orders = WRK.Value of Open Orders
 PAR.USR_Value_Open_Orders = WRK.Value_of_Open_Orders;

 // PAR.USR Parent Current Due = WRK.USR Parent Current Due
 PAR.USR_Parent_Current_Due = WRK.USR_Parent_Current_Due;

 // PAR.USR Parent Past Due = WRK.USR Parent Past Due
 PAR.USR_Parent_Past_Due = WRK.USR_Parent_Past_Due;

 // PAR.USR Parent Total Due = WRK.USR Parent Current Due + WRK.USR Parent Past Due
 PAR.USR_Parent_Total_Due = WRK.USR_Parent_Current_Due + WRK.USR_Parent_Past_Due;

}


