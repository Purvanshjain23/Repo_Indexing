// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKPYXFR
// ?Date: 14.08.2025 Time: 02:51:15
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?E9904 JBB 08/29/17 - Push Payment for TF2
//?- Removed the logic that prevented the divide by zero.  Rose
//?  wanted the divide by zero error to stop the program so support
//?  could look into the data error that caused the divide by zero.
//?E9904 JJH 08/26/17 - Push Payment for TF2
//?- Add logic to prevent Divide by zero for TH Recalc Live Wgt Yld
//?  in the PayEdt Create Crc Dtl RT - Eval Trans function.
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

//?05/28/04 SLM HPEBAL - Balancing with Producer's History Average
//?Step 2.
//?Read each Tattoo and if market,subject read then the evaluation
//?transaction file and create carcass detail records
//?Create Carcass Detail for Unpaid Tattoo's.
EXECUTE FUNCTION(PayEdt Create Crc Dtl RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1226671;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Pmt_Current_Payment_Date);
{
 //?USER: Initialize routine

 //?Modifications and Comments
 DO;

 //?E9904 JBB 08/29/17 - Push Payment for TF2
 //?- Removed the logic that prevented the divide by zero.  Rose
 //?  wanted the divide by zero error to stop the program so support
 //?  could look into the data error that caused the divide by zero.
 //?E9904 JJH 08/26/17 - Push Payment for TF2
 //?- Add logic to prevent Divide by zero for TH Recalc Live Wgt Yld
 //?  in the PayEdt Create Crc Dtl RT - Eval Trans function.
 //?01/19/06 PKD Triumph Foods will not be weighing hogs on a Truck
 //?             or a scale inside.  The Live Weight needs to be
 //?             estimated based on a Standard Yield.
 ENDDO;

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('RLWSY-Y/N');
 PARAMETER(PAR.Status_1);

 CASE;

 // IF PAR.Status 1 is Yes
 IF PAR.Status_1 = 'Y';

 // Call program Rtv Company Value Nbr XF.
 CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('RLWSY-YLD');
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);

 ENDIF;

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF ( DB1.TH_Held_Over > *ZERO;

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO );

 // OR DB1.TH Kill Balancing Sts is Not Balanced Carcass
 OR DB1.TH_Kill_Balancing_Sts = 'E'/*BLANK;

 // OR DB1.THP Process Code is Payment
 OR DB1.THP_Process_Code = 'PAYMNT';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Hog Class         RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127629;
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(WRK.HC_Description);
 PARAMETER(WRK.HC_Defect_Required);
 PARAMETER(WRK.HC_Price_Required);
 PARAMETER(WRK.HC_Resolution);
 PARAMETER(WRK.HC_Qualification);
 PARAMETER(WRK.HC_Class_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Farm Site
 CASE;

 // IF DB1.TH Source Type is Internal
 IF DB1.TH_Source_Type = 'I';

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(LCL.TH_HPS_Farm_Site);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 //?e2423
 //?*** The Tattoo header has the farm site
 // LCL.TH HPS Farm Site = DB1.TH HPS Farm Site
 LCL.TH_HPS_Farm_Site = DB1.TH_HPS_Farm_Site;

 ENDIF;

 //?Farm Site
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TH HPS Farm Site = CON.*ZERO
 LCL.TH_HPS_Farm_Site = *ZERO;

 ENDIF;

 // LCL.CD Carcass Number = CON.*ZERO
 LCL.CD_Carcass_Number = *ZERO;

 // PAR.Live wgt total 11.1   USR = CON.*ZERO
 PAR.Live_wgt_total_11_1_USR = *ZERO;

 //?Read the Evaluation trans and create Carcass Detail Records
 // LCL.Backfat * Wgt USR = CON.*ZERO
 LCL.Backfat_Wgt_USR = *ZERO;

 // LCL.Loin-Eye * Wgt USR = CON.*ZERO
 LCL.Loin_Eye_Wgt_USR = *ZERO;

 // LCL.TH Broken Back Hd Count = CON.*ZERO
 LCL.TH_Broken_Back_Hd_Count = *ZERO;

 //?01/19/06 PKD User Standard Yield from the Company Values
 //?             or use what is in the file.
 CASE;

 // IF PAR.Status 1 is Yes
 IF PAR.Status_1 = 'Y';

 CASE;

 // IF DB1.TH Live Wgt is Zeros
 IF DB1.TH_Live_Wgt = *ZERO;

 // LCL.TH Recalc Live Wgt = CON.1
 LCL.TH_Recalc_Live_Wgt = 1;

 // LCL.TH Recalc Live Wgt Yld = PAR.TH Recalc Live Wgt Yld
 LCL.TH_Recalc_Live_Wgt_Yld = PAR.TH_Recalc_Live_Wgt_Yld;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TH Recalc Live Wgt = DB1.TH Recalc Live Wgt
 LCL.TH_Recalc_Live_Wgt = DB1.TH_Recalc_Live_Wgt;

 // LCL.TH Recalc Live Wgt Yld = DB1.TH Recalc Live Wgt Yld
 LCL.TH_Recalc_Live_Wgt_Yld = DB1.TH_Recalc_Live_Wgt_Yld;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TH Recalc Live Wgt = DB1.TH Recalc Live Wgt
 LCL.TH_Recalc_Live_Wgt = DB1.TH_Recalc_Live_Wgt;

 // LCL.TH Recalc Live Wgt Yld = DB1.TH Recalc Live Wgt Yld
 LCL.TH_Recalc_Live_Wgt_Yld = DB1.TH_Recalc_Live_Wgt_Yld;

 ENDIF;

 EXECUTE FUNCTION(PayEdt Create Crc Dtl RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1226674;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.CD_Carcass_Number);
 PARAMETER(PAR.Live_wgt_total_11_1_USR);
 PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(LCL.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(LCL.TH_HPS_Farm_Site);
 PARAMETER(LCL.TH_Broken_Back_Hd_Count);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(LCL.Loin_Eye_Wgt_USR);
 PARAMETER(LCL.Backfat_Wgt_USR);
 {
  //?USER: Initialize routine

  //?Modifications and Comments
  DO;

  //?E9904 JBB 08/29/17 - Push Payment for TF2
  //?- Removed the logic that prevented the divide by zero.  Rose
  //?  wanted the divide by zero error to stop the program so support
  //?  could look into the data error that caused the divide by zero.
  //?E9904 JJH 08/26/17 - Push Payment for TF2
  //?- Add logic to prevent Divide by zero for TH Recalc Live Wgt Yld
  //?  in the PayEdt Create Crc Dtl RT - Eval Trans function.
  //?06/08/04 SLM HPEBAL Changes to use the Recalc Live Wgt Yld
  ENDDO;

  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  // PAR.CD Carcass Number = PAR.CD Carcass Number + CON.1
  PAR.CD_Carcass_Number = PAR.CD_Carcass_Number + 1;

  //?Producer/Farm Site
  CASE;

  // IF PAR.TH Source Type is External
  IF PAR.TH_Source_Type = 'E';

  // LCL.PL Location Code = PAR.PL Location Code
  LCL.PL_Location_Code = PAR.PL_Location_Code;

  //?Producer/Farm Site
  // IF PAR.TH Source Type is Internal
  IF PAR.TH_Source_Type = 'I';

  // LCL.Farm Site 6.0 USR = PAR.TH HPS Farm Site
  LCL.Farm_Site_6_0_USR = PAR.TH_HPS_Farm_Site;

  // LCL.PL Location Code = CVTVAR(LCL.Farm Site 6.0 USR)
  LCL.PL_Location_Code = CVTVAR(LCL.Farm_Site_6_0_USR);

  ENDIF;

  EXECUTE FUNCTION(Crt Carcass Detail    Rt) TYPE(RTVOBJ) FILE(PKB1CPP)           AB1147811;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(PAR.CD_Carcass_Number);
  PARAMETER(*ZERO);
  PARAMETER(DB1.ET_Record_Add_Del_Sts);
  PARAMETER(LCL.CD_Sort_Loss);
  PARAMETER(LCL.CD_STD_Yield);
  PARAMETER(DB1.ET_Hot_Wgt);
  PARAMETER(LCL.CD_Base_Carcass_CWT);
  PARAMETER(LCL.CD_Crc_Value_Per_CWT);
  PARAMETER(LCL.CD_Base_Carc_Value);
  PARAMETER(LCL.CD_Crc_Value_$_Per_Hd);
  PARAMETER(DB1.ET_Lean_Percent_NPPC);
  PARAMETER(LCL.CD_Lean_Premium_CWT);
  PARAMETER(LCL.CD_Lean_Premium_$_Per_Hd);
  PARAMETER(LCL.CD_Gross_Value_Per_CWT);
  PARAMETER(LCL.CD_Gross_Value_$_Per_HD);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.RU_Time);
  PARAMETER(DB1.ET_Shift);
  PARAMETER(LCL.CD_Carcass_Activity_Sts);
  PARAMETER(DB1.ET_Backfat_Thickness_Inch);
  PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
  PARAMETER(DB1.ET_Light_Reflectance);
  PARAMETER(DB1.ET_Trim_Area);
  PARAMETER(DB1.ET_Carcass_Sex);
  PARAMETER(LCL.CD_FFLI);
  PARAMETER(DB1.ET_Record_Created_W_Avg);
  PARAMETER(DB1.ET_Record_Created_Status);
  PARAMETER(DB1.ET_Lot);
  PARAMETER(DB1.ET_User_Error_Override);
  PARAMETER(DB1.ET_Backfat_Thickness_MM);
  PARAMETER(DB1.ET_Loineye_Depth_MM);
  PARAMETER(DB1.ET_Light_Reflectance_MM);
  PARAMETER(DB1.ET_Lean_Percent_FOM);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(DB1.ET_Adjust_Add_Type);
  PARAMETER(LCL.PL_Location_Code);
  PARAMETER(DB1.ET_Broken_Back_Sts);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.TH_Source_Code);
  PARAMETER(PAR.Loin_Eye_Wgt_USR);
  PARAMETER(PAR.Backfat_Wgt_USR);
  {
   //?USER: Processing if Data record not found

   //?9/20/02  RMC  -- Calc 2 dec. backfat and loin eye
   //?  and accum weighted for TH Avg Backf & Loin eye calc
   // Call program CLC MM to Inch -2 dec XF.
   CALL PROGRAM(CLC MM to Inch -2 dec XF) ('PKMMINC2');
   PARAMETER(LCL.CD_Backfat_Inch_2_dec);
   PARAMETER(LCL.CD_Loin_Eye_Inch_2_dec);
   PARAMETER(PAR.CD_Backfat_Thickness_MM);
   PARAMETER(PAR.CD_Loin_Eye_Depth_MM);

   // Wgt USR =       * Accum: Backfat * wgt
   PAR.Backfat_Wgt_USR = ( LCL.CD_Backfat_Inch_2_dec * PAR.CD_Carcass_Hot_Weight )
   + PAR.Backfat_Wgt_USR;

   // Wgt USR =       * Accum: Loin eye * wgt
   PAR.Loin_Eye_Wgt_USR = ( LCL.CD_Loin_Eye_Inch_2_dec * PAR.CD_Carcass_Hot_Weight )
   + PAR.Loin_Eye_Wgt_USR;

   EXECUTE FUNCTION(Crt Carcass Detail    CR) TYPE(CRTOBJ) FILE(PKB1CPP)           AB1104737;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.CD_Scale_Sequence_Number);
   PARAMETER(PAR.CD_Carcass_Number);
   PARAMETER(PAR.CD_Carcass_Number_Insert);
   PARAMETER(PAR.CD_Record_Add_Del_Sts);
   PARAMETER(PAR.CD_Sort_Loss);
   PARAMETER(PAR.CD_STD_Yield);
   PARAMETER(PAR.CD_Carcass_Hot_Weight);
   PARAMETER(PAR.CD_Base_Carcass_CWT);
   PARAMETER(PAR.CD_Crc_Value_Per_CWT);
   PARAMETER(PAR.CD_Base_Carc_Value);
   PARAMETER(PAR.CD_Crc_Value_$_Per_Hd);
   PARAMETER(PAR.CD_Lean_Percent);
   PARAMETER(PAR.CD_Lean_Premium_CWT);
   PARAMETER(PAR.CD_Lean_Premium_$_Per_Hd);
   PARAMETER(PAR.CD_Gross_Value_Per_CWT);
   PARAMETER(PAR.CD_Gross_Value_$_Per_HD);
   PARAMETER(PAR.CD_Kill_Date);
   PARAMETER(PAR.CD_Kill_Time);
   PARAMETER(PAR.CD_Shift);
   PARAMETER(PAR.CD_Carcass_Activity_Sts);
   PARAMETER(PAR.CD_Backfat_Thickness_Inch);
   PARAMETER(PAR.CD_Loin_Eye_Depth_Inch);
   PARAMETER(PAR.CD_Light_Reflectance);
   PARAMETER(PAR.CD_Trim_Area);
   PARAMETER(PAR.CD_Carcass_Sex);
   PARAMETER(PAR.CD_FFLI);
   PARAMETER(PAR.CD_Record_Created_W_Avg);
   PARAMETER(PAR.CD_Record_Created_Status);
   PARAMETER(PAR.CD_LOT);
   PARAMETER(PAR.CD_User_Error_Override);
   PARAMETER(PAR.CD_Backfat_Thickness_MM);
   PARAMETER(PAR.CD_Loin_Eye_Depth_MM);
   PARAMETER(PAR.CD_Light_Reflectance_MM);
   PARAMETER(PAR.CD_Lean_Percent_MM);
   PARAMETER(PAR.CD_Source_Type);
   PARAMETER(PAR.CD_Payment_Type);
   PARAMETER(WRK.CD_CA_Sort_Loss);
   PARAMETER(WRK.CD_CA_Std_Yield);
   PARAMETER(WRK.CD_CA_Base_Carcass_CWT);
   PARAMETER(WRK.CD_CA_Crc_Value_Per_CWT);
   PARAMETER(WRK.CD_CA_Base_Carc_Value);
   PARAMETER(WRK.CD_CA_Crc_Value_$_Per_Hd);
   PARAMETER(WRK.CD_CA_Lean_Premium_CWT);
   PARAMETER(WRK.CD_CA_Lean_Premium_$_P_Hd);
   PARAMETER(WRK.CD_CA_Gross_Value_Per_CWT);
   PARAMETER(WRK.CD_CA_Gross_Value_$_P_Hd);
   PARAMETER(PAR.CD_Adjust_Add_Type);
   PARAMETER(PAR.CD_Producer_Loc_Farm);
   PARAMETER(LCL.CD_Loin_Eye_Inch_2_dec);
   PARAMETER(LCL.CD_Backfat_Inch_2_dec);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.CD_Broken_Back_Sts);
   PARAMETER(WRK.CD_Adjust_Add_Source);
   PARAMETER(WRK.CD_Unused_Sts_3);
   PARAMETER(WRK.CD_Unused_Sts_4);
   PARAMETER(WRK.CD_Unused_Sts_5);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.SR_Source_Code);
   PARAMETER(WRK.RS_User_Changed);
   PARAMETER(WRK.RS_Date_Changed);
   PARAMETER(WRK.RS_Time_Changed);
   PARAMETER(WRK.RS_Record_Status);
   PARAMETER(WRK.RS_Job);
   PARAMETER(WRK.RS_Program);
   PARAMETER(WRK.RS_User_Added);
   PARAMETER(WRK.RS_Date_Added);
   PARAMETER(WRK.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   //?PK0071 Fat-O-Meter
   CASE;

   // IF PAR.CD Trim Area is *Blank
   IF PAR.CD_Trim_Area = *BLANK;

   //?PK0071 Fat-O-Meter
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Loss Percent       RT) TYPE(RTVOBJ) FILE(PKEKCPP)          AB1215872;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.CD_Trim_Area);
   PARAMETER(PAR.TB_Trim_Location);
   PARAMETER(PAR.TB_Extent);
   PARAMETER(PAR.Loss_Percent);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    QUIT;

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   // PAR.Loss Percent          USR = PAR.Loss Percent / CON.100 *
   PAR.Loss_Percent_USR = PAR.Loss_Percent / 100;

   // PAR.LTA Wgt = PAR.CD Carcass/Hot Weight * PAR.Loss Percent          USR *
   PAR.LTA_Wgt = PAR.CD_Carcass_Hot_Weight * PAR.Loss_Percent_USR;

   EXECUTE FUNCTION(Rtv Loss Trans Next   RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1135836;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.LTN_Record_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LTN Record Number = CON.1
    PAR.LTN_Record_Number = 1;

    QUIT;

    //?USER: Process Data record

    CASE;

    // IF DB1.LTN Record Number is Entry Allowed
    IF DB1.LTN_Record_Number >= 000001;
    AND DB1.LTN_Record_Number <= 699999;

    // PAR.LTN Record Number = DB1.LTN Record Number + CON.1
    PAR.LTN_Record_Number = DB1.LTN_Record_Number + 1;

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(Crt Loss Transaction  CR) TYPE(CRTOBJ) FILE(PKBSCPP)           AB1102905;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.LTN_Record_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.CD_Shift);
   PARAMETER(PAR.LTA_Wgt);
   PARAMETER(PAR.TB_Extent);
   PARAMETER(PAR.TB_Trim_Location);
   PARAMETER('B');
   PARAMETER('P');
   PARAMETER(*BLANK);
   PARAMETER(PAR.CD_Source_Type);
   PARAMETER(03);
   PARAMETER(*ZERO);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(WRK.RS_User_Changed);
   PARAMETER(WRK.RS_Date_Changed);
   PARAMETER(WRK.RS_Time_Changed);
   PARAMETER(WRK.RS_Record_Status);
   PARAMETER(WRK.RS_Job);
   PARAMETER(WRK.RS_Program);
   PARAMETER(WRK.RS_User_Added);
   PARAMETER(WRK.RS_Date_Added);
   PARAMETER(WRK.RS_Time_Added);
   PARAMETER(JOB.*Job_date);
   PARAMETER(JOB.*Job_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   ENDIF;

  }

  //?New 6/4/03
  CASE;

  // IF DB1.ET Broken Back Sts is Yes
  IF DB1.ET_Broken_Back_Sts = '1';

  // PAR.TH Broken Back Hd Count = PAR.TH Broken Back Hd Count + CON.1
  PAR.TH_Broken_Back_Hd_Count = PAR.TH_Broken_Back_Hd_Count + 1;

  ENDIF;

  //?PK0418 3/19/02 Do this for External, so dont check Internal par.th source
  //?  If market, subject calc the live wgt to update the TH
  //?05/28/04 SLM HPEBAL - Balancing with Producer's
  //?  The following is being change, to work with External
  //?  or Internal
  //?Recalc   processing
  CASE;

  // IF PAR.TH Hog Class Type is Not Resale
  IF PAR.TH_Hog_Class_Type = 'M'/'S';

  // AND PAR.TH Recalc Live Wgt is Greater than 0
  AND PAR.TH_Recalc_Live_Wgt > *ZERO;

  // AND DB1.ET Record Add/Del Sts is Add/Blank
  AND DB1.ET_Record_Add_Del_Sts = 'A'/*BLANK;

  //?05/28/04 SLM HPEBAL - Test on how to calculate live weight
  //?                      * out org code
  //?E9904 JJH 08/26/17 - Add logic to prevent Divide by zero for the
  //?  TH Recalc Live Wgt Yld
  //?External/Internal Live Wgt Total 11.1  Divide by zero not protected
  CASE;

  // IF PAR.TH Source Type is External
  IF PAR.TH_Source_Type = 'E';

  // Live wgt total 11.1   USR
  WRK.Live_wgt_total_11_1_USR = DB1.ET_Hot_Wgt / ( PAR.TH_Recalc_Live_Wgt_Yld / 100 'H' )
  'H';

  //?External/Internal Live Wgt Total 11.1  Divide by zero not protected
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Internal live wgt
  // Call program Clc Live Weight       XF.
  CALL PROGRAM(Clc Live Weight       XF) ('PDO1XFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(DB1.ET_Hot_Wgt);
  PARAMETER(WRK.Num_Field_Not_Needed);
  PARAMETER(WRK.Live_wgt_total_11_1_USR);
  PARAMETER(WRK.Num_Field_Not_Needed);

  ENDIF;

  // PAR.Live wgt total 11.1   USR = PAR.Live wgt total 11.1   USR + WRK.Live wgt total 11.1   USR
  PAR.Live_wgt_total_11_1_USR = PAR.Live_wgt_total_11_1_USR + WRK.Live_wgt_total_11_1_USR;

  ENDIF;

  ENDIF;

 }

 //?9/20/02  RMC  Calc Avg Backfat and Loin eye with 2 dec.
 CASE;

 // IF DB1.TH Hot Wgt is Not Zero
 IF DB1.TH_Hot_Wgt > *ZERO;

 // LCL.TH Avg Backfat - 2 Dec = LCL.Backfat * Wgt USR / DB1.TH Hot Wgt *
 LCL.TH_Avg_Backfat_2_Dec = LCL.Backfat_Wgt_USR / DB1.TH_Hot_Wgt;

 // LCL.TH Avg Loin Eye - 2 dec = LCL.Loin-Eye * Wgt USR / DB1.TH Hot Wgt *
 LCL.TH_Avg_Loin_Eye_2_dec = LCL.Loin_Eye_Wgt_USR / DB1.TH_Hot_Wgt;

 //?9/20/02  RMC  Calc Avg Backfat and Loin eye with 2 dec.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TH Avg Backfat - 2 Dec = CON.*ZERO
 LCL.TH_Avg_Backfat_2_Dec = *ZERO;

 // LCL.TH Avg Loin Eye - 2 dec = CON.*ZERO
 LCL.TH_Avg_Loin_Eye_2_dec = *ZERO;

 ENDIF;

 //?Update Tattoo Header with Payment and Recalculate Net
 // LCL.THP Process Code = CND.Payment
 LCL.THP_Process_Code = 'PAYMNT';

 //?Calculate Net Status & Recalc Avg Value for the Lot
 CASE;

 // IF DB1.TH Payment Sts is Paid Producer
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // LCL.TH Calc Net Sts = CND.Calculated
 LCL.TH_Calc_Net_Sts = 'C';

 // LCL.TH VC Gross Value /HD = DB1.TH VC Gross Value /HD
 LCL.TH_VC_Gross_Value_HD = DB1.TH_VC_Gross_Value_HD;

 //?Calculate Net Status & Recalc Avg Value for the Lot
 // IF DB1.TH Payment Sts is Unpaid Producer
 IF DB1.TH_Payment_Sts = 'ML'/'SL'/'SC'/'IC'/'IL'/*BLANK;

 // LCL.TH Calc Net Sts = CND.Re-Calculate
 LCL.TH_Calc_Net_Sts = 'R';

 // LCL.TH VC Gross Value /HD = CON.*ZERO
 LCL.TH_VC_Gross_Value_HD = 0;

 ENDIF;

 //?PK0418 3/19/02 Do for External too, so dont check Internal db1.th source t
 //?Mkt, subj : Calc Live wgt, yields from carc dtl calc'd live wgt
 CASE;

 // IF DB1.TH Hog Class Type is Not Resale
 IF DB1.TH_Hog_Class_Type = 'M'/'S';

 // AND DB1.TH Head Killed is Not Zero
 AND DB1.TH_Head_Killed <> *ZERO;

 // AND LCL.TH Recalc Live Wgt is Greater than 0
 AND LCL.TH_Recalc_Live_Wgt > *ZERO;

 // LCL.TH Adj Live Wgt = PAR.Live wgt total 11.1   USR
 LCL.TH_Adj_Live_Wgt = PAR.Live_wgt_total_11_1_USR;

 //?Average Live Weight
 CASE;

 // IF DB1.TH Head Killed is Not Zero
 IF DB1.TH_Head_Killed <> *ZERO;

 // LCL.TH Avg Live Wgt = PAR.Live wgt total 11.1   USR / DB1.TH Head Killed *
 LCL.TH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / DB1.TH_Head_Killed;

 //?Average Live Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TH Avg Live Wgt = CON.*ZERO
 LCL.TH_Avg_Live_Wgt = *ZERO;

 ENDIF;

 // Compute: Live wgt f/adj
 LCL.TH_Live_Wgt = LCL.TH_Adj_Live_Wgt + ( LCL.TH_Avg_Live_Wgt * ( DB1.TH_Yard_Deads
 + DB1.TH_Head_Condemned ) );

 //?Actual Yield
 CASE;

 // IF LCL.TH Live Wgt is Greater then Zero
 IF LCL.TH_Live_Wgt > *ZERO;

 // Compute: Actual Yield %
 LCL.TH_Actual_Yield = ( DB1.TH_Hot_Wgt / LCL.TH_Live_Wgt ) * 100;

 //?Actual Yield
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TH Actual Yield % = CON.*ZERO
 LCL.TH_Actual_Yield = *ZERO;

 ENDIF;

 //?Adj Actual Yield
 CASE;

 // IF LCL.TH Adj Live Wgt is Greater then Zero
 IF LCL.TH_Adj_Live_Wgt > *ZERO;

 // Compute: Adj Actual Yield
 LCL.TH_Adj_Actual_Yield = ( DB1.TH_Hot_Wgt / LCL.TH_Adj_Live_Wgt ) * 100;

 //?Adj Actual Yield
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TH Adj Actual Yield % = CON.*ZERO
 LCL.TH_Adj_Actual_Yield = *ZERO;

 ENDIF;

 // LCL.TH Yield Difference = LCL.TH Actual Yield % - DB1.TH Std Yield Percent
 LCL.TH_Yield_Difference = LCL.TH_Actual_Yield - DB1.TH_Std_Yield_Percent;

 //?Mkt, subj : Calc Live wgt, yields from carc dtl calc'd live wgt
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?move db1 to wrk for update
 // LCL.TH Live Wgt = DB1.TH Live Wgt
 LCL.TH_Live_Wgt = DB1.TH_Live_Wgt;

 // LCL.TH Avg Live Wgt = DB1.TH Avg Live Wgt
 LCL.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

 // LCL.TH Adj Live Wgt = DB1.TH Adj Live Wgt
 LCL.TH_Adj_Live_Wgt = DB1.TH_Adj_Live_Wgt;

 // LCL.TH Actual Yield % = DB1.TH Actual Yield %
 LCL.TH_Actual_Yield = DB1.TH_Actual_Yield;

 // LCL.TH Adj Actual Yield % = DB1.TH Adj Actual Yield %
 LCL.TH_Adj_Actual_Yield = DB1.TH_Adj_Actual_Yield;

 // LCL.TH Yield Difference = DB1.TH Yield Difference
 LCL.TH_Yield_Difference = DB1.TH_Yield_Difference;

 ENDIF;

 EXECUTE FUNCTION(Chg Prcs Cd/Cal Net   CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1146456;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(LCL.TH_Live_Wgt);
 PARAMETER(LCL.TH_Adj_Live_Wgt);
 PARAMETER(LCL.TH_Avg_Live_Wgt);
 PARAMETER(LCL.TH_Actual_Yield);
 PARAMETER(LCL.TH_Adj_Actual_Yield);
 PARAMETER(LCL.TH_Yield_Difference);
 PARAMETER(LCL.TH_Recalc_Live_Wgt);
 PARAMETER(LCL.TH_Calc_Net_Sts);
 PARAMETER(LCL.TH_VC_Gross_Value_HD);
 PARAMETER(LCL.TH_Broken_Back_Hd_Count);
 PARAMETER(LCL.TH_Avg_Loin_Eye_2_dec);
 PARAMETER(LCL.TH_Avg_Backfat_2_Dec);
 PARAMETER(LCL.THP_Process_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Check for HeldOvers Completed, If so upd Completed Date, INT avg lv wgt
 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 // LCL.TH Held/Ovr Completed Dte = DB1.TH Kill Date
 LCL.TH_Held_Ovr_Completed_Dte = DB1.TH_Kill_Date;

 EXECUTE FUNCTION(UPD Held/Ovrs Cmpl Dte RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1148877;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Held_Ovr_Completed_Dte);
 PARAMETER(LCL.TH_Avg_Live_Wgt);
 {
  //?USER: Process Data record

  //?If Internal & avg live wgt is 0, then update avg live wgt for hps interfac
  CASE;

  // IF DB1.TH Source Type is Internal
  IF DB1.TH_Source_Type = 'I';

  // AND DB1.TH Avg Live Wgt is EQ Zero
  AND DB1.TH_Avg_Live_Wgt = *ZERO;

  // WRK.TH Avg Live Wgt = PAR.TH Avg Live Wgt
  WRK.TH_Avg_Live_Wgt = PAR.TH_Avg_Live_Wgt;

  //?If Internal & avg live wgt is 0, then update avg live wgt for hps interfac
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.TH Avg Live Wgt = DB1.TH Avg Live Wgt
  WRK.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

  ENDIF;

  EXECUTE FUNCTION(Chg Held/Ovr Compl Dte CH) TYPE(CHGOBJ) FILE(PKA1CPP)          AB1148967;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(WRK.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Check for HeldOvers Completed, If so upd Completed Date, INT avg lv wgt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TH Held/Ovr Completed Dte = CON.*ZERO
 LCL.TH_Held_Ovr_Completed_Dte = *ZERO;

 ENDIF;

 //?If tattoo is balance, all should be except resale send balance comment
 CASE;

 // IF DB1.TH Kill Balancing Sts is Balance
 IF DB1.TH_Kill_Balancing_Sts = 'B';

 // Call program Crt Tattoo Action Comm XF.
 CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('TB');
 PARAMETER(*BLANK);

 ENDIF;

 EXECUTE FUNCTION(Upd Company Kill Recap RT) TYPE(RTVOBJ) FILE(PKDCCPP)          AB1162623;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(DB1.TH_Header_Error_Sts);
 PARAMETER(DB1.TH_Detail_Error_Sts);
 PARAMETER(DB1.TH_Kill_Balancing_Sts);
 PARAMETER(DB1.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 {
  //?USER: Initialize routine

  // WRK.CKR Head Received/Hld Ovr = CON.*ZERO
  WRK.CKR_Head_Received_Hld_Ovr = *ZERO;

  // WRK.CKR Live Weight = CON.*ZERO
  WRK.CKR_Live_Weight = *ZERO;

  // WRK.CKR Dead On Arrival = CON.*ZERO
  WRK.CKR_Dead_On_Arrival = *ZERO;

  // WRK.CKR Head Resale = CON.*ZERO
  WRK.CKR_Head_Resale = *ZERO;

  // WRK.CKR Yard Deads = CON.*ZERO
  WRK.CKR_Yard_Deads = *ZERO;

  // WRK.CKR Held Over = CON.*ZERO
  WRK.CKR_Held_Over = *ZERO;

  // WRK.CKR Head Killed = CON.*ZERO
  WRK.CKR_Head_Killed = *ZERO;

  // WRK.CKR Hot Weight = CON.*ZERO
  WRK.CKR_Hot_Weight = *ZERO;

  // WRK.CKR Head Comdemned = CON.*ZERO
  WRK.CKR_Head_Comdemned = *ZERO;

  //?USER: Processing if Data record not found

  //?Accumulate from tattoo header, to company kill recap
  // WRK.CKR Head Received/Hld Ovr = PAR.TH Head Received
  WRK.CKR_Head_Received_Hld_Ovr = PAR.TH_Head_Received;

  // WRK.CKR Live Weight = PAR.TH Live Wgt
  WRK.CKR_Live_Weight = PAR.TH_Live_Wgt;

  // WRK.CKR Dead On Arrival = PAR.TH Dead On Arrival
  WRK.CKR_Dead_On_Arrival = PAR.TH_Dead_On_Arrival;

  CASE;

  // IF PAR.TH Hog Class Type is Resale
  IF PAR.TH_Hog_Class_Type = 'R';

  // WRK.CKR Head Resale = PAR.TH Head Received
  WRK.CKR_Head_Resale = PAR.TH_Head_Received;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.CKR Head Resale = CON.*ZERO
  WRK.CKR_Head_Resale = *ZERO;

  ENDIF;

  // WRK.CKR Yard Deads = PAR.TH Yard Deads
  WRK.CKR_Yard_Deads = PAR.TH_Yard_Deads;

  // WRK.CKR Held Over = PAR.TH Held Over
  WRK.CKR_Held_Over = PAR.TH_Held_Over;

  // WRK.CKR Head Killed = PAR.TH Head Killed
  WRK.CKR_Head_Killed = PAR.TH_Head_Killed;

  // WRK.CKR Hot Weight = PAR.TH Hot Wgt
  WRK.CKR_Hot_Weight = PAR.TH_Hot_Wgt;

  // WRK.CKR Head Comdemned = PAR.TH Head Condemned
  WRK.CKR_Head_Comdemned = PAR.TH_Head_Condemned;

  EXECUTE FUNCTION(Create Company Kill Recap) TYPE(CRTOBJ) FILE(PKDCCPP)          AB1162608;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.CKR_Kill_Date);
  PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
  PARAMETER(WRK.CKR_Live_Weight);
  PARAMETER(WRK.CKR_Dead_On_Arrival);
  PARAMETER(WRK.CKR_Head_Resale);
  PARAMETER(WRK.CKR_Yard_Deads);
  PARAMETER(WRK.CKR_Held_Over);
  PARAMETER(WRK.CKR_Head_Killed);
  PARAMETER(WRK.CKR_Hot_Weight);
  PARAMETER(WRK.CKR_Head_Comdemned);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(JOB.*JOB);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  //?Accumulate from tattoo header, to company kill recap
  // WRK.CKR Head Received/Hld Ovr = PAR.TH Head Received + DB1.CKR Head Received/Hld
  WRK.CKR_Head_Received_Hld_Ovr = PAR.TH_Head_Received + DB1.CKR_Head_Received_Hld_Ovr;

  // WRK.CKR Live Weight = PAR.TH Live Wgt + DB1.CKR Live Weight
  WRK.CKR_Live_Weight = PAR.TH_Live_Wgt + DB1.CKR_Live_Weight;

  // WRK.CKR Dead On Arrival = PAR.TH Dead On Arrival + DB1.CKR Dead On Arrival
  WRK.CKR_Dead_On_Arrival = PAR.TH_Dead_On_Arrival + DB1.CKR_Dead_On_Arrival;

  CASE;

  // IF PAR.TH Hog Class Type is Resale
  IF PAR.TH_Hog_Class_Type = 'R';

  // WRK.CKR Head Resale = PAR.TH Head Received + DB1.CKR Head Resale
  WRK.CKR_Head_Resale = PAR.TH_Head_Received + DB1.CKR_Head_Resale;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.CKR Head Resale = WRK.CKR Head Resale + DB1.CKR Head Resale
  WRK.CKR_Head_Resale = WRK.CKR_Head_Resale + DB1.CKR_Head_Resale;

  ENDIF;

  // WRK.CKR Yard Deads = PAR.TH Yard Deads + DB1.CKR Yard Deads
  WRK.CKR_Yard_Deads = PAR.TH_Yard_Deads + DB1.CKR_Yard_Deads;

  // WRK.CKR Held Over = PAR.TH Held Over + DB1.CKR Held Over
  WRK.CKR_Held_Over = PAR.TH_Held_Over + DB1.CKR_Held_Over;

  // WRK.CKR Head Killed = PAR.TH Head Killed + DB1.CKR Head Killed
  WRK.CKR_Head_Killed = PAR.TH_Head_Killed + DB1.CKR_Head_Killed;

  // WRK.CKR Hot Weight = PAR.TH Hot Wgt + DB1.CKR Hot Weight
  WRK.CKR_Hot_Weight = PAR.TH_Hot_Wgt + DB1.CKR_Hot_Weight;

  // WRK.CKR Head Comdemned = PAR.TH Head Condemned + DB1.CKR Head Comdemned
  WRK.CKR_Head_Comdemned = PAR.TH_Head_Condemned + DB1.CKR_Head_Comdemned;

  EXECUTE FUNCTION(Chg Comp Kill Recap   CH) TYPE(CHGOBJ) FILE(PKDCCPP)           AB1162609;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.CKR_Kill_Date);
  PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
  PARAMETER(WRK.CKR_Live_Weight);
  PARAMETER(WRK.CKR_Dead_On_Arrival);
  PARAMETER(WRK.CKR_Head_Resale);
  PARAMETER(WRK.CKR_Yard_Deads);
  PARAMETER(WRK.CKR_Held_Over);
  PARAMETER(WRK.CKR_Head_Killed);
  PARAMETER(WRK.CKR_Hot_Weight);
  PARAMETER(WRK.CKR_Head_Comdemned);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(JOB.*JOB);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  {
   //?USER: Processing after Data read

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?USER: Exit processing

 EXECUTE FUNCTION(Crt Co Exp Rate Data  RT) TYPE(RTVOBJ) FILE(PKC7REP)           AB1162660;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 {
  //?USER: Initialize routine

  //?AS400 Error Message Hot scale records were not up and the
  //?Head Killed was zero
  //?do not div by head killed if head killed is zero
  //?USER: Process Data record

  CASE;

  // IF DB1.CE Expense Type is Daily Summarization
  IF DB1.CE_Expense_Type = 'D';

  EXECUTE FUNCTION(Rtv Company Kill Recap RT) TYPE(RTVOBJ) FILE(PKDCCPP)          AB1162665;
  PARAMETER(PAR.CE_Company);
  PARAMETER(PAR.Current_Kill_Date);
  PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
  PARAMETER(WRK.CKR_Live_Weight);
  PARAMETER(WRK.CKR_Dead_On_Arrival);
  PARAMETER(WRK.CKR_Head_Resale);
  PARAMETER(WRK.CKR_Yard_Deads);
  PARAMETER(WRK.CKR_Held_Over);
  PARAMETER(WRK.CKR_Head_Killed);
  PARAMETER(WRK.CKR_Hot_Weight);
  PARAMETER(WRK.CKR_Head_Comdemned);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Clc Co Daily Rate     IF) TYPE(EXCINTFUN)                      AB1162668;
  PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
  PARAMETER(WRK.CKR_Live_Weight);
  PARAMETER(WRK.CKR_Dead_On_Arrival);
  PARAMETER(WRK.CKR_Head_Resale);
  PARAMETER(WRK.CKR_Yard_Deads);
  PARAMETER(WRK.CKR_Held_Over);
  PARAMETER(WRK.CKR_Head_Killed);
  PARAMETER(WRK.CKR_Hot_Weight);
  PARAMETER(WRK.CKR_Head_Comdemned);
  PARAMETER(DB1.CE_Company);
  PARAMETER(DB1.CE_Unit_of_Measure);
  PARAMETER(DB1.CE_Unit_Amount);
  PARAMETER(WRK.Trans_Unit_Amt_Usr);
  {
   //?Execute internal function

   //?Calculate amount
   CASE;

   // IF PAR.CE Unit of Measure is Co Head UOM
   IF PAR.CE_Unit_of_Measure = 'CH'/'DH'/'KH'/'RH'/'YH';

   //?* * * * *    HEAD   * * * * *
   //?HEAD
   CASE;

   // IF PAR.CE Unit of Measure is Received Head
   IF PAR.CE_Unit_of_Measure = 'RH';

   // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Received/Hld Ovr *Rou
   PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Received_Hld_Ovr 'H';

   //?HEAD
   // IF PAR.CE Unit of Measure is Killed Head
   IF PAR.CE_Unit_of_Measure = 'KH';

   //?slm 05/30/2008 S00258
   //?as400 error message on 5/30 head kill was zero due to NO hot scale
   //?records
   CASE;

   // IF PAR.CKR Head Killed is Equals 0
   IF PAR.CKR_Head_Killed = *ZERO;

   // PAR.Trans Unit Amt Usr = CON.*ZERO
   PAR.Trans_Unit_Amt_Usr = *ZERO;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Killed *Rounded
   PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Killed 'H';

   ENDIF;

   //?HEAD
   // IF PAR.CE Unit of Measure is Condemned Head
   IF PAR.CE_Unit_of_Measure = 'CH';

   // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Comdemned *Rounded
   PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Comdemned 'H';

   //?HEAD
   // IF PAR.CE Unit of Measure is Yard Deads Head
   IF PAR.CE_Unit_of_Measure = 'YH';

   // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Yard Deads *Rounded
   PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Yard_Deads 'H';

   //?HEAD
   // IF PAR.CE Unit of Measure is DOA Head
   IF PAR.CE_Unit_of_Measure = 'DH';

   // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Dead On Arrival *Rounded
   PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Dead_On_Arrival 'H';

   ENDIF;

   //?Calculate amount
   // IF PAR.CE Unit of Measure is Co Weight UOM
   IF PAR.CE_Unit_of_Measure = 'CW'/'LW';

   //?* * * * *    WEIGHT   * * * * *
   //?WEIGHT
   CASE;

   // IF PAR.CE Unit of Measure is Live Hundred Weight
   IF PAR.CE_Unit_of_Measure = 'LW';

   // Live hundred weght
   PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Live_Weight / 100 );

   //?WEIGHT
   // IF PAR.CE Unit of Measure is Carcass Hundred Weight
   IF PAR.CE_Unit_of_Measure = 'CW';

   // Carcass Hundred Wgt
   PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

   ENDIF;

   //?Calculate amount
   // IF PAR.CE Unit of Measure is Co Value Uom
   IF PAR.CE_Unit_of_Measure = 'GV';

   //?* * * * *    VALUE    * * * * *
   //?VALUE
   CASE;

   // IF PAR.CE Unit of Measure is Carcass Hundred Weight
   IF PAR.CE_Unit_of_Measure = 'CW';

   // Carcass Hundred Value
   PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
  PARAMETER(PAR.CE_Company);
  PARAMETER(DB1.CE_Expense_Code);
  PARAMETER(PAR.Current_Kill_Date);
  PARAMETER(DB1.CE_Unit_of_Measure);
  PARAMETER(WRK.Trans_Unit_Amt_Usr);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  // IF DB1.CE Expense Type is *Blank
  IF DB1.CE_Expense_Type = *BLANK;

  EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
  PARAMETER(PAR.CE_Company);
  PARAMETER(DB1.CE_Expense_Code);
  PARAMETER(PAR.Current_Kill_Date);
  PARAMETER(DB1.CE_Unit_of_Measure);
  PARAMETER(DB1.CE_Unit_Amount);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

 }

}


