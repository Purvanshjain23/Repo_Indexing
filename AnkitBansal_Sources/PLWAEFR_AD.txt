// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLWAEFR
// ?Date: 14.08.2025 Time: 02:55:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E14473 JJH 02/08/19 - Add new field PT SQL Format
//?E14393 JJH 01/17/19 - Allow FTP Method = Blank
//?- The purpose of allowing the FTP Method = Blank is to not generate
//?  Carcass Summary/Detail records when the Payment Post is ran.
//?- This is intended to be used in our Test Environments, and the
//?  FTP Method will be set to Blank when we perform the REFRESTHPE
//?  to refresh our test environments.
//?E13790 JJH 11/09/18 - Use BrickFTP for All Plants
//?- Change screen size to 132 Wide
//?- Edit allowed for PT Summary View and PT Detail View
//?- Use Company Value HPEALWFTP.  Y = Allow user to select FTP Method
//?  = F.  If N, them do not allow FTP Method = F.
//?  This will prevent new entries from being set to F=FTP after we
//?  have converted all plants to use FTP Method = S (SFTP) which is
//?  used for BrickFTP.
//?- Change PT FTP Method: P=Parallel to E=Email
//?E3427 JJH 11/17/14 - SFTP for Carcass Data
//? This function was created to maintain the EDI Trading Partners
//? that recevie data via FTP or SFTP.
ENDDO;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(999);
PARAMETER('HPEALWFTP');
PARAMETER(LCL.Allow_FTP_on_Edt_Prod_Trd);

//?USER: Validate subfile record fields

//?SNDERRMSG FTP Method "F" is Not Allowed
CASE;

// IF LCL.Allow FTP on Edt Prod Trd is No
IF LCL.Allow_FTP_on_Edt_Prod_Trd = 'N';

CASE;

// IF RCD.PT FTP Method is FTP
IF RCD.PT_FTP_Method = 'F';

// Send error message - 'FTP Method "F" is not allowed.'
ERROR(PRK1514);
MSGPARM(RCD.PT_FTP_Method);

ENDIF;

ENDIF;

//?E14322 JJH 01/06/18 - Add Option 3=Copy
CASE;

// IF RCD.*SFLSEL is *Copy request
IF RCD.*SFLSEL = '3'/'3';

// Call program Cpy Producer Trade PtnPV.
CALL PROGRAM(Cpy Producer Trade PtnPV) ('PWH1PVR');
PARAMETER(RCD.PT_Producer_Trade_Partner);
PARAMETER(RCD.PT_Producer_Trade_Ptnr_Nm);
PARAMETER(RCD.PT_FTP_Method);
PARAMETER(RCD.PT_Summary_View);
PARAMETER(RCD.PT_Detail_View);
PARAMETER(RCD.PT_SQL_Format);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Producer Trade PtnCR) TYPE(CRTOBJ) FILE(PLB6REP)           AB1322293;
PARAMETER(RCD.PT_Producer_Trade_Partner);
PARAMETER(RCD.PT_Producer_Trade_Ptnr_Nm);
PARAMETER(RCD.PT_FTP_Method);
PARAMETER(RCD.PT_Summary_View);
PARAMETER(RCD.PT_Detail_View);
PARAMETER(RCD.PT_SQL_Format);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Dlt Producer Trade PtnDL) TYPE(DLTOBJ) FILE(PLB6REP)           AB1322295;
PARAMETER(RCD.PT_Producer_Trade_Partner);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Producer Trade PtnCH) TYPE(CHGOBJ) FILE(PLB6REP)           AB1322294;
PARAMETER(RCD.PT_Producer_Trade_Partner);
PARAMETER(RCD.PT_Producer_Trade_Ptnr_Nm);
PARAMETER(RCD.PT_FTP_Method);
PARAMETER(RCD.PT_Summary_View);
PARAMETER(RCD.PT_Detail_View);
PARAMETER(*MISSING);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


