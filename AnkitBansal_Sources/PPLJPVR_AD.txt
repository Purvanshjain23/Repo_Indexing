// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPLJPVR
// ?Date: 14.08.2025 Time: 03:41:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification History
DO;

//?RMC 07/28/21 SDN440 - FOR E1LIVE
//?   Changed company 362 to 320
//?E9064 RMC 04/20/17 - do allow OA transfer to 440 company, get gl acct id
//?    from HPE M3 GL M3 Cross Ref file; dont allow OA to 960; dont
//?    allow 440 OA to 360.
//?E6933 DN  08/12/16 - Create A/R Header Ext record.
//?- Modified CRT A/R Header         CO - A/R Header.
//?SLM 4/09/08  E00193 Inter Company only for Organization of SBD
//?SLM 4/09/08  TFS040 Also change to the rtv on customer ext
//?             will be pass these in at the same move to production
//?SLM 4/09/08  TFS040 Addition validation on exempt - per Alice
//?             IF The pass in customer = to customer then no validation
//?             Going from a customer of NE can only go to NE
//?             ER can to to a EC
//?             EP can to to a EC
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Customer ExemptFN/NE) TYPE(RTVOBJ) FILE(PDNEREP)           AC1876697;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(WRK.A_R_TF_Exempt_Code_Usr1);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 //?USER: Process Data record

 CASE;

 // IF DB1.Customer TF Exempt Code is *ALL values
 IF DB1.Customer_TF_Exempt_Code = 'NE'/'PC'/'EC'/'EP';

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 ENDIF;

}


//?USER: Load screen

// DTL.Company Number     041405 = PAR.Company Number
DTL.Company_Number_041405 = PAR.Company_Number;

// DTL.Transaction Amount = PAR.Transaction Amount
DTL.Transaction_Amount = PAR.Transaction_Amount;

// DTL.A/R Customer Number = PAR.A/R Customer Number
DTL.AR_Customer_Number = PAR.AR_Customer_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_041405);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.A/R TF Exempt Code Usr1 = WRK.A/R TF Exempt Code Usr1
DTL.A_R_TF_Exempt_Code_Usr1 = WRK.A_R_TF_Exempt_Code_Usr1;

//?USER: Process command keys

EXECUTE FUNCTION(RTV Cust Name/Addr/Ph  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1332483;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number_FF);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate fields

EXECUTE FUNCTION(VAL A/R Customer       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1452402;
PARAMETER(DTL.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 QUIT;

}


//?Customer error
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(DTL.AR_Customer_Number);

//?Customer error
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Cust Name/Addr/Ph  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1332483;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number_FF);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Cant transfer to 960
CASE;

// IF DTL.Company Number     041405 is St. Joseph
IF DTL.Company_Number_041405 = 960;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(DTL.Company_Number_041405);

ENDIF;

//?Cant transfer a 440 OA to any other company
CASE;

// IF DTL.Company Number is Sioux City
IF DTL.Company_Number = 440;

// AND DTL.Company Number     041405 is NE Seaboard Triumph
AND DTL.Company_Number_041405 <> 440;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(DTL.Company_Number_041405);

ENDIF;

//?04/29/2008 SLM Add additional validation for TF Exempt per Alice
//?A/R TF Exempt Code usr1 is performed in the init of the pgm
//?this is based on PAR A/R customer
//?A/R TF Exempt Code usr2 is based from the dtl A/R customer
EXECUTE FUNCTION(Rtv Customer ExemptFN/NE) TYPE(RTVOBJ) FILE(PDNEREP)           AC1876697;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(WRK.A_R_TF_Exempt_Code_Usr2);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 //?USER: Process Data record

 CASE;

 // IF DB1.Customer TF Exempt Code is *ALL values
 IF DB1.Customer_TF_Exempt_Code = 'NE'/'PC'/'EC'/'EP';

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 ENDIF;

}


// DTL.A/R TF Exempt Code Usr2 = WRK.A/R TF Exempt Code Usr2
DTL.A_R_TF_Exempt_Code_Usr2 = WRK.A_R_TF_Exempt_Code_Usr2;

CASE;

// IF WRK.A/R TF Exempt Code Usr1 EQ WRK.A/R TF Exempt Code Usr2
IF WRK.A_R_TF_Exempt_Code_Usr1 = WRK.A_R_TF_Exempt_Code_Usr2;

// IF WRK.A/R TF Exempt Code Usr2 is Exempt Customer
IF WRK.A_R_TF_Exempt_Code_Usr2 = 'EC';

CASE;

// IF WRK.A/R TF Exempt Code Usr1 is Exempt Product
IF WRK.A_R_TF_Exempt_Code_Usr1 = 'EP';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Customer Exempt Error - Customer Exempt must = or EP going to a EC ONLY.'
ERROR(USR3937);
MSGPARM(DTL.AR_Customer_Number);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Customer Exempt Error - Customer Exempt must = or EP going to a EC ONLY.'
ERROR(USR3937);
MSGPARM(DTL.AR_Customer_Number);

ENDIF;

//?05/14/07 JRB Removed hard coded companies
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_041405);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_041405);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(DTL.Company_Number_041405);

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: User defined action

//?slm 04/09/2008 ONLY allow Intr Company if org is Seaboard
//?Inter Company transaction
//?Daily nor High Plans will not perform this at this time.
// LCL.Company Number = PAR.Company Number
LCL.Company_Number = PAR.Company_Number;

// Call program RTV Co. Dflt Int All,O XF.
CALL PROGRAM(RTV Co. Dflt Int All,O XF) ('PMRMXFR');
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Shipping_Method_Dft);
PARAMETER(NLL.Load_Type_Dft);
PARAMETER(NLL.LTL_Flag_Dft);
PARAMETER(NLL.Export_Status_Dft);
PARAMETER(NLL.Shrink_Wrap_Dft);
PARAMETER(NLL.Departure_Time_DFT);
PARAMETER(NLL.Export_Code_Dft);
PARAMETER(NLL.Allow_Mult_Whse_to_Order);
PARAMETER(NLL.Allow_Multi_Export_On_Ord);
PARAMETER(NLL.Slip_Sheet_Dft);
PARAMETER(NLL.Palletize_Dft);
PARAMETER(LCL.Company_Organization);

//?Do this for company change only.
//?  A customer chg within company has a net 0 affect on the G/L
CASE;

// IF PAR.Company Number NE DTL.Company Number     041405
IF PAR.Company_Number <> DTL.Company_Number_041405;

// AND LCL.Company Organization is Seaboard
AND LCL.Company_Organization = 'S';

//?***************************************************
//?****  Create Trans for Old company/customer    ****
//?slm 04/09/2008
//?use function that brings back ne if not valid
EXECUTE FUNCTION(Rtv Customer ExemptFN/NE) TYPE(RTVOBJ) FILE(PDNEREP)           AC1876697;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(WRK.A_R_TF_Exempt_Code);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 //?USER: Process Data record

 CASE;

 // IF DB1.Customer TF Exempt Code is *ALL values
 IF DB1.Customer_TF_Exempt_Code = 'NE'/'PC'/'EC'/'EP';

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 ENDIF;

}


// LCL.A/R TF Exempt Code = WRK.A/R TF Exempt Code
LCL.A_R_TF_Exempt_Code = WRK.A_R_TF_Exempt_Code;

EXECUTE FUNCTION(RTV G/L Code           RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1348132;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(WRK.G_L_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.G/L Code = DB1.G/L Code
 PAR.G_L_Code = DB1.G_L_Code;

}


//?If Co/Customer does not exist
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.G/L Code = CND.*Blanks
WRK.G_L_Code = *blanks;

ENDIF;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.G_L_Code);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(NLL.Cost_Center);
PARAMETER(NLL.Object_Account);
PARAMETER(NLL.Subsidiary);
PARAMETER(NLL.Description);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(NLL.JDE_Posting_Edit_Code_USR);
PARAMETER(NLL.Error_Return_text);

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter company
//?#1
EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(DTL.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Debit A/R Account');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?       Create Reversing entry for CM A/R account
// WRK.Transaction Amount = CON.*ZERO - DTL.Transaction Amount
WRK.Transaction_Amount = *ZERO - DTL.Transaction_Amount;

//?RMC SDN440 7/28/21 change 362 to 320
//?If 360 chg to 960:  Credit 320.3830.101     -> actually OFFAR320
//?If 960 chg to 360:  Credit 960.1830.101     -> Actually OFFAR960
//?If 360 chg to 440:  Credit 320.3830.101 ->    new 440-> OFFAR440
CASE;

// IF DTL.Company Number is Guymon
IF DTL.Company_Number = 360;

// WRK.G/L Posting Company = CON.320
WRK.G_L_Posting_Company = 320;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(320);
PARAMETER('OFFAR320');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// IF DTL.Company Number is St. Joseph
IF DTL.Company_Number = 960;

// WRK.G/L Posting Company = CON.960
WRK.G_L_Posting_Company = 960;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(DTL.Company_Number);
PARAMETER('OFFAR960');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// IF DTL.Company Number is Seaboard Triumph Foods
IF DTL.Company_Number = 440;

// WRK.G/L Posting Company = CON.440
WRK.G_L_Posting_Company = 440;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(DTL.Company_Number);
PARAMETER('OFFAR440');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

ENDIF;

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter company
//?#2
EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Credit Inter Co');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?***************************************************
//?***************************************************
//?****  Create Trans for New company/customer    ****
// WRK.Transaction Amount = CON.*ZERO - WRK.Transaction Amount
WRK.Transaction_Amount = *ZERO - WRK.Transaction_Amount;

//?use function that brings back ne if not valid
EXECUTE FUNCTION(Rtv Customer ExemptFN/NE) TYPE(RTVOBJ) FILE(PDNEREP)           AC1876697;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(WRK.A_R_TF_Exempt_Code);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 //?USER: Process Data record

 CASE;

 // IF DB1.Customer TF Exempt Code is *ALL values
 IF DB1.Customer_TF_Exempt_Code = 'NE'/'PC'/'EC'/'EP';

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Customer TF Exempt Code = CND.Not Exempt
 PAR.Customer_TF_Exempt_Code = 'NE';

 ENDIF;

}


// LCL.A/R TF Exempt Code = WRK.A/R TF Exempt Code
LCL.A_R_TF_Exempt_Code = WRK.A_R_TF_Exempt_Code;

//?If 360 chg to 960:  Debit  320.3830.101  Actually 960.OFFAR320
//?If 960 chg to 360:  Debit  960.1830.101  Actually 960.OFFAR960
//?If 360 chg to 440:  Debit  320.3830.101     NEW:  440.OFFAR440
CASE;

// IF DTL.Company Number     041405 is Guymon
IF DTL.Company_Number_041405 = 360;

// WRK.G/L Posting Company = CON.320
WRK.G_L_Posting_Company = 320;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(320);
PARAMETER('OFFAR320');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// IF DTL.Company Number     041405 is St. Joseph
IF DTL.Company_Number_041405 = 960;

// WRK.G/L Posting Company = CON.960
WRK.G_L_Posting_Company = 960;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(DTL.Company_Number_041405);
PARAMETER('OFFAR960');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// IF DTL.Company Number     041405 is Seaboard Triumph Foods
IF DTL.Company_Number_041405 = 440;

// WRK.G/L Posting Company = CON.440
WRK.G_L_Posting_Company = 440;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(DTL.Company_Number_041405);
PARAMETER('OFFAR440');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

ENDIF;

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(DTL.Company_Number_041405);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter company
//?#3
EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(DTL.Company_Number_041405);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Debit Inter Co');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?       Create Reversing entry for CM A/R account
// WRK.Transaction Amount = CON.*ZERO - WRK.Transaction Amount
WRK.Transaction_Amount = *ZERO - WRK.Transaction_Amount;

EXECUTE FUNCTION(RTV G/L Code           RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1348132;
PARAMETER(DTL.Company_Number_041405);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(WRK.G_L_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.G/L Code = DB1.G/L Code
 PAR.G_L_Code = DB1.G_L_Code;

}


//?If Co/Customer does not exist
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.G/L Code = CND.*Blanks
WRK.G_L_Code = *blanks;

ENDIF;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(DTL.Company_Number_041405);
PARAMETER(WRK.G_L_Code);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(NLL.Cost_Center);
PARAMETER(NLL.Object_Account);
PARAMETER(NLL.Subsidiary);
PARAMETER(NLL.Description);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(NLL.JDE_Posting_Edit_Code_USR);
PARAMETER(NLL.Error_Return_text);

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(DTL.Company_Number_041405);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter company
//?#4
EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(DTL.Company_Number_041405);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Credit A/R Account');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

CASE;

// IF PAR.Company Number NE DTL.Company Number     041405
IF PAR.Company_Number <> DTL.Company_Number_041405;

// OR PAR.A/R Customer Number NE DTL.A/R Customer Number
OR PAR.AR_Customer_Number <> DTL.AR_Customer_Number;

//?*****************************************************************
//?****  Change Existing a/r header to New company/customer    ****
//?RMC 4/27/06 delete orig rcd before creating new. comp may not be diff
EXECUTE FUNCTION(RTV Chg Co/cust f/OA  RT) TYPE(RTVOBJ) FILE(ARBDCPP)           AC1725584;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Company_Number_041405);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT A/R Header         DL) TYPE(DLTOBJ) FILE(ARBDCPP)          AC1108150;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 EXECUTE FUNCTION(CRT A/R Header         CR) TYPE(CRTOBJ) FILE(ARBDCPP)          AC1341687;
 PARAMETER(PAR.Company_Number_041405);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Adjustment_Type_Code);
 PARAMETER(DB1.Transaction_Amount);
 PARAMETER(DB1.Adjustment_Amount);
 PARAMETER(DB1.Amount_Paid);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(DB1.A_R_Processing_Status);
 PARAMETER(DB1.Purge_Status);
 PARAMETER(DB1.Bank_Code);
 PARAMETER(DB1.GL_Document_Number);
 PARAMETER(DB1.Order_Number_Ref);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Salesperson_Code);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(DB1.Due_Date);
 PARAMETER(DB1.Last_Payment_Date);
 PARAMETER(DB1.Original_Inv_for_CB);
 PARAMETER(DB1.Paid_in_Full_Date);
 PARAMETER(DB1.Last_G_L_Post_Date);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(DB1.A_R_Check_Number);
 PARAMETER(DB1.Days_to_Pay);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  //?USER: Processing after Data update

  //?E6933 DN  08/12/16 - Create A/R Header Ext record.
  // Call program Crt A/R Header Ext    XF.
  CALL PROGRAM(Crt A/R Header Ext    XF) ('PBX3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Remaining_Balance_Due);
  PARAMETER(DB1.Order_Number_Ref);
  PARAMETER(DB1.Original_Inv_for_CB);

 }

}


EXECUTE FUNCTION(Rtv Chg Co            RT) TYPE(RTVOBJ) FILE(PPA4CPP)           AC1756273;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(DTL.Company_Number_041405);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt A/R Header OA     DL) TYPE(DLTOBJ) FILE(PPA4CPP)           AC1728723;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 EXECUTE FUNCTION(Crt A/R Header OA     CR) TYPE(CRTOBJ) FILE(PPA4CPP)           AC1728721;
 PARAMETER(PAR.Company_Number_041405);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Bank_Code);
 PARAMETER(DB1.Deposit_Date);
 PARAMETER(DB1.Deposit_Time);
 PARAMETER(DB1.OA_Unused_Sts);
}


ENDIF;

