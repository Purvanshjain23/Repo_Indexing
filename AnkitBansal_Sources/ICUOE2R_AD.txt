// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICUOE2R
// ?Date: 14.08.2025 Time: 03:26:52
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?Force program into add mode if no whse present
CASE;

// IF PAR.Warehouse Code is Warehouse Code Blank
IF PAR.Warehouse_Code = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

// PAR.Change Code = CND.No
PAR.Change_Code = 'N';

//?01/22/16 JJH E4980 - Get COPACK960 from Company Value
//?06/23/16 JJH E6225 - Replace RTVOBJ to use I/RST for Company Number
//?S16592 DN 05/22/20-Commented Out & Move to Key Screen Validaitons.
//?USER: Initialize key screen

// KEY.Accounting Company Number = PAR.Accounting Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Item Code = PAR.Item Code
KEY.Item_Code = PAR.Item_Code;

// KEY.Warehouse Code = PAR.Warehouse Code
KEY.Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(KEY.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate key screen

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?S16592 DN 05/27/20-Replace RTV to Also Check Record Status.
EXECUTE FUNCTION(Rtv Desc/Sts          RT) TYPE(RTVOBJ) FILE(CABZREP)           AC2009445;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(KEY.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?S16592 DN 05/27/20-Send Error Msg If Not Exist in Company Item File.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Send Error Msg if Item is Not Active.
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Company Item inactive for Company &1.'
ERROR(USR5189);
MSGPARM(KEY.Company_Number);

QUIT;

ENDIF;

//?S16592 DN 05/27/20-Send Error Msg If Not Exist in Company Item File.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company/Item doesn't exist for &1/&2.'
ERROR(USR5187);
MSGPARM(KEY.Company_Number);
MSGPARM(KEY.Item_Code);

QUIT;

ENDIF;

//?01/22/16 JJH E4980 - Do NOT allow a COPACK Item to have a Warehouse
//?  that has a Warehouse with Accounting Company of 960.
//?02/22/17 JBB E9064 - Do NOT allow a COPACK Item to have a Warehouse
//?  that has a Warehouse with Accounting Company of 440.
//?S16592 DN 05/27/20-Replace RTV to get Shipping Co also.
EXECUTE FUNCTION(Rtv Acct&Ship Co & Dsc RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2184891;
PARAMETER(KEY.Warehouse_Code);
PARAMETER(KEY.Warehouse_Description);
PARAMETER(LCL.Shipping_Company);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Accounting/Shipping Not Equal to Co Then Show Error.
CASE;

// IF LCL.Accounting Company EQ KEY.Company Number
IF LCL.Accounting_Company = KEY.Company_Number;

// OR LCL.Shipping Company EQ KEY.Company Number
OR LCL.Shipping_Company = KEY.Company_Number;

//?If Accounting/Shipping Not Equal to Co Then Show Error.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Company/Warehouse combination.'
ERROR(USR5188);
MSGPARM(KEY.Warehouse_Code);
MSGPARM(KEY.Company_Number);

QUIT;

ENDIF;

//?S16592 DN 05/22/20-Allow ALL Companies to Assign COPACK Items.
//?S16592 DN 05/22/20-New COPACK Logic for ALL Companies.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Item Str Type     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2118069;
PARAMETER(KEY.Item_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Item Structure Type Code is COPACK
IF LCL.Item_Structure_Type_Code = 900;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(LCL.Accounting_Company);
PARAMETER('COPACK');
PARAMETER(LCL.Allow_COPACK_Items_Whs_AC);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Allow to Assign COPACK if Yes Else Send Error Message.
CASE;

// IF LCL.Allow COPACK Items Whs AC is No
IF LCL.Allow_COPACK_Items_Whs_AC = 'N';

// Send error message - 'Not allowed to assign Copack Items to Company &1.'
ERROR(USR4897);
MSGPARM(LCL.Accounting_Company);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(Rtv Item desc/Vendor # RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1123545;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Vendor_Item_Whse_Default);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(KEY.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?>> Load defaults for an add record
// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Lead Time - Exception = CND.no
DTL.Lead_Time_Exception = 'N';

EXECUTE FUNCTION(Rtv Vendor Name        RT) TYPE(RTVOBJ) FILE(CABJREP)          AC1111039;
PARAMETER(DTL.Vendor_Item_Whse_Default);
PARAMETER(DTL.Vendor_Name);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get unit cost/pound
// Call program CLC Rtv Unit Cost/LB   XF.
CALL PROGRAM(CLC Rtv Unit Cost/LB   XF) ('PDLSXFR');
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(KEY.Warehouse_Code);
PARAMETER(DTL.Unit_Cost_Per_Pound);
PARAMETER(WRK.Cost_per_Primary_UOM);
PARAMETER(PAR.Pricing_Date_Used);
PARAMETER(WRK.Price_Status);
PARAMETER(JOB.*Job_date);

//?Price Date Msg
CASE;

// IF PAR.Pricing Date Used NE JOB.*Job date
IF PAR.Pricing_Date_Used <> JOB.*Job_date;

// AND DTL.Unit Cost Per Pound NE WRK.ZERO
AND DTL.Unit_Cost_Per_Pound <> WRK.ZERO;

//?Convert pricing date to text field with "/" delimiters
DO;

// WRK.USR Year = PAR.Pricing Date Used *YEAR
WRK.USR_Year = DATEDTLS(PAR.Pricing_Date_Used 'YR' 1111111 'NONE' 'N' 1);

// WRK.USR Current Month = PAR.Pricing Date Used *MONTH
WRK.USR_Current_Month = DATEDTLS(PAR.Pricing_Date_Used 'MO' 1111111 'NONE' 'N' 1);

// WRK.USR Period = PAR.Pricing Date Used *DAY OF MONTH
WRK.USR_Period = DATEDTLS(PAR.Pricing_Date_Used 'DM' 1111111 'NONE' 'N' 1);

// WRK.USR Accounting Year Alpha = CVTVAR(WRK.USR Year)
WRK.USR_Accounting_Year_Alpha = CVTVAR(WRK.USR_Year);

// WRK.Month USR = CVTVAR(WRK.USR Current Month)
WRK.Month_USR = CVTVAR(WRK.USR_Current_Month);

// WRK.Day USR = CVTVAR(WRK.USR Period)
WRK.Day_USR = CVTVAR(WRK.USR_Period);

// WRK.Condition Name 10 USR = CONCAT(WRK.Month USR,CON./,CON.*ZERO)
WRK.Condition_Name_10_USR = WRK.Month_USR + '/' (*ZERO);

// WRK.Condition Name 10 USR = CONCAT(WRK.Condition Name 10 USR,WRK.Day USR,CON.*ZE
WRK.Condition_Name_10_USR = WRK.Condition_Name_10_USR + WRK.Day_USR (*ZERO);

// WRK.Condition Name 10 USR = CONCAT(WRK.Condition Name 10 USR,CON./,CON.*ZERO)
WRK.Condition_Name_10_USR = WRK.Condition_Name_10_USR + '/' (*ZERO);

// WRK.Condition Name 10 USR = CONCAT(WRK.Condition Name 10 USR,WRK.USR Accounting
WRK.Condition_Name_10_USR = WRK.Condition_Name_10_USR + WRK.USR_Accounting_Year_Alpha (*ZERO);

ENDDO;

// Send error message - 'Used Pricing Date of &2 to calculate unit cost.'
ERROR(USR2332);
MSGPARM(DTL.Unit_Cost_Per_Pound);
MSGPARM(WRK.Condition_Name_10_USR);

//?this isn't really an error, so turn off the error indicator
//?(error message used for highlighting purposes)
// Execute function SET Off Indicator 99   US.
EXECUTE FUNCTION(SET Off Indicator 99   US) TYPE(EXCUSRSRC) ('PDLVUFR');
{
 C                     SETOF                     99    SETOFF INDIC
}


//?Price Date Msg
// IF DTL.Unit Cost Per Pound NE WRK.ZERO
IF DTL.Unit_Cost_Per_Pound <> WRK.ZERO;

// Send information message - 'Pricing Date found.'
MESSAGE(USR2354 *INFO);

ENDIF;

// PAR.Change Code = CND.Yes
PAR.Change_Code = 'Y';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(Rtv Vendor Name        RT) TYPE(RTVOBJ) FILE(CABJREP)          AC1111039;
PARAMETER(DTL.Vendor_Item_Whse_Default);
PARAMETER(DTL.Vendor_Name);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Buyer Name         RT) TYPE(RTVOBJ) FILE(CAC6REP)          AC1137065;
PARAMETER(DTL.Buyer_Code);
PARAMETER(WRK.First_Name);
PARAMETER(WRK.Last_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function CPY Compress F/L Names US.
EXECUTE FUNCTION(CPY Compress F/L Names US) TYPE(EXCUSRSRC) ('UFNAME');
PARAMETER(WRK.First_Name);
PARAMETER(WRK.Last_Name);
PARAMETER(DTL.USR_Compressed_Name);
{
 0038 E                    IN          2 99               INDICATORS
 E                    UFL        32  1               FIRST & LAST NAME
 0039 E                    ULN        20  1               LAST NAME
 0040 E                    UFN        12  1               FIRST NAME
 0041 C*************************
 C                     MOVE #IA3NA    UFNAM  12
 C                     MOVE #IA6NA    ULNAME 20
 C                     MOVEA*IN,85    UIN85   2
 C                     MOVEA*IN,86    UIN86   2
 C                     MOVEA*IN,87    UIN87   2
 C                     EXSR UFNAME
 C                     MOVEAUFL       #ODQNA
 C                     MOVEAUIN85     *IN,85
 C                     MOVEAUIN86     *IN,86
 C                     MOVEAUIN87     *IN,87
 0042 C           UFNAME    BEGSR
 0002 C******************************************
 0003 C** NAME SUBROUTINE
 0004 C** COMPRESS FIRST NAME AND LAST NAME FOR BETTER READABILITY
 0037 C******************************************
 0046 C                     SETOF                     858687
 0047 C                     MOVE *BLANKS   UFL
 0059 C                     MOVEAULNAME    ULN              LAST NAME
 0060 C                     MOVEAUFNAM     UFN              FIRST NAME
 0061 C                     Z-ADD0         U1      20
 0062 C                     Z-ADD0         U2      20
 *
 0063 C********* BEGIN WORK ON FIRST NAME
 *
 0064 C           UFIRST    TAG
 0065 C                     ADD  1         U2
 0066 C                     ADD  1         U1
 0073 C           UFN,U1    COMP ' '                      85END OF FIRST NM
 0074 C   85                ADD  1         U1                NAME=2 BLANKS
 0075 C   85      U1        COMP 12                   86                TH
 0076 C   85N86   UFN,U1    COMP ' '                      87CHECK 2 BLANKS
 0077 C   85      U1        SUB  1         U1               GET BACK B4 CK
 0079 C   85 86
 0080 COR 85 87             GOTO UOUT                       END OF FIRST NM
 0081 C                     MOVE UFN,U1    UFL,U2           PUT LETTERS IN
 0082 C           U1        CABNE12        UFIRST
 0085 C           UOUT      TAG
 0086 C                     MOVE ' '       UFL,U2             NAME
 0094 C                     Z-ADD0         U1               END OF FIRST NM
 0096 C********* START LAST NAME WORK
 0097 C           ULAST     TAG
 0098 C                     ADD  1         U2
 0099 C           U2        COMP 32                   85    GET OUT-NM DONE
 0100 C   85                GOTO UEND
 0101 C                     ADD  1         U1
 0105 C           ULN,U1    COMP ' '                      85END OF LAST NAM
 0106 C   85                ADD  1         U1                NAME=2 BLANKS
 0107 C   85      U1        COMP 20                   86    GT LNA@ LENGTH
 0108 C   85N86   ULN,U1    COMP ' '                      87CHECK 2 BLANKS
 0109 C   85      U1        SUB  1         U1               GET BACK B4 CK
 0110 C   85 86
 0111 COR 85 87             GOTO UEND
 0112 C                     MOVE ULN,U1    UFL,U2
 0113 C           U1        CABNE20        ULAST
 0123 C           UEND      ENDSR
 /EJECT
 0124 C***************************************************************
}


// DTL.Condition Desc. 1  USR = Condition name of DB1.Lead Time - Exception
DTL.Condition_Desc_1_USR = RTVCND(DB1.Lead_Time_Exception);

// DTL.Condition Desc. 2  USR = Condition name of DB1.Record Status
DTL.Condition_Desc_2_USR = RTVCND(DB1.Record_Status);

//?If unit cost = zero, fill unit cost if possible
CASE;

// IF DB1.Unit Cost Pricing U/M EQ WRK.ZERO
IF DB1.Unit_Cost_Per_Pound = WRK.ZERO;

//?Get unit cost/pound
// Call program CLC Rtv Unit Cost/LB   XF.
CALL PROGRAM(CLC Rtv Unit Cost/LB   XF) ('PDLSXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DB1.Warehouse_Code);
PARAMETER(DTL.Unit_Cost_Per_Pound);
PARAMETER(WRK.Cost_per_Primary_UOM);
PARAMETER(PAR.Pricing_Date_Used);
PARAMETER(WRK.Price_Status);
PARAMETER(JOB.*Job_date);

//?Price Date Msg
CASE;

// IF DTL.Unit Cost Pricing U/M NE WRK.ZERO
IF DTL.Unit_Cost_Per_Pound <> WRK.ZERO;

//?Convert pricing date to text field with "/" delimiters
DO;

// WRK.USR Year = PAR.Pricing Date Used *YEAR
WRK.USR_Year = DATEDTLS(PAR.Pricing_Date_Used 'YR' 1111111 'NONE' 'N' 1);

// WRK.USR Current Month = PAR.Pricing Date Used *MONTH
WRK.USR_Current_Month = DATEDTLS(PAR.Pricing_Date_Used 'MO' 1111111 'NONE' 'N' 1);

// WRK.USR Period = PAR.Pricing Date Used *DAY OF MONTH
WRK.USR_Period = DATEDTLS(PAR.Pricing_Date_Used 'DM' 1111111 'NONE' 'N' 1);

// WRK.USR Accounting Year Alpha = CVTVAR(WRK.USR Year)
WRK.USR_Accounting_Year_Alpha = CVTVAR(WRK.USR_Year);

// WRK.Month USR = CVTVAR(WRK.USR Current Month)
WRK.Month_USR = CVTVAR(WRK.USR_Current_Month);

// WRK.Day USR = CVTVAR(WRK.USR Period)
WRK.Day_USR = CVTVAR(WRK.USR_Period);

// WRK.Condition Name 10 USR = CONCAT(WRK.Month USR,CON./,CON.*ZERO)
WRK.Condition_Name_10_USR = WRK.Month_USR + '/' (*ZERO);

// WRK.Condition Name 10 USR = CONCAT(WRK.Condition Name 10 USR,WRK.Day USR,CON.*ZE
WRK.Condition_Name_10_USR = WRK.Condition_Name_10_USR + WRK.Day_USR (*ZERO);

// WRK.Condition Name 10 USR = CONCAT(WRK.Condition Name 10 USR,CON./,CON.*ZERO)
WRK.Condition_Name_10_USR = WRK.Condition_Name_10_USR + '/' (*ZERO);

// WRK.Condition Name 10 USR = CONCAT(WRK.Condition Name 10 USR,WRK.USR Accounting
WRK.Condition_Name_10_USR = WRK.Condition_Name_10_USR + WRK.USR_Accounting_Year_Alpha (*ZERO);

ENDDO;

// Send error message - 'Used Pricing Date of &2 to calculate unit cost.'
ERROR(USR2332);
MSGPARM(DTL.Unit_Cost_Per_Pound);
MSGPARM(WRK.Condition_Name_10_USR);

// Execute function SET Off Indicator 99   US.
EXECUTE FUNCTION(SET Off Indicator 99   US) TYPE(EXCUSRSRC) ('PDLVUFR');
{
 C                     SETOF                     99    SETOFF INDIC
}


ENDIF;

// PAR.Change Code = CND.Yes
PAR.Change_Code = 'Y';

//?If unit cost = zero, fill unit cost if possible
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Change Code = CND.No
PAR.Change_Code = 'N';

ENDIF;

//?USER: Validate detail screen fields

//?E6225 DN 03/17/17-Allow Zero. Commented out.
//?USER: Validate detail screen relations

EXECUTE FUNCTION(Rtv Vendor Name        RT) TYPE(RTVOBJ) FILE(CABJREP)          AC1111039;
PARAMETER(DTL.Vendor_Item_Whse_Default);
PARAMETER(DTL.Vendor_Name);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Buyer Name         RT) TYPE(RTVOBJ) FILE(CAC6REP)          AC1137065;
PARAMETER(DTL.Buyer_Code);
PARAMETER(WRK.First_Name);
PARAMETER(WRK.Last_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function CPY Compress F/L Names US.
EXECUTE FUNCTION(CPY Compress F/L Names US) TYPE(EXCUSRSRC) ('UFNAME');
PARAMETER(WRK.First_Name);
PARAMETER(WRK.Last_Name);
PARAMETER(DTL.USR_Compressed_Name);
{
 0038 E                    IN          2 99               INDICATORS
 E                    UFL        32  1               FIRST & LAST NAME
 0039 E                    ULN        20  1               LAST NAME
 0040 E                    UFN        12  1               FIRST NAME
 0041 C*************************
 C                     MOVE #IA3NA    UFNAM  12
 C                     MOVE #IA6NA    ULNAME 20
 C                     MOVEA*IN,85    UIN85   2
 C                     MOVEA*IN,86    UIN86   2
 C                     MOVEA*IN,87    UIN87   2
 C                     EXSR UFNAME
 C                     MOVEAUFL       #ODQNA
 C                     MOVEAUIN85     *IN,85
 C                     MOVEAUIN86     *IN,86
 C                     MOVEAUIN87     *IN,87
 0042 C           UFNAME    BEGSR
 0002 C******************************************
 0003 C** NAME SUBROUTINE
 0004 C** COMPRESS FIRST NAME AND LAST NAME FOR BETTER READABILITY
 0037 C******************************************
 0046 C                     SETOF                     858687
 0047 C                     MOVE *BLANKS   UFL
 0059 C                     MOVEAULNAME    ULN              LAST NAME
 0060 C                     MOVEAUFNAM     UFN              FIRST NAME
 0061 C                     Z-ADD0         U1      20
 0062 C                     Z-ADD0         U2      20
 *
 0063 C********* BEGIN WORK ON FIRST NAME
 *
 0064 C           UFIRST    TAG
 0065 C                     ADD  1         U2
 0066 C                     ADD  1         U1
 0073 C           UFN,U1    COMP ' '                      85END OF FIRST NM
 0074 C   85                ADD  1         U1                NAME=2 BLANKS
 0075 C   85      U1        COMP 12                   86                TH
 0076 C   85N86   UFN,U1    COMP ' '                      87CHECK 2 BLANKS
 0077 C   85      U1        SUB  1         U1               GET BACK B4 CK
 0079 C   85 86
 0080 COR 85 87             GOTO UOUT                       END OF FIRST NM
 0081 C                     MOVE UFN,U1    UFL,U2           PUT LETTERS IN
 0082 C           U1        CABNE12        UFIRST
 0085 C           UOUT      TAG
 0086 C                     MOVE ' '       UFL,U2             NAME
 0094 C                     Z-ADD0         U1               END OF FIRST NM
 0096 C********* START LAST NAME WORK
 0097 C           ULAST     TAG
 0098 C                     ADD  1         U2
 0099 C           U2        COMP 32                   85    GET OUT-NM DONE
 0100 C   85                GOTO UEND
 0101 C                     ADD  1         U1
 0105 C           ULN,U1    COMP ' '                      85END OF LAST NAM
 0106 C   85                ADD  1         U1                NAME=2 BLANKS
 0107 C   85      U1        COMP 20                   86    GT LNA@ LENGTH
 0108 C   85N86   ULN,U1    COMP ' '                      87CHECK 2 BLANKS
 0109 C   85      U1        SUB  1         U1               GET BACK B4 CK
 0110 C   85 86
 0111 COR 85 87             GOTO UEND
 0112 C                     MOVE ULN,U1    UFL,U2
 0113 C           U1        CABNE20        ULAST
 0123 C           UEND      ENDSR
 /EJECT
 0124 C***************************************************************
}


// DTL.Condition Desc. 1  USR = Condition name of DTL.Lead Time - Exception
DTL.Condition_Desc_1_USR = RTVCND(DTL.Lead_Time_Exception);

// DTL.Condition Desc. 2  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_2_USR = RTVCND(DTL.Record_Status);

EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Create DBF record

EXECUTE FUNCTION(Crt Itm Bal/WIM Itm BalIF) TYPE(EXCINTFUN) FILE(CAB0REP)       AC2214017;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Unit_Cost_Per_Pound);
PARAMETER(*ZERO);
PARAMETER(DTL.Cost_per_Primary_UOM);
PARAMETER(DTL.Cost_per_Pricing_UOM);
PARAMETER(DTL.Revaluation_Cost);
PARAMETER(DTL.Revaluation_Eff_Date);
PARAMETER(DTL.Revaluation_Cost_Type);
PARAMETER(DTL.Last_Revaluation_Cost);
PARAMETER(DTL.Last_Revaluation_Eff_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Quantity_In_Chill);
PARAMETER(DTL.Weight_In_Chill);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Cycle_Count_Code_IB);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(2ND.Inventory_Planning_Type);
PARAMETER(2ND.Safety_Allowance_Percent);
PARAMETER(2ND.Safety_Allowance_Quantity);
PARAMETER(2ND.Stock_Out_Date);
PARAMETER(DTL.Buyer_Code);
PARAMETER(2ND.Lead_Time_Last);
PARAMETER(2ND.Lead_Time_Date_Last);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(2ND.Lead_Time_Exception);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(2ND.Minimum_Quantity);
PARAMETER(2ND.Maximum_Quantity);
PARAMETER(*ZERO);
PARAMETER(2ND.Requisition_Mode);
PARAMETER('N');
PARAMETER(2ND.Post_GL_Status);
PARAMETER(DTL.Vendor_Item_Whse_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
{
 //?Execute internal function

 EXECUTE FUNCTION(Crt Item Balance       CR) TYPE(CRTOBJ) FILE(CAB0REP)          AC1119976;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(PAR.Last_Cost);
 PARAMETER(PAR.Cost_per_Primary_UOM);
 PARAMETER(PAR.Cost_per_Pricing_UOM);
 PARAMETER(PAR.Revaluation_Cost);
 PARAMETER(PAR.Revaluation_Eff_Date);
 PARAMETER(PAR.Revaluation_Cost_Type);
 PARAMETER(PAR.Last_Revaluation_Cost);
 PARAMETER(PAR.Last_Revaluation_Eff_Date);
 PARAMETER(PAR.On_Hand_Weight_Summary);
 PARAMETER(PAR.On_Hand_UOM1_Summary);
 PARAMETER(PAR.On_Hand_UOM2_Summary);
 PARAMETER(PAR.On_Hand_UOM3_Summary);
 PARAMETER(PAR.Quantity_In_Chill);
 PARAMETER(PAR.Weight_In_Chill);
 PARAMETER(PAR.Quantity_Scheduled_UOM1);
 PARAMETER(PAR.Quantity_on_Sales_Order);
 PARAMETER(PAR.Quantity_on_Purch_Order);
 PARAMETER(PAR.Quantity_on_Transfer);
 PARAMETER(PAR.Quantity_Avail_To_Sell);
 PARAMETER(PAR.Cycle_Count_Code_IB);
 PARAMETER(PAR.Date_of_Last_Order);
 PARAMETER(PAR.Date_of_Last_Shipment);
 PARAMETER(PAR.Value_of_On_Hand_Inventor);
 PARAMETER(PAR.Inventory_Planning_Type);
 PARAMETER(PAR.Safety_Allowance_Percent);
 PARAMETER(PAR.Safety_Allowance_Quantity);
 PARAMETER(PAR.Stock_Out_Date);
 PARAMETER(PAR.Buyer_Code);
 PARAMETER(PAR.Lead_Time_Last);
 PARAMETER(PAR.Lead_Time_Date_Last);
 PARAMETER(PAR.Lead_Time_Next_to_Last);
 PARAMETER(PAR.Lead_Time_Date_Next_Lst);
 PARAMETER(PAR.Lead_Time_Exception);
 PARAMETER(PAR.Usage_Qty_per_Cycle);
 PARAMETER(PAR.Usage_Weight_per_Cycle);
 PARAMETER(PAR.Inventory_Management);
 PARAMETER(PAR.Minimum_Quantity);
 PARAMETER(PAR.Maximum_Quantity);
 PARAMETER(PAR.Last_Physical_Count);
 PARAMETER(PAR.Requisition_Mode);
 PARAMETER(PAR.Cost_Update_Pending);
 PARAMETER(PAR.Post_GL_Status);
 PARAMETER(PAR.Vendor_Item_Whse_Default);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(Rtv Module Release Sts RT) TYPE(RTVOBJ) FILE(PUC6REP)          AC2212908;
 PARAMETER('WIM');
 PARAMETER(1);
 PARAMETER(LCL.Module_Release_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 //?If 'Parallel', Create WIM Item Balance Record.
 CASE;

 // IF LCL.Module Release Status is Parallel
 IF LCL.Module_Release_Status = 'P';

 EXECUTE FUNCTION(Crt WIM Item Balance  CR) TYPE(CRTOBJ) FILE(PUCGCPP)           AC2209097;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER('FG');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(0001-01-01-00.00.00.00000);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212929;
  PARAMETER(DB1.Create_Date_Timestamp);
  PARAMETER(DB1.Create_User_ID);
  PARAMETER(DB1.Create_Program_Name);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CREATE Time Stamp Info.
   // PAR.Create Date Timestamp = JOB.*System timestamp
   PAR.Create_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Create User ID = JOB.*USER
   PAR.Create_User_ID = JOB.*USER;

   // PAR.Create Program Name = JOB.*PROGRAM
   PAR.Create_Program_Name = JOB.*PROGRAM;

   //?*** Set CHANGE Time Stamp Info.
   //?Cannot set Update Date TS here, will error.
   // PAR.Update User Id = CON.*BLANK
   PAR.Update_User_Id = *BLANK;

   // PAR.Update Program Name = CON.*BLANK
   PAR.Update_Program_Name = *BLANK;

  }

 }

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Itm Bal/WIM Itm BalIF) TYPE(EXCINTFUN) FILE(CAB0REP)       AC2214018;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Unit_Cost_Per_Pound);
PARAMETER(DTL.Last_Cost);
PARAMETER(DTL.Cost_per_Primary_UOM);
PARAMETER(DTL.Cost_per_Pricing_UOM);
PARAMETER(DTL.Revaluation_Cost);
PARAMETER(DTL.Revaluation_Eff_Date);
PARAMETER(DTL.Revaluation_Cost_Type);
PARAMETER(DTL.Last_Revaluation_Cost);
PARAMETER(DTL.Last_Revaluation_Eff_Date);
PARAMETER(DTL.On_Hand_Weight_Summary);
PARAMETER(DTL.On_Hand_UOM1_Summary);
PARAMETER(DTL.On_Hand_UOM2_Summary);
PARAMETER(DTL.On_Hand_UOM3_Summary);
PARAMETER(DTL.Quantity_In_Chill);
PARAMETER(DTL.Weight_In_Chill);
PARAMETER(DTL.Quantity_Scheduled_UOM1);
PARAMETER(DTL.Quantity_on_Sales_Order);
PARAMETER(DTL.Quantity_on_Purch_Order);
PARAMETER(DTL.Quantity_on_Transfer);
PARAMETER(DTL.Quantity_Avail_To_Sell);
PARAMETER(DTL.Cycle_Count_Code_IB);
PARAMETER(DTL.Date_of_Last_Order);
PARAMETER(DTL.Date_of_Last_Shipment);
PARAMETER(DTL.Value_of_On_Hand_Inventor);
PARAMETER(2ND.Inventory_Planning_Type);
PARAMETER(2ND.Safety_Allowance_Percent);
PARAMETER(2ND.Safety_Allowance_Quantity);
PARAMETER(DTL.Stock_Out_Date);
PARAMETER(DTL.Buyer_Code);
PARAMETER(2ND.Lead_Time_Last);
PARAMETER(2ND.Lead_Time_Date_Last);
PARAMETER(DTL.Lead_Time_Next_to_Last);
PARAMETER(DTL.Lead_Time_Date_Next_Lst);
PARAMETER(2ND.Lead_Time_Exception);
PARAMETER(DTL.Usage_Qty_per_Cycle);
PARAMETER(DTL.Usage_Weight_per_Cycle);
PARAMETER(DTL.Inventory_Management);
PARAMETER(2ND.Minimum_Quantity);
PARAMETER(2ND.Maximum_Quantity);
PARAMETER(DTL.Last_Physical_Count);
PARAMETER(2ND.Requisition_Mode);
PARAMETER(DTL.Cost_Update_Pending);
PARAMETER(2ND.Post_GL_Status);
PARAMETER(DTL.Vendor_Item_Whse_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
{
 //?Execute internal function

 EXECUTE FUNCTION(Chg Item Balance       CH) TYPE(CHGOBJ) FILE(CAB0REP)          AC1119977;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(PAR.Last_Cost);
 PARAMETER(PAR.Cost_per_Primary_UOM);
 PARAMETER(PAR.Cost_per_Pricing_UOM);
 PARAMETER(PAR.Revaluation_Cost);
 PARAMETER(PAR.Revaluation_Eff_Date);
 PARAMETER(PAR.Revaluation_Cost_Type);
 PARAMETER(PAR.Last_Revaluation_Cost);
 PARAMETER(PAR.Last_Revaluation_Eff_Date);
 PARAMETER(PAR.On_Hand_Weight_Summary);
 PARAMETER(PAR.On_Hand_UOM1_Summary);
 PARAMETER(PAR.On_Hand_UOM2_Summary);
 PARAMETER(PAR.On_Hand_UOM3_Summary);
 PARAMETER(PAR.Quantity_In_Chill);
 PARAMETER(PAR.Weight_In_Chill);
 PARAMETER(PAR.Quantity_Scheduled_UOM1);
 PARAMETER(PAR.Quantity_on_Sales_Order);
 PARAMETER(PAR.Quantity_on_Purch_Order);
 PARAMETER(PAR.Quantity_on_Transfer);
 PARAMETER(PAR.Quantity_Avail_To_Sell);
 PARAMETER(PAR.Cycle_Count_Code_IB);
 PARAMETER(PAR.Date_of_Last_Order);
 PARAMETER(PAR.Date_of_Last_Shipment);
 PARAMETER(PAR.Value_of_On_Hand_Inventor);
 PARAMETER(PAR.Inventory_Planning_Type);
 PARAMETER(PAR.Safety_Allowance_Percent);
 PARAMETER(PAR.Safety_Allowance_Quantity);
 PARAMETER(PAR.Stock_Out_Date);
 PARAMETER(PAR.Buyer_Code);
 PARAMETER(PAR.Lead_Time_Last);
 PARAMETER(PAR.Lead_Time_Date_Last);
 PARAMETER(PAR.Lead_Time_Next_to_Last);
 PARAMETER(PAR.Lead_Time_Date_Next_Lst);
 PARAMETER(PAR.Lead_Time_Exception);
 PARAMETER(PAR.Usage_Qty_per_Cycle);
 PARAMETER(PAR.Usage_Weight_per_Cycle);
 PARAMETER(PAR.Inventory_Management);
 PARAMETER(PAR.Minimum_Quantity);
 PARAMETER(PAR.Maximum_Quantity);
 PARAMETER(PAR.Last_Physical_Count);
 PARAMETER(PAR.Requisition_Mode);
 PARAMETER(PAR.Cost_Update_Pending);
 PARAMETER(PAR.Post_GL_Status);
 PARAMETER(PAR.Vendor_Item_Whse_Default);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(Rtv Module Release Sts RT) TYPE(RTVOBJ) FILE(PUC6REP)          AC2212908;
 PARAMETER('WIM');
 PARAMETER(1);
 PARAMETER(LCL.Module_Release_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 //?If 'Parallel', Update WIM Item Balance Record.
 CASE;

 // IF LCL.Module Release Status is Parallel
 IF LCL.Module_Release_Status = 'P';

 EXECUTE FUNCTION(Upd Record Status     RT) TYPE(RTVOBJ) FILE(PUCGCPP)           AC2214032;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER('FG');
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg WIM Item Balance  CH) TYPE(CHGOBJ) FILE(PUCGCPP)           AC2209098;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Inventory_Item_Type);
  PARAMETER(DB1.On_Hand_Weight_Summary);
  PARAMETER(DB1.On_Hand_UOM1_Summary);
  PARAMETER(DB1.In_Transit_Weight_Summary);
  PARAMETER(DB1.In_Transit_UOM1_Summary);
  PARAMETER(DB1.Qty_Available_to_Sell);
  PARAMETER(DB1.On_Hold_Weight_Summary);
  PARAMETER(DB1.On_Hold_UOM1_Summary);
  PARAMETER(DB1.Available_Weight_Summary);
  PARAMETER(DB1.Available_UOM1_Summary);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(PAR.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
   PARAMETER(DB1.Update_Date_Timestamp);
   PARAMETER(DB1.Update_User_Id);
   PARAMETER(DB1.Update_Program_Name);
   {
    //?Execute internal function

    //?*** Set CHANGE Time Stamp Info.
    // PAR.Update Date Timestamp = JOB.*System timestamp
    PAR.Update_Date_Timestamp = JOB.*System_timestamp;

    // PAR.Update User Id = JOB.*USER
    PAR.Update_User_Id = JOB.*USER;

    // PAR.Update Program Name = JOB.*PROGRAM
    PAR.Update_Program_Name = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


//?USER: Process command keys

CASE;

// IF PAR.Change Code is Yes
IF PAR.Change_Code = 'Y';

EXECUTE FUNCTION(UPD Value of On Hand   RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1417737;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Unit_Cost_Per_Pound);
PARAMETER(WRK.Value_of_On_Hand_Inventor);
{
 //?USER: Initialize routine

 // PAR.Value of On Hand Inventor = CON.*ZERO
 PAR.Value_of_On_Hand_Inventor = *ZERO;

 //?USER: Process Data record

 // PAR.Value of On Hand Detail = DB1.Quantity on Hand - Weight * PAR.Unit Cost Per
 PAR.Value_of_On_Hand_Detail = DB1.Quantity_on_Hand_Weight * PAR.Unit_Cost_Per_Pound 'H';

 // PAR.Value of On Hand Inventor = PAR.Value of On Hand Inventor + PAR.Value of On
 PAR.Value_of_On_Hand_Inventor = PAR.Value_of_On_Hand_Inventor
 + PAR.Value_of_On_Hand_Detail;

 EXECUTE FUNCTION(Chg Item Bal. Detail   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1120963;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Physical_Count_Weight);
 PARAMETER(DB1.Physical_Count_Qty_UOM1);
 PARAMETER(DB1.Physical_Count_Qty_UOM2);
 PARAMETER(DB1.Physical_Count_Qty_UOM3);
 PARAMETER(DB1.Physical_Count_Status);
 PARAMETER(DB1.Quantity_on_Hand_Weight);
 PARAMETER(DB1.Quantity_on_Hand_UOM1);
 PARAMETER(DB1.Quantity_on_Hand_UOM2);
 PARAMETER(DB1.Quantity_on_Hand_UOM3);
 PARAMETER(DB1.Quantity_In_Chill);
 PARAMETER(DB1.Weight_In_Chill);
 PARAMETER(DB1.Update_Exception_Status);
 PARAMETER(DB1.Physical_Start_Weight);
 PARAMETER(DB1.Physical_Start_UOM1);
 PARAMETER(DB1.Physical_Start_UOM2);
 PARAMETER(DB1.Physical_Start_UOM3);
 PARAMETER(DB1.Physical_Start_Date);
 PARAMETER(DB1.Unit_Cost_Per_Pound);
 PARAMETER(DB1.Last_Cost);
 PARAMETER(PAR.Value_of_On_Hand_Detail);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

}


//?Update value of on hand inventory
CASE;

// IF WRK.Value of On Hand Inventor NE DTL.Value of On Hand Inventor
IF WRK.Value_of_On_Hand_Inventor <> DTL.Value_of_On_Hand_Inventor;

EXECUTE FUNCTION(Chg Val/Qty/Wgt        Ch) TYPE(CHGOBJ) FILE(CAB0REP)          AC1129181;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.On_Hand_Weight_Summary);
PARAMETER(DTL.On_Hand_UOM1_Summary);
PARAMETER(WRK.Value_of_On_Hand_Inventor);
{
 //?USER: Processing before Data update

 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 //?Refresh the available to sell quantity
 // DB1.Quantity Avail. to Sell = DB1.On Hand U/M1 Summary
 DB1.Quantity_Avail_To_Sell = DB1.On_Hand_UOM1_Summary;

 // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Sale
 DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Sales_Order;

 // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Purc
 DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Purch_Order;

 // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Tran
 DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Transfer;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

CASE;

// IF PAR.Pricing Date Used NE WRK.ZERO
IF PAR.Pricing_Date_Used <> WRK.ZERO;

// WRK.Revaluation Cost Type = CND.Market
WRK.Revaluation_Cost_Type = 'M';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Revaluation Cost Type = CND.Override
WRK.Revaluation_Cost_Type = 'O';

ENDIF;

EXECUTE FUNCTION(CRT PD Item Values     CR) TYPE(CRTOBJ) FILE(PDKZCPP)          AC1414720;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(DTL.Unit_Cost_Per_Pound);
PARAMETER(PAR.Pricing_Date_Used);
PARAMETER(WRK.Revaluation_Cost_Type);
PARAMETER(JOB.*Job_date);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('A');
{
 //?USER: Processing before Data update

 // Call program VAL Exists             XF.
 CALL PROGRAM(VAL Exists             XF) ('PDNHXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Revaluation_Eff_Date);
 PARAMETER(DB1.Revaluation_Eff_Time);
 PARAMETER(PAR.*Return_code);

 // DOW PAR.*Return code is *Record already exists
 DOW PAR.*Return_code = 'Y2U0003';

 // DB1.Revaluation Eff. Time = DB1.Revaluation Eff. Time + CON.1
 DB1.Revaluation_Eff_Time = DB1.Revaluation_Eff_Time + 1;

 // Call program VAL Exists             XF.
 CALL PROGRAM(VAL Exists             XF) ('PDNHXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Revaluation_Eff_Date);
 PARAMETER(DB1.Revaluation_Eff_Time);
 PARAMETER(PAR.*Return_code);

 ENDDO;

 // Execute function SET Off Indicator 98   US.
 EXECUTE FUNCTION(SET Off Indicator 98   US) TYPE(EXCUSRSRC) ('PDNLUFR');
 {
  C                     SETOF                     98    SETOFF INDIC
 }

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

}


ENDIF;

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

