// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBHLE1R
// ?Date: 14.08.2025 Time: 03:47:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?RMC 1/28/13 E2424 New to allow transfer of excess rins to One record
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('SHP');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize key screen

MOVE *ALL (To: KEY From: PAR);

//?USER: Initialize detail screen (existing record)

//?default all excess rins
// DTL.RIN Adjustment USR = DTL.COA BHR RINs to Sell Sep
DTL.RIN_Adjustment_USR = DTL.COA_BHR_RINs_to_Sell_Sep;

//?USER: Validate detail screen fields

EXECUTE FUNCTION(Rtv Val for Txfr ExcessRT) TYPE(RTVOBJ) FILE(PMDACPP)          AC2060150;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.Batch_Number_5_0_USR);
PARAMETER(DTL.Batch_Header_RIN_Seq_New);
PARAMETER(LCL.COA_Batch_RIN_Volume);
PARAMETER(LCL.RFS_Transaction_Type);
PARAMETER(LCL.Return_Code_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Return Code Usr = CND.*Record does not exist
 PAR.Return_Code_Usr = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.RFS Transaction Type is Buy Trans Types
IF LCL.RFS_Transaction_Type = 'BUY'/'TRB';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid transfer to batch &1 &2'
ERROR(USR4568);
MSGPARM(DTL.Batch_Number_5_0_USR);
MSGPARM(DTL.Batch_Header_RIN_Seq_New);

ENDIF;

CASE;

// IF LCL.COA Batch RIN Volume is Greater than Zero
IF LCL.COA_Batch_RIN_Volume > *ZERO;

// Send error message - 'Invalid transfer to batch &1 &2'
ERROR(USR4568);
MSGPARM(DTL.Batch_Number_5_0_USR);
MSGPARM(DTL.Batch_Header_RIN_Seq_New);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

CASE;

// IF DTL.RIN Adjustment USR GT DTL.COA BHR RINs to Sell Sep
IF DTL.RIN_Adjustment_USR > DTL.COA_BHR_RINs_to_Sell_Sep;

// Send error message - 'RINs transferred cant be > &1'
ERROR(USR4567);
MSGPARM(DTL.COA_BHR_RINs_to_Sell_Sep);

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg RIN Upd BUY xfr   IF) TYPE(EXCINTFUN) FILE(PMDACPP)        AC2060151;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Batch_Header_RIN_Seq);
PARAMETER(DTL.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(DTL.COA_RIN_Gallons_Sold);
PARAMETER(DTL.COA_BHR_RINs_to_Sell_Sep);
PARAMETER(DTL.RIN_Adjustment_USR);
PARAMETER(DTL.Batch_Number_5_0_USR);
PARAMETER(DTL.Batch_Header_RIN_Seq_New);
{
 //?Execute internal function

 //?Upd BUY whats left to sell if any
 EXECUTE FUNCTION(Rtv Upd BUY reduc exc RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2060154;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.RIN_Adjustment_USR);
 {
  //?USER: Process Data record

  // LCL.COA BHR RINs to Sell Sep = DB1.COA BHR RINs to Sell Sep - PAR.RIN Adjustment USR
  LCL.COA_BHR_RINs_to_Sell_Sep = DB1.COA_BHR_RINs_to_Sell_Sep - PAR.RIN_Adjustment_USR;

  // LCL.COA RIN Gallons Sold = DB1.COA RIN Gallons Sold + PAR.RIN Adjustment USR
  LCL.COA_RIN_Gallons_Sold = DB1.COA_RIN_Gallons_Sold + PAR.RIN_Adjustment_USR;

  EXECUTE FUNCTION(Chg RINS Sold sep     CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC2060152;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.COA_ULSD_Company_#);
  PARAMETER(PAR.COA_Batch_Number);
  PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
  PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
  PARAMETER(DB1.COA_RIN_Volume_in_Gallons);
  PARAMETER(LCL.COA_RIN_Gallons_Sold);
  PARAMETER(DB1.COA_RIN_Quantity);
  PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Upd BUY that will have all the excess rins
 EXECUTE FUNCTION(Rtv Upd BUY w/Exc xfr RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2060153;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.Batch_Number_5_0_USR);
 PARAMETER(PAR.Batch_Header_RIN_Seq_New);
 PARAMETER(PAR.RIN_Adjustment_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.RFS Transaction Type is Buy Trans Types
  IF DB1.RFS_Transaction_Type = 'BUY'/'TRB';

  // LCL.COA RIN Quantity = DB1.COA RIN Quantity + PAR.RIN Adjustment USR
  LCL.COA_RIN_Quantity = DB1.COA_RIN_Quantity + PAR.RIN_Adjustment_USR;

  // LCL.COA RIN Volume in Gallons = DB1.COA RIN Volume in Gallons + PAR.RIN Adjustment USR
  LCL.COA_RIN_Volume_in_Gallons = DB1.COA_RIN_Volume_in_Gallons + PAR.RIN_Adjustment_USR;

  // LCL.COA BHR RINs to Sell Sep = DB1.COA BHR RINs to Sell Sep + PAR.RIN Adjustment USR
  LCL.COA_BHR_RINs_to_Sell_Sep = DB1.COA_BHR_RINs_to_Sell_Sep + PAR.RIN_Adjustment_USR;

  // LCL.COA RIN Gallons Sold = DB1.COA RIN Gallons Sold
  LCL.COA_RIN_Gallons_Sold = DB1.COA_RIN_Gallons_Sold;

  EXECUTE FUNCTION(Chg RINS Sold sep     CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC2060152;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
  PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
  PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
  PARAMETER(LCL.COA_RIN_Gallons_Sold);
  PARAMETER(DB1.COA_RIN_Quantity);
  PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  QUIT;

  ENDIF;

 }

}


