// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POQJDFR
// ?Date: 14.08.2025 Time: 03:38:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
//?***** Change Log and Comments
DO;

//?W78830 DN  07/13/21 - Added option 6=Chg Ord Qty.
//?- Added value '6' to 'PPS Update' condition value list.
//?- Copied opt 6 logic from opt 2 in PORYDFR function.
//?R15115 RMC 08/23/19 - Chg OPBGWKN3 TO HAVE KEY 3 OF REQ SHIP DATE INSTEAD
//? OF SCHEDULED SHIP DATE. CHANGE SCREEN & change places using sched to
//?  use REQ -- that werent already using REQ
//?S14774 JJH 04/03/19 - Get alloc nbr days in system values-ALLOCDAYS
//?E14728 JJH 03/27/19 - Last Allocation Date
//?- Do not allow Option 2=Edit Sched, 17=Re-alc, and 19=De-alc if
//?  the Order's Scheduled Ship Date is GT the Last Allocation Date.
//?- Last Allocation Date is the Last Date in which the Inventory Build
//?  process will perform allocation.  We are using the same logic
//? to calculate the Last Allocation Date used on the Build Production
//?  Schedule (PDRRPVR) function.
//?*****
//?R13899 RMC 10.11.18  if od price type is DST/TNK force allocation
//?** to suspended so it can only take inventory
//?*****
//?** 10/20/17 DN  R11918 - Do NOT allow opt '2=Edit Sched' & opt
//?   '16=Ship off Cut' if Allocation Method='I' (Suspended Inventory).
//?- Change 'Block Order Flag' to be input capable.
//?*****
//?R11387 RMC 9/2217 add spmodsche for scheduling functs
//?** 08/03/17 DN  T10731 - Inventory Visibility Enhancement-Intake Req 29
//?- Undo OPBGWKN3 access path SELECT criteria.
//?*****
//?R11387 RMC 8/2/17 allow opt 2 if user has user authority "SO" sched ovrrde
//?*****
//?** 06/07/17 DN  T10731 - Inventory Visibility Enhancement-Intake Req 29
//?- Recompile due to OPBGWKN3 access path was changed to Select
//?  Detail Line Status=R (Confirmed). No logic change.
//?- Per RC, commented out codes that was done for E4119 project but
//?  was never promoted to PROD.
//?*****
//?** 05/19/16 RMC E4119 remove live with tpm check
//?*****
//?** 03/01/16 RMC WHD 9935  new PORKSCHE5 for Nicki - also will do credit
//?*****
//?04/03/2015 LJB E004019   Disable Display Load (option 13)
//?    if Live w/TPM = Yes
//?*****
//?** 01/19/15   RMC E3852  allow TFMODSCHE same updates as PORKSCHE
//?*****
//?** 01/13/14   RMC E2885  allow PORKTRAF3 same updates as PORKSCHE
//?   YLW qty ordered if sched override=Y
//?*****
//?E2824 RMC 10/14/13 allow changes if locked - dont unlock/lock per PS chgs
//?   Still check locked sts for Sched ship date and Age Day changes
//?*****
//?** E2625 08/19/13 RMC if load locked, but no PDKNCPP, set prod plan to
//?     NO so it wont show up in the RED
//?** E2625 08/05/13 RMC Chg sched ship dt to Sched Load dt
//?** 02/22/2012 LJB C001956   Clear the upload error flags in order
//?    header and order detail for release line item
//? 09/23/2011 RMC E1607  if load had a whs with edi wso interchange - do stf
//?** 05/02/2011   RMC E01523 Use req delv dt/time always for ddt calc
EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
{
 //?Execute internal function

 //?FP1309 Inventory Age Code Description
}


//?Replace Age Code with the age days
//?also replaced the calculate pa age with the new routine
//?** 04/15/2010   RMC C0679 - the below isnt working, so comment for now
//?** 04/08/2010   RMC C0679 - make ship off cut stick over 2-days
//?** 01/21/2010 RMC C476 option 2=Edit Schd - validate prod date against
//?          sched ship date+1  so h/overs can be scheduled
//?** 01/04/2010 LJB W288    For Seaboard Only:
//?    Add Access Limited flag to control the deadline departure
//?    date/time tests against warehouse control. This is used
//?    in Edit Load/Orders and Edit Scheduled Ship Date
//?** 11/16/2009 LJB #193  Display order type-sales (OR or TR)
//?** 09/30/2009 LJB E00495  Use Carr appt dt/tm to calc DDD/T, if entered
//?** 07/16/2009 RMC FP1054 display avail ship dates for each prod day
//?** 06/09/2009 RMC FP1054 allow updates only if OD Plan Prod sts = " "
//?** 05/26/2009 RMC FP1054 opt 22=Alloc first/last: for freezer CONVERTED
//?items only -- allow user to pick if inventory is to be alloc
//?first or last (after production). The Freezer default is FIRST,s/as fresh
//?** 04/29/2009 RMC FP1054 removed message usr from screen line 1;
//?        added Non ProdWhse line in ctl section
//?** 04/14/2009 RMC FP1054 opt 21=Override Freeze time
//?** 04/09/2009 RMC FP1054 auto unlock load if 7 days from ship date
//?  when doing an update option
//?** 04/07/2009 RMC FP1054 use header/footer with 130 long cmd key text
//?** 01/20/2009 RMC FP1054 use production whse for righthand box of data.
//?  For Sched as Ord option: chk user profile field before allowing
//?Remove from screen: 16=Ship Off Cut  AND  18=Sched As Ord
//?Added to screen:   19=Deallocate
//?Added to subfile: If ord dtl sch rcd doesnt exist, sched ship date=YLW;
//?        production numbers are now output for all. they cant chg any more.
//?        Chg Age Code to be cond on Output Only 3 usr. Sales can chg here
//?        And create load order change log rcd AGECDE
//?        If Release ord:  Crt load order change log rlsord
//?        If Dealloc ord:  Crt load order change log dlcord
//?        If Realloc ord:  Crt load order change log rlcord
//?Chg 14=Release to 14=Release Ln item option-- user can release line items
//? which will let them ship short.  the reallc process wont try to re-sched
//?*****
//?*****
//?** 11/19/2008 RMC S00562 allow PORKSCHE2 to update
//?*****
//?** 10/29/2008 RMC FP1054 display oe date/time and sales route in fold
//?*****
//?** 11/19/2007 LJB FP1251 The DDD/T routine resets the DDD/T fields to
//?** zeros if there is no Miles To Next Stop or Miles Between Cities
//?** record
//?** F90 & F91 are for IS personnel only (Not PORKSCHE)
//?*****
//?** Just a note - The PFS Load Header for Carlisle gets the export
//?** info from OHE not the Load Header
//?*****
//?** 09/01/2006 LJB L60831A  Pass Co# & Whse code from the CTL
//?** record to the Product Availability program
//?*****
//?05/12/04 SLM PKTR01 Multi-Company - Order Header TRG Remove Co
//?                                    from Logical View
//?*****
//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
//?*****
ENDDO;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.User Profile Code = JOB.*USER
LCL.User_Profile_Code = JOB.*USER;

//?11/02/09 PKD Allow Sched as Order -renamed to App WHS Restrict
// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

// WRK.User Code Model = LCL.User Code Model
WRK.User_Code_Model = LCL.User_Code_Model;

//?User Code Model
CASE;

// IF JOB.*USER is Rose - God
IF JOB.*USER = 'ISROSEM';

// OR JOB.*USER is Purva Droge
OR JOB.*USER = 'ISPURVAP';

// LCL.User Code Model = CND.Production Scheduling
LCL.User_Code_Model = 'PORKSCHE';

ENDIF;

//?User Code Model
CASE;

// IF LCL.User Code Model is Production Scheduling
IF LCL.User_Code_Model = 'PORKSCHE';

// OR LCL.User Code Model is Production Sched 2
OR LCL.User_Code_Model = 'PORKSCHE2';

// OR LCL.User Code Model is IS
OR LCL.User_Code_Model = 'ISBGUTI';

// OR LCL.User Code Model is Transportation 3
OR LCL.User_Code_Model = 'PORKTRAF3';

// OR LCL.User Code Model is TF Prod Scheduling
OR LCL.User_Code_Model = 'TFMODSCHE';

// OR LCL.User Code Model is Production Sched 5
OR LCL.User_Code_Model = 'PORKSCHE5';

// OR LCL.User Code Model is STF Prod Scheduling
OR LCL.User_Code_Model = 'SPMODSCHE';

//?User Code Model
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.User Code Model = CON.*BLANK
LCL.User_Code_Model = *BLANK;

ENDIF;

CASE;

// IF LCL.User Code Model is equal to blank
IF LCL.User_Code_Model = *BLANK;

// Call program Ext Verify User Auth  XF.
CALL PROGRAM(Ext Verify User Auth  XF) ('PUAYXFR');
PARAMETER(LCL.User_Profile_Code);
PARAMETER('SO');
PARAMETER(LCL.User_Approval_USR);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

ENDIF;

CASE;

// IF LCL.User Approval USR is Yes
IF LCL.User_Approval_USR = 'Y';

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

ENDIF;

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

//?** Set Access Limited for Edit Load/Orders & Edit SSD/Whse  W288
// PAR.Access Limited Sts USR = CND.yes
PAR.Access_Limited_Sts_USR = 'Y';

// LCL.Item Code = CON.*ZERO
LCL.Item_Code = *ZERO;

// LCL.Production Date = JOB.*Job date
LCL.Production_Date = JOB.*Job_date;

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

//?Format Command Key Text
// Retrieve message - 'F2=Fld/Unfld  F3=Exit  F4=Prompt+  F5=Refresh   F6=Crt Adj  F7=Previous   F8=
LCL.CMDKEY_Line_1_130_Char = RTVMSG(USR4138);

// Retrieve message - 'F15=Dsp Item Specs   F16=WW PA'
LCL.CMDKEY_Line_2_130_Char = RTVMSG(USR4139);

// Execute function Screen 132 Wide 2 CMDLN.
EXECUTE FUNCTION(Screen 132 Wide 2 CMDLN) TYPE(EXCUSRSRC) ('PNHBUFR');
PARAMETER(LCL.CMDKEY_Line_1_130_Char);
PARAMETER(LCL.CMDKEY_Line_2_130_Char);
{
 C                     MOVEL#IVIT1    ##VIT1
 C                     MOVEL#IVJT1    ##VJT1
}


//?USER: Initialize subfile control

//?FP1054
EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Production Date
DO;

CASE;

// IF LCL.Production Date USR LT JOB.*Job date
IF LCL.Production_Date_USR < JOB.*Job_date;

// LCL.Production Date USR = JOB.*Job date
LCL.Production_Date_USR = JOB.*Job_date;

ENDIF;

EXECUTE FUNCTION(Rtv ProdDte-6         RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1648632;
PARAMETER(CTL.Accounting_Company);
PARAMETER(LCL.Production_Date_USR);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.1
 WRK.Count_USR = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR is GT 6
 IF WRK.Count_USR > 6;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 //?Move Date & Day of Week
 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // PAR.USR Day 1 = DB1.Post to G/L Date
 PAR.USR_Day_1 = DB1.Post_to_G_L_Date;

 //?Move Date & Day of Week
 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // PAR.USR Day 2 = DB1.Post to G/L Date
 PAR.USR_Day_2 = DB1.Post_to_G_L_Date;

 //?Move Date & Day of Week
 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // PAR.USR Day 3 = DB1.Post to G/L Date
 PAR.USR_Day_3 = DB1.Post_to_G_L_Date;

 //?Move Date & Day of Week
 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 // PAR.USR Day 4 = DB1.Post to G/L Date
 PAR.USR_Day_4 = DB1.Post_to_G_L_Date;

 //?Move Date & Day of Week
 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 // PAR.USR Day 5 = DB1.Post to G/L Date
 PAR.USR_Day_5 = DB1.Post_to_G_L_Date;

 //?Move Date & Day of Week
 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 // PAR.USR Day 6 = DB1.Post to G/L Date
 PAR.USR_Day_6 = DB1.Post_to_G_L_Date;

 ENDIF;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 ENDIF;

}


ENDDO;

//?First Time
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Item Code = PAR.Item Code
CTL.Item_Code = PAR.Item_Code;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CTL.Item_Desc_DRV);
PARAMETER(CTL.Consumed_Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(LCL.Unit_Weight);
PARAMETER(WRK.Production_Date_Control);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

//?* Used for F9=All/Converted
// LCL.Select 1 or 2 = CND.One
LCL.Select_1_or_2 = 1;

//?* Used for F10=All/Hold
// LCL.Hold Order = CND.no
LCL.Hold_Order = 'N';

// LCL.USR Display 1 = CND.Yes
LCL.USR_Display_1 = 'Y';

ENDIF;

SET CURSOR;

//?FP1054 Init to zero
// CTL.Qty Std Prod 1 USR = CON.*ZERO
CTL.Qty_Std_Prod_1_USR = *ZERO;

// CTL.Qty Std Prod 2 USR = CON.*ZERO
CTL.Qty_Std_Prod_2_USR = *ZERO;

// CTL.Qty Std Prod 3 USR = CON.*ZERO
CTL.Qty_Std_Prod_3_USR = *ZERO;

// CTL.Qty Std Prod 4 USR = CON.*ZERO
CTL.Qty_Std_Prod_4_USR = *ZERO;

// CTL.Qty Std Prod 5 USR = CON.*ZERO
CTL.Qty_Std_Prod_5_USR = *ZERO;

// CTL.Qty Std Prod 6 USR = CON.*ZERO
CTL.Qty_Std_Prod_6_USR = *ZERO;

//?FP1054 Rtv base avail from production warehouse
EXECUTE FUNCTION(Rtv Base Availability RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1648124;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.Qty_Sched_Prod_1_USR);
PARAMETER(CTL.Qty_Sched_Prod_2_USR);
PARAMETER(CTL.Qty_Sched_Prod_3_USR);
PARAMETER(CTL.Qty_Sched_Prod_4_USR);
PARAMETER(CTL.Qty_Sched_Prod_5_USR);
PARAMETER(CTL.Qty_Sched_Prod_6_USR);
PARAMETER(CTL.Qty_Converted_1_USR);
PARAMETER(CTL.Qty_Converted_2_USR);
PARAMETER(CTL.Qty_Converted_3_USR);
PARAMETER(CTL.Qty_Converted_4_USR);
PARAMETER(CTL.Qty_Converted_5_USR);
PARAMETER(CTL.Qty_Converted_6_USR);
PARAMETER(CTL.Qty_Sched_Ord_1_USR);
PARAMETER(CTL.Qty_Sched_Ord_2_USR);
PARAMETER(CTL.Qty_Sched_Ord_3_USR);
PARAMETER(CTL.Qty_Sched_Ord_4_USR);
PARAMETER(CTL.Qty_Sched_Ord_5_USR);
PARAMETER(CTL.Qty_Sched_Ord_6_USR);
PARAMETER(CTL.Quantity_Avail_USR_1);
PARAMETER(CTL.Quantity_Avail_USR_2);
PARAMETER(CTL.Quantity_Avail_USR_3);
PARAMETER(CTL.Quantity_Avail_USR_4);
PARAMETER(CTL.Quantity_Avail_USR_5);
PARAMETER(CTL.Quantity_Avail_USR_6);
PARAMETER(CTL.Qty_Std_Prod_1_USR);
PARAMETER(CTL.Qty_Std_Prod_2_USR);
PARAMETER(CTL.Qty_Std_Prod_3_USR);
PARAMETER(CTL.Qty_Std_Prod_4_USR);
PARAMETER(CTL.Qty_Std_Prod_5_USR);
PARAMETER(CTL.Qty_Std_Prod_6_USR);
PARAMETER(CTL.Day_1_Inventory_50_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_1_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_2_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_3_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_4_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_5_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_6_USR);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.Unit Weight is Equal to zero
 IF PAR.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(LCL.Pieces_Per_Bag);
 PARAMETER(LCL.Bags_Per_Unit);
 PARAMETER(WRK.BLANK);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Unit Weight = PAR.Unit Weight
 LCL.Unit_Weight = PAR.Unit_Weight;

 // LCL.Piece Count Item = PAR.Piece Count Item
 LCL.Piece_Count_Item = PAR.Piece_Count_Item;

 // LCL.Pieces Per Bag = PAR.Pieces Per Bag
 LCL.Pieces_Per_Bag = PAR.Pieces_Per_Bag;

 // LCL.Bags Per Unit = PAR.Bags Per Unit
 LCL.Bags_Per_Unit = PAR.Bags_Per_Unit;

 ENDIF;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?QUIT:  Production Date > Usr Day 6
 CASE;

 // IF DB1.Production Date GT PAR.USR Day 6
 IF DB1.Production_Date > PAR.USR_Day_6;

 QUIT;

 ENDIF;

 //?SEL:  Schedule for Job Date
 CASE;

 // IF DB1.Production Date EQ JOB.*Job date
 IF DB1.Production_Date = JOB.*Job_date;

 CASE;

 // IF DB1.Production Type is Plan
 IF DB1.Production_Type = 'P';

 // OR DB1.Production Type is Schedule Saved in the am
 OR DB1.Production_Type = 'X';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?CLC:  Quantity Standard, Converted, Scheduled Orders
 CASE;

 // IF LCL.Piece Count Item is yes
 IF LCL.Piece_Count_Item = 'Y';

 CASE;

 // IF PAR.Production Date EQ PAR.USR Day 1
 IF PAR.Production_Date = PAR.USR_Day_1;

 // Quantity Inventory
 LCL.Day_1_Inventory_50_USR = ( ( DB1.PS_Pieces_Inv_On_Hand + DB1.PS_Pieces_Inv_Adj )
 - DB1.PS_Pieces_Inv_Allocated ) / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' ) 'H';

 ENDIF;

 // Quantity Standard
 LCL.Quantity_Standard_USR = DB1.PS_Pieces_Standard / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Planned:fp1054
 LCL.Quantity_Planned_USR = DB1.PS_Pieces_Planned_Prod / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 //?FP1054 add these together for display on the screen
 // LCL.Quantity Standard USR = LCL.Quantity Standard USR + LCL.Quantity Planned USR
 LCL.Quantity_Standard_USR = LCL.Quantity_Standard_USR + LCL.Quantity_Planned_USR;

 // Quantity Sched whse txfr
 LCL.Quantity_Sched_Whs_Tx_USR = DB1.PS_Pieces_Whs_Tfr_Adj / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Converted
 LCL.Quantity_Converted_USR = DB1.PS_Pieces_Converted / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Scheduled Orders
 LCL.Qty_Ordered_USR = DB1.PS_Pieces_Prod_Allocated / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 //?FP1054 also add ps pieces planned prod
 // Quantity Production
 LCL.Quantity_Production_USR = ( ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) + DB1.PS_Pieces_Planned_Prod ) / ( LCL.Pieces_Per_Bag                 +
 * LCL.Bags_Per_Unit );

 //?CLC:  Quantity Standard, Converted, Scheduled Orders
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 1
 IF DB1.Production_Date = PAR.USR_Day_1;

 // Quantity Inventory
 LCL.Day_1_Inventory_50_USR = ( ( DB1.PS_Weight_Inv_On_Hand + DB1.PS_Weight_Inv_Adj )
 - DB1.PS_Weight_Inv_Allocated ) / LCL.Unit_Weight 'H';

 ENDIF;

 // Quantity Standard
 LCL.Quantity_Standard_USR = DB1.PS_Weight_Standard / LCL.Unit_Weight;

 // Quantity Planned-fp1054
 LCL.Quantity_Planned_USR = DB1.PS_Weight_Planned_Prod / LCL.Unit_Weight;

 //?FP1054 add these together for display on the screen
 // LCL.Quantity Standard USR = LCL.Quantity Standard USR + LCL.Quantity Planned USR
 LCL.Quantity_Standard_USR = LCL.Quantity_Standard_USR + LCL.Quantity_Planned_USR;

 // Quantity Sched Whse Txfr
 LCL.Quantity_Sched_Whs_Tx_USR = DB1.PS_Weight_Whs_Tfr_Adj / LCL.Unit_Weight;

 // Quantity Converted
 LCL.Quantity_Converted_USR = DB1.PS_Weight_Converted / LCL.Unit_Weight;

 // Quantity Scheduled Orders
 LCL.Qty_Ordered_USR = DB1.PS_Weight_Prod_Allocated / LCL.Unit_Weight;

 //?FP1054 also add ps weight planned prod
 // Quantity production
 LCL.Quantity_Production_USR = ( ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) + DB1.PS_Weight_Planned_Prod ) / LCL.Unit_Weight;

 ENDIF;

 // Quantity Available
 LCL.Quantity_Avail_7_0_USR = ( ( LCL.Quantity_Standard_USR - LCL.Quantity_Converted_USR )
 - LCL.Qty_Ordered_USR ) - LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 1
 IF DB1.Production_Date = PAR.USR_Day_1;

 // PAR.Qty Sched Prod 1 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_1_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 1 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_1_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 1 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_1_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 1 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_1 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 1 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_1_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 1 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_1_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 2
 IF DB1.Production_Date = PAR.USR_Day_2;

 // PAR.Qty Sched Prod 2 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_2_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 2 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_2_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 2 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_2_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 2 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_2 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 2 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_2_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 2 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_2_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 3
 IF DB1.Production_Date = PAR.USR_Day_3;

 // PAR.Qty Sched Prod 3 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_3_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 3 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_3_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 3 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_3_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 3 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_3 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 3 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_3_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 3 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_3_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 4
 IF DB1.Production_Date = PAR.USR_Day_4;

 // PAR.Qty Sched Prod 4 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_4_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 4 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_4_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 4 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_4_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 4 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_4 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 4 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_4_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 4 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_4_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 5
 IF DB1.Production_Date = PAR.USR_Day_5;

 // PAR.Qty Sched Prod 5 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_5_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 5 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_5_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 5 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_5_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 5 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_5 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 5 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_5_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 5 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_5_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 6
 IF DB1.Production_Date = PAR.USR_Day_6;

 // PAR.Qty Sched Prod 6 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_6_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 6 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_6_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 6 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_6_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 6 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_6 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 6 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_6_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 6 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_6_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 ENDIF;

 ENDIF;

}


//?Rtv Base Availability
CASE;

// IF CTL.Item Code is Entered
IF CTL.Item_Code <> *ZERO;

// AND CTL.Warehouse Code is Warehouse Code not Blank
AND CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Base Availability RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1648124;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(CTL.Qty_Std_Prod_1_USR);
PARAMETER(CTL.Qty_Std_Prod_2_USR);
PARAMETER(CTL.Qty_Std_Prod_3_USR);
PARAMETER(CTL.Qty_Std_Prod_4_USR);
PARAMETER(CTL.Qty_Std_Prod_5_USR);
PARAMETER(CTL.Qty_Std_Prod_6_USR);
PARAMETER(CTL.Day_1_Inventory_50_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_1_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_2_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_3_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_4_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_5_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_6_USR);
PARAMETER(*ZERO);
PARAMETER(LCL.BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.Unit Weight is Equal to zero
 IF PAR.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(LCL.Pieces_Per_Bag);
 PARAMETER(LCL.Bags_Per_Unit);
 PARAMETER(WRK.BLANK);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Unit Weight = PAR.Unit Weight
 LCL.Unit_Weight = PAR.Unit_Weight;

 // LCL.Piece Count Item = PAR.Piece Count Item
 LCL.Piece_Count_Item = PAR.Piece_Count_Item;

 // LCL.Pieces Per Bag = PAR.Pieces Per Bag
 LCL.Pieces_Per_Bag = PAR.Pieces_Per_Bag;

 // LCL.Bags Per Unit = PAR.Bags Per Unit
 LCL.Bags_Per_Unit = PAR.Bags_Per_Unit;

 ENDIF;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?QUIT:  Production Date > Usr Day 6
 CASE;

 // IF DB1.Production Date GT PAR.USR Day 6
 IF DB1.Production_Date > PAR.USR_Day_6;

 QUIT;

 ENDIF;

 //?SEL:  Schedule for Job Date
 CASE;

 // IF DB1.Production Date EQ JOB.*Job date
 IF DB1.Production_Date = JOB.*Job_date;

 CASE;

 // IF DB1.Production Type is Plan
 IF DB1.Production_Type = 'P';

 // OR DB1.Production Type is Schedule Saved in the am
 OR DB1.Production_Type = 'X';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?CLC:  Quantity Standard, Converted, Scheduled Orders
 CASE;

 // IF LCL.Piece Count Item is yes
 IF LCL.Piece_Count_Item = 'Y';

 CASE;

 // IF PAR.Production Date EQ PAR.USR Day 1
 IF PAR.Production_Date = PAR.USR_Day_1;

 // Quantity Inventory
 LCL.Day_1_Inventory_50_USR = ( ( DB1.PS_Pieces_Inv_On_Hand + DB1.PS_Pieces_Inv_Adj )
 - DB1.PS_Pieces_Inv_Allocated ) / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' ) 'H';

 ENDIF;

 // Quantity Standard
 LCL.Quantity_Standard_USR = DB1.PS_Pieces_Standard / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Planned:fp1054
 LCL.Quantity_Planned_USR = DB1.PS_Pieces_Planned_Prod / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 //?FP1054 add these together for display on the screen
 // LCL.Quantity Standard USR = LCL.Quantity Standard USR + LCL.Quantity Planned USR
 LCL.Quantity_Standard_USR = LCL.Quantity_Standard_USR + LCL.Quantity_Planned_USR;

 // Quantity Sched whse txfr
 LCL.Quantity_Sched_Whs_Tx_USR = DB1.PS_Pieces_Whs_Tfr_Adj / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Converted
 LCL.Quantity_Converted_USR = DB1.PS_Pieces_Converted / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Scheduled Orders
 LCL.Qty_Ordered_USR = DB1.PS_Pieces_Prod_Allocated / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 //?FP1054 also add ps pieces planned prod
 // Quantity Production
 LCL.Quantity_Production_USR = ( ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) + DB1.PS_Pieces_Planned_Prod ) / ( LCL.Pieces_Per_Bag                 +
 * LCL.Bags_Per_Unit );

 //?CLC:  Quantity Standard, Converted, Scheduled Orders
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 1
 IF DB1.Production_Date = PAR.USR_Day_1;

 // Quantity Inventory
 LCL.Day_1_Inventory_50_USR = ( ( DB1.PS_Weight_Inv_On_Hand + DB1.PS_Weight_Inv_Adj )
 - DB1.PS_Weight_Inv_Allocated ) / LCL.Unit_Weight 'H';

 ENDIF;

 // Quantity Standard
 LCL.Quantity_Standard_USR = DB1.PS_Weight_Standard / LCL.Unit_Weight;

 // Quantity Planned-fp1054
 LCL.Quantity_Planned_USR = DB1.PS_Weight_Planned_Prod / LCL.Unit_Weight;

 //?FP1054 add these together for display on the screen
 // LCL.Quantity Standard USR = LCL.Quantity Standard USR + LCL.Quantity Planned USR
 LCL.Quantity_Standard_USR = LCL.Quantity_Standard_USR + LCL.Quantity_Planned_USR;

 // Quantity Sched Whse Txfr
 LCL.Quantity_Sched_Whs_Tx_USR = DB1.PS_Weight_Whs_Tfr_Adj / LCL.Unit_Weight;

 // Quantity Converted
 LCL.Quantity_Converted_USR = DB1.PS_Weight_Converted / LCL.Unit_Weight;

 // Quantity Scheduled Orders
 LCL.Qty_Ordered_USR = DB1.PS_Weight_Prod_Allocated / LCL.Unit_Weight;

 //?FP1054 also add ps weight planned prod
 // Quantity production
 LCL.Quantity_Production_USR = ( ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) + DB1.PS_Weight_Planned_Prod ) / LCL.Unit_Weight;

 ENDIF;

 // Quantity Available
 LCL.Quantity_Avail_7_0_USR = ( ( LCL.Quantity_Standard_USR - LCL.Quantity_Converted_USR )
 - LCL.Qty_Ordered_USR ) - LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 1
 IF DB1.Production_Date = PAR.USR_Day_1;

 // PAR.Qty Sched Prod 1 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_1_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 1 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_1_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 1 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_1_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 1 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_1 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 1 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_1_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 1 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_1_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 2
 IF DB1.Production_Date = PAR.USR_Day_2;

 // PAR.Qty Sched Prod 2 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_2_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 2 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_2_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 2 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_2_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 2 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_2 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 2 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_2_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 2 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_2_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 3
 IF DB1.Production_Date = PAR.USR_Day_3;

 // PAR.Qty Sched Prod 3 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_3_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 3 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_3_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 3 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_3_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 3 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_3 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 3 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_3_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 3 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_3_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 4
 IF DB1.Production_Date = PAR.USR_Day_4;

 // PAR.Qty Sched Prod 4 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_4_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 4 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_4_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 4 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_4_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 4 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_4 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 4 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_4_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 4 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_4_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 5
 IF DB1.Production_Date = PAR.USR_Day_5;

 // PAR.Qty Sched Prod 5 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_5_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 5 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_5_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 5 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_5_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 5 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_5 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 5 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_5_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 5 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_5_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 6
 IF DB1.Production_Date = PAR.USR_Day_6;

 // PAR.Qty Sched Prod 6 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_6_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 6 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_6_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 6 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_6_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 6 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_6 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 6 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_6_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 6 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_6_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 ENDIF;

 ENDIF;

}


ENDIF;

//?------------------------------------------------------
//?FP1054   Get Avail ship dates per warehouse -- 7/16/09
//?Get Avail ship dates per warehouse
CASE;

// IF CTL.Warehouse Code is Blanks
IF CTL.Warehouse_Code = *BLANK;

EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
PARAMETER(CTL.Production_Warehouse);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(LCL.Warehouse_Std_Chill_Time);
PARAMETER(LCL.Warehouse_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Avail ship dates per warehouse
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(LCL.Warehouse_Std_Chill_Time);
PARAMETER(LCL.Warehouse_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1304403;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(LCL.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Chilling Time
CASE;

// IF LCL.Warehouse Std Chill Time is yes
IF LCL.Warehouse_Std_Chill_Time = 'Y';

// LCL.Chilling Time USR = LCL.Warehouse Chill Time
LCL.Chilling_Time_USR = LCL.Warehouse_Chill_Time;

// LCL.Chilling Time USR = LCL.Chilling Time USR - CON.1
LCL.Chilling_Time_USR = LCL.Chilling_Time_USR - 1;

//?Chilling Time
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Chilling Time USR = LCL.Fresh Chilling Time
LCL.Chilling_Time_USR = LCL.Fresh_Chilling_Time;

ENDIF;

// Call program Clc PA Avail Shp Dts  XF.
CALL PROGRAM(Clc PA Avail Shp Dts  XF) ('PNKRXFR');
PARAMETER(CTL.Accounting_Company);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.Avail_Ship_Date_1_USR);
PARAMETER(CTL.Avail_Ship_Date_2_USR);
PARAMETER(CTL.Avail_Ship_Date_3_USR);
PARAMETER(CTL.Avail_Ship_Date_4_USR);
PARAMETER(CTL.Avail_Ship_Date_5_USR);
PARAMETER(CTL.Avail_Ship_Date_6_USR);
PARAMETER(LCL.USR_Day_7);
PARAMETER(LCL.USR_Day_8);
PARAMETER(LCL.Avail_Ship_Date_7_USR);
PARAMETER(LCL.Avail_Ship_Date_8_USR);

//?------------------------------------------------------
//?Check if Adjustments exists for the Base Item
DO;

//?FP1054 use ctl.prod warehouse instead of  ctl.warehouse code
EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Display_1);
PARAMETER(CTL.Base_Adj_Sts_1_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Display_2);
PARAMETER(CTL.Base_Adj_Sts_2_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Display_3);
PARAMETER(CTL.Base_Adj_Sts_3_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Display_4);
PARAMETER(CTL.Base_Adj_Sts_4_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Display_5);
PARAMETER(CTL.Base_Adj_Sts_5_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.USR_Display_6);
PARAMETER(CTL.Base_Adj_Sts_6_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


ENDDO;

// LCL.Load ID = CTL.Load ID
LCL.Load_ID = CTL.Load_ID;

//?11/13/17 DN R11918-Change Block Order Flag to input capable.
// LCL.Block Order Flag = CTL.Block Order Flag
LCL.Block_Order_Flag = CTL.Block_Order_Flag;

// LCL.Load Status = CTL.Load Status
LCL.Load_Status = CTL.Load_Status;

// LCL.Sel Value 1 USR = CTL.Sel Value 1 USR
LCL.Sel_Value_1_USR = CTL.Sel_Value_1_USR;

// LCL.Sel Value 2 USR = CTL.Sel Value 2 USR
LCL.Sel_Value_2_USR = CTL.Sel_Value_2_USR;

// LCL.Sel Value 3 USR = CTL.Sel Value 3 USR
LCL.Sel_Value_3_USR = CTL.Sel_Value_3_USR;

// LCL.Sel Value 4 USR = CTL.Sel Value 4 USR
LCL.Sel_Value_4_USR = CTL.Sel_Value_4_USR;

// LCL.Sel Value 5 USR = CTL.Sel Value 5 USR
LCL.Sel_Value_5_USR = CTL.Sel_Value_5_USR;

// LCL.Sel Value 6 USR = CTL.Sel Value 6 USR
LCL.Sel_Value_6_USR = CTL.Sel_Value_6_USR;

//?All/Converted Text
CASE;

// IF LCL.Select 1 or 2 is Two
IF LCL.Select_1_or_2 = '2';

// CTL.Text 9                USR = CON.CONVERTED
CTL.Text_9_USR = 'CONVERTED';

//?All/Converted Text
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Text 9                USR = CON.*BLANK
CTL.Text_9_USR = *BLANK;

ENDIF;

//?All/Hold Text
CASE;

// IF LCL.Hold Order is yes
IF LCL.Hold_Order = 'Y';

// CTL.Text USR 4 = CON.HOLD
CTL.Text_USR_4 = 'HOLD';

//?All/Hold Text
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Text USR 4 = CON.*BLANK
CTL.Text_USR_4 = *BLANK;

ENDIF;

//?Status Flag 17 Y/N
CASE;

// IF LCL.Status Flag 17 Y/N is Yes
IF LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Maintain Subfil PosUS.
EXECUTE FUNCTION(SFL Maintain Subfil PosUS) TYPE(EXCUSRSRC) ('PNG7UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           W1SFRC    IFGT *ZERO
 C                     Z-ADDW1SFRC    ##SFRC
 C                     Z-ADD##SFRC    @#SFRC
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


// LCL.Status Flag 17 Y/N = CND.No
LCL.Status_Flag_17_Y_N = 'N';

ENDIF;

//?E14728 - Determine Last Allocation Date
//?Same logic used in the PS Prod Schedule - UPS Bld Sched/Plan PV
//?PDRRPVR function.
//?Set Up Kill & Production Date / Kill & Production Date Ranges
DO;

//?Calculate From and To Kill Dates
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Kill Date CUR USR = JOB.*Job date
PAR.Kill_Date_CUR_USR = JOB.*Job_date;

// PAR.Kill Date PRV USR = PAR.Kill Date CUR USR + CON.-1 *DAYS
PAR.Kill_Date_PRV_USR = DATEINCR(PAR.Kill_Date_CUR_USR '-1' 'DY' 1111111 'NONE' 'N' 1);

// PAR.Kill Date = PAR.Kill Date PRV USR
PAR.Kill_Date = PAR.Kill_Date_PRV_USR;

// PAR.Kill Date 360 RGF = PAR.Kill Date + CON.1 *DAYS
PAR.Kill_Date_360_RGF = DATEINCR(PAR.Kill_Date 1 'DY' 1111111 'NONE' 'N' 1);

//?S14774 JJH 04/03/19 - Get alloc nbr days in system values-ALLOCDAYS
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1510877;
PARAMETER('ALLOCDAYS');
PARAMETER(LCL.*Duration_factor);
{
 //?USER: Process Data record

 // PAR.System Value Numeric = DB1.System Value Numeric
 PAR.System_Value_Numeric = DB1.System_Value_Numeric;

 QUIT;

}


CASE;

// IF LCL.*Duration (factor) is EQ Zero
IF LCL.*Duration_factor = *ZERO;

// LCL.*Duration (factor) = CON.40
LCL.*Duration_factor = 40;

ENDIF;

EXECUTE FUNCTION(RTV KillDay Dte-Durtn  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1369299;
PARAMETER(CTL.Accounting_Company);
PARAMETER(PAR.Kill_Date_360_RGF);
PARAMETER(LCL.*Duration_factor);
PARAMETER(PAR.Kill_Date_360_RGT);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.*ZERO
 WRK.Count_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR EQ PAR.*Duration (factor)
 IF WRK.Count_USR = PAR.*Duration_factor;

 // PAR.*DATE = DB1.Post to G/L Date
 PAR.*DATE = DB1.Post_to_G_L_Date;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


// PAR.Date                  USR = PAR.Kill Date
PAR.Date_USR = PAR.Kill_Date;

// PAR.Kill Date 440 RGF = PAR.Kill Date 360 RGF
PAR.Kill_Date_440_RGF = PAR.Kill_Date_360_RGF;

// PAR.Kill Date 440 RGT = PAR.Kill Date 360 RGT
PAR.Kill_Date_440_RGT = PAR.Kill_Date_360_RGT;

// PAR.Kill Date 960 RGF = PAR.Kill Date 360 RGF
PAR.Kill_Date_960_RGF = PAR.Kill_Date_360_RGF;

// PAR.Kill Date 960 RGT = PAR.Kill Date 360 RGT
PAR.Kill_Date_960_RGT = PAR.Kill_Date_360_RGT;

ENDIF;

//?Calculate From and To Production Dates
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Production Date = PAR.Kill Date
PAR.Production_Date = PAR.Kill_Date;

// PAR.Production Date 360 RGF = PAR.Kill Date 360 RGF
PAR.Production_Date_360_RGF = PAR.Kill_Date_360_RGF;

// PAR.Production Date 360 RGT = PAR.Kill Date 360 RGT
PAR.Production_Date_360_RGT = PAR.Kill_Date_360_RGT;

// PAR.Production Date 440 RGF = PAR.Production Date 360 RGF
PAR.Production_Date_440_RGF = PAR.Production_Date_360_RGF;

// PAR.Production Date 440 RGT = PAR.Production Date 360 RGT
PAR.Production_Date_440_RGT = PAR.Production_Date_360_RGT;

// PAR.Production Date 960 RGF = PAR.Production Date 360 RGF
PAR.Production_Date_960_RGF = PAR.Production_Date_360_RGF;

// PAR.Production Date 960 RGT = PAR.Production Date 360 RGT
PAR.Production_Date_960_RGT = PAR.Production_Date_360_RGT;

ENDIF;

ENDDO;

//?USER: Initialize subfile record from DBF record

// RCD.Quantity Ordered 5.0 USR = RCD.Quantity Ordered
RCD.Quantity_Ordered_5_0_USR = RCD.Quantity_Ordered;

// RCD.Quantity Sched 5.0 USR = RCD.Quantity Scheduled
RCD.Quantity_Sched_5_0_USR = RCD.Quantity_Scheduled;

// RCD.USR Age Code = RCD.Age Code
RCD.USR_Age_Code = RCD.Age_Code;

EXECUTE FUNCTION(Rtv Load/LdSts        IF) TYPE(EXCINTFUN)                      AC1648393;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Order_in_Use);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER(RCD.Block_Order_Flag);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?Execute internal function

 //?** 05/19/16   RMC E4119  remove live with tpm check
 EXECUTE FUNCTION(RTV LdId/OrdDt/ShpDt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1648395;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Type_Sales);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Order_Date);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.Credit_Hold);
 PARAMETER(PAR.Production_Hold);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 PARAMETER(LCL.Load_ID);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Billing_Activity_Type);
 PARAMETER(PAR.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Load ID = LCL.Load ID
 PAR.Load_ID = LCL.Load_ID;

 CASE;

 // IF LCL.Load ID is NE Blank
 IF LCL.Load_ID <> *ZERO;

 EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
 PARAMETER(LCL.Load_ID);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Load_Acceptance_Flag);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


EXECUTE FUNCTION(RTV Sales Route/OE Dt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1905592;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Time_of_Original_Entry);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?ddd/t
CASE;

// IF RCD.Deadline Depart Date LH is not entered
IF RCD.Deadline_Depart_Date_LH = *ZERO;

// RCD.Deadline Depart Date LH = LCL.Deadline Depart Date
RCD.Deadline_Depart_Date_LH = LCL.Deadline_Depart_Date;

// RCD.Deadline Depart Time LH = LCL.Deadline Departure Time
RCD.Deadline_Depart_Time_LH = LCL.Deadline_Departure_Time;

ENDIF;

//?* Load ID is hidden on both .ctl and .rcd
//?SEL:  Load ID
CASE;

// IF CTL.Load ID is NE Blank
IF CTL.Load_ID <> *ZERO;

CASE;

// IF RCD.Load ID NE CTL.Load ID
IF RCD.Load_ID <> CTL.Load_ID;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Block Order Flag - 11/13/17 DN R11918-Chg to input capable.
CASE;

// IF CTL.Block Order Flag is *Blank
IF CTL.Block_Order_Flag = *BLANK;

//?SEL:  Block Order Flag - 11/13/17 DN R11918-Chg to input capable.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Block Order Flag NE CTL.Block Order Flag
IF RCD.Block_Order_Flag <> CTL.Block_Order_Flag;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Load Status
CASE;

// IF CTL.Load Status is *Blank
IF CTL.Load_Status = *BLANK;

//?SEL:  Load Status
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Load Status NE CTL.Load Status
IF RCD.Load_Status <> CTL.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Order Type - Sales    - only sel "OR" FP1054
CASE;

// IF RCD.Order Type - Sales is Regular Order
IF RCD.Order_Type_Sales = 'OR';

//?SEL:  Order Type - Sales    - only sel "OR" FP1054
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Order Type - Sales is Transfer Order
IF RCD.Order_Type_Sales = 'TR';

// AND RCD.OD Production Plan Sts is Yes
AND RCD.OD_Production_Plan_Sts = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  All/Converted Item Toggle
CASE;

// IF LCL.Select 1 or 2 is One
IF LCL.Select_1_or_2 = '1';

//?SEL:  All/Converted Item Toggle
// IF LCL.Select 1 or 2 is Two
IF LCL.Select_1_or_2 = '2';

CASE;

// IF DB1.Item Code EQ DB1.Consumed Item Code
IF DB1.Item_Code = DB1.Consumed_Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Record Selected
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Order Prod Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1648127;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(RCD.Qty_Sched_Ord_6_USR);
PARAMETER(RCD.OD_Added_to_Sched_Today);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Production
 CASE;

 // IF DB1.OD Production Date EQ PAR.USR Day 1
 IF DB1.OD_Production_Date = PAR.USR_Day_1;

 // PAR.Qty Sched Ord 1 USR = DB1.OD Quantity Scheduled
 PAR.Qty_Sched_Ord_1_USR = DB1.OD_Qty_Cnsmd_Pieces_Sched;

 //?Production
 // IF DB1.OD Production Date EQ PAR.USR Day 2
 IF DB1.OD_Production_Date = PAR.USR_Day_2;

 // PAR.Qty Sched Ord 2 USR = DB1.OD Quantity Scheduled
 PAR.Qty_Sched_Ord_2_USR = DB1.OD_Qty_Cnsmd_Pieces_Sched;

 //?Production
 // IF DB1.OD Production Date EQ PAR.USR Day 3
 IF DB1.OD_Production_Date = PAR.USR_Day_3;

 // PAR.Qty Sched Ord 3 USR = DB1.OD Quantity Scheduled
 PAR.Qty_Sched_Ord_3_USR = DB1.OD_Qty_Cnsmd_Pieces_Sched;

 //?Production
 // IF DB1.OD Production Date EQ PAR.USR Day 4
 IF DB1.OD_Production_Date = PAR.USR_Day_4;

 // PAR.Qty Sched Ord 4 USR = DB1.OD Quantity Scheduled
 PAR.Qty_Sched_Ord_4_USR = DB1.OD_Qty_Cnsmd_Pieces_Sched;

 //?Production
 // IF DB1.OD Production Date EQ PAR.USR Day 5
 IF DB1.OD_Production_Date = PAR.USR_Day_5;

 // PAR.Qty Sched Ord 5 USR = DB1.OD Quantity Scheduled
 PAR.Qty_Sched_Ord_5_USR = DB1.OD_Qty_Cnsmd_Pieces_Sched;

 //?Production
 // IF DB1.OD Production Date EQ PAR.USR Day 6
 IF DB1.OD_Production_Date = PAR.USR_Day_6;

 // PAR.Qty Sched Ord 6 USR = DB1.OD Quantity Scheduled
 PAR.Qty_Sched_Ord_6_USR = DB1.OD_Qty_Cnsmd_Pieces_Sched;

 ENDIF;

 // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Scheduled
 PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
 + DB1.OD_Qty_Cnsmd_Pieces_Sched;

 // PAR.OD Quantity Inv Sched = PAR.OD Quantity Inv Sched + DB1.OD Quantity Inv Sched
 PAR.OD_Quantity_Inv_Sched = PAR.OD_Quantity_Inv_Sched + DB1.OD_Quantity_Inv_Sched;

}


//?Hide Normal processing
CASE;

// IF RCD.OD Production Plan Sts is Yes
IF RCD.OD_Production_Plan_Sts = *BLANK;

// LCL.Date From             USR = JOB.*Job date + CON.-3 *DAYS
LCL.Date_From_USR = DATEINCR(JOB.*Job_date '-3' 'DY' 1111111 'NONE' 'N' 1);

//?REQ   Ship Date display in YLW if order older than 3 days 8/23/19 RMC
CASE;

// IF RCD.Requested Ship Date LT LCL.Date From             USR
IF RCD.Requested_Ship_Date < LCL.Date_From_USR;

// RCD.Record Found -OrdDtlUSR = CND.Record Not Found
RCD.Record_Found_OrdDtlUSR = 'N';

//?REQ   Ship Date display in YLW if order older than 3 days 8/23/19 RMC
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Record Found -OrdDtlUSR = CND.Record Found
RCD.Record_Found_OrdDtlUSR = 'Y';

ENDIF;

//?4/15/09 was passing in ctl.warehouse code
//?fp1309
EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(RCD.Fresh_Chilling_Time);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(RCD.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Warehouse_Location);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(RTV Warehous Inv ChillRT) TYPE(RTVOBJ) FILE(CAADREP)           AC2048609;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.WHS_Inventory_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Warehouse Std Chill Time is yes
IF RCD.Warehouse_Std_Chill_Time = 'Y';

//?RMC 10/2/19 added S15557
// LCL.Chill Time USR = RCD.WHS Inventory Chill Time
LCL.Chill_Time_USR = RCD.WHS_Inventory_Chill_Time;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Chilling Time USR = RCD.Fresh Chilling Time
LCL.Chilling_Time_USR = RCD.Fresh_Chilling_Time;

ENDIF;

//?RMC 8/23/19  use req ship date instead of scheduled ship date
// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Production_Date_RGT);

// RCD.Qty Sched Prod 1 USR = RCD.Qty Sched Ord 1 USR
RCD.Qty_Sched_Prod_1_USR = RCD.Qty_Sched_Ord_1_USR;

// RCD.Qty Sched Prod 2 USR = RCD.Qty Sched Ord 2 USR
RCD.Qty_Sched_Prod_2_USR = RCD.Qty_Sched_Ord_2_USR;

// RCD.Qty Sched Prod 3 USR = RCD.Qty Sched Ord 3 USR
RCD.Qty_Sched_Prod_3_USR = RCD.Qty_Sched_Ord_3_USR;

// RCD.Qty Sched Prod 4 USR = RCD.Qty Sched Ord 4 USR
RCD.Qty_Sched_Prod_4_USR = RCD.Qty_Sched_Ord_4_USR;

// RCD.Qty Sched Prod 5 USR = RCD.Qty Sched Ord 5 USR
RCD.Qty_Sched_Prod_5_USR = RCD.Qty_Sched_Ord_5_USR;

// RCD.Qty Sched Prod 6 USR = RCD.Qty Sched Ord 6 USR
RCD.Qty_Sched_Prod_6_USR = RCD.Qty_Sched_Ord_6_USR;

// RCD.Qty 5.0 USR = RCD.Inv Total             USR
RCD.Qty_5_0_USR = RCD.Inv_Total_USR;

// RCD.Qty Prod Adj Hold 1 USR = RCD.Qty Prod Adjusted 1 USR
RCD.Qty_Prod_Adj_Hold_1_USR = RCD.Qty_Prod_Adjusted_1_USR;

// RCD.Qty Prod Adj Hold 2 USR = RCD.Qty Prod Adjusted 2 USR
RCD.Qty_Prod_Adj_Hold_2_USR = RCD.Qty_Prod_Adjusted_2_USR;

// RCD.Qty Prod Adj Hold 3 USR = RCD.Qty Prod Adjusted 3 USR
RCD.Qty_Prod_Adj_Hold_3_USR = RCD.Qty_Prod_Adjusted_3_USR;

// RCD.Qty Prod Adj Hold 4 USR = RCD.Qty Prod Adjusted 4 USR
RCD.Qty_Prod_Adj_Hold_4_USR = RCD.Qty_Prod_Adjusted_4_USR;

// RCD.Qty Prod Adj Hold 5 USR = RCD.Qty Prod Adjusted 5 USR
RCD.Qty_Prod_Adj_Hold_5_USR = RCD.Qty_Prod_Adjusted_5_USR;

// RCD.Qty Prod Adj Hold 6 USR = RCD.Qty Prod Adjusted 6 USR
RCD.Qty_Prod_Adj_Hold_6_USR = RCD.Qty_Prod_Adjusted_6_USR;

// Quantity Variance
RCD.ODS_Quantity_Short = ( RCD.Production_USR + RCD.Inv_Total_USR ) - RCD.Quantity_Ordered;

CASE;

// IF RCD.Record Found -OrdDtlUSR is Record Found
IF RCD.Record_Found_OrdDtlUSR = 'Y';

//?RI:  Order Number
CASE;

// IF RCD.ODS Quantity Short is NE Zero
IF RCD.ODS_Quantity_Short <> *ZERO;

CASE;

// IF RCD.Released by User Sts Y/N is yes
IF RCD.Released_by_User_Sts_Y_N = 'Y';

//?if user has released the line, dont show short qty or change to RED
// RCD.Reverse Image Flag USR = CND.No
RCD.Reverse_Image_Flag_USR = 'N';

// RCD.ODS Quantity Short = CON.*ZERO
RCD.ODS_Quantity_Short = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

ENDIF;

//?RI:  Order Number
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Reverse Image Flag USR = CND.No
RCD.Reverse_Image_Flag_USR = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?Short  and Prod Hold (RED)
CASE;

// IF RCD.ODS Quantity Short is NE Zero
IF RCD.ODS_Quantity_Short <> *ZERO;

// AND RCD.Production Hold is Yes
AND RCD.Production_Hold = 'Y';

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

//?Short  and Prod Hold (RED)
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Reverse Image Flag USR = CND.No
RCD.Reverse_Image_Flag_USR = 'N';

// RCD.ODS Quantity Short = CON.*ZERO
RCD.ODS_Quantity_Short = *ZERO;

ENDIF;

ENDIF;

//?Hide Normal processing
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Production            USR = DB1.Quantity Scheduled
RCD.Production_USR = DB1.Quantity_Scheduled;

ENDIF;

//?CLR:  Item Code
CASE;

// IF LCL.Item Code NE RCD.Item Code
IF LCL.Item_Code <> RCD.Item_Code;

CASE;

// IF LCL.USR Display 1 is Yes
IF LCL.USR_Display_1 = 'Y';

// RCD.USR Display 1 = CND.No
RCD.USR_Display_1 = 'N';

// LCL.USR Display 1 = CND.No
LCL.USR_Display_1 = 'N';

// IF LCL.USR Display 1 is No
IF LCL.USR_Display_1 = 'N';

// RCD.USR Display 1 = CND.Yes
RCD.USR_Display_1 = 'Y';

// LCL.USR Display 1 = CND.Yes
LCL.USR_Display_1 = 'Y';

ENDIF;

// LCL.Item Code = RCD.Item Code
LCL.Item_Code = RCD.Item_Code;

//?CLR:  Item Code
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Display 1 = LCL.USR Display 1
RCD.USR_Display_1 = LCL.USR_Display_1;

ENDIF;

//?Load ID
CASE;

// IF RCD.Load ID is Blank
IF RCD.Load_ID = *ZERO;

// RCD.Pick Status USR = CND.Not Picked
RCD.Pick_Status_USR = 'N';

//?Load ID
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Pick_Status_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Pick Status USR = CND.Not Picked
 PAR.Pick_Status_USR = 'N';

 //?USER: Process Data record

 // PAR.Pick Status USR = CND.Picked
 PAR.Pick_Status_USR = 'Y';

 QUIT;

}


ENDIF;

ENDIF;

//?SEL:  Production Date
CASE;

// IF CTL.Sel Value 1 USR is Select
IF CTL.Sel_Value_1_USR = 'X';

CASE;

// IF RCD.Qty Sched Ord 1 USR is EQ Zero
IF RCD.Qty_Sched_Ord_1_USR = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Production Date
// IF CTL.Sel Value 2 USR is Select
IF CTL.Sel_Value_2_USR = 'X';

CASE;

// IF RCD.Qty Sched Ord 2 USR is EQ Zero
IF RCD.Qty_Sched_Ord_2_USR = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Production Date
// IF CTL.Sel Value 3 USR is Select
IF CTL.Sel_Value_3_USR = 'X';

CASE;

// IF RCD.Qty Sched Ord 3 USR is EQ Zero
IF RCD.Qty_Sched_Ord_3_USR = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Production Date
// IF CTL.Sel Value 4 USR is Select
IF CTL.Sel_Value_4_USR = 'X';

CASE;

// IF RCD.Qty Sched Ord 4 USR is EQ Zero
IF RCD.Qty_Sched_Ord_4_USR = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Production Date
// IF CTL.Sel Value 5 USR is Select
IF CTL.Sel_Value_5_USR = 'X';

CASE;

// IF RCD.Qty Sched Ord 5 USR is EQ Zero
IF RCD.Qty_Sched_Ord_5_USR = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Production Date
// IF CTL.Sel Value 6 USR is Select
IF CTL.Sel_Value_6_USR = 'X';

CASE;

// IF RCD.Qty Sched Ord 6 USR is EQ Zero
IF RCD.Qty_Sched_Ord_6_USR = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?FP1054 - output for all now
//?usr update flag
CASE;

// IF RCD.USR Update Flag is Yes
IF RCD.USR_Update_Flag = 'Y';

//?usr update flag
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Update Flag = CND.No
RCD.USR_Update_Flag = *BLANK;

// RCD.Output Only 1 USR = CND.yes
RCD.Output_Only_1_USR = 'Y';

SET CURSOR;

ENDIF;

// RCD.Output Only 2 USR = CND.yes
RCD.Output_Only_2_USR = 'Y';

//?OUTPUT:  Sched Qty & Adj Qty (User Model Code = Blank)
CASE;

// IF LCL.User Code Model is equal to blank
IF LCL.User_Code_Model = *BLANK;

// AND LCL.User Approval USR is No
AND LCL.User_Approval_USR = 'N';

//?Scheduled Quantity
// RCD.Output Only 1 USR = CND.yes
RCD.Output_Only_1_USR = 'Y';

//?Adjustment Quantity
// RCD.Output Only 2 USR = CND.yes
RCD.Output_Only_2_USR = 'Y';

ENDIF;

//?OUTPUT:  Sched Qty (Load Status = Shipped or Invoiced)
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// OR RCD.Pick Status USR is Picked
OR RCD.Pick_Status_USR = 'Y';

// OR RCD.Order in Use is yes
OR RCD.Order_in_Use = 'Y';

// OR RCD.Event Code is Picked Thru History
OR RCD.Event_Code >= '03';
AND RCD.Event_Code <= '07';

// OR RCD.OD Production Plan Sts is No
OR RCD.OD_Production_Plan_Sts = 'N';

//?Scheduled Quantity
// RCD.Output Only 1 USR = CND.yes
RCD.Output_Only_1_USR = 'Y';

//?Age code - it was on output only 1 usr - now on output only 3 usr
// RCD.Output Only 3 USR = CND.yes
RCD.Output_Only_3_USR = 'Y';

ENDIF;

//?qty sched vs. qty ord
CASE;

// IF RCD.Quantity Scheduled GT RCD.Quantity Ordered
IF RCD.Quantity_Scheduled > RCD.Quantity_Ordered;

// RCD.Extra Status 1 = CND.Yes
RCD.Extra_Status_1 = 'Y';

//?qty sched vs. qty ord
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Extra Status 1 = CND.Blank
RCD.Extra_Status_1 = *BLANK;

ENDIF;

//?highlight age days  if there is a override production dates
CASE;

// IF DB1.Production Ovr AgeDte Fr is not equal zero
IF DB1.Production_Ovr_AgeDte_Fr <> *ZERO;

// RCD.Override Age Dates StsUsr = CND.Age Dates are Entered
RCD.Override_Age_Dates_StsUsr = 'O';

//?highlight age days  if there is a override production dates
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Override Age Dates StsUsr = CND.No Override Age Dates
RCD.Override_Age_Dates_StsUsr = *BLANK;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// LCL.Status Flag 17 Y/N = CND.No
LCL.Status_Flag_17_Y_N = 'N';

// LCL.Error Status = CND.no
LCL.Error_Status = 'N';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F6=Create Adjustments
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

CASE;

// IF LCL.User Code Model is equal to blank
IF LCL.User_Code_Model = *BLANK;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Prod Adjustments  DF.
CALL PROGRAM(Edt Prod Adjustments  DF) ('PORWDFR');
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Item_Code);

ENDIF;

ENDIF;

//?F7=Previous
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

EXECUTE FUNCTION(CLC Inc/Dec Date PrdDt IF) TYPE(EXCINTFUN)                     AC1649084;
PARAMETER(LCL.Production_Date_USR);
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.USR_Day_1);
PARAMETER('-6');
{
 //?Execute internal function

 CASE;

 // IF PAR.*Duration (factor) is LT Zero
 IF PAR.*Duration_factor < *ZERO;

 // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
 WRK.*Duration_factor = PAR.*Duration_factor * -1;

 EXECUTE FUNCTION(CLC Date (desc) PrdDte RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1649087;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(WRK.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // OR DB1.Production Day Status is no
  OR DB1.Production_Day_Status = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is GT Zero
 IF PAR.*Duration_factor > *ZERO;

 EXECUTE FUNCTION(CLC Date (asce) PrdDte RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1649088;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // OR DB1.Production Day Status is no
  OR DB1.Production_Day_Status = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is EQ Zero
 IF PAR.*Duration_factor = *ZERO;

 // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
 PAR.*Date1_ending = PAR.*Date2_beginning;

 ENDIF;

}


// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F8=Next
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

EXECUTE FUNCTION(CLC Inc/Dec Date PrdDt IF) TYPE(EXCINTFUN)                     AC1649084;
PARAMETER(LCL.Production_Date_USR);
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.USR_Day_1);
PARAMETER(6);
{
 //?Execute internal function

 CASE;

 // IF PAR.*Duration (factor) is LT Zero
 IF PAR.*Duration_factor < *ZERO;

 // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
 WRK.*Duration_factor = PAR.*Duration_factor * -1;

 EXECUTE FUNCTION(CLC Date (desc) PrdDte RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1649087;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(WRK.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // OR DB1.Production Day Status is no
  OR DB1.Production_Day_Status = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is GT Zero
 IF PAR.*Duration_factor > *ZERO;

 EXECUTE FUNCTION(CLC Date (asce) PrdDte RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1649088;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // OR DB1.Production Day Status is no
  OR DB1.Production_Day_Status = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is EQ Zero
 IF PAR.*Duration_factor = *ZERO;

 // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
 PAR.*Date1_ending = PAR.*Date2_beginning;

 ENDIF;

}


// LCL.Status Flag 17 Y/N = CND.Yes
LCL.Status_Flag_17_Y_N = 'Y';

// Execute function SFL Save subfile pos   US.
EXECUTE FUNCTION(SFL Save subfile pos   US) TYPE(EXCUSRSRC) ('PNG8UFR');
{
 C*   MAINTAIN SUBFILE POSITION WHERE POSSIBLE
 C           ##SFRC    IFGT *ZERO
 C                     Z-ADD##SFRC    W1SFRC  40
 C                     Z-ADD##SFRC    W0RR0
 C                     END
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F9=All/Converted Toggle
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

CASE;

// IF LCL.Select 1 or 2 is One
IF LCL.Select_1_or_2 = '1';

// LCL.Select 1 or 2 = CND.Two
LCL.Select_1_or_2 = 2;

// IF LCL.Select 1 or 2 is Two
IF LCL.Select_1_or_2 = '2';

// LCL.Select 1 or 2 = CND.One
LCL.Select_1_or_2 = 1;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F10=All/Hold
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF LCL.Hold Order is blank
IF LCL.Hold_Order = *BLANK;

// LCL.Hold Order = CND.yes
LCL.Hold_Order = 'Y';

// IF LCL.Hold Order is yes
IF LCL.Hold_Order = 'Y';

// LCL.Hold Order = CND.blank
LCL.Hold_Order = *BLANK;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F11=Clear
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// CTL.Item Code = CON.*ZERO
CTL.Item_Code = *ZERO;

//?RMC 8/23/19  use req ship date instead of scheduled ship date
// CTL.Requested Ship Date = CON.*ZERO
CTL.Requested_Ship_Date = *ZERO;

// CTL.Scheduled Ship Date = CON.*ZERO
CTL.Scheduled_Ship_Date = *ZERO;

// CTL.Deadline Depart Date LH = CON.*ZERO
CTL.Deadline_Depart_Date_LH = *ZERO;

// CTL.Order Number = CON.*ZERO
CTL.Order_Number = *ZERO;

// CTL.Load ID = CON.*ZERO
CTL.Load_ID = *ZERO;

// CTL.Block Order Flag = CND.*Blank
CTL.Block_Order_Flag = *BLANK;

// CTL.Load Status = CND.*Blank
CTL.Load_Status = *BLANK;

// CTL.Sel Value 1 USR = CND.All Value
CTL.Sel_Value_1_USR = *BLANK;

// CTL.Sel Value 2 USR = CND.All Value
CTL.Sel_Value_2_USR = *BLANK;

// CTL.Sel Value 3 USR = CND.All Value
CTL.Sel_Value_3_USR = *BLANK;

// CTL.Sel Value 4 USR = CND.All Value
CTL.Sel_Value_4_USR = *BLANK;

// CTL.Sel Value 5 USR = CND.All Value
CTL.Sel_Value_5_USR = *BLANK;

// CTL.Sel Value 6 USR = CND.All Value
CTL.Sel_Value_6_USR = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F15=Display Item Specifications
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program Dsp Item Specs        DR.
CALL PROGRAM(Dsp Item Specs        DR) ('POQMD1R');
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);

ENDIF;

//?F16=Work With PA    Disable if Live with TPM          E004019
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

//?** 05/19/16 RMC E4119 remove live with tpm check
// Call program WW Product Availablty DF.
CALL PROGRAM(WW Product Availablty DF) ('PDFPDFR');
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Production_Warehouse);

ENDIF;

//?F18=Dsp WIP Inv
CASE;

// IF CTL.*CMD key is CF18
IF CTL.*CMD_key = '18';

CASE;

// IF CTL.WIP Item Code is Entered
IF CTL.WIP_Item_Code <> *ZERO;

// Call program WW Inv Allocation     DF.
CALL PROGRAM(WW Inv Allocation     DF) ('POP5DFR');
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.WIP_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(*ZERO);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

ENDIF;

//?Day 1-Option 5
CASE;

// IF CTL.Sel Value 1 USR is Option 5
IF CTL.Sel_Value_1_USR = '5';

CASE;

// IF CTL.USR Day 1 EQ JOB.*Job date
IF CTL.USR_Day_1 = JOB.*Job_date;

// LCL.Production Type = CND.Schedule
LCL.Production_Type = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Type = CND.Plan
LCL.Production_Type = 'P';

ENDIF;

//?02/12/2009 slm FP1054 pass in production  warehouse
// Call program WW Production Items   DF.
CALL PROGRAM(WW Production Items   DF) ('PDCWDFR');
PARAMETER(LCL.Production_Type);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.Production_Warehouse);

// CTL.Sel Value 1 USR = CND.All Value
CTL.Sel_Value_1_USR = *BLANK;

QUIT;

ENDIF;

//?Day 2-Option 5
CASE;

// IF CTL.Sel Value 2 USR is Option 5
IF CTL.Sel_Value_2_USR = '5';

CASE;

// IF CTL.USR Day 2 EQ JOB.*Job date
IF CTL.USR_Day_2 = JOB.*Job_date;

// LCL.Production Type = CND.Schedule
LCL.Production_Type = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Type = CND.Plan
LCL.Production_Type = 'P';

ENDIF;

// Call program WW Production Items   DF.
CALL PROGRAM(WW Production Items   DF) ('PDCWDFR');
PARAMETER(LCL.Production_Type);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.Production_Warehouse);

// CTL.Sel Value 2 USR = CND.All Value
CTL.Sel_Value_2_USR = *BLANK;

QUIT;

ENDIF;

//?Day 3-Option 5
CASE;

// IF CTL.Sel Value 3 USR is Option 5
IF CTL.Sel_Value_3_USR = '5';

CASE;

// IF CTL.USR Day 3 EQ JOB.*Job date
IF CTL.USR_Day_3 = JOB.*Job_date;

// LCL.Production Type = CND.Schedule
LCL.Production_Type = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Type = CND.Plan
LCL.Production_Type = 'P';

ENDIF;

// Call program WW Production Items   DF.
CALL PROGRAM(WW Production Items   DF) ('PDCWDFR');
PARAMETER(LCL.Production_Type);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.Production_Warehouse);

// CTL.Sel Value 3 USR = CND.All Value
CTL.Sel_Value_3_USR = *BLANK;

QUIT;

ENDIF;

//?Day 4-Option 5
CASE;

// IF CTL.Sel Value 4 USR is Option 5
IF CTL.Sel_Value_4_USR = '5';

CASE;

// IF CTL.USR Day 4 EQ JOB.*Job date
IF CTL.USR_Day_4 = JOB.*Job_date;

// LCL.Production Type = CND.Schedule
LCL.Production_Type = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Type = CND.Plan
LCL.Production_Type = 'P';

ENDIF;

// Call program WW Production Items   DF.
CALL PROGRAM(WW Production Items   DF) ('PDCWDFR');
PARAMETER(LCL.Production_Type);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.Production_Warehouse);

// CTL.Sel Value 4 USR = CND.All Value
CTL.Sel_Value_4_USR = *BLANK;

QUIT;

ENDIF;

//?Day 5-Option 5
CASE;

// IF CTL.Sel Value 5 USR is Option 5
IF CTL.Sel_Value_5_USR = '5';

CASE;

// IF CTL.USR Day 5 EQ JOB.*Job date
IF CTL.USR_Day_5 = JOB.*Job_date;

// LCL.Production Type = CND.Schedule
LCL.Production_Type = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Type = CND.Plan
LCL.Production_Type = 'P';

ENDIF;

// Call program WW Production Items   DF.
CALL PROGRAM(WW Production Items   DF) ('PDCWDFR');
PARAMETER(LCL.Production_Type);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.Production_Warehouse);

// CTL.Sel Value 5 USR = CND.All Value
CTL.Sel_Value_5_USR = *BLANK;

QUIT;

ENDIF;

//?Day 6-Option 5
CASE;

// IF CTL.Sel Value 6 USR is Option 5
IF CTL.Sel_Value_6_USR = '5';

CASE;

// IF CTL.USR Day 6 EQ JOB.*Job date
IF CTL.USR_Day_6 = JOB.*Job_date;

// LCL.Production Type = CND.Schedule
LCL.Production_Type = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Type = CND.Plan
LCL.Production_Type = 'P';

ENDIF;

// Call program WW Production Items   DF.
CALL PROGRAM(WW Production Items   DF) ('PDCWDFR');
PARAMETER(LCL.Production_Type);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.Production_Warehouse);

// CTL.Sel Value 6 USR = CND.All Value
CTL.Sel_Value_6_USR = *BLANK;

QUIT;

ENDIF;

//?CHG:  CTL.Load ID -- Refresh
CASE;

// IF CTL.Load ID NE LCL.Load ID
IF CTL.Load_ID <> LCL.Load_ID;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?CHG:  CTL.Block Order Flag - 11/13/17 DN R11918-Chg to input capable.
CASE;

// IF LCL.Block Order Flag NE CTL.Block Order Flag
IF LCL.Block_Order_Flag <> CTL.Block_Order_Flag;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?CHG:  CTL.Load Status -- Refresh
CASE;

// IF LCL.Load Status NE CTL.Load Status
IF LCL.Load_Status <> CTL.Load_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?CHG:  CTL.Select 1
CASE;

// IF LCL.Sel Value 1 USR NE CTL.Sel Value 1 USR
IF LCL.Sel_Value_1_USR <> CTL.Sel_Value_1_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?CHG:  CTL.Select 2
CASE;

// IF LCL.Sel Value 2 USR NE CTL.Sel Value 2 USR
IF LCL.Sel_Value_2_USR <> CTL.Sel_Value_2_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?CHG:  CTL.Select 3
CASE;

// IF LCL.Sel Value 3 USR NE CTL.Sel Value 3 USR
IF LCL.Sel_Value_3_USR <> CTL.Sel_Value_3_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?CHG:  CTL.Select 4
CASE;

// IF LCL.Sel Value 4 USR NE CTL.Sel Value 4 USR
IF LCL.Sel_Value_4_USR <> CTL.Sel_Value_4_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?CHG:  CTL.Select 5
CASE;

// IF LCL.Sel Value 5 USR NE CTL.Sel Value 5 USR
IF LCL.Sel_Value_5_USR <> CTL.Sel_Value_5_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?CHG:  CTL.Select 6
CASE;

// IF LCL.Sel Value 6 USR NE CTL.Sel Value 6 USR
IF LCL.Sel_Value_6_USR <> CTL.Sel_Value_6_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

// LCL.Post Flag USR = CND.No
LCL.Post_Flag_USR = 'N';

// LCL.*Reload subfile = CND.*NO
LCL.*Reload_subfile = 'N';

//?5=Display Order
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(LCL.Order_Secondary_Line_Seq);
PARAMETER(LCL.Application_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?7=Dsp Consmd Itm
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program WW OrdDtl Sch-Consmd  DF.
CALL PROGRAM(WW OrdDtl Sch-Consmd  DF) ('POQGDFR');
PARAMETER(CTL.Accounting_Company);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?8=Item Warehouse Inquiry Detail
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Lot Tracking Flag is yes
IF LCL.Lot_Tracking_Flag = 'Y';

// Call program Dsp Item Lot Locs     DF.
CALL PROGRAM(Dsp Item Lot Locs     DF) ('PDH2DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.*Initial_call);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(LCL.Company_Name);
PARAMETER(LCL.*Initial_call);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?9=Dsp Prod Sched
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Dsp Order Sched Pdctn DF.
CALL PROGRAM(Dsp Order Sched Pdctn DF) ('PDFMDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?24=Dsp Age Days
CASE;

// IF RCD.*SFLSEL is Option 24
IF RCD.*SFLSEL = '24';

// Call program Dsp Age Information   DR.
CALL PROGRAM(Dsp Age Information   DR) ('PNQ0D1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?10=Work With Inventory Allocation
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program WW Inv Allocation     DF.
CALL PROGRAM(WW Inv Allocation     DF) ('POP5DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Order_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?13=Display Load
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

//?** 05/19/16 RMC E4119 remove live with tpm check
// Call program WW Orders on Load      DF.
CALL PROGRAM(WW Orders on Load      DF) ('PDODDFR');
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.USR_Weight_Accumulated);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?15=Display Item Specifications
CASE;

// IF RCD.*SFLSEL is Option 15
IF RCD.*SFLSEL = '15';

// Call program Dsp Item Specs        DR.
CALL PROGRAM(Dsp Item Specs        DR) ('POQMD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?F90  ONLY for people that know about it
DO;

//?F90 & F91 are for IS personnel only (Not PORKSCHE)
//?** 11/19/2007 LJB FP1251 This routine resets the DDD/T fields to
//?** zeros if there is no Miles To Next Stop or Miles Between Cities rcd
//?90=Calculate Deadline Departure Date/Time (Testing only)
CASE;

// IF RCD.*SFLSEL is Option 90
IF RCD.*SFLSEL = '90';

//?E01523 5/02 RMC Use req delv dt/time always
// Call program CLC Deadln Depart Dt  XF.
CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.Deadline_Depart_Time_LH);

EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.Deadline_Depart_Time_LH);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Deadline_Depart_Date_LH);
 PARAMETER(PAR.Deadline_Depart_Time_LH);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


CASE;

// IF RCD.Deadline Depart Date LH is not entered
IF RCD.Deadline_Depart_Date_LH = *ZERO;

// Send information message - 'Mileages not found.'
MESSAGE(USR2818 *INFO);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDDO;

// PAR.Access Denied (Y/N) = CND.no
PAR.Access_Denied_Y_N = 'N';

//?OD Production Plan Sts (All additional options)
CASE;

// IF RCD.OD Production Plan Sts is Yes
IF RCD.OD_Production_Plan_Sts = *BLANK;

//?Upd Options - (12,14,17,18,19)
CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// AND RCD.*SFLSEL is PPS Update 2
AND RCD.*SFLSEL = '14'/'17'/'19'/'12'/'18';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

//?Upd Options - (12,14,17,18,19)
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.*SFLSEL is PPS Update 2
IF RCD.*SFLSEL = '14'/'17'/'19'/'12'/'18';

EXECUTE FUNCTION(RTV for PA update val2RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1993258;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Warehouse_Code_SavUsr);
PARAMETER(LCL.OD_Production_Plan_Sts);
PARAMETER(LCL.Quantity_Scheduled_1_USR);
PARAMETER(LCL.Weight_Scheduled_USR);
PARAMETER(LCL.OD_Schedule_Override_Sts);
PARAMETER(LCL.OD_Adj_Type_Override);
PARAMETER(LCL.Item_Age_Days);
PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
PARAMETER(LCL.Production_Ovr_AgeDte_To);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If something has changed, dont allow option
CASE;

// IF RCD.Warehouse Code NE LCL.Warehouse Code SavUsr
IF RCD.Warehouse_Code <> LCL.Warehouse_Code_SavUsr;

// OR RCD.Weight Scheduled NE LCL.Weight Scheduled USR
OR RCD.Weight_Scheduled <> LCL.Weight_Scheduled_USR;

// OR RCD.Quantity Scheduled NE LCL.Quantity Scheduled 1 USR
OR RCD.Quantity_Scheduled <> LCL.Quantity_Scheduled_1_USR;

// OR RCD.OD Schedule Override Sts NE LCL.OD Schedule Override Sts
OR RCD.OD_Schedule_Override_Sts <> LCL.OD_Schedule_Override_Sts;

// OR RCD.OD Adj Type Override NE LCL.OD Adj Type Override
OR RCD.OD_Adj_Type_Override <> LCL.OD_Adj_Type_Override;

// OR RCD.Item Age Days NE LCL.Item Age Days
OR RCD.Item_Age_Days <> LCL.Item_Age_Days;

// OR RCD.Production Ovr AgeDte Fr NE LCL.Production Ovr AgeDte Fr
OR RCD.Production_Ovr_AgeDte_Fr <> LCL.Production_Ovr_AgeDte_Fr;

// OR RCD.Production Ovr AgeDte To NE LCL.Production Ovr AgeDte To
OR RCD.Production_Ovr_AgeDte_To <> LCL.Production_Ovr_AgeDte_To;

// Send error message - 'Order has changed since display, option not allowed. Refresh screen.'
ERROR(USR4173);
MSGPARM(RCD.*SFLSEL);

//?If something has changed, dont allow option
// IF *OTHERWISE
IF *OTHERWISE;

//?12=Chg ship date                      W288 changes
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

//?** 05/19/16 RMC E4119 remove live with tpm check
EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Job Date Usr = JOB.*Job date + CON.7 *DAYS
LCL.Job_Date_Usr = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?val order stuff
CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff
// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?val load stuff
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?Validate
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?Validate
// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

// AND RCD.Requested Ship Date LE LCL.Job Date Usr
AND RCD.Requested_Ship_Date <= LCL.Job_Date_Usr;

//?RMC 8/23/19 compare to REQ instead of Scheduled ship date
//?if ship date is within 7 days, then dont allow
// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?Validate
// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

EXECUTE FUNCTION(EDT Unlock Load Edit   IF) TYPE(EXCINTFUN)                     AC1419445;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.*SFLSEL);
PARAMETER(LCL.Error_Status);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Load_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.USR_Check_Y_N_Status);
 PARAMETER(PAR.Block_Order_Flag);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.USR Check Y/N Status = CND.blank
  PAR.USR_Check_Y_N_Status = *BLANK;

  //?OMS203:  need to know if there are any Block orders on load
  // PAR.Block Order Flag = CND.Firm Order
  PAR.Block_Order_Flag = 'F';

  //?USER: Process Data record

  // PAR.USR Check Y/N Status = CND.yes
  PAR.USR_Check_Y_N_Status = 'Y';

  CASE;

  // IF DB1.Block Order Flag is Block Order
  IF DB1.Block_Order_Flag = 'B';

  // PAR.Block Order Flag = DB1.Block Order Flag
  PAR.Block_Order_Flag = DB1.Block_Order_Flag;

  QUIT;

  ENDIF;

 }

 //?RMC PFS017 6/5/6 new par.allow unlock if picked = N
 EXECUTE FUNCTION(EDT Unlock Load Edits  IF) TYPE(EXCINTFUN)                     AC1419437;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.*SFLSEL);
 PARAMETER(PAR.Error_Status);
 PARAMETER(PAR.Block_Order_Flag);
 PARAMETER('N');
 {
  //?Execute internal function

  //?assume will have error
  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
  PARAMETER('LOCKLD');
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Access_Denied_Y_N);
  {
   //?Execute internal function

   // PAR.User Profile Name = JOB.*USER
   PAR.User_Profile_Name = JOB.*USER;

   EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(WRK.Access_Denied_Y_N);
   {
    //?Execute internal function

    //?RMC 5/11/09 Rtv default company from user profile --
    //?  Override user code model company if it exists
    EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Allow_Multi_Company);
    PARAMETER(PAR.Default_Printer);
    PARAMETER(PAR.Salesperson_Code);
    PARAMETER(LCL.Company_Number);
    PARAMETER(PAR.User_Code_Model);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?User Profile Record Not found
    CASE;

    // IF PGM.*Return code is *Record does not exist
    IF PGM.*Return_code = 'Y2U0005';

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    //?User Profile Record Not found
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    ENDIF;

    CASE;

    // IF PAR.User Code Model is equal to blank
    IF PAR.User_Code_Model = *BLANK;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Code_Model);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    // PAR.Warehouse Code = LCL.Warehouse Code
    PAR.Warehouse_Code = LCL.Warehouse_Code;

    //?Return code when not normal for Application Profile
    CASE;

    // IF PGM.*Return code is *Normal
    IF PGM.*Return_code = *BLANK;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    //?Return code when not normal for Application Profile
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    ENDIF;

    CASE;

    // IF LCL.Company Number is greater than zero
    IF LCL.Company_Number > *ZERO;

    // PAR.Company Number = LCL.Company Number
    PAR.Company_Number = LCL.Company_Number;

    CASE;

    // IF LCL.Warehouse Code is Not Blanks
    IF LCL.Warehouse_Code <> *BLANK;

    EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(LCL.Shipping_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     CASE;

     // IF DB1.Record Status is Active
     IF DB1.Record_Status = 'A';

     CASE;

     // IF DB1.Production Warehouse Code is Warehouse Code not Blank
     IF DB1.Production_Warehouse_Code <> *BLANK;

     // PAR.Warehouse Code = DB1.Production Warehouse Code
     PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

     QUIT;

     ENDIF;

     ENDIF;

    }

    ENDIF;

    ENDIF;

   }

   // PAR.Company Number = WRK.Company Number
   PAR.Company_Number = WRK.Company_Number;

   // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
   PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

   //?If access denied is no, rtv co. name
   CASE;

   // IF WRK.Access Denied (Y/N) is no
   IF WRK.Access_Denied_Y_N = 'N';

   EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Name);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  //?check the entry control field too.  4/28/05 so christa can do.
  EXECUTE FUNCTION(Rtv Unlock Load Authr RT) TYPE(RTVOBJ) FILE(OPC0REP)           AC1736002;
  PARAMETER(JOB.*USER);
  PARAMETER('O/P');
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Unlock_Load_Authority);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Access Denied (Y/N) is yes
  IF PAR.Access_Denied_Y_N = 'Y';

  // AND WRK.Unlock Load Authority is Blank
  AND WRK.Unlock_Load_Authority = *BLANK;

  // Send error message - 'User not allowed to  Lock/Unlock Loads.'
  ERROR(USR2468);

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
  CASE;

  // IF PAR.Block Order Flag is Block Order
  IF PAR.Block_Order_Flag = 'B';

  //?  (load contains a block order)
  // Send error message - 'Load &2 contains Block Orders--no update allowed.'
  ERROR(USR2441);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
  // IF PAR.Load Status is Shipped or Invoiced
  IF PAR.Load_Status = 'I'/'S';

  // Send error message - 'Load has been shipped can not unlock it'
  ERROR(USR1272);
  MSGPARM(PAR.Load_Status);

  //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?**** Determine if Load has been picked, if yes do not allow unlock
  //?**** This function checks OP Order Events & AS Picked Acknowledgment
  CASE;

  // IF PAR.Allow Unlock if Picked St is No
  IF PAR.Allow_Unlock_if_Picked_St = 'N';

  //?Do this one if par is NO. We dont want an UNLOCK if there are XOx
  //?  and it isnt shipping doing it.
  // Call program RTV Load Order Picked  XF.
  CALL PROGRAM(RTV Load Order Picked  XF) ('PDQVXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Pick_Status_USR);

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Pick_Status_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.Pick Status USR = CND.Not Picked
   PAR.Pick_Status_USR = 'N';

   //?USER: Process Data record

   // PAR.Pick Status USR = CND.Picked
   PAR.Pick_Status_USR = 'Y';

   QUIT;

  }

  ENDIF;

  //?Allow if picked but not Close Order or Close Truck  5/31/06
  CASE;

  // IF WRK.Pick Status USR is Picked
  IF WRK.Pick_Status_USR = 'Y';

  CASE;

  // IF PAR.Allow Unlock if Picked St is No
  IF PAR.Allow_Unlock_if_Picked_St = 'N';

  // Send error message - 'Unlocking of Load is not allowed for a Load which has been picked.'
  ERROR(USR1999);
  MSGPARM(PAR.Load_Status);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program PFS Val Close Ord/Trk XF.
  CALL PROGRAM(PFS Val Close Ord/Trk XF) ('PPYIXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Status_Y_or_N);

  CASE;

  // IF WRK.Status - Y or N is yes
  IF WRK.Status_Y_or_N = 'Y';

  // Send error message - 'Unlock Load not allowed for Load with a Closed Order or Closed Truck.'
  ERROR(USR3629);
  MSGPARM(PAR.*SFLSEL);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Unlock Load Pending'
  MESSAGE(USR1274 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  ENDIF;

  ENDIF;

  //?Allow if picked but not Close Order or Close Truck  5/31/06
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Unlock Load Pending'
  MESSAGE(USR1274 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


ENDIF;

CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

//?Auto Unlock after validations are passed
CASE;

// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
 PARAMETER(PAR.Load_ID);
 PARAMETER('U');
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('PLTFLRSYS');
  PARAMETER(LCL.Plant_Floor_System_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?Notify Accusort if locked load
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program DEL AS Order Hdr/Dtl   XF.
  CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Unlock Load/Order XF.
  CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
  PARAMETER(PAR.Load_ID);

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
  //?   delete it if Unproc, else change it to "D"elete/and reprocess
  // Call program Exc ChgDel EDI f/UnlckXF.
  CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
  PARAMETER(PAR.Load_ID);

 }

 EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Miles_to_next_stop);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Order_Number);
  {
   //?USER: Initialize routine

   //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
   //?                                    to remove Company RST or Pos
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

   //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
   //?                              was using the par replace with db1
   EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(*ZERO);
   {
    //?USER: Initialize routine

    //?par.@rated freight is the sum of all the detail rated frt, for adjusting
    // PAR.@Rated Freight = CON.*ZERO
    PAR.@Rated_Freight = *ZERO;

    //?par.usr process status is used to indicate if there are detail present
    // PAR.USR Process status = CND.no
    PAR.USR_Process_status = 'N';

    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Cancelled
    IF DB1.Detail_Line_Status = 'X';

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.USR Process status = CND.yes
    PAR.USR_Process_status = 'Y';

    CASE;

    // IF PAR.Order Weight Total is Equal to zero
    IF PAR.Order_Weight_Total = *ZERO;

    // OR PAR.Total Rated Freight is Zero
    OR PAR.Total_Rated_Freight = *ZERO;

    // PAR.Rated Freight = CON.*ZERO
    PAR.Rated_Freight = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Detail Line Status is Confirmed & Complete
    IF DB1.Detail_Line_Status = 'C'/'R';

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
    * PAR.Total_Rated_Freight 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
    / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

    ENDIF;

    // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
    PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

    ENDIF;

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
    PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

    // PAR.Order Sequence Number = DB1.Order Sequence Number
    PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

    // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
    PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

    ENDIF;

    //?USER: Exit processing

    //?Adjust totals
    CASE;

    // IF PAR.@Rated Freight NE PAR.Total Rated Freight
    IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

    // AND PAR.USR Process status is yes
    AND PAR.USR_Process_status = 'Y';

    // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
    WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

    // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
    PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

    //?Update last detail line processed
    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

  }

 }

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

}


// WRK.Load Change Type = CND.Unlock Load
WRK.Load_Change_Type = 'UNLOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(RCD.Load_Status);
PARAMETER('U');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(*ZERO);

ENDIF;

//?** Add order number to pass to the Edit Load/Orders   E00438
//?** Add Access Limited flag                           W288
// Call program Edt Load/Orders        DF.
CALL PROGRAM(Edt Load/Orders        DF) ('PDLTDFR');
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(WRK.Name);
PARAMETER(PAR.Access_Limited_Sts_USR);

//?reload subfile because order can have more than 1 item on this screen
//? and we want the date/whse to show as changed for them all
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?val load stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?** Add Access Limited flag                           W288
// Call program EDT Schd Shp Dte/Whse  E1.
CALL PROGRAM(EDT Schd Shp Dte/Whse  E1) ('PDLQE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Access_Limited_Sts_USR);

//?reload subfile because order can have more than 1 item on this screen
//? and we want the date/whse to show as changed for them all
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?14=Release Order
CASE;

// IF RCD.*SFLSEL is Option 14
IF RCD.*SFLSEL = '14';

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// IF RCD.Production Hold is No
IF RCD.Production_Hold = 'N';

// Send error message - 'Order &1 not on Production Hold--will not be released.'
ERROR(USR1922);
MSGPARM(RCD.Order_Number);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Production Hold = CND.No
RCD.Production_Hold = 'N';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

ENDIF;

ENDIF;

//?E14784 - Disallow 17 if Orders Scheduled Ship Date GT Last Alloc Dt
//?17=Reallocate  - with lock check-> 10/14/13 dont do lock check
CASE;

// IF RCD.*SFLSEL is Option 17
IF RCD.*SFLSEL = '17';

CASE;

// IF RCD.Company Number is Guymon
IF ( RCD.Company_Number = 360;

// AND RCD.Requested Ship Date GT PAR.Kill Date 360 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_360_RGT );

// OR RCD.Company Number is Seaboard Triumph Foods
OR ( RCD.Company_Number = 440;

// AND RCD.Requested Ship Date GT PAR.Kill Date 440 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_440_RGT );

// OR RCD.Company Number is St. Joseph
OR ( RCD.Company_Number = 960;

// AND RCD.Requested Ship Date GT PAR.Kill Date 960 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_960_RGT );

//?ABOVE: Compare to REQUESTED Ship Date instead of scheduled
//?Format REQUESTED Ship Date
// LCL.Scheduled Ship Date Alpha = CVTVAR(RCD.Requested Ship Date)
LCL.Scheduled_Ship_Date_Alpha = CVTVAR(RCD.Requested_Ship_Date);

// LCL.Scheduled Ship Date YY = SUBSTRING(LCL.Scheduled Ship Date Alpha,CON.2,CON.2)
LCL.Scheduled_Ship_Date_YY = SUBSTRING(LCL.Scheduled_Ship_Date_Alpha:2:2);

// LCL.Scheduled Ship Date MMDD = SUBSTRING(LCL.Scheduled Ship Date Alpha,CON.4,CON.4)
LCL.Scheduled_Ship_Date_MMDD = SUBSTRING(LCL.Scheduled_Ship_Date_Alpha:4:4);

// LCL.Scheduled Ship Date Fmt = CONCAT(LCL.Scheduled Ship Date MMDD,LCL.Scheduled Ship Date YY,CON.
LCL.Scheduled_Ship_Date_Fmt = LCL.Scheduled_Ship_Date_MMDD + LCL.Scheduled_Ship_Date_YY (*ZERO);

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(LCL.Scheduled_Ship_Date_Fmt);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


//?Format Last Allocation Date
CASE;

// IF RCD.Company Number is Guymon
IF RCD.Company_Number = 360;

// LCL.Last Allocation Date = PAR.Kill Date 360 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_360_RGT;

// IF RCD.Company Number is Sioux City
IF RCD.Company_Number = 440;

// LCL.Last Allocation Date = PAR.Kill Date 440 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_440_RGT;

// IF RCD.Company Number is St. Joseph
IF RCD.Company_Number = 960;

// LCL.Last Allocation Date = PAR.Kill Date 960 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_960_RGT;

ENDIF;

// LCL.Last Allocation DateAlpha = CVTVAR(LCL.Last Allocation Date)
LCL.Last_Allocation_DateAlpha = CVTVAR(LCL.Last_Allocation_Date);

// LCL.Last Allocation Date YY = SUBSTRING(LCL.Last Allocation DateAlpha,CON.2,CON.2)
LCL.Last_Allocation_Date_YY = SUBSTRING(LCL.Last_Allocation_DateAlpha:2:2);

// LCL.Last Allocation Date MMDD = SUBSTRING(LCL.Last Allocation DateAlpha,CON.4,CON.4)
LCL.Last_Allocation_Date_MMDD = SUBSTRING(LCL.Last_Allocation_DateAlpha:4:4);

// LCL.Last Allocation Date Fmt = CONCAT(LCL.Last Allocation Date MMDD,LCL.Last Allocation Date YY,C
LCL.Last_Allocation_Date_Fmt = LCL.Last_Allocation_Date_MMDD + LCL.Last_Allocation_Date_YY (*ZERO);

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(LCL.Last_Allocation_Date_Fmt);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// Send error message - 'Option &1 not allowed for Order &2  because Scheduled Ship Date &3 after La
ERROR(USR5118);
MSGPARM(LCL.Scheduled_Ship_Date_Fmt);
MSGPARM(LCL.Last_Allocation_Date_Fmt);
MSGPARM(17);
MSGPARM(RCD.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Job Date Usr = JOB.*Job date + CON.7 *DAYS
LCL.Job_Date_Usr = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?val order stuff and load stuff
CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?val load stuff
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?Validate
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?E2824 RMC 10/14/13 allow changes if locked - dont unlock/lock per PS chgs
//?Validate
//?Validate
//?E2824 RMC 10/14/13 allow changes if locked - dont unlock/lock per PS chgs
ENDIF;

ENDIF;

ENDIF;

//?Reallocate if ERROR sts = No
CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?Deallocate
// LCL.Quantity Ordered = CON.*ZERO
LCL.Quantity_Ordered = *ZERO;

// LCL.Weight Ordered = CON.*ZERO
LCL.Weight_Ordered = *ZERO;

// LCL.Quantity Scheduled = RCD.Quantity Scheduled
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Released by User  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1920658;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Chg Schedule Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1934083;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Chg Adj Type Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1647992;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Allocate
// LCL.Quantity Ordered = RCD.Quantity Ordered
LCL.Quantity_Ordered = RCD.Quantity_Ordered;

// LCL.Weight Ordered = RCD.Weight Ordered
LCL.Weight_Ordered = RCD.Weight_Ordered;

// LCL.Quantity Scheduled = CON.*ZERO
LCL.Quantity_Scheduled = *ZERO;

// LCL.Weight Scheduled = CON.*ZERO
LCL.Weight_Scheduled = *ZERO;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('OA');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?* Clear the Upload error flags                        C001956
EXECUTE FUNCTION(CHG Ord Req Revw- flg CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2036232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 //?Does not update the record stamp fields
}


// RCD.Order Line Error Type = CND.No Order Upload Errors
RCD.Order_Line_Error_Type = *BLANK;

EXECUTE FUNCTION(CHG Ord Line Error Typ CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC2029048;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Order_Line_Error_Type);
{
 //?USER: Processing before Data read

 //?** This routine does NOT update the change audit fields  P001251
}


EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?* FP1054 Create rcd * RLCORD
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('RLCORD');
PARAMETER('SLS');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

//?*
// LCL.*Reload subfile = CND.*YES
LCL.*Reload_subfile = 'Y';

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?18=Edit Age   with lock check ->10/14/13 still do lock chk here
CASE;

// IF RCD.*SFLSEL is Option 18
IF RCD.*SFLSEL = '18';

CASE;

// IF RCD.Company Number is Guymon
IF ( RCD.Company_Number = 360;

// AND RCD.Requested Ship Date GT PAR.Kill Date 360 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_360_RGT );

// OR RCD.Company Number is Seaboard Triumph Foods
OR ( RCD.Company_Number = 440;

// AND RCD.Requested Ship Date GT PAR.Kill Date 440 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_440_RGT );

// OR RCD.Company Number is St. Joseph
OR ( RCD.Company_Number = 960;

// AND RCD.Requested Ship Date GT PAR.Kill Date 960 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_960_RGT );

//?ABOVE: Compare to REQUESTED Ship Date     8/23/19
//?Format Requested Ship Date     8/23/19
// LCL.Scheduled Ship Date Alpha = CVTVAR(RCD.Requested Ship Date)
LCL.Scheduled_Ship_Date_Alpha = CVTVAR(RCD.Requested_Ship_Date);

// LCL.Scheduled Ship Date YY = SUBSTRING(LCL.Scheduled Ship Date Alpha,CON.2,CON.2)
LCL.Scheduled_Ship_Date_YY = SUBSTRING(LCL.Scheduled_Ship_Date_Alpha:2:2);

// LCL.Scheduled Ship Date MMDD = SUBSTRING(LCL.Scheduled Ship Date Alpha,CON.4,CON.4)
LCL.Scheduled_Ship_Date_MMDD = SUBSTRING(LCL.Scheduled_Ship_Date_Alpha:4:4);

// LCL.Scheduled Ship Date Fmt = CONCAT(LCL.Scheduled Ship Date MMDD,LCL.Scheduled Ship Date YY,CON.
LCL.Scheduled_Ship_Date_Fmt = LCL.Scheduled_Ship_Date_MMDD + LCL.Scheduled_Ship_Date_YY (*ZERO);

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(LCL.Scheduled_Ship_Date_Fmt);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


//?Format Last Allocation Date
CASE;

// IF RCD.Company Number is Guymon
IF RCD.Company_Number = 360;

// LCL.Last Allocation Date = PAR.Kill Date 360 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_360_RGT;

// IF RCD.Company Number is Sioux City
IF RCD.Company_Number = 440;

// LCL.Last Allocation Date = PAR.Kill Date 440 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_440_RGT;

// IF RCD.Company Number is St. Joseph
IF RCD.Company_Number = 960;

// LCL.Last Allocation Date = PAR.Kill Date 960 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_960_RGT;

ENDIF;

// LCL.Last Allocation DateAlpha = CVTVAR(LCL.Last Allocation Date)
LCL.Last_Allocation_DateAlpha = CVTVAR(LCL.Last_Allocation_Date);

// LCL.Last Allocation Date YY = SUBSTRING(LCL.Last Allocation DateAlpha,CON.2,CON.2)
LCL.Last_Allocation_Date_YY = SUBSTRING(LCL.Last_Allocation_DateAlpha:2:2);

// LCL.Last Allocation Date MMDD = SUBSTRING(LCL.Last Allocation DateAlpha,CON.4,CON.4)
LCL.Last_Allocation_Date_MMDD = SUBSTRING(LCL.Last_Allocation_DateAlpha:4:4);

// LCL.Last Allocation Date Fmt = CONCAT(LCL.Last Allocation Date MMDD,LCL.Last Allocation Date YY,C
LCL.Last_Allocation_Date_Fmt = LCL.Last_Allocation_Date_MMDD + LCL.Last_Allocation_Date_YY (*ZERO);

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(LCL.Last_Allocation_Date_Fmt);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// Send error message - 'Option &1 not allowed for Order &2  because Scheduled Ship Date &3 after La
ERROR(USR5118);
MSGPARM(LCL.Scheduled_Ship_Date_Fmt);
MSGPARM(LCL.Last_Allocation_Date_Fmt);
MSGPARM(17);
MSGPARM(RCD.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Job Date Usr = JOB.*Job date + CON.7 *DAYS
LCL.Job_Date_Usr = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?val order stuff and load stuff
CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?val load stuff
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?Validate
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?Validate
// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

EXECUTE FUNCTION(EDT Unlock Load Edit   IF) TYPE(EXCINTFUN)                     AC1419445;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.*SFLSEL);
PARAMETER(LCL.Error_Status);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Load_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.USR_Check_Y_N_Status);
 PARAMETER(PAR.Block_Order_Flag);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.USR Check Y/N Status = CND.blank
  PAR.USR_Check_Y_N_Status = *BLANK;

  //?OMS203:  need to know if there are any Block orders on load
  // PAR.Block Order Flag = CND.Firm Order
  PAR.Block_Order_Flag = 'F';

  //?USER: Process Data record

  // PAR.USR Check Y/N Status = CND.yes
  PAR.USR_Check_Y_N_Status = 'Y';

  CASE;

  // IF DB1.Block Order Flag is Block Order
  IF DB1.Block_Order_Flag = 'B';

  // PAR.Block Order Flag = DB1.Block Order Flag
  PAR.Block_Order_Flag = DB1.Block_Order_Flag;

  QUIT;

  ENDIF;

 }

 //?RMC PFS017 6/5/6 new par.allow unlock if picked = N
 EXECUTE FUNCTION(EDT Unlock Load Edits  IF) TYPE(EXCINTFUN)                     AC1419437;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.*SFLSEL);
 PARAMETER(PAR.Error_Status);
 PARAMETER(PAR.Block_Order_Flag);
 PARAMETER('N');
 {
  //?Execute internal function

  //?assume will have error
  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
  PARAMETER('LOCKLD');
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Access_Denied_Y_N);
  {
   //?Execute internal function

   // PAR.User Profile Name = JOB.*USER
   PAR.User_Profile_Name = JOB.*USER;

   EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(WRK.Access_Denied_Y_N);
   {
    //?Execute internal function

    //?RMC 5/11/09 Rtv default company from user profile --
    //?  Override user code model company if it exists
    EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Allow_Multi_Company);
    PARAMETER(PAR.Default_Printer);
    PARAMETER(PAR.Salesperson_Code);
    PARAMETER(LCL.Company_Number);
    PARAMETER(PAR.User_Code_Model);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?User Profile Record Not found
    CASE;

    // IF PGM.*Return code is *Record does not exist
    IF PGM.*Return_code = 'Y2U0005';

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    //?User Profile Record Not found
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    ENDIF;

    CASE;

    // IF PAR.User Code Model is equal to blank
    IF PAR.User_Code_Model = *BLANK;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Code_Model);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    // PAR.Warehouse Code = LCL.Warehouse Code
    PAR.Warehouse_Code = LCL.Warehouse_Code;

    //?Return code when not normal for Application Profile
    CASE;

    // IF PGM.*Return code is *Normal
    IF PGM.*Return_code = *BLANK;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    //?Return code when not normal for Application Profile
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    ENDIF;

    CASE;

    // IF LCL.Company Number is greater than zero
    IF LCL.Company_Number > *ZERO;

    // PAR.Company Number = LCL.Company Number
    PAR.Company_Number = LCL.Company_Number;

    CASE;

    // IF LCL.Warehouse Code is Not Blanks
    IF LCL.Warehouse_Code <> *BLANK;

    EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(LCL.Shipping_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     CASE;

     // IF DB1.Record Status is Active
     IF DB1.Record_Status = 'A';

     CASE;

     // IF DB1.Production Warehouse Code is Warehouse Code not Blank
     IF DB1.Production_Warehouse_Code <> *BLANK;

     // PAR.Warehouse Code = DB1.Production Warehouse Code
     PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

     QUIT;

     ENDIF;

     ENDIF;

    }

    ENDIF;

    ENDIF;

   }

   // PAR.Company Number = WRK.Company Number
   PAR.Company_Number = WRK.Company_Number;

   // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
   PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

   //?If access denied is no, rtv co. name
   CASE;

   // IF WRK.Access Denied (Y/N) is no
   IF WRK.Access_Denied_Y_N = 'N';

   EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Name);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  //?check the entry control field too.  4/28/05 so christa can do.
  EXECUTE FUNCTION(Rtv Unlock Load Authr RT) TYPE(RTVOBJ) FILE(OPC0REP)           AC1736002;
  PARAMETER(JOB.*USER);
  PARAMETER('O/P');
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Unlock_Load_Authority);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Access Denied (Y/N) is yes
  IF PAR.Access_Denied_Y_N = 'Y';

  // AND WRK.Unlock Load Authority is Blank
  AND WRK.Unlock_Load_Authority = *BLANK;

  // Send error message - 'User not allowed to  Lock/Unlock Loads.'
  ERROR(USR2468);

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
  CASE;

  // IF PAR.Block Order Flag is Block Order
  IF PAR.Block_Order_Flag = 'B';

  //?  (load contains a block order)
  // Send error message - 'Load &2 contains Block Orders--no update allowed.'
  ERROR(USR2441);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
  // IF PAR.Load Status is Shipped or Invoiced
  IF PAR.Load_Status = 'I'/'S';

  // Send error message - 'Load has been shipped can not unlock it'
  ERROR(USR1272);
  MSGPARM(PAR.Load_Status);

  //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?**** Determine if Load has been picked, if yes do not allow unlock
  //?**** This function checks OP Order Events & AS Picked Acknowledgment
  CASE;

  // IF PAR.Allow Unlock if Picked St is No
  IF PAR.Allow_Unlock_if_Picked_St = 'N';

  //?Do this one if par is NO. We dont want an UNLOCK if there are XOx
  //?  and it isnt shipping doing it.
  // Call program RTV Load Order Picked  XF.
  CALL PROGRAM(RTV Load Order Picked  XF) ('PDQVXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Pick_Status_USR);

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Pick_Status_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.Pick Status USR = CND.Not Picked
   PAR.Pick_Status_USR = 'N';

   //?USER: Process Data record

   // PAR.Pick Status USR = CND.Picked
   PAR.Pick_Status_USR = 'Y';

   QUIT;

  }

  ENDIF;

  //?Allow if picked but not Close Order or Close Truck  5/31/06
  CASE;

  // IF WRK.Pick Status USR is Picked
  IF WRK.Pick_Status_USR = 'Y';

  CASE;

  // IF PAR.Allow Unlock if Picked St is No
  IF PAR.Allow_Unlock_if_Picked_St = 'N';

  // Send error message - 'Unlocking of Load is not allowed for a Load which has been picked.'
  ERROR(USR1999);
  MSGPARM(PAR.Load_Status);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program PFS Val Close Ord/Trk XF.
  CALL PROGRAM(PFS Val Close Ord/Trk XF) ('PPYIXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Status_Y_or_N);

  CASE;

  // IF WRK.Status - Y or N is yes
  IF WRK.Status_Y_or_N = 'Y';

  // Send error message - 'Unlock Load not allowed for Load with a Closed Order or Closed Truck.'
  ERROR(USR3629);
  MSGPARM(PAR.*SFLSEL);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Unlock Load Pending'
  MESSAGE(USR1274 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  ENDIF;

  ENDIF;

  //?Allow if picked but not Close Order or Close Truck  5/31/06
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Unlock Load Pending'
  MESSAGE(USR1274 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


ENDIF;

CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

//?Auto Unlock after validations are passed
CASE;

// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
 PARAMETER(PAR.Load_ID);
 PARAMETER('U');
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('PLTFLRSYS');
  PARAMETER(LCL.Plant_Floor_System_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?Notify Accusort if locked load
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program DEL AS Order Hdr/Dtl   XF.
  CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Unlock Load/Order XF.
  CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
  PARAMETER(PAR.Load_ID);

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
  //?   delete it if Unproc, else change it to "D"elete/and reprocess
  // Call program Exc ChgDel EDI f/UnlckXF.
  CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
  PARAMETER(PAR.Load_ID);

 }

 EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Miles_to_next_stop);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Order_Number);
  {
   //?USER: Initialize routine

   //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
   //?                                    to remove Company RST or Pos
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

   //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
   //?                              was using the par replace with db1
   EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(*ZERO);
   {
    //?USER: Initialize routine

    //?par.@rated freight is the sum of all the detail rated frt, for adjusting
    // PAR.@Rated Freight = CON.*ZERO
    PAR.@Rated_Freight = *ZERO;

    //?par.usr process status is used to indicate if there are detail present
    // PAR.USR Process status = CND.no
    PAR.USR_Process_status = 'N';

    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Cancelled
    IF DB1.Detail_Line_Status = 'X';

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.USR Process status = CND.yes
    PAR.USR_Process_status = 'Y';

    CASE;

    // IF PAR.Order Weight Total is Equal to zero
    IF PAR.Order_Weight_Total = *ZERO;

    // OR PAR.Total Rated Freight is Zero
    OR PAR.Total_Rated_Freight = *ZERO;

    // PAR.Rated Freight = CON.*ZERO
    PAR.Rated_Freight = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Detail Line Status is Confirmed & Complete
    IF DB1.Detail_Line_Status = 'C'/'R';

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
    * PAR.Total_Rated_Freight 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
    / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

    ENDIF;

    // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
    PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

    ENDIF;

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
    PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

    // PAR.Order Sequence Number = DB1.Order Sequence Number
    PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

    // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
    PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

    ENDIF;

    //?USER: Exit processing

    //?Adjust totals
    CASE;

    // IF PAR.@Rated Freight NE PAR.Total Rated Freight
    IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

    // AND PAR.USR Process status is yes
    AND PAR.USR_Process_status = 'Y';

    // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
    WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

    // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
    PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

    //?Update last detail line processed
    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

  }

 }

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

}


// WRK.Load Change Type = CND.Unlock Load
WRK.Load_Change_Type = 'UNLOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(RCD.Load_Status);
PARAMETER('U');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(*ZERO);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// PAR.Access Denied (Y/N) = CND.no
PAR.Access_Denied_Y_N = 'N';

//?Update Function
DO;

//?FP1309 add the aging fields
EXECUTE FUNCTION(RTV for PA update val2RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1993258;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Warehouse_Code_SavUsr);
PARAMETER(LCL.OD_Production_Plan_Sts);
PARAMETER(LCL.Quantity_Scheduled_1_USR);
PARAMETER(LCL.Weight_Scheduled_USR);
PARAMETER(LCL.OD_Schedule_Override_Sts);
PARAMETER(LCL.OD_Adj_Type_Override);
PARAMETER(LCL.Item_age_days_usr);
PARAMETER(LCL.Prod_Ovr_AgeDte_Fr_Usr);
PARAMETER(LCL.Prod_Ovr_AgeDte_To_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If something has changed, dont allow option
CASE;

// IF RCD.Warehouse Code NE LCL.Warehouse Code SavUsr
IF RCD.Warehouse_Code <> LCL.Warehouse_Code_SavUsr;

// OR RCD.Weight Scheduled NE LCL.Weight Scheduled USR
OR RCD.Weight_Scheduled <> LCL.Weight_Scheduled_USR;

// OR RCD.Quantity Scheduled NE LCL.Quantity Scheduled 1 USR
OR RCD.Quantity_Scheduled <> LCL.Quantity_Scheduled_1_USR;

// OR RCD.OD Schedule Override Sts NE LCL.OD Schedule Override Sts
OR RCD.OD_Schedule_Override_Sts <> LCL.OD_Schedule_Override_Sts;

// OR RCD.OD Adj Type Override NE LCL.OD Adj Type Override
OR RCD.OD_Adj_Type_Override <> LCL.OD_Adj_Type_Override;

// OR RCD.Item Age Days NE LCL.Item age days usr
OR RCD.Item_Age_Days <> LCL.Item_age_days_usr;

// OR RCD.Production Ovr AgeDte Fr NE LCL.Prod Ovr AgeDte Fr Usr
OR RCD.Production_Ovr_AgeDte_Fr <> LCL.Prod_Ovr_AgeDte_Fr_Usr;

// OR RCD.Production Ovr AgeDte To NE LCL.Prod Ovr AgeDte To Usr
OR RCD.Production_Ovr_AgeDte_To <> LCL.Prod_Ovr_AgeDte_To_Usr;

// Send error message - 'Order has changed since display, option not allowed. Refresh screen.'
ERROR(USR4173);
MSGPARM(RCD.*SFLSEL);

//?If something has changed, dont allow option
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Job Date Usr = JOB.*Job date + CON.7 *DAYS
LCL.Job_Date_Usr = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?val order stuff and load stuff
CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?val load stuff
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?Validate
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?E2824 RMC 10/14/13 dont changes if locked here - code not changed
//?Validate
// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

// AND RCD.Scheduled Ship Date LE LCL.Job Date Usr
AND RCD.Scheduled_Ship_Date <= LCL.Job_Date_Usr;

//?if ship date is within 7 days, then dont allow
// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?Validate
// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

EXECUTE FUNCTION(EDT Unlock Load Edit   IF) TYPE(EXCINTFUN)                     AC1419445;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.*SFLSEL);
PARAMETER(LCL.Error_Status);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Load_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.USR_Check_Y_N_Status);
 PARAMETER(PAR.Block_Order_Flag);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.USR Check Y/N Status = CND.blank
  PAR.USR_Check_Y_N_Status = *BLANK;

  //?OMS203:  need to know if there are any Block orders on load
  // PAR.Block Order Flag = CND.Firm Order
  PAR.Block_Order_Flag = 'F';

  //?USER: Process Data record

  // PAR.USR Check Y/N Status = CND.yes
  PAR.USR_Check_Y_N_Status = 'Y';

  CASE;

  // IF DB1.Block Order Flag is Block Order
  IF DB1.Block_Order_Flag = 'B';

  // PAR.Block Order Flag = DB1.Block Order Flag
  PAR.Block_Order_Flag = DB1.Block_Order_Flag;

  QUIT;

  ENDIF;

 }

 //?RMC PFS017 6/5/6 new par.allow unlock if picked = N
 EXECUTE FUNCTION(EDT Unlock Load Edits  IF) TYPE(EXCINTFUN)                     AC1419437;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.*SFLSEL);
 PARAMETER(PAR.Error_Status);
 PARAMETER(PAR.Block_Order_Flag);
 PARAMETER('N');
 {
  //?Execute internal function

  //?assume will have error
  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
  PARAMETER('LOCKLD');
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Access_Denied_Y_N);
  {
   //?Execute internal function

   // PAR.User Profile Name = JOB.*USER
   PAR.User_Profile_Name = JOB.*USER;

   EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(WRK.Access_Denied_Y_N);
   {
    //?Execute internal function

    //?RMC 5/11/09 Rtv default company from user profile --
    //?  Override user code model company if it exists
    EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Allow_Multi_Company);
    PARAMETER(PAR.Default_Printer);
    PARAMETER(PAR.Salesperson_Code);
    PARAMETER(LCL.Company_Number);
    PARAMETER(PAR.User_Code_Model);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?User Profile Record Not found
    CASE;

    // IF PGM.*Return code is *Record does not exist
    IF PGM.*Return_code = 'Y2U0005';

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    //?User Profile Record Not found
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    ENDIF;

    CASE;

    // IF PAR.User Code Model is equal to blank
    IF PAR.User_Code_Model = *BLANK;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Code_Model);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    // PAR.Warehouse Code = LCL.Warehouse Code
    PAR.Warehouse_Code = LCL.Warehouse_Code;

    //?Return code when not normal for Application Profile
    CASE;

    // IF PGM.*Return code is *Normal
    IF PGM.*Return_code = *BLANK;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    //?Return code when not normal for Application Profile
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    ENDIF;

    CASE;

    // IF LCL.Company Number is greater than zero
    IF LCL.Company_Number > *ZERO;

    // PAR.Company Number = LCL.Company Number
    PAR.Company_Number = LCL.Company_Number;

    CASE;

    // IF LCL.Warehouse Code is Not Blanks
    IF LCL.Warehouse_Code <> *BLANK;

    EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(LCL.Shipping_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     CASE;

     // IF DB1.Record Status is Active
     IF DB1.Record_Status = 'A';

     CASE;

     // IF DB1.Production Warehouse Code is Warehouse Code not Blank
     IF DB1.Production_Warehouse_Code <> *BLANK;

     // PAR.Warehouse Code = DB1.Production Warehouse Code
     PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

     QUIT;

     ENDIF;

     ENDIF;

    }

    ENDIF;

    ENDIF;

   }

   // PAR.Company Number = WRK.Company Number
   PAR.Company_Number = WRK.Company_Number;

   // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
   PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

   //?If access denied is no, rtv co. name
   CASE;

   // IF WRK.Access Denied (Y/N) is no
   IF WRK.Access_Denied_Y_N = 'N';

   EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Name);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  //?check the entry control field too.  4/28/05 so christa can do.
  EXECUTE FUNCTION(Rtv Unlock Load Authr RT) TYPE(RTVOBJ) FILE(OPC0REP)           AC1736002;
  PARAMETER(JOB.*USER);
  PARAMETER('O/P');
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Unlock_Load_Authority);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Access Denied (Y/N) is yes
  IF PAR.Access_Denied_Y_N = 'Y';

  // AND WRK.Unlock Load Authority is Blank
  AND WRK.Unlock_Load_Authority = *BLANK;

  // Send error message - 'User not allowed to  Lock/Unlock Loads.'
  ERROR(USR2468);

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
  CASE;

  // IF PAR.Block Order Flag is Block Order
  IF PAR.Block_Order_Flag = 'B';

  //?  (load contains a block order)
  // Send error message - 'Load &2 contains Block Orders--no update allowed.'
  ERROR(USR2441);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
  // IF PAR.Load Status is Shipped or Invoiced
  IF PAR.Load_Status = 'I'/'S';

  // Send error message - 'Load has been shipped can not unlock it'
  ERROR(USR1272);
  MSGPARM(PAR.Load_Status);

  //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?**** Determine if Load has been picked, if yes do not allow unlock
  //?**** This function checks OP Order Events & AS Picked Acknowledgment
  CASE;

  // IF PAR.Allow Unlock if Picked St is No
  IF PAR.Allow_Unlock_if_Picked_St = 'N';

  //?Do this one if par is NO. We dont want an UNLOCK if there are XOx
  //?  and it isnt shipping doing it.
  // Call program RTV Load Order Picked  XF.
  CALL PROGRAM(RTV Load Order Picked  XF) ('PDQVXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Pick_Status_USR);

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Pick_Status_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.Pick Status USR = CND.Not Picked
   PAR.Pick_Status_USR = 'N';

   //?USER: Process Data record

   // PAR.Pick Status USR = CND.Picked
   PAR.Pick_Status_USR = 'Y';

   QUIT;

  }

  ENDIF;

  //?Allow if picked but not Close Order or Close Truck  5/31/06
  CASE;

  // IF WRK.Pick Status USR is Picked
  IF WRK.Pick_Status_USR = 'Y';

  CASE;

  // IF PAR.Allow Unlock if Picked St is No
  IF PAR.Allow_Unlock_if_Picked_St = 'N';

  // Send error message - 'Unlocking of Load is not allowed for a Load which has been picked.'
  ERROR(USR1999);
  MSGPARM(PAR.Load_Status);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program PFS Val Close Ord/Trk XF.
  CALL PROGRAM(PFS Val Close Ord/Trk XF) ('PPYIXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Status_Y_or_N);

  CASE;

  // IF WRK.Status - Y or N is yes
  IF WRK.Status_Y_or_N = 'Y';

  // Send error message - 'Unlock Load not allowed for Load with a Closed Order or Closed Truck.'
  ERROR(USR3629);
  MSGPARM(PAR.*SFLSEL);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Unlock Load Pending'
  MESSAGE(USR1274 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  ENDIF;

  ENDIF;

  //?Allow if picked but not Close Order or Close Truck  5/31/06
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Unlock Load Pending'
  MESSAGE(USR1274 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


ENDIF;

CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

//?Auto Unlock after validations are passed
CASE;

// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
 PARAMETER(PAR.Load_ID);
 PARAMETER('U');
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('PLTFLRSYS');
  PARAMETER(LCL.Plant_Floor_System_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?Notify Accusort if locked load
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program DEL AS Order Hdr/Dtl   XF.
  CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Unlock Load/Order XF.
  CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
  PARAMETER(PAR.Load_ID);

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
  //?   delete it if Unproc, else change it to "D"elete/and reprocess
  // Call program Exc ChgDel EDI f/UnlckXF.
  CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
  PARAMETER(PAR.Load_ID);

 }

 EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Miles_to_next_stop);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Order_Number);
  {
   //?USER: Initialize routine

   //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
   //?                                    to remove Company RST or Pos
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

   //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
   //?                              was using the par replace with db1
   EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(*ZERO);
   {
    //?USER: Initialize routine

    //?par.@rated freight is the sum of all the detail rated frt, for adjusting
    // PAR.@Rated Freight = CON.*ZERO
    PAR.@Rated_Freight = *ZERO;

    //?par.usr process status is used to indicate if there are detail present
    // PAR.USR Process status = CND.no
    PAR.USR_Process_status = 'N';

    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Cancelled
    IF DB1.Detail_Line_Status = 'X';

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.USR Process status = CND.yes
    PAR.USR_Process_status = 'Y';

    CASE;

    // IF PAR.Order Weight Total is Equal to zero
    IF PAR.Order_Weight_Total = *ZERO;

    // OR PAR.Total Rated Freight is Zero
    OR PAR.Total_Rated_Freight = *ZERO;

    // PAR.Rated Freight = CON.*ZERO
    PAR.Rated_Freight = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Detail Line Status is Confirmed & Complete
    IF DB1.Detail_Line_Status = 'C'/'R';

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
    * PAR.Total_Rated_Freight 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
    / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

    ENDIF;

    // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
    PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

    ENDIF;

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
    PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

    // PAR.Order Sequence Number = DB1.Order Sequence Number
    PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

    // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
    PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

    ENDIF;

    //?USER: Exit processing

    //?Adjust totals
    CASE;

    // IF PAR.@Rated Freight NE PAR.Total Rated Freight
    IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

    // AND PAR.USR Process status is yes
    AND PAR.USR_Process_status = 'Y';

    // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
    WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

    // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
    PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

    //?Update last detail line processed
    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

  }

 }

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

}


// WRK.Load Change Type = CND.Unlock Load
WRK.Load_Change_Type = 'UNLOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(RCD.Load_Status);
PARAMETER('U');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(*ZERO);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?allow edit Age Information if Error Sts = N
CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// Call program Edt Age Information   E1.
CALL PROGRAM(Edt Age Information   E1) ('PNO3E1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('Y');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?*
// LCL.*Reload subfile = CND.*YES
LCL.*Reload_subfile = 'Y';

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDDO;

ENDIF;

ENDIF;

//?E14784 - Disallow 17 if Orders Scheduled Ship Date GT Last Alloc Dt
//?19=Deallocate  FP1054 new option, with lock check->10/14 dont do lck chk
CASE;

// IF RCD.*SFLSEL is Option 19
IF RCD.*SFLSEL = '19';

CASE;

// IF RCD.Company Number is Guymon
IF ( RCD.Company_Number = 360;

// AND RCD.Requested Ship Date GT PAR.Kill Date 360 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_360_RGT );

// OR RCD.Company Number is Seaboard Triumph Foods
OR ( RCD.Company_Number = 440;

// AND RCD.Requested Ship Date GT PAR.Kill Date 440 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_440_RGT );

// OR RCD.Company Number is St. Joseph
OR ( RCD.Company_Number = 960;

// AND RCD.Requested Ship Date GT PAR.Kill Date 960 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_960_RGT );

//?ABOVE: Compare to requested ship date 8/23/19
//?Format requested Ship Date
// LCL.Scheduled Ship Date Alpha = CVTVAR(RCD.Requested Ship Date)
LCL.Scheduled_Ship_Date_Alpha = CVTVAR(RCD.Requested_Ship_Date);

// LCL.Scheduled Ship Date YY = SUBSTRING(LCL.Scheduled Ship Date Alpha,CON.2,CON.2)
LCL.Scheduled_Ship_Date_YY = SUBSTRING(LCL.Scheduled_Ship_Date_Alpha:2:2);

// LCL.Scheduled Ship Date MMDD = SUBSTRING(LCL.Scheduled Ship Date Alpha,CON.4,CON.4)
LCL.Scheduled_Ship_Date_MMDD = SUBSTRING(LCL.Scheduled_Ship_Date_Alpha:4:4);

// LCL.Scheduled Ship Date Fmt = CONCAT(LCL.Scheduled Ship Date MMDD,LCL.Scheduled Ship Date YY,CON.
LCL.Scheduled_Ship_Date_Fmt = LCL.Scheduled_Ship_Date_MMDD + LCL.Scheduled_Ship_Date_YY (*ZERO);

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(LCL.Scheduled_Ship_Date_Fmt);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


//?Format Last Allocation Date
CASE;

// IF RCD.Company Number is Guymon
IF RCD.Company_Number = 360;

// LCL.Last Allocation Date = PAR.Kill Date 360 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_360_RGT;

// IF RCD.Company Number is Sioux City
IF RCD.Company_Number = 440;

// LCL.Last Allocation Date = PAR.Kill Date 440 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_440_RGT;

// IF RCD.Company Number is St. Joseph
IF RCD.Company_Number = 960;

// LCL.Last Allocation Date = PAR.Kill Date 960 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_960_RGT;

ENDIF;

// LCL.Last Allocation DateAlpha = CVTVAR(LCL.Last Allocation Date)
LCL.Last_Allocation_DateAlpha = CVTVAR(LCL.Last_Allocation_Date);

// LCL.Last Allocation Date YY = SUBSTRING(LCL.Last Allocation DateAlpha,CON.2,CON.2)
LCL.Last_Allocation_Date_YY = SUBSTRING(LCL.Last_Allocation_DateAlpha:2:2);

// LCL.Last Allocation Date MMDD = SUBSTRING(LCL.Last Allocation DateAlpha,CON.4,CON.4)
LCL.Last_Allocation_Date_MMDD = SUBSTRING(LCL.Last_Allocation_DateAlpha:4:4);

// LCL.Last Allocation Date Fmt = CONCAT(LCL.Last Allocation Date MMDD,LCL.Last Allocation Date YY,C
LCL.Last_Allocation_Date_Fmt = LCL.Last_Allocation_Date_MMDD + LCL.Last_Allocation_Date_YY (*ZERO);

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(LCL.Last_Allocation_Date_Fmt);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// Send error message - 'Option &1 not allowed for Order &2  because Scheduled Ship Date &3 after La
ERROR(USR5118);
MSGPARM(LCL.Scheduled_Ship_Date_Fmt);
MSGPARM(LCL.Last_Allocation_Date_Fmt);
MSGPARM(19);
MSGPARM(RCD.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Job Date Usr = JOB.*Job date + CON.7 *DAYS
LCL.Job_Date_Usr = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?val order stuff and load stuff
CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?val load stuff
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?Validate
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?E2824 RMC 10/14/13 allow changes if locked - dont unlock/lock per PS chgs
//?Validate
//?Validate
ENDIF;

ENDIF;

ENDIF;

//?Deallocate if ERROR Sts = No
CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?Deallocate
// LCL.Quantity Ordered = CON.*ZERO
LCL.Quantity_Ordered = *ZERO;

// LCL.Weight Ordered = CON.*ZERO
LCL.Weight_Ordered = *ZERO;

// LCL.Quantity Scheduled = RCD.Quantity Scheduled
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Released by User  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1920658;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Chg Schedule Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1934083;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Chg Adj Type Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1647992;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?* FP1054 Create rcd * DLCORD
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('DLCORD');
PARAMETER('SLS');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

//?* FP1054 Hold order * HLDORD
//?RMC 10/18/13 dont hold order for prod hold
// LCL.Header Status Last = RCD.Header Status
LCL.Header_Status_Last = RCD.Header_Status;

// LCL.USR Production Hold = RCD.Production Hold
LCL.USR_Production_Hold = RCD.Production_Hold;

EXECUTE FUNCTION(CHG Prd Hld, Sts,Rsn   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1342647;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Header_Status);
PARAMETER(LCL.Header_Status_Last);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?FP1054 Create HLDORD
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('HLDORD');
PARAMETER('SLS');
PARAMETER('N');
PARAMETER('Y');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

//?*
// LCL.Quantity Scheduled = CON.*ZERO
LCL.Quantity_Scheduled = *ZERO;

// LCL.*Reload subfile = CND.*YES
LCL.*Reload_subfile = 'Y';

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?W78830 DN 07/13/21-Added option 6 to PPS Update condition value list.
//?Updates for Sched   (Options 2,6,16,21,22,23)
CASE;

// IF LCL.User Code Model is equal to blank
IF ( LCL.User_Code_Model = *BLANK;

// AND LCL.User Approval USR is No
AND LCL.User_Approval_USR = 'N' );

// AND RCD.*SFLSEL is PPS Update
AND RCD.*SFLSEL = '16'/'21'/'22'/'2'/'2'/'23'/'6'/'6';

//?RMC S11387 added chk lcl.User Approval USR  to allow option 2
// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

//?Updates for Sched   (Options 2,6,16,21,22,23)
// IF *OTHERWISE
IF *OTHERWISE;

//?(Options 2,6,16,21,22,23)
CASE;

// IF RCD.*SFLSEL is PPS Update
IF RCD.*SFLSEL = '16'/'21'/'22'/'2'/'2'/'23'/'6'/'6';

EXECUTE FUNCTION(RTV for PA update val2RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1993258;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Warehouse_Code_SavUsr);
PARAMETER(LCL.OD_Production_Plan_Sts);
PARAMETER(LCL.Quantity_Scheduled_1_USR);
PARAMETER(LCL.Weight_Scheduled_USR);
PARAMETER(LCL.OD_Schedule_Override_Sts);
PARAMETER(LCL.OD_Adj_Type_Override);
PARAMETER(LCL.Item_Age_Days);
PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
PARAMETER(LCL.Production_Ovr_AgeDte_To);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If something has changed, dont allow option else do it
CASE;

// IF RCD.Warehouse Code NE LCL.Warehouse Code SavUsr
IF RCD.Warehouse_Code <> LCL.Warehouse_Code_SavUsr;

// OR RCD.Weight Scheduled NE LCL.Weight Scheduled USR
OR RCD.Weight_Scheduled <> LCL.Weight_Scheduled_USR;

// OR RCD.Quantity Scheduled NE LCL.Quantity Scheduled 1 USR
OR RCD.Quantity_Scheduled <> LCL.Quantity_Scheduled_1_USR;

// OR RCD.OD Schedule Override Sts NE LCL.OD Schedule Override Sts
OR RCD.OD_Schedule_Override_Sts <> LCL.OD_Schedule_Override_Sts;

// OR RCD.OD Adj Type Override NE LCL.OD Adj Type Override
OR RCD.OD_Adj_Type_Override <> LCL.OD_Adj_Type_Override;

// OR RCD.Item Age Days NE LCL.Item Age Days
OR RCD.Item_Age_Days <> LCL.Item_Age_Days;

// OR RCD.Production Ovr AgeDte Fr NE LCL.Production Ovr AgeDte Fr
OR RCD.Production_Ovr_AgeDte_Fr <> LCL.Production_Ovr_AgeDte_Fr;

// OR RCD.Production Ovr AgeDte To NE LCL.Production Ovr AgeDte To
OR RCD.Production_Ovr_AgeDte_To <> LCL.Production_Ovr_AgeDte_To;

// Send error message - 'Order has changed since display, option not allowed. Refresh screen.'
ERROR(USR4173);
MSGPARM(RCD.*SFLSEL);

//?If something has changed, dont allow option else do it
// IF *OTHERWISE
IF *OTHERWISE;

//?R11918 DN 10/20/17-Get Allocation Method.
EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Allocation_Method);
PARAMETER(RCD.Order_Number);
{
 //?USER: Initialize routine

 //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
 //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Scheduled_Ship_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Allocation Method is Standard or Blank
 IF DB1.Allocation_Method = *BLANK/'S';

 EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
 PARAMETER(DB1.Company_Number);
 PARAMETER(JOB.*Job_date);
 PARAMETER(3);
 PARAMETER(LCL.Date_USR);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*DATE = DB1.Post to G/L Date
  PAR.*DATE = DB1.Post_to_G_L_Date;

  QUIT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

 }

 CASE;

 // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
 IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

 // PAR.Allocation Method = CND.Forward - ASAP
 PAR.Allocation_Method = 'F';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Allocation Method = CND.Backwards - JIT
 PAR.Allocation_Method = 'B';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Allocation Method = DB1.Allocation Method
 PAR.Allocation_Method = DB1.Allocation_Method;

 ENDIF;

}


//?R13899 RMC 10/11/18-If OD is price type= DST/TNK force to suspended sts
CASE;

// IF RCD.OD Price Type is Distressed
IF RCD.OD_Price_Type = 'DST';

// OR RCD.OD Price Type is Tanked
OR RCD.OD_Price_Type = 'TNK';

// LCL.Allocation Method = CND.Suspended-Inventory Only
LCL.Allocation_Method = 'I';

ENDIF;

CASE;

// IF LCL.User Code Model is equal to blank
IF LCL.User_Code_Model = *BLANK;

//?Opt 2 also allow if user has user authority "SO"
CASE;

// IF LCL.User Approval USR is Yes
IF LCL.User_Approval_USR = 'Y';

//?R11918 DN 10/20/17-Do Not Allow Option 2 if 'I=Suspended Inventory'.
CASE;

// IF RCD.*SFLSEL is Option 2
IF RCD.*SFLSEL = '2'/'2';

// AND LCL.Allocation Method is Suspended-Inventory Only
AND LCL.Allocation_Method = 'I';

// LCL.Generic Message 80 USR = CONCAT(CON.Opt not allowed. Item is,CON.in Suspended Inventory.,CON.
LCL.Generic_Message_80_USR = 'Opt not allowed. Item is' + 'in Suspended Inventory.' (1);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

QUIT;

ENDIF;

//?E14784 - Disallow 17 if Orders Scheduled Ship Date GT Last Alloc Dt
//?2=Edit Schedule Production
CASE;

// IF RCD.*SFLSEL is Option 2
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF RCD.Company Number is Guymon
IF ( RCD.Company_Number = 360;

// AND RCD.Requested Ship Date GT PAR.Kill Date 360 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_360_RGT );

// OR RCD.Company Number is Seaboard Triumph Foods
OR ( RCD.Company_Number = 440;

// AND RCD.Requested Ship Date GT PAR.Kill Date 440 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_440_RGT );

// OR RCD.Company Number is St. Joseph
OR ( RCD.Company_Number = 960;

// AND RCD.Requested Ship Date GT PAR.Kill Date 960 RGT
AND RCD.Requested_Ship_Date > PAR.Kill_Date_960_RGT );

//?ABOVE: compare to requested ship date  8/23/19
//?Format requested Ship Date    8/23/19
// LCL.Scheduled Ship Date Alpha = CVTVAR(RCD.Requested Ship Date)
LCL.Scheduled_Ship_Date_Alpha = CVTVAR(RCD.Requested_Ship_Date);

// LCL.Scheduled Ship Date YY = SUBSTRING(LCL.Scheduled Ship Date Alpha,CON.2,CON.2)
LCL.Scheduled_Ship_Date_YY = SUBSTRING(LCL.Scheduled_Ship_Date_Alpha:2:2);

// LCL.Scheduled Ship Date MMDD = SUBSTRING(LCL.Scheduled Ship Date Alpha,CON.4,CON.4)
LCL.Scheduled_Ship_Date_MMDD = SUBSTRING(LCL.Scheduled_Ship_Date_Alpha:4:4);

// LCL.Scheduled Ship Date Fmt = CONCAT(LCL.Scheduled Ship Date MMDD,LCL.Scheduled Ship Date YY,CON.
LCL.Scheduled_Ship_Date_Fmt = LCL.Scheduled_Ship_Date_MMDD + LCL.Scheduled_Ship_Date_YY (*ZERO);

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(LCL.Scheduled_Ship_Date_Fmt);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


//?Format Last Allocation Date
CASE;

// IF RCD.Company Number is Guymon
IF RCD.Company_Number = 360;

// LCL.Last Allocation Date = PAR.Kill Date 360 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_360_RGT;

// IF RCD.Company Number is Sioux City
IF RCD.Company_Number = 440;

// LCL.Last Allocation Date = PAR.Kill Date 440 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_440_RGT;

// IF RCD.Company Number is St. Joseph
IF RCD.Company_Number = 960;

// LCL.Last Allocation Date = PAR.Kill Date 960 RGT
LCL.Last_Allocation_Date = PAR.Kill_Date_960_RGT;

ENDIF;

// LCL.Last Allocation DateAlpha = CVTVAR(LCL.Last Allocation Date)
LCL.Last_Allocation_DateAlpha = CVTVAR(LCL.Last_Allocation_Date);

// LCL.Last Allocation Date YY = SUBSTRING(LCL.Last Allocation DateAlpha,CON.2,CON.2)
LCL.Last_Allocation_Date_YY = SUBSTRING(LCL.Last_Allocation_DateAlpha:2:2);

// LCL.Last Allocation Date MMDD = SUBSTRING(LCL.Last Allocation DateAlpha,CON.4,CON.4)
LCL.Last_Allocation_Date_MMDD = SUBSTRING(LCL.Last_Allocation_DateAlpha:4:4);

// LCL.Last Allocation Date Fmt = CONCAT(LCL.Last Allocation Date MMDD,LCL.Last Allocation Date YY,C
LCL.Last_Allocation_Date_Fmt = LCL.Last_Allocation_Date_MMDD + LCL.Last_Allocation_Date_YY (*ZERO);

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(LCL.Last_Allocation_Date_Fmt);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// Send error message - 'Option &1 not allowed for Order &2  because Scheduled Ship Date &3 after La
ERROR(USR5118);
MSGPARM(LCL.Scheduled_Ship_Date_Fmt);
MSGPARM(LCL.Last_Allocation_Date_Fmt);
MSGPARM(2);
MSGPARM(RCD.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Update Flag = CND.Yes
RCD.USR_Update_Flag = 'Y';

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Job Date Usr = JOB.*Job date + CON.7 *DAYS
LCL.Job_Date_Usr = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?val order stuff and load stuff
CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?val load stuff
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?Validate
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?E2824 RMC 10/14/13 allow changes if locked - dont unlock/lock per PS chgs
//?Validate
//?Validate
ENDIF;

ENDIF;

ENDIF;

//?Deallocate if ERROR Sts = No and Process entries
CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?************
// PAR.OD Schedule Override Sts = CND.No
PAR.OD_Schedule_Override_Sts = *BLANK;

//?Deallocate if any qty sched ord was changed
CASE;

// IF RCD.Qty Sched Ord 1 USR NE RCD.Qty Sched Prod 1 USR
IF RCD.Qty_Sched_Ord_1_USR <> RCD.Qty_Sched_Prod_1_USR;

// OR RCD.Qty Sched Ord 2 USR NE RCD.Qty Sched Prod 2 USR
OR RCD.Qty_Sched_Ord_2_USR <> RCD.Qty_Sched_Prod_2_USR;

// OR RCD.Qty Sched Ord 3 USR NE RCD.Qty Sched Prod 3 USR
OR RCD.Qty_Sched_Ord_3_USR <> RCD.Qty_Sched_Prod_3_USR;

// OR RCD.Qty Sched Ord 4 USR NE RCD.Qty Sched Prod 4 USR
OR RCD.Qty_Sched_Ord_4_USR <> RCD.Qty_Sched_Prod_4_USR;

// OR RCD.Qty Sched Ord 5 USR NE RCD.Qty Sched Prod 5 USR
OR RCD.Qty_Sched_Ord_5_USR <> RCD.Qty_Sched_Prod_5_USR;

// OR RCD.Qty Sched Ord 6 USR NE RCD.Qty Sched Prod 6 USR
OR RCD.Qty_Sched_Ord_6_USR <> RCD.Qty_Sched_Prod_6_USR;

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// LCL.Quantity Ordered = CON.*ZERO
LCL.Quantity_Ordered = *ZERO;

// LCL.Weight Ordered = CON.*ZERO
LCL.Weight_Ordered = *ZERO;

// LCL.Quantity Scheduled = RCD.Quantity Scheduled
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

//?1/04/2013 RMC Dont Deallocate inventory -- just sched production
// LCL.Quantity Scheduled = RCD.Quantity Scheduled - RCD.Inv Total             USR
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled - RCD.Inv_Total_USR;

//?06/07/17 DN T10731-Per RC, commented out codes not in PROD.
//?06/07/17 DN T10731-Reinstate PROD code.
// LCL.Weight Scheduled = RCD.Weight Scheduled - LCL.Weight Ordered
LCL.Weight_Scheduled = RCD.Weight_Scheduled - LCL.Weight_Ordered;

//?************
// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

//?************
//?1/04/13 leave inv in sched - moved here from under the chgobjs below
// RCD.Quantity Scheduled = RCD.Inv Total             USR
RCD.Quantity_Scheduled = RCD.Inv_Total_USR;

// RCD.Weight Scheduled = RCD.Unit Weight * RCD.Inv Total             USR *
RCD.Weight_Scheduled = RCD.Unit_Weight * RCD.Inv_Total_USR;

// LCL.Quantity Scheduled = RCD.Inv Total             USR
LCL.Quantity_Scheduled = RCD.Inv_Total_USR;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

//?************
EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Released by User  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1920658;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Chg Schedule Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1934083;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.OD Schedule Override Sts = CND.Yes
PAR.OD_Schedule_Override_Sts = 'Y';

// RCD.Production            USR = CON.*ZERO
RCD.Production_USR = *ZERO;

// RCD.Quantity Sched 5.0 USR = RCD.Inv Total             USR
RCD.Quantity_Sched_5_0_USR = RCD.Inv_Total_USR;

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

//?*
ENDIF;

//?Show fields as input
// RCD.Output Only 1 USR = CND.no
RCD.Output_Only_1_USR = 'N';

SET CURSOR;

//?******** OPTION 2 **********
//?CHG: Process Scheduled Production days 1 - 6 entries
CASE;

// IF PAR.OD Schedule Override Sts is Yes
IF PAR.OD_Schedule_Override_Sts = 'Y';

//?C0476 - look at next day as in the case of hold overs
//?RMC look at requested isntead of scheduled      8/23/19
// LCL.Scheduled Ship Date USR = RCD.Requested Ship Date + CON.1 *DAYS
LCL.Scheduled_Ship_Date_USR = DATEINCR(RCD.Requested_Ship_Date 1 'DY' 1111111 'NONE' 'N'           +
1);

//?Scheduled Production 1
CASE;

// IF RCD.Qty Sched Ord 1 USR is GT Zero
IF RCD.Qty_Sched_Ord_1_USR > *ZERO;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 1 LT RCD.Production Date RGF
IF CTL.USR_Day_1 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_1);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_1_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 1 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_1 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_1);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_1_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 1 USR = CON.*ZERO
RCD.Qty_Sched_Prod_1_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_1);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(RCD.Qty_Sched_Prod_1_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?Scheduled Production 2
CASE;

// IF RCD.Qty Sched Ord 2 USR is GT Zero
IF RCD.Qty_Sched_Ord_2_USR > *ZERO;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 2 LT RCD.Production Date RGF
IF CTL.USR_Day_2 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_2);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_2_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 2 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_2 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_2);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_2_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 2 USR = CON.*ZERO
RCD.Qty_Sched_Prod_2_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_2);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(RCD.Qty_Sched_Prod_2_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?Scheduled Production 3
CASE;

// IF RCD.Qty Sched Ord 3 USR is GT Zero
IF RCD.Qty_Sched_Ord_3_USR > *ZERO;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 3 LT RCD.Production Date RGF
IF CTL.USR_Day_3 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_3);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_3_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 3 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_3 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_3);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_3_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 3 USR = CON.*ZERO
RCD.Qty_Sched_Prod_3_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_3);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(RCD.Qty_Sched_Prod_3_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?Scheduled Production 4
CASE;

// IF RCD.Qty Sched Ord 4 USR is GT 0
IF RCD.Qty_Sched_Ord_4_USR > 0;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 4 LT RCD.Production Date RGF
IF CTL.USR_Day_4 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_4);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_4_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 4 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_4 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_4);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_4_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 4 USR = CON.*ZERO
RCD.Qty_Sched_Prod_4_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_4);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(RCD.Qty_Sched_Prod_4_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?Scheduled Production 5
CASE;

// IF RCD.Qty Sched Ord 5 USR is GT 0
IF RCD.Qty_Sched_Ord_5_USR > *ZERO;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 5 LT RCD.Production Date RGF
IF CTL.USR_Day_5 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_5);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_5_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 5 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_5 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_5);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_5_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 5 USR = CON.*ZERO
RCD.Qty_Sched_Prod_5_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_5);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(RCD.Qty_Sched_Prod_5_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?Scheduled Production 6
CASE;

// IF RCD.Qty Sched Ord 6 USR is GT 0
IF RCD.Qty_Sched_Ord_6_USR > 0;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 6 LT RCD.Production Date RGF
IF CTL.USR_Day_6 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_6);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_6_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 6 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_6 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_6);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_6_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 6 USR = CON.*ZERO
RCD.Qty_Sched_Prod_6_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_6);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_6_USR);
PARAMETER(RCD.Qty_Sched_Prod_6_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?added 6/15/09
CASE;

// IF LCL.Post Flag USR is Yes
IF LCL.Post_Flag_USR = 'Y';

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// RCD.Quantity Sched 5.0 USR = RCD.Quantity Scheduled
RCD.Quantity_Sched_5_0_USR = RCD.Quantity_Scheduled;

// LCL.Quantity Scheduled = RCD.Quantity Scheduled
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

// LCL.*Reload subfile = CND.*YES
LCL.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?2=Edit Schedule Production
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?R11918 DN 10/20/17-Do Not Allow Opt 2, 16 if 'I=Suspended Inventory'.
CASE;

// IF LCL.Allocation Method is Suspended-Inventory Only
IF LCL.Allocation_Method = 'I';

// AND RCD.*SFLSEL is Option 2
AND ( RCD.*SFLSEL = '2'/'2';

// OR RCD.*SFLSEL is Option 16
OR RCD.*SFLSEL = '16' );

// LCL.Generic Message 80 USR = CONCAT(CON.Opt not allowed. Item is,CON.in Suspended Inventory.,CON.
LCL.Generic_Message_80_USR = 'Opt not allowed. Item is' + 'in Suspended Inventory.' (1);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

QUIT;

ENDIF;

//?6=Chg Ord Qty              W78830 DN 07/13/21-Added Opt 6.
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

//?Codes below was copied from Opt 2 in PORYDFR function.
EXECUTE FUNCTION(RTV Chk Detail Exists  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425981;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Edit existing order details, etc. or issue error message
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Order has no products--Edit Order Header.'
ERROR(USR2064);
MSGPARM(RCD.*SFLSEL);

//?Edit existing order details, etc. or issue error message
// IF RCD.Event Code is 04 Shipped
IF RCD.Event_Code = '04';

// Send error message - 'Order &1 has been partially confirmed, no change allowed.'
ERROR(USR1334);
MSGPARM(RCD.Order_Number);
MSGPARM(RCD.*SFLSEL);

//?Edit existing order details, etc. or issue error message
// IF RCD.Order in Use is yes
IF RCD.Order_in_Use = 'Y';

// Send error message - 'Order &1 is in use by another user'
ERROR(USR0508);
MSGPARM(RCD.Order_Number);

//?Edit existing order details, etc. or issue error message
// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

// Send error message - 'Order &2 can't be changed:  on a locked load.'
ERROR(USR1891);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

//?Edit existing order details, etc. or issue error message
// IF RCD.Pick Status USR is Picked
IF RCD.Pick_Status_USR = 'Y';

//?RMC PFS017 6/6/6 added this condition
// Send error message - 'Order &2 can't be changed:  on a locked load.'
ERROR(USR1891);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

//?Edit existing order details, etc. or issue error message
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Process Control = CND.Process Change
WRK.Process_Control = 'C';

// Call program EDT Order Entry Home   XF.
CALL PROGRAM(EDT Order Entry Home   XF) ('PDSQXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Process_Control);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?16=Ship Off Cut     FP1054 - reinstate to get cur day's orders shipped
CASE;

// IF RCD.*SFLSEL is Option 16
IF RCD.*SFLSEL = '16';

EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(RCD.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Production_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF RCD.Requested Ship Date GT LCL.Production Date
IF RCD.Requested_Ship_Date > LCL.Production_Date;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//?only porksche can do this
CASE;

// IF LCL.User Code Model is equal to blank
IF LCL.User_Code_Model = *BLANK;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

//?only porksche can do this
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Quantity Scheduled = RCD.Production            USR + RCD.Inv Total             USR
LCL.Quantity_Scheduled = RCD.Production_USR + RCD.Inv_Total_USR;

// LCL.Weight Scheduled = LCL.Quantity Scheduled * RCD.Unit Weight *Rounded
LCL.Weight_Scheduled = LCL.Quantity_Scheduled * RCD.Unit_Weight 'H';

//?In theory, ship off cut is primarily used for boxed product and
//?Scheduled Ship Date and Requested Ship Date should be the same.
//?If they are trying to Ship off Cut for Combo, then they need
//?to change the Requested Ship Date to be the same as Scheduled Ship Date
// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('SC');
PARAMETER('SHPOFFCUT');
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?* Clear the Upload error flags                        C001956
EXECUTE FUNCTION(CHG Ord Req Revw- flg CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2036232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 //?Does not update the record stamp fields
}


// RCD.Order Line Error Type = CND.No Order Upload Errors
RCD.Order_Line_Error_Type = *BLANK;

EXECUTE FUNCTION(CHG Ord Line Error Typ CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC2029048;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Order_Line_Error_Type);
{
 //?USER: Processing before Data read

 //?** This routine does NOT update the change audit fields  P001251
}


// LCL.*Reload subfile = CND.*YES
LCL.*Reload_subfile = 'Y';

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?21=Reallocate  with override freeze time
CASE;

// IF RCD.*SFLSEL is Option 21
IF RCD.*SFLSEL = '21';

CASE;

// IF RCD.Warehouse Type is Frozen
IF RCD.Warehouse_Type = 'FZ';

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Job Date Usr = JOB.*Job date + CON.7 *DAYS
LCL.Job_Date_Usr = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?val order stuff and load stuff
CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?val load stuff
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?Validate
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?E2824 RMC 10/14/13 allow changes if locked - dont unlock/lock per PS chgs
//?Validate
//?Validate
ENDIF;

ENDIF;

ENDIF;

//?Reallocate if ERROR sts = No,with Alloc-ovrde FZ type "OF"
CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?Deallocate
// LCL.Quantity Ordered = CON.*ZERO
LCL.Quantity_Ordered = *ZERO;

// LCL.Weight Ordered = CON.*ZERO
LCL.Weight_Ordered = *ZERO;

// LCL.Quantity Scheduled = RCD.Quantity Scheduled
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Released by User  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1920658;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Allocate
// LCL.Quantity Ordered = RCD.Quantity Ordered
LCL.Quantity_Ordered = RCD.Quantity_Ordered;

// LCL.Weight Ordered = RCD.Weight Ordered
LCL.Weight_Ordered = RCD.Weight_Ordered;

// LCL.Quantity Scheduled = CON.*ZERO
LCL.Quantity_Scheduled = *ZERO;

// LCL.Weight Scheduled = CON.*ZERO
LCL.Weight_Scheduled = *ZERO;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('OF');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?* FP1054 update Freeze Time override sts 5/26/09
EXECUTE FUNCTION(Chg Adj Type Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1647992;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('Z');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?* Clear the Upload error flags                        C001956
EXECUTE FUNCTION(CHG Ord Req Revw- flg CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2036232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 //?Does not update the record stamp fields
}


// RCD.Order Line Error Type = CND.No Order Upload Errors
RCD.Order_Line_Error_Type = *BLANK;

EXECUTE FUNCTION(CHG Ord Line Error Typ CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC2029048;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Order_Line_Error_Type);
{
 //?USER: Processing before Data read

 //?** This routine does NOT update the change audit fields  P001251
}


//?* FP1054 Create rcd * RLCORD
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('RLCORD');
PARAMETER('SLS');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?*
// LCL.*Reload subfile = CND.*YES
LCL.*Reload_subfile = 'Y';

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?22=Allocate Inv First or Last-- FP1054 new option, with lock check
CASE;

// IF RCD.*SFLSEL is Option 22
IF RCD.*SFLSEL = '22';

//?Valid for FREEZER CONVERTED Items and FRESH BASE items
//?        Valid for any BASE order now  6/10/09
//?Validations:
CASE;

// IF RCD.Warehouse Type is Frozen
IF ( ( RCD.Warehouse_Type = 'FZ';

// AND RCD.Base/Conv/Loss Item is Converted
AND RCD.Base_Conv_Loss_Item = 'C' );

// OR RCD.Base/Conv/Loss Item is Base
OR RCD.Base_Conv_Loss_Item = 'B' );

// AND RCD.Requested Ship Date GE JOB.*Job date
AND RCD.Requested_Ship_Date >= JOB.*Job_date;

//?ABOCE: compare to requested instead of scheduled  8/23/19
EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Job Date Usr = JOB.*Job date + CON.7 *DAYS
LCL.Job_Date_Usr = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?val order stuff and load stuff
CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?val load stuff
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?Validate
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?E2824 RMC 10/14/13 allow changes if locked - dont unlock/lock per PS chgs
//?Validate
//?Validate
ENDIF;

ENDIF;

ENDIF;

//?Validations:
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?De/Reallocate if ERROR sts = No
CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?Deallocate
// LCL.OD Adj Type Override = RCD.OD Adj Type Override
LCL.OD_Adj_Type_Override = RCD.OD_Adj_Type_Override;

// LCL.Quantity Ordered = CON.*ZERO
LCL.Quantity_Ordered = *ZERO;

// LCL.Weight Ordered = CON.*ZERO
LCL.Weight_Ordered = *ZERO;

// LCL.Quantity Scheduled = RCD.Quantity Scheduled
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Released by User  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1920658;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Chg Schedule Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1934083;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Chg Adj Type Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1647992;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Allocate
//?Freezer
CASE;

// IF RCD.Warehouse Type is Frozen
IF RCD.Warehouse_Type = 'FZ';

CASE;

// IF LCL.OD Adj Type Override is Alloc Inventory First
IF LCL.OD_Adj_Type_Override = 'F';

// OR RCD.Frozen Inv Allocation Seq is First
OR ( RCD.Frozen_Inv_Allocation_Seq = 'F';

// AND LCL.OD Adj Type Override is Blank
AND LCL.OD_Adj_Type_Override = *BLANK );

//?do other alloc -- which is inventory Last
// RCD.OD Adj Type Override = CND.Alloc Inventory Last
RCD.OD_Adj_Type_Override = 'L';

// LCL.ATS Adj Type USR = CND.Order Allocate-Inv Last
LCL.ATS_Adj_Type_USR = 'OL';

// IF LCL.OD Adj Type Override is Alloc Inventory Last
IF LCL.OD_Adj_Type_Override = 'L';

// OR LCL.OD Adj Type Override is Blank
OR ( LCL.OD_Adj_Type_Override = *BLANK;

// AND RCD.Frozen Inv Allocation Seq is Last
AND RCD.Frozen_Inv_Allocation_Seq = 'L' );

//? do normal alloc -- which is inventory First
// RCD.OD Adj Type Override = CND.Alloc Inventory First
RCD.OD_Adj_Type_Override = 'F';

// LCL.ATS Adj Type USR = CND.Order Allocate-Inv First
LCL.ATS_Adj_Type_USR = 'OI';

ENDIF;

ENDIF;

//?Fresh
CASE;

// IF RCD.Warehouse Type is Fresh
IF RCD.Warehouse_Type = 'FR';

CASE;

// IF LCL.OD Adj Type Override is Alloc Inventory First
IF LCL.OD_Adj_Type_Override = 'F';

// OR LCL.OD Adj Type Override is Blank
OR ( LCL.OD_Adj_Type_Override = *BLANK;

// AND RCD.Fresh Inv Allocation Seq is First
AND RCD.Fresh_Inv_Allocation_Seq = 'F' );

//?do other alloc -- which is inventory Last
// RCD.OD Adj Type Override = CND.Alloc Inventory Last
RCD.OD_Adj_Type_Override = 'L';

// LCL.ATS Adj Type USR = CND.Order Allocate-Inv Last
LCL.ATS_Adj_Type_USR = 'OL';

// IF LCL.OD Adj Type Override is Alloc Inventory Last
IF LCL.OD_Adj_Type_Override = 'L';

// OR LCL.OD Adj Type Override is Blank
OR ( LCL.OD_Adj_Type_Override = *BLANK;

// AND RCD.Fresh Inv Allocation Seq is Last
AND RCD.Fresh_Inv_Allocation_Seq = 'L' );

//?do normal alloc -- which is inventory First
// RCD.OD Adj Type Override = CND.Alloc Inventory First
RCD.OD_Adj_Type_Override = 'F';

// LCL.ATS Adj Type USR = CND.Order Allocate-Inv First
LCL.ATS_Adj_Type_USR = 'OI';

ENDIF;

ENDIF;

// LCL.Quantity Ordered = RCD.Quantity Ordered
LCL.Quantity_Ordered = RCD.Quantity_Ordered;

// LCL.Weight Ordered = RCD.Weight Ordered
LCL.Weight_Ordered = RCD.Weight_Ordered;

// LCL.Quantity Scheduled = CON.*ZERO
LCL.Quantity_Scheduled = *ZERO;

// LCL.Weight Scheduled = CON.*ZERO
LCL.Weight_Scheduled = *ZERO;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER(LCL.ATS_Adj_Type_USR);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Chg Adj Type Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1647992;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.OD_Adj_Type_Override);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?* FP1054 Create rcd * RLCORD
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('RLCORD');
PARAMETER('SLS');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

//?*
// LCL.*Reload subfile = CND.*YES
LCL.*Reload_subfile = 'Y';

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

ENDIF;

//?23=Reallocate  with override freeze time to allow older than 2 yrs
CASE;

// IF RCD.*SFLSEL is Option 23
IF RCD.*SFLSEL = '23';

CASE;

// IF RCD.Warehouse Type is Frozen
IF RCD.Warehouse_Type = 'FZ';

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Job Date Usr = JOB.*Job date + CON.7 *DAYS
LCL.Job_Date_Usr = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?val order stuff and load stuff
CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?val load stuff
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?Validate
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?E2824 RMC 10/14/13 allow changes if locked - dont unlock/lock per PS chgs
//?Validate
//?Validate
ENDIF;

ENDIF;

ENDIF;

//?Reallocate if ERROR sts = No,with Alloc-ovrde FZ type "FO"
CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?Deallocate
// LCL.Quantity Ordered = CON.*ZERO
LCL.Quantity_Ordered = *ZERO;

// LCL.Weight Ordered = CON.*ZERO
LCL.Weight_Ordered = *ZERO;

// LCL.Quantity Scheduled = RCD.Quantity Scheduled
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Released by User  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1920658;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Allocate
// LCL.Quantity Ordered = RCD.Quantity Ordered
LCL.Quantity_Ordered = RCD.Quantity_Ordered;

// LCL.Weight Ordered = RCD.Weight Ordered
LCL.Weight_Ordered = RCD.Weight_Ordered;

// LCL.Quantity Scheduled = CON.*ZERO
LCL.Quantity_Scheduled = *ZERO;

// LCL.Weight Scheduled = CON.*ZERO
LCL.Weight_Scheduled = *ZERO;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('FO');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?* FP1054 update Freeze Time override sts 5/26/09
EXECUTE FUNCTION(Chg Adj Type Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1647992;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('O');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?* Clear the Upload error flags                        C001956
EXECUTE FUNCTION(CHG Ord Req Revw- flg CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2036232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 //?Does not update the record stamp fields
}


// RCD.Order Line Error Type = CND.No Order Upload Errors
RCD.Order_Line_Error_Type = *BLANK;

EXECUTE FUNCTION(CHG Ord Line Error Typ CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC2029048;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Order_Line_Error_Type);
{
 //?USER: Processing before Data read

 //?** This routine does NOT update the change audit fields  P001251
}


//?* FP1054 Create rcd * RLCORD
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('RLCORD');
PARAMETER('SLS');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?*
// LCL.*Reload subfile = CND.*YES
LCL.*Reload_subfile = 'Y';

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?2=Edit Schedule Production
CASE;

// IF RCD.*SFLSEL is Option 2
IF RCD.*SFLSEL = '2'/'2';

// RCD.USR Update Flag = CND.Yes
RCD.USR_Update_Flag = 'Y';

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Job Date Usr = JOB.*Job date + CON.7 *DAYS
LCL.Job_Date_Usr = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?val order stuff and load stuff
CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF LCL.Header Status is Cancelled
IF LCL.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?val order stuff and load stuff
// IF *OTHERWISE
IF *OTHERWISE;

//?val load stuff
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?Validate
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

//?E2824 RMC 10/14/13 allow changes if locked - dont unlock/lock per PS chgs
//?Validate
//?Validate
ENDIF;

ENDIF;

ENDIF;

//?Deallocate if ERROR Sts = No and Process entries
CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?************
// PAR.OD Schedule Override Sts = CND.No
PAR.OD_Schedule_Override_Sts = *BLANK;

//?Deallocate if any qty sched ord was changed
CASE;

// IF RCD.Qty Sched Ord 1 USR NE RCD.Qty Sched Prod 1 USR
IF RCD.Qty_Sched_Ord_1_USR <> RCD.Qty_Sched_Prod_1_USR;

// OR RCD.Qty Sched Ord 2 USR NE RCD.Qty Sched Prod 2 USR
OR RCD.Qty_Sched_Ord_2_USR <> RCD.Qty_Sched_Prod_2_USR;

// OR RCD.Qty Sched Ord 3 USR NE RCD.Qty Sched Prod 3 USR
OR RCD.Qty_Sched_Ord_3_USR <> RCD.Qty_Sched_Prod_3_USR;

// OR RCD.Qty Sched Ord 4 USR NE RCD.Qty Sched Prod 4 USR
OR RCD.Qty_Sched_Ord_4_USR <> RCD.Qty_Sched_Prod_4_USR;

// OR RCD.Qty Sched Ord 5 USR NE RCD.Qty Sched Prod 5 USR
OR RCD.Qty_Sched_Ord_5_USR <> RCD.Qty_Sched_Prod_5_USR;

// OR RCD.Qty Sched Ord 6 USR NE RCD.Qty Sched Prod 6 USR
OR RCD.Qty_Sched_Ord_6_USR <> RCD.Qty_Sched_Prod_6_USR;

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// LCL.Quantity Ordered = CON.*ZERO
LCL.Quantity_Ordered = *ZERO;

// LCL.Weight Ordered = CON.*ZERO
LCL.Weight_Ordered = *ZERO;

// LCL.Quantity Scheduled = RCD.Quantity Scheduled
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

//?1/04/2013 RMC Dont Deallocate inventory -- just sched production
// LCL.Quantity Scheduled = RCD.Quantity Scheduled - RCD.Inv Total             USR
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled - RCD.Inv_Total_USR;

//?06/07/17 DN T10731-Per RC, commented out codes not in PROD.
//?06/07/17 DN T10731-Reinstate PROD code.
// LCL.Weight Scheduled = RCD.Weight Scheduled - LCL.Weight Ordered
LCL.Weight_Scheduled = RCD.Weight_Scheduled - LCL.Weight_Ordered;

//?************
// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

//?************
//?1/04/13 leave inv in sched - moved here from under the chgobjs below
// RCD.Quantity Scheduled = RCD.Inv Total             USR
RCD.Quantity_Scheduled = RCD.Inv_Total_USR;

// RCD.Weight Scheduled = RCD.Unit Weight * RCD.Inv Total             USR *
RCD.Weight_Scheduled = RCD.Unit_Weight * RCD.Inv_Total_USR;

// LCL.Quantity Scheduled = RCD.Inv Total             USR
LCL.Quantity_Scheduled = RCD.Inv_Total_USR;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

//?************
EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Released by User  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1920658;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Chg Schedule Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1934083;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.OD Schedule Override Sts = CND.Yes
PAR.OD_Schedule_Override_Sts = 'Y';

// RCD.Production            USR = CON.*ZERO
RCD.Production_USR = *ZERO;

// RCD.Quantity Sched 5.0 USR = RCD.Inv Total             USR
RCD.Quantity_Sched_5_0_USR = RCD.Inv_Total_USR;

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

//?*
ENDIF;

//?Show fields as input
// RCD.Output Only 1 USR = CND.no
RCD.Output_Only_1_USR = 'N';

SET CURSOR;

//?******** OPTION 2 **********
//?CHG: Process Scheduled Production days 1 - 6 entries
CASE;

// IF PAR.OD Schedule Override Sts is Yes
IF PAR.OD_Schedule_Override_Sts = 'Y';

//?C0476 - look at next day as in the case of hold overs
//?RMC 8/23/19- look at requested instead of scheduled
// LCL.Scheduled Ship Date USR = RCD.Requested Ship Date + CON.1 *DAYS
LCL.Scheduled_Ship_Date_USR = DATEINCR(RCD.Requested_Ship_Date 1 'DY' 1111111 'NONE' 'N'           +
1);

//?Scheduled Production 1
CASE;

// IF RCD.Qty Sched Ord 1 USR is GT Zero
IF RCD.Qty_Sched_Ord_1_USR > *ZERO;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 1 LT RCD.Production Date RGF
IF CTL.USR_Day_1 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_1);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_1_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 1 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_1 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_1);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_1_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 1 USR = CON.*ZERO
RCD.Qty_Sched_Prod_1_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_1);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(RCD.Qty_Sched_Prod_1_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?Scheduled Production 2
CASE;

// IF RCD.Qty Sched Ord 2 USR is GT Zero
IF RCD.Qty_Sched_Ord_2_USR > *ZERO;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 2 LT RCD.Production Date RGF
IF CTL.USR_Day_2 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_2);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_2_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 2 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_2 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_2);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_2_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 2 USR = CON.*ZERO
RCD.Qty_Sched_Prod_2_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_2);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(RCD.Qty_Sched_Prod_2_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?Scheduled Production 3
CASE;

// IF RCD.Qty Sched Ord 3 USR is GT Zero
IF RCD.Qty_Sched_Ord_3_USR > *ZERO;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 3 LT RCD.Production Date RGF
IF CTL.USR_Day_3 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_3);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_3_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 3 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_3 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_3);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_3_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 3 USR = CON.*ZERO
RCD.Qty_Sched_Prod_3_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_3);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(RCD.Qty_Sched_Prod_3_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?Scheduled Production 4
CASE;

// IF RCD.Qty Sched Ord 4 USR is GT 0
IF RCD.Qty_Sched_Ord_4_USR > 0;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 4 LT RCD.Production Date RGF
IF CTL.USR_Day_4 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_4);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_4_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 4 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_4 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_4);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_4_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 4 USR = CON.*ZERO
RCD.Qty_Sched_Prod_4_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_4);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(RCD.Qty_Sched_Prod_4_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?Scheduled Production 5
CASE;

// IF RCD.Qty Sched Ord 5 USR is GT 0
IF RCD.Qty_Sched_Ord_5_USR > *ZERO;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 5 LT RCD.Production Date RGF
IF CTL.USR_Day_5 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_5);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_5_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 5 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_5 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_5);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_5_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 5 USR = CON.*ZERO
RCD.Qty_Sched_Prod_5_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_5);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(RCD.Qty_Sched_Prod_5_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?Scheduled Production 6
CASE;

// IF RCD.Qty Sched Ord 6 USR is GT 0
IF RCD.Qty_Sched_Ord_6_USR > 0;

//?VAL:  Production Date
CASE;

// IF CTL.USR Day 6 LT RCD.Production Date RGF
IF CTL.USR_Day_6 < RCD.Production_Date_RGF;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_6);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_6_USR);

QUIT;

//?VAL:  Production Date
// IF CTL.USR Day 6 GT LCL.Scheduled Ship Date USR
IF CTL.USR_Day_6 > LCL.Scheduled_Ship_Date_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.USR_Day_6);
MSGPARM(RCD.Production_Date_RGF);
MSGPARM(RCD.Production_Date_RGT);
MSGPARM(RCD.Qty_Sched_Ord_6_USR);

QUIT;

ENDIF;

// RCD.Qty Sched Prod 6 USR = CON.*ZERO
RCD.Qty_Sched_Prod_6_USR = *ZERO;

//?E3796 JJH 02/18/15 - On call to "WW OrdPrdSch Upd Prod XF" change:
//? "I  Scheduled Ship Date   FLD   RCD Scheduled Ship Date" to
//? "I  Scheduled Ship Date   FLD   RCD Requested Ship Date"
// Call program WW OrdPrdSch Upd Prod XF.
CALL PROGRAM(WW OrdPrdSch Upd Prod XF) ('POUEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Age_Code);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(CTL.USR_Day_6);
PARAMETER(RCD.Production_Date_RGF);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Qty_Sched_Ord_6_USR);
PARAMETER(RCD.Qty_Sched_Prod_6_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Warehouse_Std_Chill_Time);
PARAMETER(RCD.Warehouse_Chill_Time);
PARAMETER(RCD.WHS_Inventory_Chill_Time);

// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

ENDIF;

//?added 6/15/09
CASE;

// IF LCL.Post Flag USR is Yes
IF LCL.Post_Flag_USR = 'Y';

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// RCD.Quantity Sched 5.0 USR = RCD.Quantity Scheduled
RCD.Quantity_Sched_5_0_USR = RCD.Quantity_Scheduled;

// LCL.Quantity Scheduled = RCD.Quantity Scheduled
LCL.Quantity_Scheduled = RCD.Quantity_Scheduled;

// LCL.Weight Scheduled = RCD.Weight Scheduled
LCL.Weight_Scheduled = RCD.Weight_Scheduled;

// LCL.*Reload subfile = CND.*YES
LCL.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Post Order & Refresh order's status'- refresh status is new for FP1054
CASE;

// IF LCL.Post Flag USR is Yes
IF LCL.Post_Flag_USR = 'Y';

// Call program EDT Post Open Orders   XF.
CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Unused_Parm_Value_USR);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER('PS');

//?Refresh Record
// RCD.Quantity Sched 5.0 USR = LCL.Quantity Scheduled
RCD.Quantity_Sched_5_0_USR = LCL.Quantity_Scheduled;

// RCD.Quantity Scheduled = LCL.Quantity Scheduled
RCD.Quantity_Scheduled = LCL.Quantity_Scheduled;

// RCD.Weight Scheduled = LCL.Weight Scheduled
RCD.Weight_Scheduled = LCL.Weight_Scheduled;

// RCD.Age Code = RCD.USR Age Code
RCD.Age_Code = RCD.USR_Age_Code;

//?RMC 8/23/19  also get requested
// Call program WW OrdPrdSch Refresh  XF.
CALL PROGRAM(WW OrdPrdSch Refresh  XF) ('POUFXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.OD_Production_Plan_Sts);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.OD_Schedule_Override_Sts);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(RCD.Qty_Sched_Prod_1_USR);
PARAMETER(RCD.Qty_Sched_Prod_2_USR);
PARAMETER(RCD.Qty_Sched_Prod_3_USR);
PARAMETER(RCD.Qty_Sched_Prod_4_USR);
PARAMETER(RCD.Qty_Sched_Prod_5_USR);
PARAMETER(RCD.Qty_Sched_Prod_6_USR);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(RCD.Qty_Sched_Ord_6_USR);
PARAMETER(RCD.OD_Added_to_Sched_Today);
PARAMETER(RCD.Qty_5_0_USR);
PARAMETER(RCD.Production_USR);
PARAMETER(RCD.Inv_Total_USR);
PARAMETER(RCD.ODS_Quantity_Short);
PARAMETER(LCL.Post_Flag_USR);
PARAMETER(RCD.Reverse_Image_Flag_USR);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Record_Found_OrdDtlUSR);
PARAMETER(RCD.Load_Status);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// RCD.Output Only 1 USR = CND.yes
RCD.Output_Only_1_USR = 'Y';

// RCD.USR Update Flag = CND.No
RCD.USR_Update_Flag = *BLANK;

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


SET CURSOR;

ENDIF;

//?OD Production Plan Sts (All additional options)
// IF *OTHERWISE
IF *OTHERWISE;

//?Invalid option for user  message
CASE;

// IF RCD.*SFLSEL is PPS Update
IF RCD.*SFLSEL = '16'/'21'/'22'/'2'/'2'/'23'/'6'/'6';

// OR RCD.*SFLSEL is PPS Update 2
OR RCD.*SFLSEL = '14'/'17'/'19'/'12'/'18';

// Send error message - 'Update Options invalid for NOT production plan item.'
ERROR(USR4169);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

CASE;

// IF LCL.Error Status is yes
IF LCL.Error_Status = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

//?FP1054 chg to use CTL.production Warehouse Code
EXECUTE FUNCTION(Rtv Base Availability RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1648124;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.Qty_Sched_Prod_1_USR);
PARAMETER(CTL.Qty_Sched_Prod_2_USR);
PARAMETER(CTL.Qty_Sched_Prod_3_USR);
PARAMETER(CTL.Qty_Sched_Prod_4_USR);
PARAMETER(CTL.Qty_Sched_Prod_5_USR);
PARAMETER(CTL.Qty_Sched_Prod_6_USR);
PARAMETER(CTL.Qty_Converted_1_USR);
PARAMETER(CTL.Qty_Converted_2_USR);
PARAMETER(CTL.Qty_Converted_3_USR);
PARAMETER(CTL.Qty_Converted_4_USR);
PARAMETER(CTL.Qty_Converted_5_USR);
PARAMETER(CTL.Qty_Converted_6_USR);
PARAMETER(CTL.Qty_Sched_Ord_1_USR);
PARAMETER(CTL.Qty_Sched_Ord_2_USR);
PARAMETER(CTL.Qty_Sched_Ord_3_USR);
PARAMETER(CTL.Qty_Sched_Ord_4_USR);
PARAMETER(CTL.Qty_Sched_Ord_5_USR);
PARAMETER(CTL.Qty_Sched_Ord_6_USR);
PARAMETER(CTL.Quantity_Avail_USR_1);
PARAMETER(CTL.Quantity_Avail_USR_2);
PARAMETER(CTL.Quantity_Avail_USR_3);
PARAMETER(CTL.Quantity_Avail_USR_4);
PARAMETER(CTL.Quantity_Avail_USR_5);
PARAMETER(CTL.Quantity_Avail_USR_6);
PARAMETER(CTL.Qty_Std_Prod_1_USR);
PARAMETER(CTL.Qty_Std_Prod_2_USR);
PARAMETER(CTL.Qty_Std_Prod_3_USR);
PARAMETER(CTL.Qty_Std_Prod_4_USR);
PARAMETER(CTL.Qty_Std_Prod_5_USR);
PARAMETER(CTL.Qty_Std_Prod_6_USR);
PARAMETER(CTL.Day_1_Inventory_50_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_1_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_2_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_3_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_4_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_5_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_6_USR);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.Unit Weight is Equal to zero
 IF PAR.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(LCL.Pieces_Per_Bag);
 PARAMETER(LCL.Bags_Per_Unit);
 PARAMETER(WRK.BLANK);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Unit Weight = PAR.Unit Weight
 LCL.Unit_Weight = PAR.Unit_Weight;

 // LCL.Piece Count Item = PAR.Piece Count Item
 LCL.Piece_Count_Item = PAR.Piece_Count_Item;

 // LCL.Pieces Per Bag = PAR.Pieces Per Bag
 LCL.Pieces_Per_Bag = PAR.Pieces_Per_Bag;

 // LCL.Bags Per Unit = PAR.Bags Per Unit
 LCL.Bags_Per_Unit = PAR.Bags_Per_Unit;

 ENDIF;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?QUIT:  Production Date > Usr Day 6
 CASE;

 // IF DB1.Production Date GT PAR.USR Day 6
 IF DB1.Production_Date > PAR.USR_Day_6;

 QUIT;

 ENDIF;

 //?SEL:  Schedule for Job Date
 CASE;

 // IF DB1.Production Date EQ JOB.*Job date
 IF DB1.Production_Date = JOB.*Job_date;

 CASE;

 // IF DB1.Production Type is Plan
 IF DB1.Production_Type = 'P';

 // OR DB1.Production Type is Schedule Saved in the am
 OR DB1.Production_Type = 'X';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?CLC:  Quantity Standard, Converted, Scheduled Orders
 CASE;

 // IF LCL.Piece Count Item is yes
 IF LCL.Piece_Count_Item = 'Y';

 CASE;

 // IF PAR.Production Date EQ PAR.USR Day 1
 IF PAR.Production_Date = PAR.USR_Day_1;

 // Quantity Inventory
 LCL.Day_1_Inventory_50_USR = ( ( DB1.PS_Pieces_Inv_On_Hand + DB1.PS_Pieces_Inv_Adj )
 - DB1.PS_Pieces_Inv_Allocated ) / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' ) 'H';

 ENDIF;

 // Quantity Standard
 LCL.Quantity_Standard_USR = DB1.PS_Pieces_Standard / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Planned:fp1054
 LCL.Quantity_Planned_USR = DB1.PS_Pieces_Planned_Prod / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 //?FP1054 add these together for display on the screen
 // LCL.Quantity Standard USR = LCL.Quantity Standard USR + LCL.Quantity Planned USR
 LCL.Quantity_Standard_USR = LCL.Quantity_Standard_USR + LCL.Quantity_Planned_USR;

 // Quantity Sched whse txfr
 LCL.Quantity_Sched_Whs_Tx_USR = DB1.PS_Pieces_Whs_Tfr_Adj / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Converted
 LCL.Quantity_Converted_USR = DB1.PS_Pieces_Converted / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Scheduled Orders
 LCL.Qty_Ordered_USR = DB1.PS_Pieces_Prod_Allocated / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 //?FP1054 also add ps pieces planned prod
 // Quantity Production
 LCL.Quantity_Production_USR = ( ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) + DB1.PS_Pieces_Planned_Prod ) / ( LCL.Pieces_Per_Bag                 +
 * LCL.Bags_Per_Unit );

 //?CLC:  Quantity Standard, Converted, Scheduled Orders
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 1
 IF DB1.Production_Date = PAR.USR_Day_1;

 // Quantity Inventory
 LCL.Day_1_Inventory_50_USR = ( ( DB1.PS_Weight_Inv_On_Hand + DB1.PS_Weight_Inv_Adj )
 - DB1.PS_Weight_Inv_Allocated ) / LCL.Unit_Weight 'H';

 ENDIF;

 // Quantity Standard
 LCL.Quantity_Standard_USR = DB1.PS_Weight_Standard / LCL.Unit_Weight;

 // Quantity Planned-fp1054
 LCL.Quantity_Planned_USR = DB1.PS_Weight_Planned_Prod / LCL.Unit_Weight;

 //?FP1054 add these together for display on the screen
 // LCL.Quantity Standard USR = LCL.Quantity Standard USR + LCL.Quantity Planned USR
 LCL.Quantity_Standard_USR = LCL.Quantity_Standard_USR + LCL.Quantity_Planned_USR;

 // Quantity Sched Whse Txfr
 LCL.Quantity_Sched_Whs_Tx_USR = DB1.PS_Weight_Whs_Tfr_Adj / LCL.Unit_Weight;

 // Quantity Converted
 LCL.Quantity_Converted_USR = DB1.PS_Weight_Converted / LCL.Unit_Weight;

 // Quantity Scheduled Orders
 LCL.Qty_Ordered_USR = DB1.PS_Weight_Prod_Allocated / LCL.Unit_Weight;

 //?FP1054 also add ps weight planned prod
 // Quantity production
 LCL.Quantity_Production_USR = ( ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) + DB1.PS_Weight_Planned_Prod ) / LCL.Unit_Weight;

 ENDIF;

 // Quantity Available
 LCL.Quantity_Avail_7_0_USR = ( ( LCL.Quantity_Standard_USR - LCL.Quantity_Converted_USR )
 - LCL.Qty_Ordered_USR ) - LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 1
 IF DB1.Production_Date = PAR.USR_Day_1;

 // PAR.Qty Sched Prod 1 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_1_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 1 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_1_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 1 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_1_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 1 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_1 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 1 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_1_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 1 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_1_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 2
 IF DB1.Production_Date = PAR.USR_Day_2;

 // PAR.Qty Sched Prod 2 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_2_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 2 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_2_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 2 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_2_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 2 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_2 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 2 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_2_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 2 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_2_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 3
 IF DB1.Production_Date = PAR.USR_Day_3;

 // PAR.Qty Sched Prod 3 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_3_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 3 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_3_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 3 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_3_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 3 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_3 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 3 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_3_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 3 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_3_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 4
 IF DB1.Production_Date = PAR.USR_Day_4;

 // PAR.Qty Sched Prod 4 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_4_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 4 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_4_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 4 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_4_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 4 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_4 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 4 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_4_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 4 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_4_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 5
 IF DB1.Production_Date = PAR.USR_Day_5;

 // PAR.Qty Sched Prod 5 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_5_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 5 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_5_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 5 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_5_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 5 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_5 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 5 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_5_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 5 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_5_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 6
 IF DB1.Production_Date = PAR.USR_Day_6;

 // PAR.Qty Sched Prod 6 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_6_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 6 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_6_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 6 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_6_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 6 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_6 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 6 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_6_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 6 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_6_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 ENDIF;

 ENDIF;

}


//?Rtv Base Availability RT
CASE;

// IF CTL.Item Code is Entered
IF CTL.Item_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Base Availability RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1648124;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(LCL.ZERO);
PARAMETER(CTL.Qty_Std_Prod_1_USR);
PARAMETER(CTL.Qty_Std_Prod_2_USR);
PARAMETER(CTL.Qty_Std_Prod_3_USR);
PARAMETER(CTL.Qty_Std_Prod_4_USR);
PARAMETER(CTL.Qty_Std_Prod_5_USR);
PARAMETER(CTL.Qty_Std_Prod_6_USR);
PARAMETER(CTL.Day_1_Inventory_50_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_1_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_2_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_3_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_4_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_5_USR);
PARAMETER(CTL.Qty_Sched_Whs_Txfr_6_USR);
PARAMETER(*ZERO);
PARAMETER(LCL.BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.Unit Weight is Equal to zero
 IF PAR.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(LCL.Pieces_Per_Bag);
 PARAMETER(LCL.Bags_Per_Unit);
 PARAMETER(WRK.BLANK);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Unit Weight = PAR.Unit Weight
 LCL.Unit_Weight = PAR.Unit_Weight;

 // LCL.Piece Count Item = PAR.Piece Count Item
 LCL.Piece_Count_Item = PAR.Piece_Count_Item;

 // LCL.Pieces Per Bag = PAR.Pieces Per Bag
 LCL.Pieces_Per_Bag = PAR.Pieces_Per_Bag;

 // LCL.Bags Per Unit = PAR.Bags Per Unit
 LCL.Bags_Per_Unit = PAR.Bags_Per_Unit;

 ENDIF;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?QUIT:  Production Date > Usr Day 6
 CASE;

 // IF DB1.Production Date GT PAR.USR Day 6
 IF DB1.Production_Date > PAR.USR_Day_6;

 QUIT;

 ENDIF;

 //?SEL:  Schedule for Job Date
 CASE;

 // IF DB1.Production Date EQ JOB.*Job date
 IF DB1.Production_Date = JOB.*Job_date;

 CASE;

 // IF DB1.Production Type is Plan
 IF DB1.Production_Type = 'P';

 // OR DB1.Production Type is Schedule Saved in the am
 OR DB1.Production_Type = 'X';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?CLC:  Quantity Standard, Converted, Scheduled Orders
 CASE;

 // IF LCL.Piece Count Item is yes
 IF LCL.Piece_Count_Item = 'Y';

 CASE;

 // IF PAR.Production Date EQ PAR.USR Day 1
 IF PAR.Production_Date = PAR.USR_Day_1;

 // Quantity Inventory
 LCL.Day_1_Inventory_50_USR = ( ( DB1.PS_Pieces_Inv_On_Hand + DB1.PS_Pieces_Inv_Adj )
 - DB1.PS_Pieces_Inv_Allocated ) / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' ) 'H';

 ENDIF;

 // Quantity Standard
 LCL.Quantity_Standard_USR = DB1.PS_Pieces_Standard / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Planned:fp1054
 LCL.Quantity_Planned_USR = DB1.PS_Pieces_Planned_Prod / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 //?FP1054 add these together for display on the screen
 // LCL.Quantity Standard USR = LCL.Quantity Standard USR + LCL.Quantity Planned USR
 LCL.Quantity_Standard_USR = LCL.Quantity_Standard_USR + LCL.Quantity_Planned_USR;

 // Quantity Sched whse txfr
 LCL.Quantity_Sched_Whs_Tx_USR = DB1.PS_Pieces_Whs_Tfr_Adj / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Converted
 LCL.Quantity_Converted_USR = DB1.PS_Pieces_Converted / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 // Quantity Scheduled Orders
 LCL.Qty_Ordered_USR = DB1.PS_Pieces_Prod_Allocated / ( LCL.Pieces_Per_Bag
 * LCL.Bags_Per_Unit );

 //?FP1054 also add ps pieces planned prod
 // Quantity Production
 LCL.Quantity_Production_USR = ( ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) + DB1.PS_Pieces_Planned_Prod ) / ( LCL.Pieces_Per_Bag                 +
 * LCL.Bags_Per_Unit );

 //?CLC:  Quantity Standard, Converted, Scheduled Orders
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 1
 IF DB1.Production_Date = PAR.USR_Day_1;

 // Quantity Inventory
 LCL.Day_1_Inventory_50_USR = ( ( DB1.PS_Weight_Inv_On_Hand + DB1.PS_Weight_Inv_Adj )
 - DB1.PS_Weight_Inv_Allocated ) / LCL.Unit_Weight 'H';

 ENDIF;

 // Quantity Standard
 LCL.Quantity_Standard_USR = DB1.PS_Weight_Standard / LCL.Unit_Weight;

 // Quantity Planned-fp1054
 LCL.Quantity_Planned_USR = DB1.PS_Weight_Planned_Prod / LCL.Unit_Weight;

 //?FP1054 add these together for display on the screen
 // LCL.Quantity Standard USR = LCL.Quantity Standard USR + LCL.Quantity Planned USR
 LCL.Quantity_Standard_USR = LCL.Quantity_Standard_USR + LCL.Quantity_Planned_USR;

 // Quantity Sched Whse Txfr
 LCL.Quantity_Sched_Whs_Tx_USR = DB1.PS_Weight_Whs_Tfr_Adj / LCL.Unit_Weight;

 // Quantity Converted
 LCL.Quantity_Converted_USR = DB1.PS_Weight_Converted / LCL.Unit_Weight;

 // Quantity Scheduled Orders
 LCL.Qty_Ordered_USR = DB1.PS_Weight_Prod_Allocated / LCL.Unit_Weight;

 //?FP1054 also add ps weight planned prod
 // Quantity production
 LCL.Quantity_Production_USR = ( ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) + DB1.PS_Weight_Planned_Prod ) / LCL.Unit_Weight;

 ENDIF;

 // Quantity Available
 LCL.Quantity_Avail_7_0_USR = ( ( LCL.Quantity_Standard_USR - LCL.Quantity_Converted_USR )
 - LCL.Qty_Ordered_USR ) - LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 1
 IF DB1.Production_Date = PAR.USR_Day_1;

 // PAR.Qty Sched Prod 1 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_1_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 1 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_1_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 1 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_1_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 1 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_1 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 1 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_1_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 1 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_1_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 2
 IF DB1.Production_Date = PAR.USR_Day_2;

 // PAR.Qty Sched Prod 2 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_2_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 2 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_2_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 2 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_2_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 2 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_2 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 2 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_2_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 2 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_2_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 3
 IF DB1.Production_Date = PAR.USR_Day_3;

 // PAR.Qty Sched Prod 3 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_3_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 3 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_3_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 3 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_3_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 3 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_3 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 3 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_3_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 3 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_3_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 4
 IF DB1.Production_Date = PAR.USR_Day_4;

 // PAR.Qty Sched Prod 4 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_4_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 4 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_4_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 4 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_4_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 4 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_4 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 4 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_4_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 4 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_4_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 5
 IF DB1.Production_Date = PAR.USR_Day_5;

 // PAR.Qty Sched Prod 5 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_5_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 5 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_5_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 5 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_5_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 5 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_5 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 5 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_5_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 5 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_5_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 //?Move to appropriate day
 // IF DB1.Production Date EQ PAR.USR Day 6
 IF DB1.Production_Date = PAR.USR_Day_6;

 // PAR.Qty Sched Prod 6 USR = LCL.Quantity Standard USR
 PAR.Qty_Sched_Prod_6_USR = LCL.Quantity_Standard_USR;

 // PAR.Qty Converted 6 USR = LCL.Quantity Converted USR
 PAR.Qty_Converted_6_USR = LCL.Quantity_Converted_USR;

 // PAR.Qty Sched Ord 6 USR = LCL.Qty Ordered USR
 PAR.Qty_Sched_Ord_6_USR = LCL.Qty_Ordered_USR;

 // PAR.Quantity Avail USR 6 = LCL.Quantity Avail  7.0  USR
 PAR.Quantity_Avail_USR_6 = LCL.Quantity_Avail_7_0_USR;

 // PAR.Qty Std Prod 6 USR = LCL.Quantity Production USR
 PAR.Qty_Std_Prod_6_USR = LCL.Quantity_Production_USR;

 // PAR.Qty Sched Whs Txfr 6 USR = LCL.Quantity Sched Whs Tx USR
 PAR.Qty_Sched_Whs_Txfr_6_USR = LCL.Quantity_Sched_Whs_Tx_USR;

 ENDIF;

 ENDIF;

}


ENDIF;

//?Check if Adjustments exists for the Base Item
DO;

//?FP1054 chg to use CTL.production Warehouse Code
EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Display_1);
PARAMETER(CTL.Base_Adj_Sts_1_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Display_2);
PARAMETER(CTL.Base_Adj_Sts_2_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Display_3);
PARAMETER(CTL.Base_Adj_Sts_3_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Display_4);
PARAMETER(CTL.Base_Adj_Sts_4_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Display_5);
PARAMETER(CTL.Base_Adj_Sts_5_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Adjustment Sts    RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1654273;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(CTL.Production_Warehouse);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.USR_Display_6);
PARAMETER(CTL.Base_Adj_Sts_6_USR);
{
 //?USER: Initialize routine

 // PAR.USR Display field = CND.blank
 PAR.USR_Display_field = *BLANK;

 // PAR.Status - Y or N = CND.blank
 PAR.Status_Y_or_N = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE DB1.PS Consumed Item Code
 IF DB1.Item_Code <> DB1.PS_Consumed_Item_Code;

 // PAR.USR Display field = CND.yes
 PAR.USR_Display_field = 'Y';

 // IF DB1.Item Code EQ DB1.PS Consumed Item Code
 IF DB1.Item_Code = DB1.PS_Consumed_Item_Code;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

}


ENDDO;

//?------------------------------------------------------
//?FP1054   Get Avail ship dates per warehouse -- 7/16/09
//?Get Avail ship dates per warehouse
CASE;

// IF CTL.Warehouse Code is Blanks
IF CTL.Warehouse_Code = *BLANK;

EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
PARAMETER(CTL.Production_Warehouse);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(LCL.Warehouse_Std_Chill_Time);
PARAMETER(LCL.Warehouse_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Avail ship dates per warehouse
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(LCL.Warehouse_Std_Chill_Time);
PARAMETER(LCL.Warehouse_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1304403;
PARAMETER(CTL.Accounting_Company);
PARAMETER(CTL.Consumed_Item_Code);
PARAMETER(LCL.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Chilling Time
CASE;

// IF LCL.Warehouse Std Chill Time is yes
IF LCL.Warehouse_Std_Chill_Time = 'Y';

// LCL.Chilling Time USR = LCL.Warehouse Chill Time
LCL.Chilling_Time_USR = LCL.Warehouse_Chill_Time;

// LCL.Chilling Time USR = LCL.Chilling Time USR - CON.1
LCL.Chilling_Time_USR = LCL.Chilling_Time_USR - 1;

//?Chilling Time
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Chilling Time USR = LCL.Fresh Chilling Time
LCL.Chilling_Time_USR = LCL.Fresh_Chilling_Time;

ENDIF;

// Call program Clc PA Avail Shp Dts  XF.
CALL PROGRAM(Clc PA Avail Shp Dts  XF) ('PNKRXFR');
PARAMETER(CTL.Accounting_Company);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.Avail_Ship_Date_1_USR);
PARAMETER(CTL.Avail_Ship_Date_2_USR);
PARAMETER(CTL.Avail_Ship_Date_3_USR);
PARAMETER(CTL.Avail_Ship_Date_4_USR);
PARAMETER(CTL.Avail_Ship_Date_5_USR);
PARAMETER(CTL.Avail_Ship_Date_6_USR);
PARAMETER(LCL.USR_Day_7);
PARAMETER(LCL.USR_Day_8);
PARAMETER(LCL.Avail_Ship_Date_7_USR);
PARAMETER(LCL.Avail_Ship_Date_8_USR);

//?USER: Process subfile record (Post-confirm)

//?14=Release Order is now Release Line item-FP1054
CASE;

// IF RCD.*SFLSEL is Option 14
IF RCD.*SFLSEL = '14';

CASE;

// IF RCD.Released by User Sts Y/N is Not Yes
IF RCD.Released_by_User_Sts_Y_N = *BLANK/'N';

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//? Let the order ship short.
EXECUTE FUNCTION(CHG Released by User  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1920658;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?FP1054 chg prod hold status if orders line pass test
EXECUTE FUNCTION(RTV Chg Sts/Prd Sts   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1920663;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Sch/not Rlsd RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1920664;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.USR_Production);
 {
  //?USER: Initialize routine

  // PAR.USR Production = CND.No
  PAR.USR_Production = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Quantity Ordered EQ DB1.Quantity Scheduled
  IF DB1.Quantity_Ordered = DB1.Quantity_Scheduled;

  // OR DB1.Released by User Sts Y/N is yes
  OR DB1.Released_by_User_Sts_Y_N = 'Y';

  // OR DB1.Detail Line Status is Cancelled
  OR DB1.Detail_Line_Status = 'X';

  //?if all line items are either sched or released by user or cncled,
  //?then order is not to be on prod hold
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Production = CND.Yes
  PAR.USR_Production = 'Y';

  ENDIF;

 }

 // LCL.Header Status Last = DB1.Header Status Last
 LCL.Header_Status_Last = DB1.Header_Status_Last;

 // LCL.Header Status = DB1.Header Status
 LCL.Header_Status = DB1.Header_Status;

 CASE;

 // IF DB1.Credit Hold is Yes
 IF DB1.Credit_Hold = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.USR Production is No
 IF LCL.USR_Production = 'N';

 // LCL.Header Status Last = DB1.Header Status
 LCL.Header_Status_Last = DB1.Header_Status;

 // LCL.Header Status = CND.Available
 LCL.Header_Status = 'A';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CHG Prd Hld, Sts,Rsn   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1342647;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Header_Status_Last);
 PARAMETER(LCL.USR_Production);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

}


//?* Clear the Upload error flags                        C001956
EXECUTE FUNCTION(CHG Ord Req Revw- flg CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2036232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 //?Does not update the record stamp fields
}


EXECUTE FUNCTION(CHG Ord Line Error Typ CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC2029048;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data read

 //?** This routine does NOT update the change audit fields  P001251
}


//?* FP1054 Create rcd * RLSLIN
// WRK.Item Code Txt = CVTVAR(RCD.Item Code)
WRK.Item_Code_Txt = CVTVAR(RCD.Item_Code);

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('RLSLIN');
PARAMETER('SLS');
PARAMETER(WRK.Item_Code_Txt);
PARAMETER('Released');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

//?*
ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

