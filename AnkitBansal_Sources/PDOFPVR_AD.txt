// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDOFPVR
// ?Date: 14.08.2025 Time: 03:35:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Val Access CUA Window IF) TYPE(EXCINTFUN)                      AC1417789;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

}


//?USER: Load screen

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

//?USER: Process command keys

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Company_Number);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Country Code          USR
IF PGM.*Cursor_field = DTL.Country_Code_USR;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_USR);

ENDIF;

ENDIF;

//?USER: Validate fields

EXECUTE FUNCTION(Rtv Doc Default Rcd    RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC1525268;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Export Doc Defaults already exists.'
ERROR(USR2734);

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Name is blanks
IF DTL.Name = *BLANK;

// Send error message - 'Company Number not found.'
ERROR(USR2396);

ENDIF;

EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(DTL.Country_Code_USR);
PARAMETER(DTL.Country_Description);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Country Description is Blank
IF DTL.Country_Description = *BLANK;

// Send error message - 'Country Code not found.'
ERROR(USR2030);
MSGPARM(DTL.Country_Code_USR);

// IF DTL.Record Status is Inactive
IF DTL.Record_Status = 'I';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(DTL.Country_Code_USR);

ENDIF;

// DTL.Export Document Desc = Condition name of DTL.ED Export Document Type
DTL.Export_Document_Desc = RTVCND(DTL.ED_Export_Document_Type);

//?USER: User defined action

EXECUTE FUNCTION(Crt Exp Doc Defaults   CR) TYPE(CRTOBJ) FILE(PDMMREP)          AC1523770;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);
PARAMETER(DTL.ED_Area_Office);
PARAMETER(DTL.ED_Destination);
PARAMETER(DTL.ED_Consignor_Name);
PARAMETER(DTL.ED_Consignor_Addr_1);
PARAMETER(DTL.ED_Consignor_Addr_2);
PARAMETER(DTL.ED_Consignor_Addr_3);
PARAMETER(DTL.ED_Consignor_Addr_4);
PARAMETER(DTL.ED_Consignor_State);
PARAMETER(DTL.ED_Consignor_Postal);
PARAMETER(DTL.ED_Consignor_Country_Code);
PARAMETER(DTL.ED_Plant_Number);
PARAMETER(DTL.ED_Plant_Location_City);
PARAMETER(DTL.ED_Plant_Location_State);
PARAMETER(DTL.ED_Processing_Plant_Sts);
PARAMETER(DTL.ED_Attachment_Subtype);
PARAMETER(DTL.ED_Attachment_Type_Sts);
PARAMETER(DTL.ED_Xlate_Desc_to_Country);
PARAMETER(DTL.ED_Unmarked_Txt);
PARAMETER(DTL.ED_Shipping_Marks_Txt);
PARAMETER(DTL.ED_Date_of_Slaughter_Txt);
PARAMETER(DTL.ED_Place_of_Slaughter_Txt);
PARAMETER(DTL.ED_Date_of_Processing_Txt);
PARAMETER(DTL.ED_Place_of_processing_Tx);
PARAMETER(DTL.ED_Continue_Comment_Txt);
PARAMETER(DTL.ED_Remark_Constant_1);
PARAMETER(DTL.ED_Remark_Constant_2);
PARAMETER(DTL.ED_Remark_Constant_3);
PARAMETER(DTL.ED_Remark_Constant_4);
PARAMETER(DTL.ED_Remark_Constant_5);
PARAMETER(DTL.ED_Remark_Constant_7);
PARAMETER(DTL.ED_Remark_Constant_8);
PARAMETER(DTL.ED_Certify_that_the_meat);
PARAMETER(DTL.ED_Inspector_Name);
PARAMETER(DTL.ED_Origin_Country);
PARAMETER(DTL.ED_Port_of_Loading);
PARAMETER(DTL.ED_Transportion);
PARAMETER(DTL.ED_Seal_Number_1);
PARAMETER(DTL.ED_Seal_Number_2);
PARAMETER(DTL.ED_Can_Import_Cntrl_Nm);
PARAMETER(DTL.ED_Can_Import_Cntrl_Ad_1);
PARAMETER(DTL.ED_Can_Import_Cntrl_Ad_2);
PARAMETER(DTL.ED_Can_Import_Cntrl_Fax);
PARAMETER(DTL.ED_Can_Import_Cntrl_Phne);
PARAMETER(DTL.ED_Seaboard_Plant_Fax);
PARAMETER(DTL.ED_USDA_Cert_Nbr_US);
PARAMETER(DTL.ED_USDA_Cert_Nbr_CA);
PARAMETER(DTL.ED_Can_Port_of_Entry);
PARAMETER(DTL.ED_Can_Reinsp_Est_Nbr);
PARAMETER(DTL.ED_Can_Reinsp_Est_Name);
PARAMETER(DTL.ED_Can_Reinsp_Est_City);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_Sts);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_Type);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_p_Crt);
PARAMETER(DTL.ED_Whole_Bird_Sts);
PARAMETER(DTL.ED_Marked_Sts);
PARAMETER(DTL.ED_Tamper_Evident_Sts);
PARAMETER(DTL.ED_Plant_Contact_Name);
PARAMETER(DTL.ED_Plant_Contact_Phone);
PARAMETER(DTL.ED_Modified_Text);
PARAMETER(DTL.ED_Issued_Crt_for_Exp_Txt);
PARAMETER(DTL.ED_Species);
PARAMETER(DTL.ED_Slaughter_Plant_Name);
PARAMETER(DTL.ED_Slaughter_Plant_Addr_1);
PARAMETER(DTL.ED_Slaughter_Plant_Addr_2);
PARAMETER(DTL.ED_Packaging_Plant_Name);
PARAMETER(DTL.ED_Packaging_Plant_Addr_1);
PARAMETER(DTL.ED_Packaging_Plant_Addr_2);
PARAMETER(DTL.ED_Manufact_Plant_Name);
PARAMETER(DTL.ED_Manufact_Plant_Addr_1);
PARAMETER(DTL.ED_Manufact_Plant_Addr_2);
PARAMETER(DTL.ED_USDA_Name_1);
PARAMETER(DTL.ED_USDA_Name_2);
PARAMETER(DTL.ED_USDA_Name_3);
PARAMETER(DTL.ED_Title_of_Official);
PARAMETER(DTL.ED_Letter_of_Credit_Nbr);
PARAMETER(DTL.ED_Unused_prd_mo_yr);
PARAMETER(DTL.ED_Nbr_of_prods_on_1st_pg);
PARAMETER(DTL.ED_Importer_Name);
PARAMETER(DTL.ED_Importer_Addr_1);
PARAMETER(DTL.ED_Importer_Addr_2);
PARAMETER(DTL.ED_Purchaser_Name);
PARAMETER(DTL.ED_Purchaser_Addr_1);
PARAMETER(DTL.ED_Purchaser_Addr_2);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Nm);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Ad_1);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Ad_2);
PARAMETER(DTL.ED_Currency);
PARAMETER(DTL.ED_Conditions_of_Sale);
PARAMETER(DTL.ED_Total_Unit_Price);
PARAMETER(DTL.ED_Invoice_Total);
PARAMETER(DTL.ED_Live_with_PHIS);
PARAMETER(DTL.ED_Plant_Number_Dtl);
PARAMETER(DTL.ED_Language_Xlate_Desc_2);
PARAMETER(DTL.ED_Slaughter_Date_CofE_3);
PARAMETER(DTL.ED_Production_mo_yr_ln_3);
PARAMETER(DTL.ED_Remark_Constant_6);
PARAMETER(DTL.ED_Allow_Print_bef_Ship);
PARAMETER(DTL.ED_Cert_of_Orig_Sbd_addr);
PARAMETER(DTL.ED_Use_item_label_1_2);
PARAMETER(DTL.ED_Slg_Proc_Date_Format);
PARAMETER(DTL.ED_Total_Package_UOM);
PARAMETER(DTL.ED_Export_Certificate_Nbr);
PARAMETER(DTL.ED_Sail_Date);
PARAMETER(DTL.ED_Sworn_on_Date);
PARAMETER(DTL.ED_Consignee_Address_Nbr);
PARAMETER(DTL.ED_Form_Identification_Tx);
PARAMETER(DTL.ED_Cold_Storage_Name);
PARAMETER(DTL.ED_Cold_Storage_Addr_1);
PARAMETER(DTL.ED_Cold_Storage_Addr_2);
PARAMETER(DTL.ED_Cold_Storage_Plant_Nbr);
PARAMETER(DTL.ED_Slaughter_Date_CofE_1);
PARAMETER(DTL.ED_Production_mo_yr_ln_1);
PARAMETER(DTL.ED_Production_mo_yr_ln_2);
PARAMETER(DTL.ED_Booking_Nbr);
PARAMETER(DTL.ED_Unused_Sts_1);
PARAMETER(DTL.ED_Unused_Sts_2);
PARAMETER(DTL.ED_Unused_Text_1);
PARAMETER(DTL.ED_Unused_Text_2);
PARAMETER(DTL.ED_Unused_Number_1);
PARAMETER(DTL.ED_Unused_Date_1);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Canada --
CASE;

// IF DTL.Country Code          USR is Canada
IF DTL.Country_Code_USR = 'CAN';

CASE;

// IF DTL.ED Export Document Type is Customs Invoice
IF DTL.ED_Export_Document_Type = 'C';

// Call program Edt Canad CstmInv Dflt ER.
CALL PROGRAM(Edt Canad CstmInv Dflt ER) ('PDNGE1R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

// IF DTL.ED Export Document Type is Health Certificate
IF DTL.ED_Export_Document_Type = 'H';

// Call program Edt Canad MPD Dflts   ER.
CALL PROGRAM(Edt Canad MPD Dflts   ER) ('PDNAE2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

// IF DTL.ED Export Document Type is Intent to Import
IF DTL.ED_Export_Document_Type = 'I';

// Call program Edt Canad Intent to Im ER.
CALL PROGRAM(Edt Canad Intent to Im ER) ('PDNEE2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

ENDIF;

ENDIF;

// WRK.Country Code = CON.TAI
WRK.Country_Code = 'TAI';

//?Taiwan --
CASE;

// IF DTL.Country Code          USR EQ WRK.Country Code
IF DTL.Country_Code_USR = WRK.Country_Code;

CASE;

// IF DTL.ED Export Document Type is Export Certificate
IF DTL.ED_Export_Document_Type = 'E';

// Call program Edt Taiw Form 9285 Dft ER.
CALL PROGRAM(Edt Taiw Form 9285 Dft ER) ('POMCE1R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

// IF DTL.ED Export Document Type is Health Certificate
IF DTL.ED_Export_Document_Type = 'H';

// Call program Edt Taiw MPD Dflts  ER.
CALL PROGRAM(Edt Taiw MPD Dflts  ER) ('PDM5E2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

ENDIF;

ENDIF;

// WRK.Country Code = CON.JAP
WRK.Country_Code = 'JAP';

//?Japan ---
CASE;

// IF DTL.Country Code          USR EQ WRK.Country Code
IF DTL.Country_Code_USR = WRK.Country_Code;

CASE;

// IF DTL.ED Export Document Type is Export Certificate
IF DTL.ED_Export_Document_Type = 'E';

// Call program Edt Japan Form 9290    ER.
CALL PROGRAM(Edt Japan Form 9290    ER) ('PDNDE2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

// IF DTL.ED Export Document Type is Health Certificate
IF DTL.ED_Export_Document_Type = 'H';

// Call program Edt Japan MPD    Dflts ER.
CALL PROGRAM(Edt Japan MPD    Dflts ER) ('PDM7E2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

ENDIF;

ENDIF;

// WRK.Country Code = CON.KOR
WRK.Country_Code = 'KOR';

//?Korea --
CASE;

// IF DTL.Country Code          USR EQ WRK.Country Code
IF DTL.Country_Code_USR = WRK.Country_Code;

CASE;

// IF DTL.ED Export Document Type is Health Certificate
IF DTL.ED_Export_Document_Type = 'H';

// Call program Edt Korea MPD Dflts ER.
CALL PROGRAM(Edt Korea MPD Dflts ER) ('PDM6E2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

// IF DTL.ED Export Document Type is Export Certificate
IF DTL.ED_Export_Document_Type = 'E';

// Call program Edt Kor Form 9305 Dft ER.
CALL PROGRAM(Edt Kor Form 9305 Dft ER) ('POI5E2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

ENDIF;

ENDIF;

// WRK.Country Code = CON.CHN
WRK.Country_Code = 'CHN';

// WRK.Country Code          USR = CON.HKG
WRK.Country_Code_USR = 'HKG';

//?China/Hong Kong
CASE;

// IF DTL.Country Code          USR EQ WRK.Country Code
IF DTL.Country_Code_USR = WRK.Country_Code;

// OR DTL.Country Code          USR EQ WRK.Country Code          USR
OR DTL.Country_Code_USR = WRK.Country_Code_USR;

CASE;

// IF DTL.ED Export Document Type is Form 9290
IF DTL.ED_Export_Document_Type = 'E';

// Call program Zzz China Form 9290    ER.
CALL PROGRAM(Zzz China Form 9290    ER) ('POKUE2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

// IF DTL.ED Export Document Type is MPD
IF DTL.ED_Export_Document_Type = 'H';

// Call program Edt China MPD    Dflts ER.
CALL PROGRAM(Edt China MPD    Dflts ER) ('POKTE2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

ENDIF;

ENDIF;

// WRK.Country Code = CON.MEX
WRK.Country_Code = 'MEX';

//?Mexico -----
CASE;

// IF DTL.Country Code          USR EQ WRK.Country Code
IF DTL.Country_Code_USR = WRK.Country_Code;

CASE;

// IF DTL.ED Export Document Type is MPD
IF DTL.ED_Export_Document_Type = 'H';

// Call program Edt Mexico MPD   Dflts ER.
CALL PROGRAM(Edt Mexico MPD   Dflts ER) ('POKVE2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

// IF DTL.ED Export Document Type is Form 9290
IF DTL.ED_Export_Document_Type = 'E';

ENDIF;

ENDIF;

// WRK.Country Code = CON.AUS
WRK.Country_Code = 'AUS';

//?Australia ---     RMC 3/9/05
CASE;

// IF DTL.Country Code          USR EQ WRK.Country Code
IF DTL.Country_Code_USR = WRK.Country_Code;

CASE;

// IF DTL.ED Export Document Type is MPD
IF DTL.ED_Export_Document_Type = 'H';

// Call program Edt Australia MPD Dflt ER.
CALL PROGRAM(Edt Australia MPD Dflt ER) ('PPKXE2R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code_USR);

ENDIF;

ENDIF;

