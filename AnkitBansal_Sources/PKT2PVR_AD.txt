// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKT2PVR
// ?Date: 14.08.2025 Time: 02:52:53
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.LTN_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.LTN Company Number = WRK.LTN Company Number
DTL.LTN_Company_Number = WRK.LTN_Company_Number;

EXECUTE FUNCTION(Rtv Current Kill Dt   RT) TYPE(RTVOBJ) FILE(PKAZREP)           AB1125333;
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(DTL.LTN_Kill_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Company Event     RT) TYPE(RTVOBJ) FILE(PKEXCPP)           AB1230733;
PARAMETER(DTL.LTN_Company_Number);
PARAMETER('CONDMN');
PARAMETER(DTL.LTN_Kill_Date);
PARAMETER(1);
PARAMETER(DTL.CE_Data_Exist);
PARAMETER(DTL.CE_User_Initials);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Default Shift
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// DTL.LTN Shift = CND.Shift 2
DTL.LTN_Shift = 2;

//?Default Shift
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.LTN Shift = CND.Shift 1
DTL.LTN_Shift = 1;

ENDIF;

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// LCL.CE Data Exist = DTL.CE Data Exist
LCL.CE_Data_Exist = DTL.CE_Data_Exist;

SET CURSOR;

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?CALC: Screen function fields

// DTL.Shift Description USR = Condition name of DTL.LTN Shift
DTL.Shift_Description_USR = RTVCND(DTL.LTN_Shift);

//?USER: User defined action

CASE;

// IF DTL.CE Data Exist is Yes
IF DTL.CE_Data_Exist = 'Y';

EXECUTE FUNCTION(Upd Company Event     RT) TYPE(RTVOBJ) FILE(PKEXCPP)           AB1230734;
PARAMETER(DTL.LTN_Company_Number);
PARAMETER('CONDMN');
PARAMETER(DTL.LTN_Kill_Date);
PARAMETER(DTL.LTN_Shift);
PARAMETER(DTL.CE_Data_Exist);
PARAMETER(DTL.CE_User_Initials);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Company Event     CR) TYPE(CRTOBJ) FILE(PKEXCPP)           AB1230728;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.EV_Event_Code);
 PARAMETER(PAR.CE_Kill_Date);
 PARAMETER(PAR.CE_Shift);
 PARAMETER(PAR.CE_Data_Exist);
 PARAMETER(PAR.CE_User_Initials);
 PARAMETER(PAR.CE_Unused_Status_1);
 PARAMETER(PAR.CE_Unused_Status_2);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Company Event     CH) TYPE(CHGOBJ) FILE(PKEXCPP)           AB1230729;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.EV_Event_Code);
 PARAMETER(DB1.CE_Kill_Date);
 PARAMETER(DB1.CE_Shift);
 PARAMETER(PAR.CE_Data_Exist);
 PARAMETER(PAR.CE_User_Initials);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


// PAR.Status 1 = CND.Yes
PAR.Status_1 = 'Y';

// DOW PAR.Status 1 is Yes
DOW PAR.Status_1 = 'Y';

// Call program Edt Condemned         EF.
CALL PROGRAM(Edt Condemned         EF) ('PKT1EFR');
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(DTL.LTN_Kill_Date);
PARAMETER(DTL.LTN_Shift);
PARAMETER(DTL.Oms_System_Value_Alpha);
PARAMETER(DTL.Oms_Name);
PARAMETER(DTL.CE_Data_Exist);
PARAMETER(PAR.Status_1);

// Execute function Clr Program MSGQ      US.
EXECUTE FUNCTION(Clr Program MSGQ      US) TYPE(EXCUSRSRC) ('PKUHUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


ENDDO;

// IF DTL.CE Data Exist is No
IF DTL.CE_Data_Exist = 'N';

EXECUTE FUNCTION(Upd Company Event     RT) TYPE(RTVOBJ) FILE(PKEXCPP)           AB1230734;
PARAMETER(DTL.LTN_Company_Number);
PARAMETER('CONDMN');
PARAMETER(DTL.LTN_Kill_Date);
PARAMETER(DTL.LTN_Shift);
PARAMETER(DTL.CE_Data_Exist);
PARAMETER(DTL.CE_User_Initials);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Company Event     CR) TYPE(CRTOBJ) FILE(PKEXCPP)           AB1230728;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.EV_Event_Code);
 PARAMETER(PAR.CE_Kill_Date);
 PARAMETER(PAR.CE_Shift);
 PARAMETER(PAR.CE_Data_Exist);
 PARAMETER(PAR.CE_User_Initials);
 PARAMETER(PAR.CE_Unused_Status_1);
 PARAMETER(PAR.CE_Unused_Status_2);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Company Event     CH) TYPE(CHGOBJ) FILE(PKEXCPP)           AB1230729;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.EV_Event_Code);
 PARAMETER(DB1.CE_Kill_Date);
 PARAMETER(DB1.CE_Shift);
 PARAMETER(PAR.CE_Data_Exist);
 PARAMETER(PAR.CE_User_Initials);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


CASE;

// IF LCL.CE Data Exist is Yes
IF LCL.CE_Data_Exist = 'Y';

// PAR.Status 1 = CND.Yes
PAR.Status_1 = 'Y';

// DOW PAR.Status 1 is Yes
DOW PAR.Status_1 = 'Y';

// Call program Edt Condemned         EF.
CALL PROGRAM(Edt Condemned         EF) ('PKT1EFR');
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(DTL.LTN_Kill_Date);
PARAMETER(DTL.LTN_Shift);
PARAMETER(DTL.Oms_System_Value_Alpha);
PARAMETER(DTL.Oms_Name);
PARAMETER(DTL.CE_Data_Exist);
PARAMETER(PAR.Status_1);

// Execute function Clr Program MSGQ      US.
EXECUTE FUNCTION(Clr Program MSGQ      US) TYPE(EXCUSRSRC) ('PKUHUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


ENDDO;

ENDIF;

ENDIF;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(DTL.LTN_Company_Number);
PARAMETER('HOTSCLUPL');
PARAMETER(LCL.System_Value_Alpha_USR);

// LCL.Office Dist List USR = LCL.System Value Alpha    USR
LCL.Office_Dist_List_USR = LCL.System_Value_Alpha_USR;

// Retrieve message - 'Condemns entered by &4 for &2 Shift &3 for Company &1 at &5.'
LCL.Office_Dist_Message_USR = RTVMSG(PRK0931);
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(DTL.LTN_Kill_Date);
PARAMETER(DTL.LTN_Shift);
PARAMETER(DTL.CE_User_Initials);
PARAMETER(JOB.*Job_time);

// Call program Snd Pager Msg (MPLUS) UP.
CALL PROGRAM(Snd Pager Msg (MPLUS) UP) ('POMSUPC');
PARAMETER(LCL.Office_Dist_List_USR);
PARAMETER(LCL.Office_Dist_Message_USR);

