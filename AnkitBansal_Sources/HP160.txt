      *****************  RPG PROGRAM HEADING  ***********************
      *
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP160
      * TITLE:       MAINTAIN RATION ADDITIVE COSTS
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     12/07/94
      *
      * FUNCTION: THIS PROGRAM USES A SUBFILE TO MAINTAIN RATION
      *           ADDITIVE COSTS FOR A USER-SPECIFIED DATE AND A
      *           FEED MILL BUSINESS OFFICE.
      *
      *           THE PROGRAM WILL CREATE, DELETE AND UPDATE RECORDS
      *           FOR A PARTICULAR EFFECTIVE DATE, IF THAT RATION COST
      *           HAS NOT BEEN USED ON A CLOSED GROUP AND IF IT HAS NOT
      *           BEEN USED ON A POSTED FEED TICKET.
      *
      *           IF DELETE, UPDATE, OR ADD ALLOWED, PROGRAM WILL
      *           CALL SUBROUTINE TO PROCESS FEED TICKET DETAIL BY
      *           BUSINESS OFFICE, RATION CODE, ADDITIVE CODE, AND
      *           EFFECTIVE DATE.  IF STATUS OF TICKET IS COSTED, IT
      *           WILL BE RESET BACK TO RECOST, AND PRINT A LINE ON
      *           FEED TICKETS TO BE RECOSTED REPORT.
      *
      *           THIS PROGRAM IS CALLED FROM HP460-SPECIFY RATION
      *           ADDITIVE COST TO MAINTAIN.
      *
      *           IT IS RESTRICTED TO THE FEED MILL BUSINESS OFFICE
      *              AND DATE KEYED BY THE USER IN HP460.
      *           IT DOES NOT HAVE SELECTORS OR POSITIONERS.
      *           IT DOES HAVE F4-PROMPT LOGIC.
      *           IT LOADS THE SUBFILE A PAGE AT A TIME.
      *           IT USES THE STANDARD MESSAGE HANDLING PROGRAM.
      *           IT HAS STANDARD SUBFILE OPTION EDITING.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 01/30/01  LeAnne Fedor
      *           Production type was removed from the feed ticket files.
      *           So, removed all production type logic from program.
      *
      * 06/28/01  LeAnne Fedor
      *           Recompile only.
      *           Manager and supervisor fields removed from Hog Group file.
      *
      * 12/27/01  LeAnne Fedor
      *           Recompile only.  'Maximum Age(Days)' added to Rations file.
      *
      * 07/16/02  LeAnne Fedor
      *           Removed 'Production Phase' from the listing since the field has
      *           been removed from the Feed Ticket Header file.
      *
      * 04/23/09  LeAnne Ramsey
      *           Recompile only. Costed Time/User added to Feed Ticket Header.
      *
      * 05/12/09  LeAnne Ramsey
      *           Recompile only. PickUp Ticket Type added to Feed Ticket Header.
      *
      * 07/06/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 09/21/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Upload Date' to Feed Ticket Header.
      *
      * 03/25/20  Danny Nguyen - P405 - Farm Number Increase
      *           Recompile only. Increased Bin Code (@@BNCD) in HSPREF file from 5A to 6A.
      *
      * 05/10/22 Eric L SDN736 Recompiled ticket nbr increase (TKNO & RTNO 7.0 TO 9.0)
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD160    CF   E             WORKSTN SFILE(HP160S1:HDRRN1)
     F                                     INFDS(IOFEED)
      *
     FHSP009    IF   E           K DISK
      *    BUSINESS OFFICE
      *
      *
     FHSL029A   IF   E           K DISK    RENAME(RCREC:RCRECA)
     F                                     INFDS(DBFEED)
      *  RATION COSTS
      *
      *
     FHSP029    UF A E           K DISK
      *  RATION COSTS
      *
      *
     FHSP037    UF   E           K DISK
      *  FEED TICKET HEADER RECORD
      *
      *
     FHSJ038J   IF   E           K DISK
      *  FEED TICKET DETAIL + FEED TICKET HEADER + TICKET CONTROL
      *  (SELECT: FHTSCD = CO, FIRSFL = YES)
      *
      *
     FHSJ038F   IF   E           K DISK    RENAME(FDREC:FDRECF)
      *  FEED TICKET DETAIL + HOG GROUP
      *  (SELECT: HGGSCD = CLOSED)
      *
      *
     FHSJ038G   IF   E           K DISK    RENAME(FDREC:FDRECG)
      *  FEED TICKET DETAIL + FEED TICKET HEADER + TICKET CONTROL
      *  (SELECT: FHTSCD = CO, FIRSFL = YES)
      *
      *
     FHSJ038K   IF   E           K DISK    RENAME(FDREC:FDRECK)
      *  FEED TICKET DETAIL + FEED TICKET HEADER + FEED TICKET STATUS
      *  (SELECT: TSPOFL = Y)
      *
      *
     FHSP071    IF   E           K DISK
      *    RATIONS
      *
      *
     FHSP072    IF   E           K DISK
      *    RATION ADDITIVES
      *
      *
     FQPRINT    O    F  132        PRINTER OFLIND(*INOF)
      *
      /EJECT
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'. ALSO DEFINE CURSOR LOCATION FIELDS.
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *---------------------------------------------------------------
      * STANDARD SUBFILE OPTION CONVERSION
      *---------------------------------------------------------------
     D                 DS
     D  DFOPT                  1      2
     D  WKOPT1                 1      1
     D  WKOPT2                 2      2
      *
      *---------------------------------------------------------------
      *  DATE FORMATS
      *---------------------------------------------------------------
      *
      * DATE IN MMDDYY FORMAT
      *
     D                 DS
     D  WKMDY                  1      6  0
     D  WKMM                   1      2  0
     D  WKDD                   3      4  0
     D  WKYY                   5      6  0
      *
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
      *
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      *
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      * VERIFY THAT THE BUSINESS OFFICE THE USER SELECTED STILL EXISTS.
      *
     C     DFFMBO        CHAIN     HSP009                             90
     C     *IN90         IFEQ      *ON                                          IF NOT FOUND
     C                   MOVEL     YES           NOTFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00149'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFFMBO        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ELSE
     C                   MOVEL(P)  BOBODS        DFBODS
     C                   ENDIF                                                  IF NOT FOUND
      *
      *  CLEAR/FILL THE SUBFILE
      *
     C                   EXSR      $CLR1
     C                   EXSR      $FRSH1
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      *  WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP160K1
     C                   WRITE     HP160EC
     C                   EXFMT     HP160C1
      *
      * SET THE 'RESET' FLAG TO NO.  THIS FLAG IS USED TO DETERMINE
      * WHETHER TO REPOSITION THE USER TO A PARTICULAR PLACE IN THE
      * SUBFILE (RESET=YES) OR TO PLACE THE USER AT THE BEGINNNING OF
      * THE SUBFILE (RESET=NO)
      *
     C                   MOVEL     NO            RESET
      *
      * RETRIEVE THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) AND MOVE IT TO A WORK FIELD.  THIS VALUE
      * WILL BE USED LATER TO CONTROL THE REPOSITIONING OF THE SUBFILE.
      *
     C                   Z-ADD     IDFLOW        WKFLOW
      *
      * CLEAR ALL MESSAGES
      *
     C                   EXSR      $CLMSG
      *
      * GET USER'S ENTRY AND RESET STANDARD RESPONSE
      *
     C                   SELECT
      *
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C                   EXSR      $F4S1
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C     MODE          IFEQ      REVISE
     C                   MOVEL     YES           RESET
     C                   ENDIF
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN06         WHENEQ    *ON                                          F6-CREATE
     C                   MOVEL     CREATE        MODE
     C                   MOVEL     CREATE        DFMODE
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C     MODE          IFEQ      REVISE
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
     C                   ELSE
     C                   MOVEL     REVISE        MODE
     C                   MOVEL     REVISE        DFMODE
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C     *IN25         WHENEQ    *ON                                          F25-ROLLUP
     C                   EXSR      $LOAD1
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
      * USER PRESSED 'ENTER'
      *
     C     MODE          IFEQ      REVISE                                       IF NOTHING
     C     HDRRN1        ANDEQ     0
     C                   MOVEL     EXIT          ROUTNE
     C                   ELSE
     C                   MOVEL     EDIT1         ROUTNE
     C                   ENDIF                                                  IF NOTHING
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDIT1 - SUBROUTINE TO EDIT INPUT FIELDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      * CLEAR CALLED PROGRAM FLAG
      *
     C                   MOVEL     NO            CALFLG
      *
      * FIRST, EDIT ALL THE SELECTIONS ENTERED BY THE USER IN THE
      * SUBFILE OPTION FIELD, TO SEE THAT VALID SELECTIONS WERE INPUT
      *
     C     MODE          IFEQ      REVISE
     C                   EXSR      $EDOP1
     C                   ENDIF
      *
      * IF THERE ARE NO ERRORS IN THE SUBFILE OPTIONS ENTERED
      * BY THE USER, THEN READ THE SELECTED SUBFILE RECORDS AND PROCESS
      *
     C     ERROR         IFEQ      0                                            IF NO ERROR
     C                   EXSR      $PROC1
     C                   ENDIF                                                  IF NO ERROR
      *
      * IF THERE ARE NO ERRORS,
      *    IF THE USER IS IN REVISE MODE, EXIT THE PROGRAM
      *    IF THE USER IS IN CREATE MODE, GO TO REVISE MODE
      *
     C     ERROR         IFEQ      0                                            IF STILL OK
      *
     C     MODE          IFEQ      CREATE                                       IF CREATE
     C                   MOVEL     REVISE        MODE
     C                   MOVEL     REVISE        DFMODE
     C                   MOVEL     SET1          ROUTNE
     C                   ELSE
      *
     C                   SELECT
     C     RTNCD         WHENEQ    '12'
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     RTNCD         WHENEQ    '03'
     C                   MOVEL     EXIT          ROUTNE
      *
      *
     C     CALFLG        WHENEQ    YES
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     DELFLG        WHENEQ    YES
     C                   MOVEL     NO            DELFLG
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
     C                   OTHER
      *
     C                   MOVEL     EXIT          ROUTNE
     C                   ENDSL
      *
     C                   ENDIF                                                  IF CREATE
     C                   ELSE
      *
      * IF THERE ARE SUBFILE ERRORS, SET THE SCREEN TO REDISPLAY
      *
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF                                                  IF STILL OK
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $CLR1  - SUBROUTINE TO CLEAR THE SUBFILE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $CLR1         BEGSR
      *
     C                   Z-ADD     0             SVRRN1
      *
     C                   CLEAR                   HP160S1
     C                   SETON                                        83        SFLCLR
     C                   WRITE     HP160C1
     C                   SETOFF                                       818283
      *                                                    81=SFLDSP
      *                                                    82=SFLEND
      *                                                    83=SFLCLR
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $FRSH1 - SUBROUTINE TO REFRESH/FILL THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $FRSH1        BEGSR
      *
      * SET INDICATORS TO CONTROL DSPF DISPLAY
      *
     C     MODE          IFEQ      CREATE
     C                   SETON                                        61
     C                   ELSE
     C                   SETON                                        60
     C                   ENDIF
      *
      *  IF THE RECORD HAS BEEN DELETED OUT FROM UNDER
      *  THE USER, THEN SET *IN90 BACK ON TO CONTROL AVAILABLE FUNCTION
      *  KEYS AND INPUT FIELDS.  (*IN90 WAS SET OFF ABOVE WHEN THE
      *  SUBFILE WAS CLEARED)
      *
     C     NOTFLG        IFEQ      YES                                          IF NOT FOUND
     C                   SETON                                        90
     C                   ENDIF                                                  IF NOT FOUND
      *
      * SET POSITION IN DATABASE FILE HSL029A-RATION COSTS
      *
     C     K1L029        SETLL     HSL029A
      *
      * THE FIELD 'RESET' IS A FLAG FIELD TO INDICATE WHETHER YOU ARE
      * ATTEMPTING TO REPOSITION THE USER CLOSE TO WHERE HE WAS IN THE
      * SUBFILE.
      * THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) WAS RETRIEVED EARLIER AND PUT IN WKFLOW.
      * ADD TO WKFLOW THE NUMBER OF LINES ON YOUR SUBFILE PAGE OR THE
      * NUMBER LESS 1 TO DETERMINE A SUBFILE RRN TO REPOSITION TO.
      * IF RESET IS 'NO', DON'T REPOSITION THE USER; JUST START OVER
      *
     C     RESET         IFEQ      YES
     C     WKFLOW        ADD       WKRLIN        MAXRRN
     C                   ELSE
     C                   Z-ADD     WKPLIN        MAXRRN
     C                   ENDIF
      *
      * LOAD THE SUBFILE UNTIL YOU HAVE THE REQUIRED NUMBER OF RECORDS
      * BY COMPARING THE HIDDEN RRN IN THE SUBFILE TO DESIRED MAXIMUM.
      * THE MAXIMUM WILL DEPEND ON WHETHER YOU ARE REPOSITIONING THE
      * SUBFILE OR NOT. STOP IF YOU GET TO THE END OF THE SUBFILE.
      *
     C     SVRRN1        DOUGE     MAXRRN
     C     *IN82         OREQ      *ON
     C                   EXSR      $LOAD1
     C                   ENDDO
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $LOAD1- SUBROUTINE TO LOAD THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $LOAD1        BEGSR
      *
     C                   Z-ADD     SVRRN1        HDRRN1
      *
      * SET THE COUNT OF RECORDS ON THE SUBFILE PAGE TO ZERO.
      * COUNT IS USED TO COUNT THE RECORDS WRITTEN TO THE SUBFILE.
      *
     C                   Z-ADD     0             COUNT             2 0
      *
      * FILL THE SUBFILE UNTIL THE END OF THE DATABASE FILE OR YOU
      * HAVE FILLED ALL THE LINES ON THE SUBFILE PAGE
      *
     C                   SETOFF                                       82
     C     *IN82         DOUEQ     *ON                                          DO FILL LOOP
     C     COUNT         ORGE      WKPLIN
      *
      * IF IN REVISE MODE, READ RATION COST RECORDS FOR THE FEED MILL
      * BUSINESS OFFICE AND THE EFFECTIVE DATE PASSED IN AS A PARM.
      * PLACE AN 'N' IN POSITION 53 TO PREVENT RECORD LOCKING
      *
     C     MODE          IFEQ      REVISE
     C     K1L029        READE     HSL029A                                82
     C                   ENDIF
      *
     C     *IN82         IFEQ      *OFF                                          IF FOUND
      *
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
     C                   MOVE      *BLANK        DFOPT
     C                   MOVE      *BLANK        DFACT
      *
      * IF IN REVISE MODE, FILL SUBFILE FIELDS FROM DATABASE FILE
      * AND RETRIEVE RATION AND ADDITIVE INFO
      *
     C     MODE          IFEQ      REVISE
     C                   MOVEL     RCRNCD        DFRNCD
     C                   MOVEL     RCADCD        DFADCD
     C                   Z-ADD     RCIBRT        DFIBRT
     C                   Z-ADD     RCMBRT        DFMBRT
     C                   EXSR      $RNAD
     C                   ELSE
      *
      * IF IN CREATE MODE, INITIALIZE SUBFILE FIELDS.
      *
     C                   MOVE      *BLANK        DFRNCD
     C                   MOVE      *BLANK        DFADCD
     C                   MOVE      *BLANK        DFDS
     C                   Z-ADD     0             DFIBRT
     C                   Z-ADD     0             DFMBRT
     C                   Z-ADD     0             HDRBLB
     C                   ENDIF
      *
     C                   WRITE     HP160S1
     C                   SETON                                        81
      *
      * TO CONTROL THE PAGE OF THE SUBFILE TO DISPLAY, SET THE VALUE
      * FOR THE DSPF SFLRCDNBR FIELD TO BE EQUAL TO THE SFL HIDDEN RRN
      *
     C                   Z-ADD     HDRRN1        HDPAG1
      *
     C                   ENDIF                                                  IF FOUND
     C                   ENDDO                                                  DO FILL LOOP
      *
      * IF NO RECORDS WERE WRITTEN TO THE SUBFILE, THEN ISSUE
      * THE STANDARD ERROR MESSAGE OF NO DATA FOUND.
      *
     C     HDRRN1        IFEQ      0
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09002'     MGID(E)
     C                   ENDIF
     C                   ENDIF
      *
     C                   Z-ADD     HDRRN1        SVRRN1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $EDOP1 - SUBROUTINE TO READ CHANGED RECORDS IN SUBFILE AND
      *          EDIT FOR VALID SUBFILE SELECTOR OPTIONS ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $EDOP1        BEGSR
      *
      * READ ALL THE CHANGED SUBFILE RECORDS EDITING FOR VALID SUBFILE
      * SELECTOR OPTIONS
      *
     C                   SETOFF                                       80
     C     *IN80         DOUEQ     *ON                                          DO READ C
     C                   READC     HP160S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
     C                   SETON                                        85
      *
      * SET OFF ERROR INDICATOR FOR SUBFILE SELECTOR
      *
     C                   SETOFF                                       30
      *
      * CONVERT OPTION USER ENTERED TO STANDARD FORMAT. FOR EXAMPLE,
      * A ' 1', '01', AND '1 ' MUST BE STANDARDIZED TO ' 1'.
      *
     C     WKOPT2        IFEQ      *BLANK                                       IF 2 = BLANK
     C                   MOVE      WKOPT1        WKOPT2
     C                   MOVE      *BLANKS       WKOPT1
     C                   ENDIF                                                  IF 2 = BLANK
      *
     C     WKOPT1        IFEQ      *ZEROS                                       IF 1 IS ZERO
     C                   MOVE      *BLANKS       WKOPT1
     C                   ENDIF                                                  IF 1 IS ZERO
      *
      * TEST FOR VALID SUBFILE OPTION ENTRY ON ALL CHANGED RECORDS
      *
     C     DFOPT         IFNE      ' 4'
     C     DFOPT         ANDNE     '  '
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09006'     MGID(E)
     C                   ENDIF
     C                   EXSR      $ERR1
     C                   ENDIF
      *
     C                   UPDATE    HP160S1
      *
      * SET OFF ERROR INDICATOR FOR SUBFILE SELECTOR
      *
     C                   SETOFF                                       30
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO READ C
      * RESET MDT
     C                   SETOFF                                       85
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $PROC1 - SUBROUTINE TO READ AND EDIT CHANGED SUBFILE RECORDS
      *          FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $PROC1        BEGSR
      *
      * READ ALL THE CHANGED SUBFILE RECORDS PROCESSING THE SUBFILE
      * SELECTION
      *
     C                   SETOFF                                       80
     C     *IN80         DOUEQ     *ON                                          DO PROCESS
     C                   READC     HP160S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
     C                   SETON                                        85
      *
      * SET OFF THE ERROR INDICATORS
      *
     C                   SETOFF                                       303132
     C                   SETOFF                                       3334
     C                   SETOFF                                       5152
      *
     C     RTNCD         IFEQ      '00'                                         IF ENTER
     C                   MOVEL     NO            ERRFLG
      *
      *
      * IF CREATE MODE
      *
     C     MODE          IFEQ      CREATE                                       IF CREATE
     C                   MOVE      *BLANK        DFDS
     C     DFRNCD        IFNE      *BLANK
     C     DFADCD        ORNE      *BLANK
     C     DFIBRT        ORNE      0
     C     DFMBRT        ORNE      0
     C                   EXSR      $EDCR1
     C                   ENDIF
     C                   ENDIF                                                  IF CREATE
      *
      * IF REVISE MODE
      *
     C     MODE          IFEQ      REVISE                                       IF REVISE
     C                   EXSR      $EDRV1
     C                   ENDIF                                                  IF REVISE
      *
      * NOW, IF THE USER HAS ENTERED A SUBFILE OPTION, GO PERFORM
      * THE PROCESSING IF THERE ARE NO ERRORS.
      *
     C                   MOVEL     NO            CALFLG
      *
     C     ERRFLG        IFEQ      NO                                           IF NO ERROR
     C                   MOVE      *BLANKS       DFOPT
     C                   SETOFF                                       85
     C                   ENDIF                                                  IF NO ERROR
     C                   ENDIF                                                  IF ENTER
      *
      * UPDATE THE SUBFILE RECORD AND SET OFF INDICATORS
      *
     C                   UPDATE    HP160S1
      *
     C                   SETOFF                                       303132
     C                   SETOFF                                       3334
     C                   SETOFF                                       5152
      *
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO PROCESS
      * SET MDT
     C                   SETOFF                                       85
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $RNAD - RETRIEVE RATION AND ADDITIVE INFO
      *----------------------------------------------------------------
      *
     C     $RNAD         BEGSR
      *
     C     DFRNCD        CHAIN     HSP071                             91
     C     *IN91         IFEQ      *OFF                                         IF GOOD RAT
     C                   MOVEL(P)  RNRNDS        DFDS
     C                   Z-ADD     RNRBLB        HDRBLB
      *
     C     DFADCD        IFNE      *BLANK                                       IF ADDITIVE
     C     K6P072        CHAIN     HSP072                             92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL(P)  RAADDS        DFDS
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     DFDS
     C                   ENDIF
     C                   ENDIF                                                  IF ADDITIVE
      *
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     DFDS
     C                   Z-ADD     0             HDRBLB
     C                   ENDIF                                                  IF GOOD RAT
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDCR1 - SUBROUTINE TO EDIT/WRITE RECORDS TO DATABASE FILE
      *          FOR SCREEN 1 WHEN USER IS CREATING RECORDS
      *----------------------------------------------------------------
      *
     C     $EDCR1        BEGSR
      *
      * RATION CODE CANNOT BE BLANK
      *
     C     DFRNCD        IFEQ      *BLANK                                       IF BLANK RAT
     C                   SETON                                        31
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * VALIDATE THE RATION CODE
      *
     C                   MOVE      *BLANK        DFDS
     C                   Z-ADD     0             HDRBLB
      *
     C     DFRNCD        CHAIN     HSP071                             92
     C     *IN92         IFEQ      *ON                                          IF BAD RAT
     C                   SETON                                        31
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG                                       IF NOT MAX
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00247'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFRNCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF                                                  IF NOT MAX
     C                   ELSE
      *
     C                   MOVEL(P)  RNRNDS        DFDS
     C                   Z-ADD     RNRBLB        HDRBLB
      *
      * THE RATION IS GOOD; SO, IF AN ADDITIVE HAS BEEN
      * ENTERED, VALIDATE
      *
     C     DFADCD        IFNE      *BLANK                                       IF ADDITIVE
     C     K6P072        CHAIN     HSP072                             92
     C     *IN92         IFEQ      *OFF                                         IF GOOD ADD
     C                   MOVEL(P)  RAADDS        DFDS
     C                   ELSE
     C                   SETON                                        32
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG                                       IF NOT MAX
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00417'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFRNCD        MGW(1)
     C                   MOVEA     DFADCD        MGW(6)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF                                                  IF NOT MAX
     C                   ENDIF                                                  IF GOOD ADD
     C                   ENDIF                                                  IF ADDITIVE
     C                   ENDIF                                                  IF BAD RAT
     C                   ENDIF                                                  IF BLANK RAT
      *
      * SEE IF THE USER HAS ALREADY ENTERED A COST FOR THIS
      * RATION OR RATION/ADDITIVE
      *
     C     ERRFLG        IFEQ      NO                                           IF CODES OK
     C     K2P029        CHAIN(N)  HSP029                             95
     C     *IN95         IFEQ      *OFF                                         IF ALREADY
     C                   SETON                                        3132
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   CLEAR                   MGW
     C                   MOVEA     DFRNCD        MGW(1)
     C     DFADCD        IFEQ      *BLANK                                       IF ONLY RAT
     C                   MOVEL     'HS00248'     MGID(E)
     C                   ELSE
     C                   MOVEL     'HS00218'     MGID(E)
     C                   MOVEA     DFADCD        MGW(6)
     C                   ENDIF                                                  IF ONLY RAT
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ELSE
      *
      * DETERMINE IF ANY COST RECORDS EXIST FOR THIS RATION/ADDITIVE
      * THAT HAVE AN EFFECTIVE DATE LATER THAN THIS NEW RECORD.
      * IF A LATER EFFECTIVE DATE EXISTS, USE IT AS "TO" DATE FOR
      * SUBSEQUENT RECOSTING LOGIC.
      *
     C     K2P029        SETLL     HSP029
     C     K4J038        READE(N)  HSP029                                 95
     C     *IN95         IFEQ      *OFF
     C                   Z-ADD     RCRCDT        WKTODT
     C                   ELSE
     C                   Z-ADD     99999999      WKTODT
     C                   ENDIF
     C                   ENDIF                                                  IF ALREADY
     C                   ENDIF                                                  IF CODES OK
      *
      * PERFORM EDITS COMMON TO BOTH THE CREATE AND REVISE MODES
      *
     C                   EXSR      $EDAL1
      *
      * WHEN A RECORD IS CREATED, THE CONSTANT '*CREATED' IS MOVED TO
      * A SUBFILE FIELD.  THIS IS DONE SO THAT IF SOME SUBFILE
      * RECORDS HAVE ERRORS AND THE SCREEN IS REDISPLAYED WITH ERROR
      * MESSAGES, THE USER WILL KNOW THAT THIS RECORD HAS BEEN CREATED
      * SUCCESSFULLY.  SETTING ON *IN62 WILL PROTECT THE FIELD.
      *
     C     ERRFLG        IFEQ      NO                                           IF NO ERROR
     C                   MOVEL     DFFMBO        RCFMBO
     C                   MOVEL     DFRNCD        RCRNCD
     C                   MOVEL     DFADCD        RCADCD
     C                   Z-ADD     SVEFDT        RCRCDT
     C                   Z-ADD     DFIBRT        RCIBRT
     C                   Z-ADD     DFMBRT        RCMBRT
      *
      * EXECUTE SUBROUTINE TO CALCULATE RATES PER POUND
      *
     C                   EXSR      $PERLB
      *
     C                   WRITE     RCREC
      *
     C                   MOVEL     '*CREATED'    DFACT
     C                   SETON                                        62
      *
      * EXECUTE SUBROUTINE TO FIND FEED TICKETS THAT SHOULD BE RECOSTED
      * WITH NEW COST. IF STATUS IS COSTED, SET BACK TO RECOST AND
      * PRINT A LINE ON THE FEED TICKETS TO BE RECOSTED REPORT
      *
     C                   EXSR      $CSTCR
      *
     C                   ENDIF                                                  IF NO ERROR
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDRV1 - SUBROUTINE TO EDIT/UPDATE/DELETE A DATABASE RECORD
      *          FOR SCREEN 1 WHEN USER IS REVISING RECORDS
      *----------------------------------------------------------------
      *
     C     $EDRV1        BEGSR
      *
      * IF THE USER IS NOT DELETING THE RECORD, THEN
      * PERFORM EDITS COMMON TO BOTH THE CREATE AND REVISE MODES
      *
     C     DFOPT         IFNE      ' 4'
     C                   EXSR      $EDAL1
     C                   ENDIF
      *
      * CHECK THAT RATION COST HAS NOT BEEN USED ON CLOSED GROUP, OR
      * TO COST FEED TICKETS THAT HAVE BEEN POSTED. IF OK, PROCESS
      * TO SET FLAG TO RECOST
      *
     C                   EXSR      $EDTKT
      *
     C     ERRFLG        IFEQ      NO                                           IF NO ERROR
      *
     C     K2P029        CHAIN     HSP029                             94
      *
      * WHEN A RECORD IS DELETED, THE CONSTANT '*DELETED' IS MOVED TO
      * THE SUBFILE FIELD.  THIS IS DONE SO THAT IF SOME SUBFILE
      * RECORDS HAVE ERRORS AND THE SCREEN IS REDISPLAYED WITH ERROR
      * MESSAGES, THE USER WILL KNOW THAT THIS RECORD HAS BEEN DELETED
      * SUCCESSFULLY.  *IN62 WILL PROTECT THE FIELDS.
      *
     C     *IN94         IFEQ      *OFF                                         IF FOUND
      *
     C     DFOPT         IFEQ      ' 4'                                         IF DEL
     C                   MOVEL     YES           DELFLG
     C                   DELETE    RCREC
      *
     C                   MOVEL     *BLANKS       DFOPT
     C                   MOVEL     '*DELETED'    DFACT
     C                   SETON                                        62
     C                   ELSE
      *
      * NOT OPTION '4'
     C                   Z-ADD     DFIBRT        RCIBRT
     C                   Z-ADD     DFMBRT        RCMBRT
      *
      * EXECUTE SUBROUTINE TO CALCULATE RATES PER POUND
      *
     C                   EXSR      $PERLB
     C                   UPDATE    RCREC
     C                   ENDIF                                                  IF DEL
      *
      * EXECUTE SUBROUTINE TO FIND FEED TICKETS USING THIS RATION COST
      * AND IF COSTED, SET STATUS BACK TO RECOST AND PRINT REPORT
      *
     C                   EXSR      $CSTRV
     C                   ELSE
      *
      * THE RECORD HAS BEEN DELETED SINCE THIS PROGRAM RETRIEVED IT,
      * SO ISSUE THE STANDARD ERROR MESSAGE.
      *
     C     DFOPT         IFEQ      *BLANK
     C                   SETON                                        31
     C                   ELSE
     C                   SETON                                        30
     C                   ENDIF
      *
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09008'     MGID(E)
     C                   ENDIF
     C                   EXSR      $ERR1
     C                   ENDIF                                                  IF FOUND
     C                   ENDIF                                                  IF NO ERROR
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDTKT - EDIT FEED TICKETS FOR RECOSTING
      *----------------------------------------------------------------
      *
     C     $EDTKT        BEGSR
      *
      * CHECK IF RATION COST HAD BEEN USED ON A FEED TICKET FOR
      * A CLOSED GROUP
      *
     C     K3J038        SETLL     HSJ038F                                98
     C     *IN98         IFEQ      *ON                                          IF CLOSED
     C                   SETON                                        3132
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C     DFOPT         IFEQ      ' 4'
     C                   MOVEL     'HS00412'     MGID(E)
     C                   ELSE
     C                   MOVEL     'HS00414'     MGID(E)
     C                   ENDIF
     C                   CLEAR                   MGW
     C                   MOVEA     DFRNCD        MGW(1)
     C                   MOVEA     DFADCD        MGW(6)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ELSE
      *
      * IF THERE ARE NO CLOSED GROUPS, CHECK THAT THE RATION COST
      * HAS NOT BEEN USED TO COST FEED TICKETS THAT HAVE BEEN POSTED
      *
     C     K3J038        SETLL     HSJ038K                                98
     C     *IN98         IFEQ      *ON                                          IF POSTED
     C                   SETON                                        3132
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C     DFOPT         IFEQ      ' 4'
     C                   MOVEL     'HS00413'     MGID(E)
     C                   ELSE
     C                   MOVEL     'HS00415'     MGID(E)
     C                   ENDIF
     C                   CLEAR                   MGW
     C                   MOVEA     DFRNCD        MGW(1)
     C                   MOVEA     DFADCD        MGW(6)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF                                                  IF POSTED
     C                   ENDIF                                                  IF CLOSED
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $CSTRV - PROCESS FEED TICKETS TO RECOST WHEN IN REVISE MODE
      *----------------------------------------------------------------
      *
      * THIS LOGIC PROCESSES COSTED TICKETS THAT HAVE A VALUE OF YES FOR
      * 'RECOST THROUGH SYSTEM' IN THE FEED TICKET CONTROLS FILE.
      * SELECT LOGIC IS USED ON THE JOIN FILE TO RETRIEVE THE CORRECT
      * TICKETS.
      *
     C     $CSTRV        BEGSR
      *
     C                   MOVEL     YES           PRTFLG
     C                   Z-ADD     0             SVTKNO
     C                   MOVE      *BLANK        SVTRCD
      *
     C     K3J038        SETLL     HSJ038J
     C                   SETOFF                                       96
      *
     C     *IN96         DOUEQ     *ON                                          DO FEED
     C     K3J038        READE     HSJ038J                                96
     C     *IN96         IFEQ      *OFF                                         IF NOT EOF
      *
     C     FDTKNO        IFNE      SVTKNO                                       IF NEW TKT
     C     FDTRCD        ORNE      SVTRCD
      *
      * ALWAYS RECOST DELIVERY TICKETS
      *
     C                   SELECT
     C     FDTRCD        WHENEQ    'D'
     C                   EXSR      $RCRV
      *
      * ONLY RECOST PICKUP TICKETS IF THE ORIGINAL DELIVERY
      * TICKET WAS 'COSTED THROUGH THE SYSTEM'
      *
     C     FDTRCD        WHENEQ    'P'
     C     K7P037        CHAIN     HSP037                             92
     C     *IN92         IFEQ      *OFF
     C     FHCSFL        ANDEQ     YES
     C                   EXSR      $RCRV
     C                   ENDIF
     C                   ENDSL
      *
     C                   Z-ADD     FDTKNO        SVTKNO
     C                   MOVEL     FDTRCD        SVTRCD
     C                   ENDIF                                                  IF NEW TKT
     C                   ENDIF                                                  IF NOT EOF
      *
     C                   ENDDO                                                  DO FEED
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $RCRV - UPDATE FEED TICKET STATUS TO RECOST WHEN REVISING
      *----------------------------------------------------------------
      *
     C     $RCRV         BEGSR
      *
      * RETRIEVE FEED TICKET HEADER AND CHANGE TO RECOST.
      * PRINT A LINE ON FEED TICKETS TO BE RECOSTED REPORT
      *
     C     K5P037        CHAIN     HSP037                             95
     C     *IN95         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL     'RC'          FHTSCD
     C                   UPDATE    FHREC
     C                   EXSR      $PRINT
     C                   ENDIF                                                  IF FOUND
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $CSTCR - PROCESS FEED TICKETS TO RECOST WHEN CREATING
      *----------------------------------------------------------------
      *
      * THIS LOGIC PROCESSES COSTED TICKETS THAT HAVE A VALUE OF YES FOR
      * 'RECOST THROUGH SYSTEM' IN THE FEED TICKET CONTROLS FILE.
      * SELECT LOGIC IS USED ON THE JOIN FILE TO RETRIEVE THE CORRECT
      * TICKETS.
      *
      *
     C     $CSTCR        BEGSR
      *
     C                   MOVEL     YES           PRTFLG
     C                   Z-ADD     0             SVTKNO
     C                   MOVE      *BLANK        SVTRCD
      *
     C     K3J038        SETLL     HSJ038G
     C                   SETOFF                                       96
      *
     C     *IN96         DOUEQ     *ON                                          DO FEED
     C     K4J038        READE     HSJ038G                                96
     C     *IN96         IFEQ      *OFF                                         IF NOT EOF
      *
     C     FDTKNO        IFNE      SVTKNO                                       IF NEW TKT
     C     FDTRCD        ORNE      SVTRCD
      *
     C     FDRTDT        IFGE      SVEFDT                                       IF IN RANGE
     C     FDRTDT        ANDLT     WKTODT
      *
     C                   Z-ADD     FDTKNO        SVTKNO
     C                   MOVEL     FDTRCD        SVTRCD
      *
      * ALWAYS RECOST DELIVERY TICKETS
      *
     C                   SELECT
     C     FDTRCD        WHENEQ    'D'
     C                   EXSR      $RCCR
      *
      * ONLY RECOST PICKUP TICKETS IF THE ORIGINAL DELIVERY
      * TICKET WAS 'COSTED THROUGH THE SYSTEM'
      *
     C     FDTRCD        WHENEQ    'P'
     C     K7P037        CHAIN     HSP037                             92
     C     *IN92         IFEQ      *OFF
     C     FHCSFL        ANDEQ     YES
     C                   EXSR      $RCCR
     C                   ENDIF
     C                   ENDSL
      *
     C                   ELSE
      *
      * YOU ARE NOW OUTSIDE THE DATE RANGE FOR RECOSTING.
      * SO, BREAK THE LOOP.
      *
     C                   SETON                                        96
     C                   ENDIF                                                  IF IN RANGE
     C                   ENDIF                                                  IF NEW TKT
     C                   ENDIF                                                  IF NOT EOF
      *
     C                   ENDDO                                                  DO FEED
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $RCCR - UPDATE FEED TICKET STATUS TO RECOST WHEN CREATING
      *----------------------------------------------------------------
      *
     C     $RCCR         BEGSR
      *
      * RETRIEVE FEED TICKET HEADER AND CHANGE TO RECOST
      * PRINT A LINE ON FEED TICKETS TO BE RECOSTED REPORT
      *
     C     K5P037        CHAIN     HSP037                             95
     C     *IN95         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL     'RC'          FHTSCD
     C                   UPDATE    FHREC
     C                   EXSR      $PRINT
     C                   ENDIF                                                  IF FOUND
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $EDALI - SUBROUTINE TO PERFORM EDITS THAT ARE COMMON TO BOTH
      *          THE CREATE MODE AND THE REVISE MODE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $EDAL1        BEGSR
      *
      *  INGREDIENT BATCH RATE CANNOT BE ZERO OR NEGATIVE
      *
     C     DFIBRT        IFEQ      0                                            IF 0 INGRED
     C                   SETON                                        33
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   ENDIF
     C                   ELSE
      *
     C     DFIBRT        IFLT      0                                            IF NEG INGR
     C                   SETON                                        33
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09000'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF NEG INGR
     C                   ENDIF                                                  IF 0 INGRED
      *
      *  MEDICATION RATE PER BATCH CANNOT BE NEGATIVE
      *
     C     DFMBRT        IFLT      0                                            IF NEG MED
     C                   SETON                                        34
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09000'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF NEG MED
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $PRINT - PRINT A FEED DELIVERY HEADER EXCEPTION REPORT OF FEED
      *          TICKETS TO BE RECOSTED.
      *---------------------------------------------------------------
      *
     C     $PRINT        BEGSR
      *
      * IF THIS IS THE FIRST PAGE TO PRINT OR OVERFLOW, PRINT HEADINGS
      *
     C     FIRST         IFEQ      YES
     C                   EXCEPT    HDRPT
     C                   MOVEL     NO            FIRST
     C                   ENDIF
      *
     C     *INOF         IFEQ      *ON
     C                   EXCEPT    HDRPT
     C                   ENDIF
      *
      * PRINT THE RATION/ADDITIVE HEADING
      *
     C     PRTFLG        IFEQ      YES
     C                   EXCEPT    HDRAT
     C                   MOVEL     NO            PRTFLG
     C                   ENDIF
      *
      * FLIP REFERENCE TICKET DATE FOR PRINTING
      *
     C                   Z-ADD     FHRTDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         RTMDY             6 0
      *
      * FLIP TICKET DATE FOR PRINTING
      *
     C                   Z-ADD     FHTKDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         TMDY              6 0
      *
     C                   EXCEPT    DETPRT
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $PERLB - SUBROUTINE TO CONVERT THE USER-ENTERED RATES PER BATCH
      *          TO PER POUNDS RATES FOR STORING IN THE DATABASE
      *---------------------------------------------------------------
      *
     C     $PERLB        BEGSR
      *
      * INGREDIENT BATCH RATE / BATCH POUNDS = INGREDIENT POUND RATE
      *
     C     HDRBLB        IFNE      0
     C     DFIBRT        DIV(H)    HDRBLB        RCILRT
     C                   ELSE
     C                   Z-ADD     0             RCILRT
     C                   ENDIF
      *
      * MEDICATION BATCH RATE/RATION BATCH POUNDS = MEDICATION LB RATE
      *
     C     HDRBLB        IFNE      0
     C     DFMBRT        DIV(H)    HDRBLB        RCMLRT
     C                   ELSE
     C                   Z-ADD     0             RCMLRT
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      ****************************************************************
      * SUBROUTINE: $F4S1 - F4 PROMPT ON SCREEN 1
      ****************************************************************
      *
     C     $F4S1         BEGSR
      *
     C                   SELECT
      *
      * IF RATION CODE
      *
     C     FLD           WHENEQ    'DFRNCD'
     C                   MOVE      *BLANK        XXRNCD
     C                   MOVE      *BLANK        XXDS
     C                   CALL      'HP581'
     C                   PARM                    XXRNCD
     C                   PARM                    XXDS
     C                   EXSR      $RRN1
     C     *IN97         IFEQ      *OFF
     C     XXRNCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL(P)  XXRNCD        DFRNCD
     C                   MOVEL(P)  XXDS          DFDS
     C                   ENDIF                                                  IF SELECTED
     C                   SETON                                        8551
     C                   UPDATE    HP160S1
     C                   SETOFF                                       8551
      *
      * RESET THE SUBFILE RELATIVE RECORD NUMBER TO WHAT IT WAS BEFORE
      * THE USER TOOK F4 (IT WILL BE OUT-OF-SYNCH IF THE USER HAS
      * SELECTED A RECORD THUS CAUSING THE SUBFILE RECORD TO BE
      * RETRIEVED AND UPDATED.)  BUT, SET THE PAGE OF THE SUBFILE TO
      * BE DISPLAYED TO THE PAGE ON WHICH THE USER TOOK F4.
      *
     C                   Z-ADD     SVRRN1        HDRRN1
     C                   Z-ADD     HDRR1         HDPAG1
     C                   ENDIF
      *
      * IF ADDITIVE CODE
      *
     C     FLD           WHENEQ    'DFADCD'
     C                   MOVE      *BLANK        XXRNCD
     C                   MOVE      *BLANK        XXADCD
     C                   MOVE      *BLANK        XXDS
     C                   CALL      'HP520'
     C                   PARM                    XXRNCD
     C                   PARM                    XXADCD
     C                   PARM                    XXDS
     C                   EXSR      $RRN1
     C     *IN97         IFEQ      *OFF
     C     XXRNCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL(P)  XXRNCD        DFRNCD
     C                   MOVEL(P)  XXADCD        DFADCD
     C                   MOVEL(P)  XXDS          DFDS
     C                   ENDIF                                                  IF SELECTED
     C                   SETON                                        8552
     C                   UPDATE    HP160S1
     C                   SETOFF                                       8552
      *
      * RESET THE SUBFILE RELATIVE RECORD NUMBER TO WHAT IT WAS BEFORE
      * THE USER TOOK F4 (IT WILL BE OUT-OF-SYNCH IF THE USER HAS
      * SELECTED A RECORD THUS CAUSING THE SUBFILE RECORD TO BE
      * RETRIEVED AND UPDATED.)  BUT, SET THE PAGE OF THE SUBFILE TO
      * BE DISPLAYED TO THE PAGE ON WHICH THE USER TOOK F4.
      *
     C                   Z-ADD     SVRRN1        HDRRN1
     C                   Z-ADD     HDRR1         HDPAG1
     C                   ENDIF
      *
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *****************************************************************
      * SUBROUTINE: $TOMDY   FLIP DATE FROM CCYYMMDD TO MMDDYY
      *****************************************************************
      *
     C     $TOMDY        BEGSR
      *
     C                   Z-ADD     WKMON         WKMM
     C                   Z-ADD     WKDAY         WKDD
     C                   Z-ADD     WKYER         WKYY
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $ERR1  - SUBROUTINE TO SET THE SUBFILE TO REDISPLAY AT
      *          THE FIRST SCREEN THAT HAS ERRORS ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $ERR1         BEGSR
      *
     C     ERROR         IFEQ      1
     C                   Z-ADD     HDRRN1        HDPAG1
     C                   ENDIF
      *
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *---------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANKS       MGI
     C                   PARM      *BLANKS       MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      ****************************************************************
      * $RRN1  - ROUTINE TO FIND/RETRIEVE THE SUBFILE RECORD TO UPDATE
      *          WHEN RETURNING FROM A SELECT PROGRAM ON SCREEN 1
      ****************************************************************
      *
      * HDRR1 IS THE HIDDEN FIELD ASSOCIATED WITH THE KEYWORD SFLCSRRRN
      * ON THE CONTROL RECORD IN THE DSPF.
      * HDRRN1 IS THE VALUE ASSOCIATED WITH THE KEYWORD 'KSFILE' IN
      * THE F-SPECS FOR THE WORKSTATION.
      *
     C     $RRN1         BEGSR
      *
     C                   SETOFF                                       97
      *
     C     HDRR1         IFNE      0
     C                   Z-ADD     HDRR1         HDRRN1
     C     HDRRN1        CHAIN     HP160S1                            97
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * KEY FOR FILE HSL029A-RATION COSTS
      *
     C     K1L029        KLIST
     C                   KFLD                    XXFMBO
     C                   KFLD                    SVEFDT
      *
      * KEY FOR FILE HSP029-RATION COSTS
      *
     C     K2P029        KLIST
     C                   KFLD                    XXFMBO
     C                   KFLD                    DFRNCD
     C                   KFLD                    DFADCD
     C                   KFLD                    SVEFDT
      *
      * KEY FOR FILES HSJ038K, HSJ038F, HSJ038G & HSJ038J
      *
     C     K3J038        KLIST
     C                   KFLD                    XXFMBO
     C                   KFLD                    DFRNCD
     C                   KFLD                    DFADCD
     C                   KFLD                    SVEFDT
      *
      * KEY TO READE ON JOINED FILE HSJ038G (HSP038 + HSP037)
      *
     C     K4J038        KLIST
     C                   KFLD                    XXFMBO
     C                   KFLD                    DFRNCD
     C                   KFLD                    DFADCD
      *
      * KEY TO CHAIN TO FEED TICKET HEADER FILE (HSP037)
      *
     C     K5P037        KLIST
     C                   KFLD                    XXFMBO
     C                   KFLD                    FDTKNO
     C                   KFLD                    FDTRCD
      *
      * KEY FOR HSP072-RATION ADDITIVE
      *
     C     K6P072        KLIST
     C                   KFLD                    DFRNCD
     C                   KFLD                    DFADCD
      *
      *
      * KEY FOR HSP037-FEED TICKET HEADER
      *
     C     K7P037        KLIST
     C                   KFLD                    XXFMBO
     C                   KFLD                    FDRTNO
     C                   KFLD                    WKTRCD
      *
     C     *LIKE         DEFINE    FHTRCD        WKTRCD
     C                   MOVEL     'D'           WKTRCD
      *
      * PARM LISTS
      *
     C     *ENTRY        PLIST
     C                   PARM                    XXFMBO
     C                   PARM                    XXEFDT            8
     C                   PARM                    RTNCD
      *
      * GLOBAL DEFINES
      *
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6            ROUTINE
     C                   Z-ADD     0             MAXRRN            4 0          REPOSITION
     C                   MOVEL     NO            RESET             1            REPOSITION
     C                   MOVEL     NO            ERRFLG            1
     C                   MOVEL     NO            NOTFLG            1
     C                   MOVEL     NO            DELFLG            1
     C                   MOVEL     NO            CALFLG            1
     C                   MOVEL     YES           FIRST             1            FIRST PAGE
     C     *LIKE         DEFINE    FIRST         PRTFLG                         NEW RATION
     C     *LIKE         DEFINE    DFMODE        MODE                           SFL POSITION
     C     *LIKE         DEFINE    IDFLOW        WKFLOW                         SFL POSITION
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
     C     *LIKE         DEFINE    HDRRN1        SVRRN1
     C     *LIKE         DEFINE    FDTKNO        SVTKNO
     C     *LIKE         DEFINE    FDTRCD        SVTRCD
     C     *LIKE         DEFINE    WKCYMD        WKTODT
      *
      * ALPHA PARM FIELDS USED IN CALLS TO/FROM OTHER PROGRAMS
      *
     C     *LIKE         DEFINE    DFRNCD        XXRNCD
     C     *LIKE         DEFINE    DFADCD        XXADCD
     C     *LIKE         DEFINE    DFDS          XXDS
      *
     C     *LIKE         DEFINE    RCFMBO        XXFMBO
      *
      * FLIP THE USER-SELECTED DATE FROM ALPHA CCYYMMDD TO:
      *   1) NUMERIC CCMMDDYY FOR ACCESSING THE DATABASE
      *   2) NUMERIC MMDDYY FOR DISPLAY PURPOSES, AND
      *
     C                   MOVEL     XXEFDT        SVEFDT            8 0
     C                   MOVEL     XXEFDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         DFMDY
      *
      * MOVE THE USER-SELECTED BUSINESS OFFICE TO THE SCREEN
      *
     C                   MOVEL     XXFMBO        DFFMBO
      *
      * TO SUPPORT F5-REFRESH, LOGIC REQUIRES THE NUMBER OF LINES ON
      * THE SUBFILE PAGE AND ALSO THE NUMBER OF LINES LESS 1.  BY
      * SETTING THESE VALUES UP AS CONSTANT WORK FIELDS, THE PROCESSING
      * LOGIC CAN BE STANDARDIZED BETWEEN PROGRAMS.
      *
     C                   Z-ADD     12            WKPLIN            2 0          SFLPAG(0012)
     C     WKPLIN        SUB       1             WKRLIN            2 0          SFLPAG - 1
      *
      * ALWAYS BRING THE SCREEN UP IN REVISE MODE--EVEN IF THERE ARE
      * NOT ANY RECORDS TO REVISE.
      *
     C                   MOVEL     REVISE        MODE
     C                   MOVEL     REVISE        DFMODE
     C                   SETON                                        62
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
      * SET UP HEADING UNDERLINE FIELD FOR PRINT
      *
     C                   MOVEL     *ALL'-'       DASH             80
      *
     C                   TIME                    RTIME             6 0
      *
     C                   ENDSR
      /EJECT
      *
      *-------------------------------------------------------------
      * REPORT LAYOUT
      *-------------------------------------------------------------
      * REPORT HEADING LINES
      *-------------------------------------------------------------
      *
     OQPRINT    E            HDRPT          1 01
     O                                            5 'HP160'
     O                                           48 'HOG PRODUCTION SYSTEM'
     O                                           70 'DATE'
     O                       UDATE         Y     80
      *
     O          E            HDRPT          1
     O                       SDUSR               10
     O                                           48 'FEED TICKETS TO RECOST'
     O                                           70 'TIME'
     O                       RTIME               80 '  :  :  '
      *
     O          E            HDRPT          1
     O                                           70 'PAGE'
     O                       PAGE          Z     80
      *
     O          E            HDRPT          1
     O                                           16 'BUSINESS OFFICE:'
     O                       DFFMBO              23
     O                       BOBODS              55
      *
     O          E            HDRPT       1  1
     O                                            7 'REFER'
     O                                           17 'REFER'
     O                                           28 'TICKET'
     O                                           37 'TICKET'
     O                                           45 'FARM'
     O                                           58 'PRODUCED'
     O                                           73 'TICKET'
     O                                           78 'TRAN'
      *
     O          E            HDRPT          1
     O                                            7 'TICKET'
     O                                           17 'DATE'
     O                                           28 'NUMBER'
     O                                           36 'DATE'
     O                                           45 'SITE'
     O                                           56 'Y/N'
     O                                           73 'STATUS'
     O                                           78 'CODE'
      *
     O          E            HDRPT          1
     O                       DASH                80
      *
      *-------------------------------------------------------------
      * RATION/ADDITIVE HEADING
      *-------------------------------------------------------------
      *
     O          E            HDRAT       1  1
     O                       DFRNCD               5
     O                                            6 '/'
     O                       DFADCD               8
     O                       DFDS                20
     O                       DFMDY         Y     30
      *
      *
      *-------------------------------------------------------------
      * FEED TICKET DETAIL LINE FOR RECOSTED TICKETS
      *-------------------------------------------------------------
      *
     O          E            DETPRT         1
     O                       FHRTNO        Z      9                             SDN736
     O                       RTMDY         Y     19
     O                       FHTKNO        Z     27
     O                       TMDY          Y     38
     O                       FHFSCD        M     46
     O                       FHPRFL              54
     O                       FHTSCD              71
     O                       FHTRCD              76
      *
