// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLWZE1R
// ?Date: 14.08.2025 Time: 02:55:40
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


EXECUTE FUNCTION(VAL Record exists     RT) TYPE(RTVOBJ) FILE(PLCBCPP)           AB1328911;
PARAMETER(PAR.MGL_M3_Division_Group);
PARAMETER(PAR.MGL_Sequence_#);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// WRK.Update Flag = CND.Yes
WRK.Update_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Update Flag = CND.No
WRK.Update_Flag = 'N';

ENDIF;

//?USER: Initialize key screen

// KEY.MGL M3 Division Group = PAR.MGL M3 Division Group
KEY.MGL_M3_Division_Group = PAR.MGL_M3_Division_Group;

//?USER: Validate key screen

EXECUTE FUNCTION(Chk HDR record exists RT) TYPE(RTVOBJ) FILE(PLCBCPP)           AB1345102;
PARAMETER(KEY.MGL_M3_Division_Group);
{
 //?USER: Process Data record

 QUIT;

}


//?Set flag to control the initial load flag on screen
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// LCL.HDR record already exists = CND.Yes
LCL.HDR_record_already_exists = 'Y';

//?Set flag to control the initial load flag on screen
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.HDR record already exists = CND.No
LCL.HDR_record_already_exists = 'N';

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Initial Load = CND.*No
DTL.MGL_Initial_Load = 'N';

//?USER: Validate detail screen fields

//?3/22/2018 JBB E12579 - No longer checking if dates are entered
//?Val yr/period
CASE;

//?Val yr/period
// IF DTL.MGL Selected Year is Entered
IF DTL.MGL_Selected_Year > *ZERO;

// AND DTL.MGL Selected Period is Entered
AND DTL.MGL_Selected_Period > *ZERO;

//?Year must be >= 2014
CASE;

// IF DTL.MGL Selected Year is GE 2014
IF DTL.MGL_Selected_Year >= 2014;

//?Year must be >= 2014
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Year'
ERROR(PRK1371);
MSGPARM(DTL.MGL_Selected_Year);

ENDIF;

//?Periods must be in a range of 01 to 12
CASE;

// IF DTL.MGL Selected Period is Periods
IF DTL.MGL_Selected_Period >= 01;
AND DTL.MGL_Selected_Period <= 12;

//?Periods must be in a range of 01 to 12
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Period'
ERROR(PRK1372);
MSGPARM(DTL.MGL_Selected_Period);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?*ADD mode validations
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?3/22/2018 JBB E12579 - Check if previous period exists
//?Retrieve the prior period record and validate requested period
CASE;

// IF DTL.MGL Selected Year is Entered
IF DTL.MGL_Selected_Year > *ZERO;

// AND DTL.MGL Selected Period is Entered
AND DTL.MGL_Selected_Period > *ZERO;

EXECUTE FUNCTION(Rtv Prior Yr/Prd in DB RT) TYPE(RTVOBJ) FILE(PLCBCPP)          AB1344350;
PARAMETER(DTL.MGL_M3_Division_Group);
PARAMETER(9999);
PARAMETER(12);
PARAMETER(LCL.MGL_Process_Status);
PARAMETER(LCL.Prior_Year_in_Database);
PARAMETER(LCL.Prior_Period_in_Database);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?Return the values of the first record only
 // PAR.Prior Year in Database = DB1.MGL Selected Year
 PAR.Prior_Year_in_Database = DB1.MGL_Selected_Year;

 // PAR.Prior Period in Database = DB1.MGL Selected Period
 PAR.Prior_Period_in_Database = DB1.MGL_Selected_Period;

 // PAR.MGL Process Status = DB1.MGL Process Status
 PAR.MGL_Process_Status = DB1.MGL_Process_Status;

 QUIT;

}


//?Calculate previous period based on screen entries
CASE;

// IF DTL.MGL Selected Period is Period 01
IF DTL.MGL_Selected_Period = 1;

// LCL.Prior Period = CON.12
LCL.Prior_Period = 12;

// LCL.Prior Year = DTL.MGL Selected Year - CON.1
LCL.Prior_Year = DTL.MGL_Selected_Year - 1;

//?Calculate previous period based on screen entries
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Prior Period = DTL.MGL Selected Period - CON.1
LCL.Prior_Period = DTL.MGL_Selected_Period - 1;

// LCL.Prior Year = DTL.MGL Selected Year
LCL.Prior_Year = DTL.MGL_Selected_Year;

ENDIF;

//?Determine if new record can be created
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?Determine if new record can be created
// IF LCL.Prior Year in Database GT DTL.MGL Selected Year
IF LCL.Prior_Year_in_Database > DTL.MGL_Selected_Year;

// OR LCL.Prior Year in Database EQ DTL.MGL Selected Year
OR ( LCL.Prior_Year_in_Database = DTL.MGL_Selected_Year;

// AND LCL.Prior Period in Database GE DTL.MGL Selected Period
AND LCL.Prior_Period_in_Database >= DTL.MGL_Selected_Period );

// Send error message - 'A record for Yr/Prd &3/&4 is on or after entered year and period.'
ERROR(PRK1490);
MSGPARM(DTL.MGL_Selected_Year);
MSGPARM(DTL.MGL_Selected_Period);
MSGPARM(LCL.Prior_Year_in_Database);
MSGPARM(LCL.Prior_Period_in_Database);

//?Determine if new record can be created
// IF LCL.Prior Year in Database LT LCL.Prior Year
IF LCL.Prior_Year_in_Database < LCL.Prior_Year;

// OR LCL.Prior Year in Database EQ LCL.Prior Year
OR ( LCL.Prior_Year_in_Database = LCL.Prior_Year;

// AND LCL.Prior Period in Database LT LCL.Prior Period
AND LCL.Prior_Period_in_Database < LCL.Prior_Period );

// Send error message - 'Prior Yr/Prd on file is &3/&4. No record for Yr/Prd &5/&6.'
ERROR(PRK1491);
MSGPARM(DTL.MGL_Selected_Year);
MSGPARM(DTL.MGL_Selected_Period);
MSGPARM(LCL.Prior_Year_in_Database);
MSGPARM(LCL.Prior_Period_in_Database);
MSGPARM(LCL.Prior_Year);
MSGPARM(LCL.Prior_Period);

//?Determine if new record can be created
// IF *OTHERWISE
IF *OTHERWISE;

//?If previous record is not in a Process Status of 'P'
CASE;

// IF LCL.MGL Process Status is Not Processed
IF LCL.MGL_Process_Status = 'O'/'R'/'E';

// Send error message - 'Cannot create a new period if the prior period has not completed processing
ERROR(PRK1489);
MSGPARM(DTL.MGL_Selected_Year);
MSGPARM(DTL.MGL_Selected_Period);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt M3 GL Inter Ctl   IF) TYPE(EXCINTFUN) FILE(PLCBCPP)        AB1324406;
PARAMETER(DTL.MGL_M3_Division_Group);
PARAMETER(DTL.MGL_Selected_Year);
PARAMETER(DTL.MGL_Selected_Period);
PARAMETER(DTL.MGL_Selected_From_Date);
PARAMETER(DTL.MGL_Selected_To_Date);
PARAMETER(DTL.MGL_Initial_Load);
{
 //?Execute internal function

 // LCL.MGL Sequence # = CON.99999
 LCL.MGL_Sequence_# = 99999;

 EXECUTE FUNCTION(Rtv Last Seq #        RT) TYPE(RTVOBJ) FILE(PLCBCPP)           AB1324407;
 PARAMETER(LCL.MGL_Sequence_#);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.MGL Sequence # = LCL.MGL Sequence # + CON.1
 LCL.MGL_Sequence_# = LCL.MGL_Sequence_# + 1;

 EXECUTE FUNCTION(Crt M3 GL Inter Ctl   CR) TYPE(CRTOBJ) FILE(PLCBCPP)           AB1324309;
 PARAMETER(PAR.MGL_M3_Division_Group);
 PARAMETER(LCL.MGL_Sequence_#);
 PARAMETER(PAR.MGL_Selected_Year);
 PARAMETER(PAR.MGL_Selected_Period);
 PARAMETER(PAR.MGL_Selected_From_Date);
 PARAMETER(PAR.MGL_Selected_To_Date);
 PARAMETER('O');
 PARAMETER(PAR.MGL_Initial_Load);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?3/22/2018 JBB E12595 - Add creation of M3 GL Interface Cntrl DTL
 //?This will read all records in the M3 GL Company Grouping file, and
 //?create M3 GL Interface Cntrl DTL records for each record it
 //?processes.
 EXECUTE FUNCTION(Crt M3 GL Intrf Co Dtl RT) TYPE(RTVOBJ) FILE(PWAOREP)          AB1344040;
 PARAMETER(PAR.MGL_M3_Division_Group);
 PARAMETER(PAR.MGL_Selected_Year);
 PARAMETER(PAR.MGL_Selected_Period);
 {
  //?USER: Process Data record

  //?Check Units flag and set Units Status value
  CASE;

  // IF DB1.MGL Units Flag is Yes
  IF DB1.MGL_Units_Flag = 'Y';

  //?Set status to Open so it will get picked up in M3JDE200CL
  // LCL.MGL Process Sts-Units = CND.Open
  LCL.MGL_Process_Sts_Units = 'O';

  //?Check Units flag and set Units Status value
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Set status to Processed so it will not get picked up in M3JDE200CL
  // LCL.MGL Process Sts-Units = CND.Processed
  LCL.MGL_Process_Sts_Units = 'P';

  ENDIF;

  //?For each Company Groupings record, create a record in this file
  EXECUTE FUNCTION(Crt M3 GL Intrfc Ctl DTL) TYPE(CRTOBJ) FILE(PWANCPP)           AB1343976;
  PARAMETER(DB1.MGL_M3_Division_Group);
  PARAMETER(DB1.MGL_JDE_Company);
  PARAMETER(PAR.MGL_Process_Year);
  PARAMETER(PAR.MGL_Process_Period);
  PARAMETER('O');
  PARAMETER(LCL.MGL_Process_Sts_Units);
  PARAMETER(DB1.MGL_Units_Flag);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg M3 GL Inter Ctl   CH) TYPE(CHGOBJ) FILE(PLCBCPP)           AB1324310;
PARAMETER(DTL.MGL_M3_Division_Group);
PARAMETER(DTL.MGL_Sequence_#);
PARAMETER(DTL.MGL_Selected_Year);
PARAMETER(DTL.MGL_Selected_Period);
PARAMETER(DTL.MGL_Selected_From_Date);
PARAMETER(DTL.MGL_Selected_To_Date);
PARAMETER(DTL.MGL_Process_Status);
PARAMETER(DTL.MGL_Initial_Load);
PARAMETER(DTL.RS_Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


