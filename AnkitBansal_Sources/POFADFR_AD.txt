// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POFADFR
// ?Date: 14.08.2025 Time: 03:36:57
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// PGM.*Scan limit = CON.9999999
PGM.*Scan_limit = 9999999;

//?USER: Initialize subfile control

//?First Time Processing
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF CTL.LLT Trans Date is Entered
IF CTL.LLT_Transaction_Date <> *ZERO;

EXECUTE FUNCTION(Rtv Trans Qty/Wgt     RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1600412;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.LLT_Transaction_Date);
PARAMETER(CTL.LLT_Transaction_Type);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.LLT_Production_Date);
PARAMETER(CTL.LLT_Lot_Number);
PARAMETER(CTL.Location_Code);
PARAMETER(CTL.LLT_Location_Level);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.User_Id);
PARAMETER(CTL.Quantity_Loc_Trans_USR);
PARAMETER(CTL.Weight_11_2_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // LCL.Item Code = CON.*ZERO
 LCL.Item_Code = *ZERO;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?New Transaction Type
 CASE;

 // IF PAR.LLT Trans Type is *ALL values
 IF PAR.LLT_Transaction_Type = 'R'/'A'/'T'/'RT'/'S'/'AP'/'C';

 // AND DB1.LLT Trans Type NE PAR.LLT Trans Type
 AND DB1.LLT_Transaction_Type <> PAR.LLT_Transaction_Type;

 QUIT;

 ENDIF;

 //?SEL:  Item Code
 CASE;

 // IF PAR.Item Code is Entered
 IF PAR.Item_Code <> *ZERO;

 CASE;

 // IF PAR.Item Code NE DB1.Item Code
 IF PAR.Item_Code <> DB1.Item_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Production Date
 CASE;

 // IF PAR.LLT Production Date NE WRK.ZERO
 IF PAR.LLT_Production_Date <> WRK.ZERO;

 CASE;

 // IF PAR.LLT Production Date NE DB1.LLT Production Date
 IF PAR.LLT_Production_Date <> DB1.LLT_Production_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Lot Number
 CASE;

 // IF PAR.LLT Lot Number NE WRK.ZERO
 IF PAR.LLT_Lot_Number <> WRK.ZERO;

 CASE;

 // IF PAR.LLT Lot Number NE DB1.LLT Lot Number
 IF PAR.LLT_Lot_Number <> DB1.LLT_Lot_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Location Code
 CASE;

 // IF PAR.Location Code NE WRK.BLANK
 IF PAR.Location_Code <> WRK.BLANK;

 CASE;

 // IF PAR.Location Code NE DB1.Location Code
 IF PAR.Location_Code <> DB1.Location_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Location Level
 CASE;

 // IF PAR.LLT Location Level NE WRK.ZERO
 IF PAR.LLT_Location_Level <> WRK.ZERO;

 CASE;

 // IF PAR.LLT Location Level NE DB1.LLT Location Level
 IF PAR.LLT_Location_Level <> DB1.LLT_Location_Level;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Order Number
 CASE;

 // IF PAR.Order Number NE WRK.ZERO
 IF PAR.Order_Number <> WRK.ZERO;

 CASE;

 // IF PAR.Order Number NE DB1.Order Number
 IF PAR.Order_Number <> DB1.Order_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  User Id
 CASE;

 // IF PAR.User Id NE WRK.BLANK
 IF PAR.User_Id <> WRK.BLANK;

 CASE;

 // IF PAR.User Id NE DB1.User Id
 IF PAR.User_Id <> DB1.User_Id;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Record Selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.Quantity Loc Trans USR = PAR.Quantity Loc Trans USR + DB1.LLT Trans Qty
 PAR.Quantity_Loc_Trans_USR = PAR.Quantity_Loc_Trans_USR + DB1.LLT_Transaction_Qty;

 CASE;

 // IF LCL.Item Code NE DB1.Item Code
 IF LCL.Item_Code <> DB1.Item_Code;

 EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(WRK.Quality_Level);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Item Code = DB1.Item Code
 LCL.Item_Code = DB1.Item_Code;

 ENDIF;

 // LCL.Weight Display 1 = DB1.LLT Trans Qty * LCL.Unit Weight *
 LCL.Weight_Display_1 = DB1.LLT_Transaction_Qty * LCL.Unit_Weight;

 // PAR.Weight 11.2 USR = PAR.Weight 11.2 USR + LCL.Weight Display 1
 PAR.Weight_11_2_USR = PAR.Weight_11_2_USR + LCL.Weight_Display_1;

 ENDIF;

}


// IF CTL.LLT Production Date is Entered
IF CTL.LLT_Production_Date <> *ZERO;

EXECUTE FUNCTION(Rtv Trans Qty/Wgt 2   RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1600910;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.LLT_Production_Date);
PARAMETER(CTL.LLT_Transaction_Type);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.LLT_Transaction_Date);
PARAMETER(CTL.LLT_Lot_Number);
PARAMETER(CTL.Location_Code);
PARAMETER(CTL.LLT_Location_Level);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.User_Id);
PARAMETER(CTL.Quantity_Loc_Trans_USR);
PARAMETER(CTL.Weight_11_2_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // LCL.Item Code = CON.*ZERO
 LCL.Item_Code = *ZERO;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?New Transaction Type
 CASE;

 // IF PAR.LLT Trans Type is *ALL values
 IF PAR.LLT_Transaction_Type = 'R'/'A'/'T'/'RT'/'S'/'AP'/'C';

 // AND DB1.LLT Trans Type NE PAR.LLT Trans Type
 AND DB1.LLT_Transaction_Type <> PAR.LLT_Transaction_Type;

 QUIT;

 ENDIF;

 //?SEL:  Item Code
 CASE;

 // IF PAR.Item Code is Entered
 IF PAR.Item_Code <> *ZERO;

 CASE;

 // IF PAR.Item Code NE DB1.Item Code
 IF PAR.Item_Code <> DB1.Item_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Transaction Date
 CASE;

 // IF PAR.LLT Trans Date NE WRK.ZERO
 IF PAR.LLT_Transaction_Date <> WRK.ZERO;

 CASE;

 // IF PAR.LLT Trans Date NE DB1.LLT Trans Date
 IF PAR.LLT_Transaction_Date <> DB1.LLT_Transaction_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Lot Number
 CASE;

 // IF PAR.LLT Lot Number NE WRK.ZERO
 IF PAR.LLT_Lot_Number <> WRK.ZERO;

 CASE;

 // IF PAR.LLT Lot Number NE DB1.LLT Lot Number
 IF PAR.LLT_Lot_Number <> DB1.LLT_Lot_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Location Code
 CASE;

 // IF PAR.Location Code NE WRK.BLANK
 IF PAR.Location_Code <> WRK.BLANK;

 CASE;

 // IF PAR.Location Code NE DB1.Location Code
 IF PAR.Location_Code <> DB1.Location_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Location Level
 CASE;

 // IF PAR.LLT Location Level NE WRK.ZERO
 IF PAR.LLT_Location_Level <> WRK.ZERO;

 CASE;

 // IF PAR.LLT Location Level NE DB1.LLT Location Level
 IF PAR.LLT_Location_Level <> DB1.LLT_Location_Level;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Order Number
 CASE;

 // IF PAR.Order Number NE WRK.ZERO
 IF PAR.Order_Number <> WRK.ZERO;

 CASE;

 // IF PAR.Order Number NE DB1.Order Number
 IF PAR.Order_Number <> DB1.Order_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  User Id
 CASE;

 // IF PAR.User Id NE WRK.BLANK
 IF PAR.User_Id <> WRK.BLANK;

 CASE;

 // IF PAR.User Id NE DB1.User Id
 IF PAR.User_Id <> DB1.User_Id;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Record Selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.Quantity Loc Trans USR = PAR.Quantity Loc Trans USR + DB1.LLT Trans Qty
 PAR.Quantity_Loc_Trans_USR = PAR.Quantity_Loc_Trans_USR + DB1.LLT_Transaction_Qty;

 CASE;

 // IF LCL.Item Code NE DB1.Item Code
 IF LCL.Item_Code <> DB1.Item_Code;

 EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(WRK.Quality_Level);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Item Code = DB1.Item Code
 LCL.Item_Code = DB1.Item_Code;

 ENDIF;

 // LCL.Weight Display 1 = DB1.LLT Trans Qty * LCL.Unit Weight *
 LCL.Weight_Display_1 = DB1.LLT_Transaction_Qty * LCL.Unit_Weight;

 // PAR.Weight 11.2 USR = PAR.Weight 11.2 USR + LCL.Weight Display 1
 PAR.Weight_11_2_USR = PAR.Weight_11_2_USR + LCL.Weight_Display_1;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Quantity Loc Trans USR = CON.*ZERO
CTL.Quantity_Loc_Trans_USR = *ZERO;

// CTL.Weight 11.2 USR = CON.*ZERO
CTL.Weight_11_2_USR = *ZERO;

ENDIF;

// LCL.Warehouse Code = CTL.Warehouse Code
LCL.Warehouse_Code = CTL.Warehouse_Code;

// LCL.Item Code = CTL.Item Code
LCL.Item_Code = CTL.Item_Code;

// LCL.LLT Trans Type = CTL.LLT Trans Type
LCL.LLT_Transaction_Type = CTL.LLT_Transaction_Type;

// LCL.LLT Trans Date = CTL.LLT Trans Date
LCL.LLT_Transaction_Date = CTL.LLT_Transaction_Date;

// LCL.LLT Production Date = CTL.LLT Production Date
LCL.LLT_Production_Date = CTL.LLT_Production_Date;

//?USER: Initialize subfile record from DBF record

//?SEL:  Warehouse Code
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

CASE;

// IF DB1.Warehouse Code NE CTL.Warehouse Code
IF DB1.Warehouse_Code <> CTL.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Item Code
CASE;

// IF CTL.Item Code is Entered
IF CTL.Item_Code <> *ZERO;

CASE;

// IF DB1.Item Code NE CTL.Item Code
IF DB1.Item_Code <> CTL.Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Transaction Type
CASE;

// IF CTL.LLT Trans Type is *ALL values
IF CTL.LLT_Transaction_Type = 'R'/'A'/'T'/'RT'/'S'/'AP'/'C';

CASE;

// IF DB1.LLT Trans Type NE CTL.LLT Trans Type
IF DB1.LLT_Transaction_Type <> CTL.LLT_Transaction_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Transaction Date
CASE;

// IF CTL.LLT Trans Date is Entered
IF CTL.LLT_Transaction_Date <> *ZERO;

CASE;

// IF DB1.LLT Trans Date NE CTL.LLT Trans Date
IF DB1.LLT_Transaction_Date <> CTL.LLT_Transaction_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Production Date
CASE;

// IF CTL.LLT Production Date is Entered
IF CTL.LLT_Production_Date <> *ZERO;

CASE;

// IF DB1.LLT Production Date NE CTL.LLT Production Date
IF DB1.LLT_Production_Date <> CTL.LLT_Production_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(RCD.Item_Desc_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile control (Pre-confirm)

//?Reload Subfile
CASE;

// IF CTL.Warehouse Code NE LCL.Warehouse Code
IF CTL.Warehouse_Code <> LCL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload Subfile
// IF CTL.Item Code NE LCL.Item Code
IF CTL.Item_Code <> LCL.Item_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload Subfile
// IF CTL.LLT Trans Type NE LCL.LLT Trans Type
IF CTL.LLT_Transaction_Type <> LCL.LLT_Transaction_Type;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload Subfile
// IF CTL.LLT Trans Date NE LCL.LLT Trans Date
IF CTL.LLT_Transaction_Date <> LCL.LLT_Transaction_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload Subfile
// IF CTL.LLT Production Date NE LCL.LLT Production Date
IF CTL.LLT_Production_Date <> LCL.LLT_Production_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload Subfile
// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Print Lot/Location Transaction
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program PMT Lot/Location Trans PV.
CALL PROGRAM(PMT Lot/Location Trans PV) ('PDTPPVR');

ENDIF;

