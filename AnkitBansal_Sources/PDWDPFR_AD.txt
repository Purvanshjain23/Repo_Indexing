// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDWDPFR
// ?Date: 14.08.2025 Time: 12:04:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?When changing the print object be aware that there are 2 to change.
//?Load Summary and Load Summary by Carrier
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

//?USER: Record selection processing

//?Select on Order Company Number
CASE;

// IF PAR.Company Number EQ DB1.Company Number
IF PAR.Company_Number = DB1.Company_Number;

//?Select on Order Company Number
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Omit passed warehouses
CASE;

// IF PAR.USR Select/Omit Flag is Omit
IF PAR.USR_Select_Omit_Flag = 'O';

//?Omit any Order Detail records matching warehouse codes passed in
//?Get the warehouse from the first order detail record
//?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


CASE;

// IF PAR.USR Warehouse Code is Warehouse Code not Blank
IF PAR.USR_Warehouse_Code <> *BLANK;

// OR PAR.USR CDE Parm 1 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_1 <> *BLANK;

// OR PAR.USR CDE Parm 2 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_2 <> *BLANK;

// OR PAR.USR CDE Parm 3 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_3 <> *BLANK;

// OR PAR.USR CDE Parm 4 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_4 <> *BLANK;

// OR PAR.USR CDE Parm 5 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_5 <> *BLANK;

// OR PAR.USR CDE Parm 6 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_6 <> *BLANK;

// OR PAR.USR CDE Parm 7 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_7 <> *BLANK;

// OR PAR.USR CDE Parm 8 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_8 <> *BLANK;

// OR PAR.USR CDE Parm 9 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_9 <> *BLANK;

CASE;

// IF PAR.USR Warehouse Code EQ WRK.Warehouse Code
IF PAR.USR_Warehouse_Code = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 1 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_1 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 2 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_2 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 3 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_3 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 4 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_4 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 5 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_5 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 6 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_6 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 7 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_7 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 8 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_8 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 9 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_9 = WRK.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Don't select caneceled orders
CASE;

// IF DB1.Header Status is Cancelled
IF DB1.Header_Status = 'X';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Don't select credit or debit memos
CASE;

// IF DB1.Billing Activity Type is Credit or Debit Memo
IF DB1.Billing_Activity_Type = '2'/'3';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If Carrier code is entered omit all others
CASE;

// IF PAR.USR Carrier Code is entered
IF PAR.USR_Carrier_Code <> *BLANK;

// AND DB1.Carrier Code NE PAR.USR Carrier Code
AND DB1.Carrier_Code <> PAR.USR_Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If database Load ID is zeros, skip it
CASE;

// IF DB1.Load ID is Blank
IF DB1.Load_ID = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If Load number is entered omit all others
CASE;

// IF PAR.Load ID is GT Zero
IF PAR.Load_ID > *ZERO;

// AND DB1.Load ID NE PAR.Load ID
AND DB1.Load_ID <> PAR.Load_ID;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If Load Type is entered omit all others
CASE;

// IF PAR.USR Load Type is Bulk
IF PAR.USR_Load_Type = 'B';

// OR PAR.USR Load Type is Regular
OR PAR.USR_Load_Type = 'R';

CASE;

// IF DB1.Load Type NE PAR.USR Load Type
IF DB1.Load_Type <> PAR.USR_Load_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?If Ship Method is entered omit all others
CASE;

// IF PAR.Shipping Method NE WRK.BLANK
IF PAR.Shipping_Method <> WRK.BLANK;

CASE;

// IF DB1.Shipping Method NE PAR.Shipping Method
IF DB1.Shipping_Method <> PAR.Shipping_Method;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Check dates if entered: Appt confirmed, Rqs Deliv, or Sch Ship
CASE;

// IF PAR.From Date             USR is Entered
IF PAR.From_Date_USR <> *ZERO;

// AND PAR.Thru Date             USR is Entered
AND PAR.Thru_Date_USR <> *ZERO;

//?** Select by appointment confirmed or requested delivery date
EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
PARAMETER(DB1.Load_ID);
PARAMETER(NLL.Stop_Drop);
PARAMETER(DB1.Order_Number);
PARAMETER(LCL.Appointment_Confirm_Date);
PARAMETER(LCL.Appointment_Confirm_Time);
{
 //?USER: Initialize routine

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If order number is found, retrieve stop number
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Appointment Confirm Date is Entered
IF LCL.Appointment_Confirm_Date <> *ZERO;

CASE;

// IF LCL.Appointment Confirm Date GE PAR.From Date             USR
IF LCL.Appointment_Confirm_Date >= PAR.From_Date_USR;

// AND LCL.Appointment Confirm Date LE PAR.Thru Date             USR
AND LCL.Appointment_Confirm_Date <= PAR.Thru_Date_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Check dates if entered: Appt confirmed, Rqs Deliv, or Sch Ship
// IF PAR.Prm From Date is GT Zero
IF PAR.Prm_From_Date > *ZERO;

// AND PAR.Prm To Date is GT Zero
AND PAR.Prm_To_Date > *ZERO;

//?** Requested Delivery Date is within requested range
CASE;

// IF DB1.Requested Delivery Date GE PAR.Prm From Date
IF DB1.Requested_Delivery_Date >= PAR.Prm_From_Date;

// AND DB1.Requested Delivery Date LE PAR.Prm To Date
AND DB1.Requested_Delivery_Date <= PAR.Prm_To_Date;

//?** Requested Delivery Date is within requested range
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Check dates if entered: Appt confirmed, Rqs Deliv, or Sch Ship
// IF PAR.USR From Date is Entered
IF PAR.USR_From_Date <> *ZERO;

// AND PAR.USR To Date is Entered
AND PAR.USR_To_Date <> *ZERO;

CASE;

// IF DB1.Scheduled Ship Date GE PAR.USR From Date
IF DB1.Scheduled_Ship_Date >= PAR.USR_From_Date;

// AND DB1.Scheduled Ship Date LE PAR.USR To Date
AND DB1.Scheduled_Ship_Date <= PAR.USR_To_Date;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

CASE;

// IF TOP.Company Number is not equal to zero
IF TOP_Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Name = CON.*ALL
TOP_Company_Name = *ALL;

ENDIF;

EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(TOP_USR_Carrier_Code);
PARAMETER(TOP_Ship_Via_Carrier);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.USR Desc. 10 = Condition name of PAR.USR Load Type
TOP_USR_Desc_10 = RTVCND(PAR.USR_Load_Type);

//?Shipping Method description
CASE;

// IF PAR.Shipping Method EQ WRK.BLANK
IF PAR.Shipping_Method = WRK.BLANK;

// TOP.Condition Desc. 1  USR = CON.*ALL
TOP_Condition_Desc_1_USR = *ALL;

//?Shipping Method description
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = Condition name of PAR.Shipping Method
TOP_Condition_Desc_1_USR = RTVCND(PAR.Shipping_Method);

ENDIF;

//?Move warehouses to print fields
CASE;

// IF PAR.USR Warehouse Code is Warehouse Code Blank
IF PAR.USR_Warehouse_Code = *BLANK;

// AND PAR.USR CDE Parm 1 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_1 = *BLANK;

// AND PAR.USR CDE Parm 2 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_2 = *BLANK;

// AND PAR.USR CDE Parm 3 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_3 = *BLANK;

// AND PAR.USR CDE Parm 4 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_4 = *BLANK;

// AND PAR.USR CDE Parm 5 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_5 = *BLANK;

// AND PAR.USR CDE Parm 6 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_6 = *BLANK;

// AND PAR.USR CDE Parm 7 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_7 = *BLANK;

// AND PAR.USR CDE Parm 8 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_8 = *BLANK;

// AND PAR.USR CDE Parm 9 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_9 = *BLANK;

// TOP.USR Warehouse Code = CON.ALL
TOP_USR_Warehouse_Code = 'ALL';

//?Move warehouses to print fields
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.USR Warehouse Code = PAR.USR Warehouse Code
TOP_USR_Warehouse_Code = PAR.USR_Warehouse_Code;

// TOP.USR CDE Parm 1 = PAR.USR CDE Parm 1
TOP_USR_CDE_Parm_1 = PAR.USR_CDE_Parm_1;

// TOP.USR CDE Parm 2 = PAR.USR CDE Parm 2
TOP_USR_CDE_Parm_2 = PAR.USR_CDE_Parm_2;

// TOP.USR CDE Parm 3 = PAR.USR CDE Parm 3
TOP_USR_CDE_Parm_3 = PAR.USR_CDE_Parm_3;

// TOP.USR CDE Parm 4 = PAR.USR CDE Parm 4
TOP_USR_CDE_Parm_4 = PAR.USR_CDE_Parm_4;

// TOP.USR CDE Parm 5 = PAR.USR CDE Parm 5
TOP_USR_CDE_Parm_5 = PAR.USR_CDE_Parm_5;

// TOP.USR CDE Parm 6 = PAR.USR CDE Parm 6
TOP_USR_CDE_Parm_6 = PAR.USR_CDE_Parm_6;

// TOP.USR CDE Parm 7 = PAR.USR CDE Parm 7
TOP_USR_CDE_Parm_7 = PAR.USR_CDE_Parm_7;

// TOP.USR CDE Parm 8 = PAR.USR CDE Parm 8
TOP_USR_CDE_Parm_8 = PAR.USR_CDE_Parm_8;

// TOP.USR CDE Parm 9 = PAR.USR CDE Parm 9
TOP_USR_CDE_Parm_9 = PAR.USR_CDE_Parm_9;

ENDIF;

// TOP.USR Description - 15 = Condition name of PAR.USR Select/Omit Flag
TOP_USR_Description_15 = RTVCND(PAR.USR_Select_Omit_Flag);

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Scheduled Ship Date header format

// SUPPRESSED PRINT Load ID header format

//?USER: On print of detail format

// WRK.Print Yes/No          USR = CND.No
WRK.Print_Yes_No_USR = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Load Summary Dtl   PO
EXECUTE FUNCTION(PRT Load Summary Dtl   PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Order_Number);
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


//?Embedded PRTOBJ : PRT Load Summ Exp Inst PO
//?** Don't print if not an export    05/10/2007
CASE;

// IF DB1.Export Status is Not Yes
IF DB1.Export_Status = *BLANK/'N';

QUIT;

ENDIF;

EXECUTE FUNCTION(PRT Load Summ Exp Inst PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


//?USER: Process after print of detail format

// NXT.USR Weight   9.1 = NXT.USR Weight   9.1 + CUR.USR Weight   9.1
NXT.USR_Weight_9_1 = NXT.USR_Weight_9_1 + CUR.USR_Weight_9_1;

//?USER: Print required level totals

CASE;

IF NEW Load_ID;
//?** Don't get export status from the Load Header, use the
//?** flag from the order header record instead.
//?Embedded PRTOBJ : PRT Load Summary Dtl   PO
//?** Don't print here   05/10/2007
QUIT;

EXECUTE FUNCTION(PRT Load Summary Dtl   PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Order_Number);
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


//?Embedded PRTOBJ : PRT Print Comments     PO
EXECUTE FUNCTION(PRT Print Traffic Cmts PO) TYPE(PRTOBJ);
PARAMETER(CUR.Load_ID);
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// CUR.USR Weight   9.1 = PAR.Order Weight Total
CUR.USR_Weight_9_1 = PAR.Order_Weight_Total;

// PAR.Order Weight Total = CON.*ZERO
PAR.Order_Weight_Total = *ZERO;

//?***  PK0111
EXECUTE FUNCTION(RTV Wgt Shipped Tot    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1574417;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.USR_Weight_9_1_3);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 // WRK.USR Weight   9.1  3 = CON.*ZERO
 WRK.USR_Weight_9_1_3 = *ZERO;

 EXECUTE FUNCTION(RTV Weight Shipped Tot RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1574424;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(WRK.USR_Weight_9_1_3);
 {
  //?USER: Initialize routine

  // PAR.USR Weight   9.1  3 = CON.*ZERO
  PAR.USR_Weight_9_1_3 = *ZERO;

  //?USER: Process Data record

  // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + DB1.Weight Shipped Total
  PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + DB1.Weight_Shipped_Total;

 }

 // WRK.USR Weight   9.1  4 = CON.*ZERO
 WRK.USR_Weight_9_1_4 = *ZERO;

 CASE;

 // IF WRK.USR Weight   9.1  3 EQ WRK.USR Weight   9.1  4
 IF WRK.USR_Weight_9_1_3 = WRK.USR_Weight_9_1_4;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + WRK.USR Weight   9.1  3
 PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + WRK.USR_Weight_9_1_3;

 ENDIF;

}


EXECUTE FUNCTION(CLC Misc Tare Wgt Tot  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1574556;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.USR_Weight_9_1_4);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 // WRK.USR Weight   9.1  4 = CON.*ZERO
 WRK.USR_Weight_9_1_4 = *ZERO;

 EXECUTE FUNCTION(CLC Misc Tare Wgt Tot  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1574557;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(WRK.USR_Weight_9_1_4);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Misc_Tare_Weight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  // WRK.Misc Tare Weight = CON.*ZERO
  WRK.Misc_Tare_Weight = *ZERO;

  CASE;

  // IF PAR.Misc Tare Weight EQ WRK.Misc Tare Weight
  IF PAR.Misc_Tare_Weight = WRK.Misc_Tare_Weight;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Weight   9.1  4 = DB1.Quantity Shipped Total * PAR.Misc Tare Weight *Rou
  PAR.USR_Weight_9_1_4 = DB1.Quantity_Shipped_Total * PAR.Misc_Tare_Weight 'H';

  ENDIF;

 }

 // WRK.USR Weight   9.1  5 = CON.*ZERO
 WRK.USR_Weight_9_1_5 = *ZERO;

 CASE;

 // IF WRK.USR Weight   9.1  4 EQ WRK.USR Weight   9.1  5
 IF WRK.USR_Weight_9_1_4 = WRK.USR_Weight_9_1_5;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Weight   9.1  4 = PAR.USR Weight   9.1  4 + WRK.USR Weight   9.1  4
 PAR.USR_Weight_9_1_4 = PAR.USR_Weight_9_1_4 + WRK.USR_Weight_9_1_4;

 ENDIF;

}


EXECUTE FUNCTION(CLC Pakg Tare Wgt Tot  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1574586;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.USR_Weight_9_1_5);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 // WRK.USR Weight   9.1  5 = CON.*ZERO
 WRK.USR_Weight_9_1_5 = *ZERO;

 EXECUTE FUNCTION(CLC Pakg Tare Wgt Tot  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1574587;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(WRK.USR_Weight_9_1_5);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Supply Code        RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1574954;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Component_Item_Code);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.BOM Type is Supplies
   IF DB1.BOM_Type = 'S';

   MOVE *ALL (To: PAR From: DB1);

   ENDIF;

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Component Item Code = CON.*ZERO
  WRK.Component_Item_Code = *ZERO;

  CASE;

  // IF PAR.Component Item Code EQ WRK.Component Item Code
  IF PAR.Component_Item_Code = WRK.Component_Item_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Pakg Tare Wgt Tot  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1574591;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Component_Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // WRK.Unit Weight = CON.*ZERO
  WRK.Unit_Weight = *ZERO;

  CASE;

  // IF PAR.Unit Weight EQ WRK.Unit Weight
  IF PAR.Unit_Weight = WRK.Unit_Weight;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.USR Weight   9.1  6 = DB1.Quantity Shipped Total * PAR.Unit Weight *Rounded
  WRK.USR_Weight_9_1_6 = DB1.Quantity_Shipped_Total * PAR.Unit_Weight 'H';

  // PAR.USR Weight   9.1  5 = PAR.USR Weight   9.1  5 + WRK.USR Weight   9.1  6
  PAR.USR_Weight_9_1_5 = PAR.USR_Weight_9_1_5 + WRK.USR_Weight_9_1_6;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // WRK.USR Weight   9.1  6 = CON.*ZERO
 WRK.USR_Weight_9_1_6 = *ZERO;

 CASE;

 // IF WRK.USR Weight   9.1  5 EQ WRK.USR Weight   9.1  6
 IF WRK.USR_Weight_9_1_5 = WRK.USR_Weight_9_1_6;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Weight   9.1  5 = PAR.USR Weight   9.1  5 + WRK.USR Weight   9.1  5
 PAR.USR_Weight_9_1_5 = PAR.USR_Weight_9_1_5 + WRK.USR_Weight_9_1_5;

 ENDIF;

}


// Print Load ID totals format
PRINT Load ID totals format;

// NXT.USR Weight   9.1 = NXT.USR Weight   9.1 + CUR.USR Weight   9.1
NXT.USR_Weight_9_1 = NXT.USR_Weight_9_1 + CUR.USR_Weight_9_1;

ENDIF;

CASE;

IF NEW Scheduled_Ship_Date;
// SUPPRESSED PRINT Scheduled Ship Date totals format

// NXT.USR Weight   9.1 = NXT.USR Weight   9.1 + CUR.USR Weight   9.1
NXT.USR_Weight_9_1 = NXT.USR_Weight_9_1 + CUR.USR_Weight_9_1;

ENDIF;

