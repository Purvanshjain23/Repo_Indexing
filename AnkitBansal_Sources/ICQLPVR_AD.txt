// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICQLPVR
// ?Date: 14.08.2025 Time: 03:26:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?WI517 DN 08/14/23-Get 'Live with WIM' Flag.
EXECUTE FUNCTION(Rtv Module Release Sts RT) TYPE(RTVOBJ) FILE(PUC6REP)          AC2212908;
PARAMETER('WIM');
PARAMETER(1);
PARAMETER(LCL.Module_Release_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


// LCL.Inventory Updated USR = CND.No
LCL.Inventory_Updated_USR = 'N';

//?USER: Load screen

// DTL.Condition Desc. 1  USR = Condition name of PAR.Inventory Trans. ID
DTL.Condition_Desc_1_USR = RTVCND(PAR.Inventory_Trans_ID);

// DTL.Description = PAR.USR Hold Description
DTL.Description = PAR.USR_Hold_Description;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// DTL.Shift Number = CON.1
DTL.Shift_Number = 1;

//?USER: Validate fields

CASE;

// IF DTL.Label Date is not entered
IF DTL.Label_Date = *ZERO;

// DTL.Label Date = DTL.Production Date
DTL.Label_Date = DTL.Production_Date;

ENDIF;

EXECUTE FUNCTION(Val User Whs Access   IF) TYPE(EXCINTFUN)                      AC1531984;
PARAMETER(JOB.*USER);
PARAMETER(DTL.Warehouse_Code);
PARAMETER('I');
PARAMETER('U');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve User Warehouse Access Type
 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Retrieve User Warehouse Access Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 ENDIF;

 //?Validate Access
 CASE;

 // IF PAR.Record Found USR is Record Not Found
 IF PAR.Record_Found_USR = 'N';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(PAR.User_Profile_Name);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 //?Validate Access
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Inventory Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Inventory Transactions
 IF PAR.Access_Area_Needed_USR = 'I';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Inventory Trans is *Not Update
 IF PAR.UWA_Inventory_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Inventory Trans is None
 IF PAR.UWA_Inventory_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Lot Loc Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Lot Loc Transactions
 IF PAR.Access_Area_Needed_USR = 'L';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Lot Loc Trans is *Not Update
 IF PAR.UWA_Lot_Loc_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Lot Loc Trans is None
 IF PAR.UWA_Lot_Loc_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Shipping Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Shipping Transactions
 IF PAR.Access_Area_Needed_USR = 'S';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Shipping Trans is *Not Update
 IF PAR.UWA_Shipping_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Shipping Trans is None
 IF PAR.UWA_Shipping_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Cross Applications
 CASE;

 // IF PAR.Access Area Needed USR is Cross Applications
 IF PAR.Access_Area_Needed_USR = 'C';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Unused Sts is *Not Update
 IF PAR.UWA_Cross_Applications = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Unused Sts is None
 IF PAR.UWA_Cross_Applications = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Validate fields will check the major relational entries
//?Select Item or Warehouse
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Select Item
CASE;

// IF PGM.*Cursor field <IS> DTL.Item Code
IF PGM.*Cursor_field = DTL.Item_Code;

// Call program SEL Actv Item by Co    SR.
CALL PROGRAM(SEL Actv Item by Co    SR) ('PDL9SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);

ENDIF;

//?Select warehouse
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse Code
IF PGM.*Cursor_field = DTL.Warehouse_Code;

// Call program SEL Non-Prod Whse      SR.
CALL PROGRAM(SEL Non-Prod Whse      SR) ('PDL4SRR');
PARAMETER(DTL.Warehouse_Code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Dsc/TrCtl/PFS flgs RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1913688;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(PAR.WHS_Live_with_Carlisle);
PARAMETER(PAR.WHS_PFS_Interface);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check return code/Carlisle/Plant and process accordingly  FP1127
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF PAR.WHS Live w/Carlisle is Yes
IF PAR.WHS_Live_with_Carlisle = 'Y';

// OR PAR.Trans Contol AS400/Plant is Plant
OR PAR.Trans_Contol_AS400_Plant = 'P';

//?** Not allowed if plant controlled or live w/Carlisle warehouse
// Send error message - 'Carlisle or Plant controlled whse not allowed in manual transaction.'
ERROR(USR4098);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?Check return code/Carlisle/Plant and process accordingly  FP1127
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

EXECUTE FUNCTION(RTV Desc,U/Ms,CWT,PrcM RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1315777;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(PAR.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Price_Method_Default);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check return code and process accordingly
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?If production date controlled item, date must be entered
CASE;

// IF PAR.Production Date Control is yes
IF PAR.Production_Date_Control = 'Y';

//?Production date not entered
CASE;

// IF DTL.Production Date is not entered
IF DTL.Production_Date = *ZERO;

// Send error message - 'Production date must be entered for a production date controlled item.'
ERROR(USR1916);
MSGPARM(DTL.Production_Date);

ENDIF;

//?Label date not entered
CASE;

// IF DTL.Label Date is not entered
IF DTL.Label_Date = *ZERO;

// Send error message - 'Label date must be entered for a production date controlled item.'
ERROR(USR2534);
MSGPARM(DTL.Label_Date);

//?Label date not entered
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Label Date LT DTL.Production Date
IF DTL.Label_Date < DTL.Production_Date;

// Send error message - 'Label Date cannot be less than Production Date.'
ERROR(USR2537);
MSGPARM(DTL.Label_Date);

ENDIF;

ENDIF;

//?S13514 DN 08/06/18-Prod Dte must be >= Jan 1 (2yrs ago) & <= Current Dte.
CASE;

// IF DTL.Production Date is entered
IF DTL.Production_Date <> *ZERO;

EXECUTE FUNCTION(Val Date In Not < 2yrs IF) TYPE(EXCINTFUN)                     AC2157322;
PARAMETER(DTL.Production_Date);
PARAMETER('P');
PARAMETER(LCL.Generic_Message_80_USR);
{
 //?Execute internal function

 //?Date In must be >= Jan 1 (2 yrs ago) and <= Current Date.
 //?Initialize.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Generic Message 80 USR = CON.*BLANK
 PAR.Generic_Message_80_USR = *BLANK;

 //?Set 'Date In' Text.
 CASE;

 // IF PAR.Date In Type USR is Transaction Date
 IF PAR.Date_In_Type_USR = 'T';

 // LCL.Text USR 15 = CON.Transaction
 LCL.Text_USR_15 = 'Transaction';

 //?Set 'Date In' Text.
 // IF PAR.Date In Type USR is Production Date
 IF PAR.Date_In_Type_USR = 'P';

 // LCL.Text USR 15 = CON.Production
 LCL.Text_USR_15 = 'Production';

 //?Set 'Date In' Text.
 // IF PAR.Date In Type USR is Label Date
 IF PAR.Date_In_Type_USR = 'L';

 // LCL.Text USR 15 = CON.Label
 LCL.Text_USR_15 = 'Label';

 ENDIF;

 ENDIF;

 //?Get System Date & Set Date 2 Years Back on Jan 1.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
 PARAMETER(LCL.System_Date_USR);
 {
  //?Execute internal function

  // LCL.*System timestamp = JOB.*System timestamp
  LCL.*System_timestamp = JOB.*System_timestamp;

  // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
  LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

  // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
  LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

  // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
  LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

  // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
  LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

  EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
  PARAMETER(PAR.System_Date_USR);
  PARAMETER(LCL.DATE);
  {
   //?Execute internal function

   //?** YEAR **
   // PAR.Year Code = PAR.DATE / CON.10000 *
   PAR.Year_Code = PAR.DATE / 10000;

   // PAR.Year  NBR USR = PAR.Year Code
   PAR.Year_NBR_USR = PAR.Year_Code;

   // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
   PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

   //?** MONTH **
   // PAR.Month                 USR = PAR.DATE / CON.100 *
   PAR.Month_USR = PAR.DATE / 100;

   // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
   PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

   //?** DAY **
   // PAR.Day of Month USR = PAR.DATE
   PAR.Day_of_Month_USR = PAR.DATE;

   // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
   PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

   //?CENTURY+YEAR
   CASE;

   // IF PAR.Year Code is Twentieth Century
   IF PAR.Year_Code <= 1999;

   // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

   //?CENTURY+YEAR
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

   ENDIF;

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
   PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

  }

 }

 // LCL.Transaction Date D8# USR = LCL.System Date USR
 LCL.Transaction_Date_D8#_USR = LCL.System_Date_USR;

 //?** YEAR ** (Go Back 2 Years)
 // LCL.Year Code = LCL.Transaction Date D8# USR / CON.10000 *
 LCL.Year_Code = LCL.Transaction_Date_D8#_USR / 10000;

 // LCL.Year Code = LCL.Year Code - CON.2
 LCL.Year_Code = LCL.Year_Code - 2;

 // LCL.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 LCL.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // LCL.Year  NBR USR = LCL.Year Code
 LCL.Year_NBR_USR = LCL.Year_Code;

 // LCL.Year  (Char) USR = CVTVAR(LCL.Year  NBR USR)
 LCL.Year_Char_USR = CVTVAR(LCL.Year_NBR_USR);

 //?** MONTH ** (Default to Jan)
 // LCL.Month (Char) USR = CON.01
 LCL.Month_Char_USR = 01;

 //?** DAY ** (Default to 01)
 // LCL.Day   (Char) USR = CON.01
 LCL.Day_Char_USR = 01;

 //?** Convert Date to CYYMMDD Format **
 // LCL.Date (Char-8) USR = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Month (Char) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_Alpha_YYYY_USR + LCL.Month_Char_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day   (Char) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_Char_USR (*ZERO);

 //?** Convert Date to CYYMMDD Format **
 //?CENTURY+YEAR
 CASE;

 // IF LCL.Year Code is Twentieth Century
 IF LCL.Year_Code <= 1999;

 // LCL.Date (Alpha) USR = CONCAT(CON.0,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = '0' + LCL.Year_Char_USR (*ZERO);

 //?CENTURY+YEAR
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Date (Alpha) USR = CONCAT(CON.1,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = '1' + LCL.Year_Char_USR (*ZERO);

 ENDIF;

 // LCL.Date (Alpha) USR = CONCAT(LCL.Date (Alpha) USR,LCL.Month (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Date_Alpha_USR + LCL.Month_Char_USR (*ZERO);

 // LCL.Date (Alpha) USR = CONCAT(LCL.Date (Alpha) USR,LCL.Day   (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Date_Alpha_USR + LCL.Day_Char_USR (*ZERO);

 // LCL.Date                  USR = CVTVAR(LCL.Date (Alpha) USR)
 LCL.Date_USR = CVTVAR(LCL.Date_Alpha_USR);

 ENDIF;

 //?Send Error Message.
 CASE;

 // IF PAR.Date In  (7,0) USR GT LCL.System Date USR
 IF PAR.Date_In_70_USR > LCL.System_Date_USR;

 //?Cannot be a future date.
 // PAR.Generic Message 80 USR = CONCAT(LCL.Text USR 15,CON.Date cannot be a future,CON.1)
 PAR.Generic_Message_80_USR = LCL.Text_USR_15 + 'Date cannot be a future' (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,CON.date.,CON.1)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + 'date.' (1);

 //?Send Error Message.
 // IF PAR.Date In  (7,0) USR LT LCL.Date                  USR
 IF PAR.Date_In_70_USR < LCL.Date_USR;

 //?Cannot be older than last 2 years ago.
 // PAR.Generic Message 80 USR = CONCAT(LCL.Text USR 15,CON.Date cannot be prior to,CON.1)
 PAR.Generic_Message_80_USR = LCL.Text_USR_15 + 'Date cannot be prior to' (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,LCL.Date (Char-8) USR,CON.1)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + LCL.Date_Char_8_USR (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,CON..,CON.*ZERO)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + '.' (*ZERO);

 ENDIF;

}


CASE;

// IF LCL.Generic Message 80 USR is Entered
IF LCL.Generic_Message_80_USR <> *BLANK;

// Send error message - '&1'
ERROR(USR5086);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Production_Date);

ENDIF;

ENDIF;

//?S13514 DN 08/06/18-Label Dte must be >= Jan 1 (2yrs ago) & <= Current Dte.
CASE;

// IF DTL.Label Date is Entered
IF DTL.Label_Date <> *ZERO;

EXECUTE FUNCTION(Val Date In Not < 2yrs IF) TYPE(EXCINTFUN)                     AC2157322;
PARAMETER(DTL.Label_Date);
PARAMETER('L');
PARAMETER(LCL.Generic_Message_80_USR);
{
 //?Execute internal function

 //?Date In must be >= Jan 1 (2 yrs ago) and <= Current Date.
 //?Initialize.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Generic Message 80 USR = CON.*BLANK
 PAR.Generic_Message_80_USR = *BLANK;

 //?Set 'Date In' Text.
 CASE;

 // IF PAR.Date In Type USR is Transaction Date
 IF PAR.Date_In_Type_USR = 'T';

 // LCL.Text USR 15 = CON.Transaction
 LCL.Text_USR_15 = 'Transaction';

 //?Set 'Date In' Text.
 // IF PAR.Date In Type USR is Production Date
 IF PAR.Date_In_Type_USR = 'P';

 // LCL.Text USR 15 = CON.Production
 LCL.Text_USR_15 = 'Production';

 //?Set 'Date In' Text.
 // IF PAR.Date In Type USR is Label Date
 IF PAR.Date_In_Type_USR = 'L';

 // LCL.Text USR 15 = CON.Label
 LCL.Text_USR_15 = 'Label';

 ENDIF;

 ENDIF;

 //?Get System Date & Set Date 2 Years Back on Jan 1.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
 PARAMETER(LCL.System_Date_USR);
 {
  //?Execute internal function

  // LCL.*System timestamp = JOB.*System timestamp
  LCL.*System_timestamp = JOB.*System_timestamp;

  // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
  LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

  // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
  LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

  // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
  LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

  // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
  LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

  EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
  PARAMETER(PAR.System_Date_USR);
  PARAMETER(LCL.DATE);
  {
   //?Execute internal function

   //?** YEAR **
   // PAR.Year Code = PAR.DATE / CON.10000 *
   PAR.Year_Code = PAR.DATE / 10000;

   // PAR.Year  NBR USR = PAR.Year Code
   PAR.Year_NBR_USR = PAR.Year_Code;

   // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
   PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

   //?** MONTH **
   // PAR.Month                 USR = PAR.DATE / CON.100 *
   PAR.Month_USR = PAR.DATE / 100;

   // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
   PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

   //?** DAY **
   // PAR.Day of Month USR = PAR.DATE
   PAR.Day_of_Month_USR = PAR.DATE;

   // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
   PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

   //?CENTURY+YEAR
   CASE;

   // IF PAR.Year Code is Twentieth Century
   IF PAR.Year_Code <= 1999;

   // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

   //?CENTURY+YEAR
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

   ENDIF;

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
   PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

  }

 }

 // LCL.Transaction Date D8# USR = LCL.System Date USR
 LCL.Transaction_Date_D8#_USR = LCL.System_Date_USR;

 //?** YEAR ** (Go Back 2 Years)
 // LCL.Year Code = LCL.Transaction Date D8# USR / CON.10000 *
 LCL.Year_Code = LCL.Transaction_Date_D8#_USR / 10000;

 // LCL.Year Code = LCL.Year Code - CON.2
 LCL.Year_Code = LCL.Year_Code - 2;

 // LCL.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 LCL.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // LCL.Year  NBR USR = LCL.Year Code
 LCL.Year_NBR_USR = LCL.Year_Code;

 // LCL.Year  (Char) USR = CVTVAR(LCL.Year  NBR USR)
 LCL.Year_Char_USR = CVTVAR(LCL.Year_NBR_USR);

 //?** MONTH ** (Default to Jan)
 // LCL.Month (Char) USR = CON.01
 LCL.Month_Char_USR = 01;

 //?** DAY ** (Default to 01)
 // LCL.Day   (Char) USR = CON.01
 LCL.Day_Char_USR = 01;

 //?** Convert Date to CYYMMDD Format **
 // LCL.Date (Char-8) USR = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Month (Char) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_Alpha_YYYY_USR + LCL.Month_Char_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day   (Char) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_Char_USR (*ZERO);

 //?** Convert Date to CYYMMDD Format **
 //?CENTURY+YEAR
 CASE;

 // IF LCL.Year Code is Twentieth Century
 IF LCL.Year_Code <= 1999;

 // LCL.Date (Alpha) USR = CONCAT(CON.0,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = '0' + LCL.Year_Char_USR (*ZERO);

 //?CENTURY+YEAR
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Date (Alpha) USR = CONCAT(CON.1,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = '1' + LCL.Year_Char_USR (*ZERO);

 ENDIF;

 // LCL.Date (Alpha) USR = CONCAT(LCL.Date (Alpha) USR,LCL.Month (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Date_Alpha_USR + LCL.Month_Char_USR (*ZERO);

 // LCL.Date (Alpha) USR = CONCAT(LCL.Date (Alpha) USR,LCL.Day   (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Date_Alpha_USR + LCL.Day_Char_USR (*ZERO);

 // LCL.Date                  USR = CVTVAR(LCL.Date (Alpha) USR)
 LCL.Date_USR = CVTVAR(LCL.Date_Alpha_USR);

 ENDIF;

 //?Send Error Message.
 CASE;

 // IF PAR.Date In  (7,0) USR GT LCL.System Date USR
 IF PAR.Date_In_70_USR > LCL.System_Date_USR;

 //?Cannot be a future date.
 // PAR.Generic Message 80 USR = CONCAT(LCL.Text USR 15,CON.Date cannot be a future,CON.1)
 PAR.Generic_Message_80_USR = LCL.Text_USR_15 + 'Date cannot be a future' (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,CON.date.,CON.1)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + 'date.' (1);

 //?Send Error Message.
 // IF PAR.Date In  (7,0) USR LT LCL.Date                  USR
 IF PAR.Date_In_70_USR < LCL.Date_USR;

 //?Cannot be older than last 2 years ago.
 // PAR.Generic Message 80 USR = CONCAT(LCL.Text USR 15,CON.Date cannot be prior to,CON.1)
 PAR.Generic_Message_80_USR = LCL.Text_USR_15 + 'Date cannot be prior to' (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,LCL.Date (Char-8) USR,CON.1)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + LCL.Date_Char_8_USR (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,CON..,CON.*ZERO)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + '.' (*ZERO);

 ENDIF;

}


CASE;

// IF LCL.Generic Message 80 USR is Entered
IF LCL.Generic_Message_80_USR <> *BLANK;

// Send error message - '&1'
ERROR(USR5086);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Label_Date);

ENDIF;

ENDIF;

//?If production date controlled item, date must be entered
// IF *OTHERWISE
IF *OTHERWISE;

//?Production date entered
CASE;

// IF DTL.Production Date is entered
IF DTL.Production_Date <> *ZERO;

// Send error message - 'Production date must be blank for non production date controlled item.'
ERROR(USR1917);
MSGPARM(DTL.Production_Date);

ENDIF;

//?Label date entered
CASE;

// IF DTL.Label Date is Entered
IF DTL.Label_Date <> *ZERO;

// Send error message - 'Label date must be blank for non production date controlled item.'
ERROR(USR2535);
MSGPARM(DTL.Label_Date);

ENDIF;

ENDIF;

//?Check return code and process accordingly
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item not found'
ERROR(USR0374);
MSGPARM(DTL.Item_Code);

ENDIF;

EXECUTE FUNCTION(Rtv Reason Code Desc.  RT) TYPE(RTVOBJ) FILE(CAEFREP)          AC1148526;
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Reason_Description);
{
 //?USER: Processing if Data record not found

 // PAR.Description = CON.*BLANK
 PAR.Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Status/Default     RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152524;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_Transaction_Unit_Cost);
PARAMETER(PAR.Cost_Update_Pending);
PARAMETER(PAR.Post_GL_Status);
PARAMETER(PAR.Vendor_Item_Whse_Default);
PARAMETER(PAR.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check return code and process accordingly
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Send error message if item is not active
CASE;

// IF PAR.Record Status is Deleted & Inactive
IF PAR.Record_Status = 'D'/'I';

// Send error message - 'Item balance is not active for item & warehouse.'
ERROR(USR1918);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?Check return code and process accordingly
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?CALC: Screen function fields

CASE;

// IF DTL.Shift Number EQ WRK.BLANK
IF DTL.Shift_Number = WRK.BLANK;

// DTL.Shift Number = CON.1
DTL.Shift_Number = 1;

ENDIF;

//?USER: Validate relations

//?If unit of measure is not entered then default to the primary
CASE;

// IF DTL.U/M - Transaction is Not Entered
IF DTL.UOM_Transaction = *BLANK;

// DTL.U/M - Transaction = PAR.U/M - Primary
DTL.UOM_Transaction = PAR.UOM_Primary;

//?If unit of measure is not entered then default to the primary
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.U/M - Transaction NE PAR.U/M - Primary
IF DTL.UOM_Transaction <> PAR.UOM_Primary;

// AND DTL.U/M - Transaction NE PAR.U/M - Second
AND DTL.UOM_Transaction <> PAR.UOM_Second;

// AND DTL.U/M - Transaction NE PAR.U/M - Third
AND DTL.UOM_Transaction <> PAR.UOM_Third;

// Send error message - 'Item unit of measure must be one of the following: &2 &3 &4'
ERROR(USR0392);
MSGPARM(DTL.UOM_Transaction);
MSGPARM(PAR.UOM_Primary);
MSGPARM(PAR.UOM_Second);
MSGPARM(PAR.UOM_Third);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(DTL.UOM_Transaction);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?If weight is zero, calculate weight
CASE;

// IF DTL.Transaction Weight is Equal to zero
IF DTL.Transaction_Weight = *ZERO;

EXECUTE FUNCTION(Clc Convert Weight     XF) TYPE(EXCINTFUN)                     AC1215306;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(DTL.UOM_Transaction);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.USR_Weight_based_on_U_M1);
PARAMETER(WRK.USR_Weight_based_on_U_M2);
PARAMETER(WRK.USR_Weight_based_on_U_M3);
{
 //?Execute internal function

 // PAR.USR Weight based on U/M1 = CON.*ZERO
 PAR.USR_Weight_based_on_U_M1 = *ZERO;

 // PAR.USR Weight based on U/M2 = CON.*ZERO
 PAR.USR_Weight_based_on_U_M2 = *ZERO;

 // PAR.USR Weight based on U/M3 = CON.*ZERO
 PAR.USR_Weight_based_on_U_M3 = *ZERO;

 // PAR.USR Weight based on U/M1 = PAR.Transaction Weight
 PAR.USR_Weight_based_on_U_M1 = PAR.Transaction_Weight;

 //?Process entered U/M2
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // WRK.USR Weight = PAR.Transaction Weight / PAR.Conversion Factor 1 *Rounded
 WRK.USR_Weight = PAR.Transaction_Weight / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // WRK.USR Weight = PAR.Transaction Weight * PAR.Conversion Factor 1 *Rounded
 WRK.USR_Weight = PAR.Transaction_Weight * PAR.Conversion_Factor_1 'H';

 ENDIF;

 // PAR.USR Weight based on U/M2 = WRK.USR Weight
 PAR.USR_Weight_based_on_U_M2 = WRK.USR_Weight;

 ENDIF;

 //?Process entered U/M3
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.USR Weight based on U/M3 = WRK.USR Weight / PAR.Conversion Factor 2 *Rounded
 PAR.USR_Weight_based_on_U_M3 = WRK.USR_Weight / PAR.Conversion_Factor_2 'H';

 ENDIF;

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.USR Weight based on U/M3 = WRK.USR Weight * PAR.Conversion Factor 2 *Rounded
 PAR.USR_Weight_based_on_U_M3 = WRK.USR_Weight * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

}


CASE;

// IF DTL.U/M - Transaction EQ PAR.U/M - Primary
IF DTL.UOM_Transaction = PAR.UOM_Primary;

// DTL.Transaction Weight = DTL.Transaction Quantity * WRK.USR Weight based on U/M1
DTL.Transaction_Weight = DTL.Transaction_Quantity * WRK.USR_Weight_based_on_U_M1 'H';

ENDIF;

CASE;

// IF DTL.U/M - Transaction EQ PAR.U/M - Second
IF DTL.UOM_Transaction = PAR.UOM_Second;

// DTL.Transaction Weight = DTL.Transaction Quantity * WRK.USR Weight based on U/M2
DTL.Transaction_Weight = DTL.Transaction_Quantity * WRK.USR_Weight_based_on_U_M2 'H';

ENDIF;

CASE;

// IF DTL.U/M - Transaction EQ PAR.U/M - Third
IF DTL.UOM_Transaction = PAR.UOM_Third;

// DTL.Transaction Weight = DTL.Transaction Quantity * WRK.USR Weight based on U/M3
DTL.Transaction_Weight = DTL.Transaction_Quantity * WRK.USR_Weight_based_on_U_M3 'H';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Quantity/Weight    IF) TYPE(EXCINTFUN)                     AC1152212;
PARAMETER('P');
PARAMETER(DTL.Transaction_Quantity);
PARAMETER(DTL.Transaction_Weight);
{
 //?Execute internal function

 DO;

 //?Edit for field values
 CASE;

 // IF PAR.Field Value Edit is Positive
 IF PAR.USR_Field_Value_Edit = 'P';

 //?Edit quantity
 CASE;

 // IF PAR.Transaction Quantity is Less than zero
 IF PAR.Transaction_Quantity < *ZERO;

 // Send error message - 'Quantity cannot be negative.'
 ERROR(USR0416);
 MSGPARM(PAR.Transaction_Quantity);

 ENDIF;

 //?Edit weight
 CASE;

 // IF PAR.Transaction Weight is Less than zero
 IF PAR.Transaction_Weight < *ZERO;

 // Send error message - 'Weight of transaction must be postive'
 ERROR(USR0539);
 MSGPARM(PAR.Transaction_Weight);

 ENDIF;

 //?Edit for field values
 // IF PAR.Field Value Edit is Negative
 IF PAR.USR_Field_Value_Edit = 'N';

 //?Edit quantity
 CASE;

 // IF PAR.Transaction Quantity is Greater than zero
 IF PAR.Transaction_Quantity > *ZERO;

 // Send error message - 'Quantity cannot be positive'
 ERROR(USR0911);
 MSGPARM(PAR.Transaction_Quantity);

 ENDIF;

 //?Edit weight
 CASE;

 // IF PAR.Transaction Weight is Greater than zero
 IF PAR.Transaction_Weight > *ZERO;

 // Send error message - 'Transaction weight must be negative'
 ERROR(USR0912);
 MSGPARM(PAR.Transaction_Weight);

 ENDIF;

 ENDIF;

 //?Edit value mismatch
 CASE;

 // IF PAR.Transaction Quantity is Greater than zero
 IF PAR.Transaction_Quantity > *ZERO;

 CASE;

 // IF PAR.Transaction Weight is Less than zero
 IF PAR.Transaction_Weight < *ZERO;

 // Send error message - 'Quantity and weight signs must match for this transaction'
 ERROR(USR0383);
 MSGPARM(PAR.Transaction_Quantity);
 MSGPARM(PAR.Transaction_Weight);

 ENDIF;

 //?Edit value mismatch
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Transaction Quantity is Less than zero
 IF PAR.Transaction_Quantity < *ZERO;

 CASE;

 // IF PAR.Transaction Weight is Greater than zero
 IF PAR.Transaction_Weight > *ZERO;

 // Send error message - 'Quantity and weight signs must match for this transaction'
 ERROR(USR0383);
 MSGPARM(PAR.Transaction_Quantity);
 MSGPARM(PAR.Transaction_Weight);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDDO;

}


EXECUTE FUNCTION(RTV Label Date         RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1479448;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(WRK.Label_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Label Date   (if it is entered)
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?If label date entered doesn't match label date on file, change it
CASE;

// IF DTL.Label Date NE WRK.Label Date
IF DTL.Label_Date <> WRK.Label_Date;

// Send information message - 'Label Date has been corrected for Date &1'
MESSAGE(USR2536 *INFO);
MSGPARM(DTL.Production_Date);

// DTL.Label Date = WRK.Label Date
DTL.Label_Date = WRK.Label_Date;

ENDIF;

ENDIF;

//?If Companies no longer equal then issue Company mismatch error
CASE;

// IF DTL.Accounting Company Number NE PAR.Accounting Company Number
IF DTL.Company_Number <> PAR.Company_Number;

// Send error message - 'Company number must match Company number for original transaction.'
ERROR(USR0916);

// DTL.Accounting Company Number = PAR.Accounting Company Number
DTL.Company_Number = PAR.Company_Number;

ENDIF;

//?07/19/10 PKD e884 remove unit cost validation
//?** E13456 JJH 01/11/2019 - Validation for Lot Number
EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(NLL.Warehouse_Description);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Production_Warehouse_Code);
PARAMETER(NLL.State_Code);
PARAMETER(LCL.Lot_Tracking_Flag);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
PARAMETER(NLL.Include_in_Auto_Pre_Pick);
PARAMETER(NLL.Default_Manifest_Copies);
PARAMETER(NLL.Default_Load_Sequence);
PARAMETER(NLL.WHS_Slotting_Limit_Type);
PARAMETER(NLL.Shipping_Company);
PARAMETER(NLL.Accounting_Company);
PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
PARAMETER(NLL.WHS_Inventory_Chill_Time);
PARAMETER(NLL.Parent_Warehouse);
PARAMETER(NLL.Default_Shipping_Whs);
PARAMETER(LCL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
PARAMETER(NLL.WHS_Default_Load_Type);
PARAMETER(NLL.WHS_TMS_Planning_Region);
PARAMETER(NLL.Default_Carrier_Code);
PARAMETER(NLL.Inventory_Logic_Version);
PARAMETER(NLL.WHS_Auto_Inv_Restoration);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Initialize routine

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

}


CASE;

// IF LCL.Lot Tracking Flag is yes
IF LCL.Lot_Tracking_Flag = 'Y';

CASE;

// IF DTL.Lot Number is Not Entered
IF DTL.Lot_Number = *ZERO;

// Send error message - 'Lot Number is required for Warehouse &2.'
ERROR(USR5102);
MSGPARM(DTL.Lot_Number);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

//?USER: User defined action

//?Create transaction in IC Transaction Detail file
EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Extended Amount = DTL.USR Transaction-Unit Cost * DTL.Transaction Weight *Rounded
DTL.Extended_Amount = DTL.USR_Transaction_Unit_Cost * DTL.Transaction_Weight 'H';

//?08/14/23 DN WI517-Call Legacy Process if Not Live or Parallel.
CASE;

// IF LCL.Module Release Status is Not Live
IF LCL.Module_Release_Status = 'N';

// OR LCL.Module Release Status is Parallel
OR LCL.Module_Release_Status = 'P';

//?09/27/23 DN WI517-Set 'Inventory Updated USR' Flag.
// LCL.Inventory Updated USR = CND.Yes
LCL.Inventory_Updated_USR = 'Y';

EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.ITD_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.ITD Sequence Number = CON.1
 PAR.ITD_Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
 PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

 QUIT;

}


EXECUTE FUNCTION(Crt IC Trans. Detail   CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC1122298;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.ITD_Sequence_Number);
PARAMETER(*ZERO);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.UOM_Transaction);
PARAMETER('IC');
PARAMETER(DTL.Description);
PARAMETER(DTL.Transaction_Quantity);
PARAMETER(DTL.Transaction_Weight);
PARAMETER(DTL.USR_Transaction_Unit_Cost);
PARAMETER(DTL.UOM_Transaction);
PARAMETER(DTL.Extended_Amount);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(DTL.Reason_Code);
PARAMETER(*BLANK);
PARAMETER(DTL.Lot_ID);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(*BLANK);
PARAMETER(DTL.Production_Time);
PARAMETER(DTL.Shift_Number);
PARAMETER(DTL.Label_Date);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER('A');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 // Call program Crt Export Rate Dtl   XF.
 CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Trans_ID);
 PARAMETER(DB1.Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.UOM_Transaction);
 PARAMETER(DB1.Item_Transaction_Source);
 PARAMETER(DB1.Description);
 PARAMETER(DB1.Transaction_Quantity);
 PARAMETER(DB1.Transaction_Weight);
 PARAMETER(DB1.USR_Transaction_Unit_Cost);
 PARAMETER(DB1.UOM_Cost);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Ticket_Number);
 PARAMETER(DB1.GL_Document_Number);
 PARAMETER(DB1.GL_Update_Status);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Reference_Number_Code);
 PARAMETER(DB1.Lot_ID);
 PARAMETER(DB1.Transfer_Batch_Number);
 PARAMETER(DB1.Transfer_Batch_Sequence);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Employee_Badge_Number);
 PARAMETER(DB1.Production_Time);
 PARAMETER(DB1.Shift_Number);
 PARAMETER(DB1.Label_Date);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.Job_Date);

}


//?Post transaction to IC Item Balance & IC Item Balance Detail
EXECUTE FUNCTION(Prc Create Dtl Receipt IF) TYPE(EXCINTFUN)                     AC1322507;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.ITD_Sequence_Number);
PARAMETER(DTL.Sequence_Number);
PARAMETER(DTL.Shift_Number);
PARAMETER(DTL.Label_Date);
{
 //?Execute internal function

 EXECUTE FUNCTION(Prc Create Dtl Receipt RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1139933;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.ITD_Sequence_Number);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(WRK.Description_Line_Two);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(WRK.UOM_Pricing);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(WRK.Fresh_Chilling_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Quantity/Dollars   RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1163281;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Unit_Cost_Per_Pound);
  PARAMETER(PAR.Quantity_on_Hand_Weight);
  PARAMETER(PAR.Quantity_on_Hand_UOM1);
  PARAMETER(PAR.Quantity_on_Hand_UOM2);
  PARAMETER(PAR.Quantity_on_Hand_UOM3);
  PARAMETER(WRK.Value_of_On_Hand_Inventor);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(UPD Value/Qty/Wgt      CH) TYPE(CHGOBJ) FILE(CAB0REP)          AC1413030;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Inventory_Trans_ID);
  PARAMETER(DB1.Inventory_Trans_Type);
  PARAMETER(DB1.Transaction_Date_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.UOM_Transaction);
  PARAMETER(DB1.Transaction_Quantity);
  PARAMETER(DB1.Transaction_Weight);
  PARAMETER(PAR.Unit_Cost_Per_Pound);
  PARAMETER(DB1.UOM_Cost);
  PARAMETER(DB1.Extended_Amount);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(DB1.Label_Date);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(PAR.Quantity_on_Hand_Weight);
  PARAMETER(PAR.Quantity_on_Hand_UOM1);
  PARAMETER(PAR.Quantity_on_Hand_UOM2);
  PARAMETER(PAR.Quantity_on_Hand_UOM3);
  {
   //?USER: Processing before Data read

   EXECUTE FUNCTION(Clc Convert Cost       IF) TYPE(EXCINTFUN)                     AC1122884;
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Conversion_Factor_1);
   PARAMETER(PAR.Operation_Factor_1);
   PARAMETER(PAR.UOM_Second);
   PARAMETER(PAR.Conversion_Factor_2);
   PARAMETER(PAR.Operation_Factor_2);
   PARAMETER(PAR.UOM_Third);
   PARAMETER(PAR.USR_Transaction_Unit_Cost);
   PARAMETER(PAR.UOM_Cost);
   PARAMETER(PAR.Cost_based_on_U_M1_S);
   PARAMETER(PAR.Cost_based_on_U_M2_S);
   PARAMETER(PAR.Cost_based_on_U_M3_S);
   {
    //?Execute internal function

    //?Initialize parameter values
    // PAR.Cost based on U/M1 = CON.*ZERO
    PAR.Cost_based_on_U_M1 = *ZERO;

    // PAR.Cost based on U/M2 = CON.*ZERO
    PAR.Cost_based_on_U_M2 = *ZERO;

    // PAR.Cost based on U/M3 = CON.*ZERO
    PAR.Cost_based_on_U_M3 = *ZERO;

    //?Process based on Unit of Measure entered
    CASE;

    // IF PAR.U/M - Primary EQ PAR.U/M - Cost
    IF PAR.UOM_Primary = PAR.UOM_Cost;

    // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost
    PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost;

    //?Process second U/M if entered
    CASE;

    // IF PAR.U/M - Second is Entered
    IF PAR.UOM_Second <> *BLANK;

    //?Convert based on operation code
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor
    PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_1 'H';

    ENDIF;

    //?Convert based on operation code
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor
    PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_1 'H';

    ENDIF;

    // PAR.Cost based on U/M2 = PAR.Cost based on U/M2 S
    PAR.Cost_based_on_U_M2 = PAR.Cost_based_on_U_M2_S;

    ENDIF;

    //?Process third U/M if entered
    CASE;

    // IF PAR.U/M - Third is Entered
    IF PAR.UOM_Third <> *BLANK;

    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Cost based on U/M3 = PAR.Cost based on U/M2 S / PAR.Conversion Factor 2 *Rou
    PAR.Cost_based_on_U_M3 = PAR.Cost_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

    ENDIF;

    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    // PAR.Cost based on U/M3 = PAR.Cost based on U/M2 S * PAR.Conversion Factor 2 *Rou
    PAR.Cost_based_on_U_M3 = PAR.Cost_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

    ENDIF;

    ENDIF;

    //?Process based on Unit of Measure entered
    // IF PAR.U/M - Second EQ PAR.U/M - Cost
    IF PAR.UOM_Second = PAR.UOM_Cost;

    // PAR.Cost based on U/M2 = PAR.USR Transaction-Unit Cost
    PAR.Cost_based_on_U_M2 = PAR.USR_Transaction_Unit_Cost;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor 1
    PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_1 'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor 1
    PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_1 'H';

    ENDIF;

    ENDIF;

    //?Process third U/M if entered
    CASE;

    // IF PAR.U/M - Third is Entered
    IF PAR.UOM_Third <> *BLANK;

    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor 2
    PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_2 'H';

    ENDIF;

    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor 2
    PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_2 'H';

    ENDIF;

    ENDIF;

    //?Process based on Unit of Measure entered
    // IF PAR.U/M - Third EQ PAR.U/M - Cost
    IF PAR.UOM_Third = PAR.UOM_Cost;

    // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost
    PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor
    PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_2 'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor
    PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_2 'H';

    ENDIF;

    ENDIF;

    // PAR.Cost based on U/M2 = PAR.Cost based on U/M2 S
    PAR.Cost_based_on_U_M2 = PAR.Cost_based_on_U_M2_S;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    // PAR.Cost based on U/M1 = PAR.Cost based on U/M2 S * PAR.Conversion Factor 1 *Rou
    PAR.Cost_based_on_U_M1 = PAR.Cost_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Cost based on U/M1 = PAR.Cost based on U/M2 S / PAR.Conversion Factor 1 *Rou
    PAR.Cost_based_on_U_M1 = PAR.Cost_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

    ENDIF;

    ENDIF;

    ENDIF;

   }

   EXECUTE FUNCTION(Clc Convert Quantity   IF) TYPE(EXCINTFUN)                     AC1123260;
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Conversion_Factor_1);
   PARAMETER(PAR.Operation_Factor_1);
   PARAMETER(PAR.UOM_Second);
   PARAMETER(PAR.Conversion_Factor_2);
   PARAMETER(PAR.Operation_Factor_2);
   PARAMETER(PAR.UOM_Third);
   PARAMETER(PAR.UOM_Transaction);
   PARAMETER(PAR.Transaction_Quantity);
   PARAMETER(PAR.Quantity_based_on_U_M1_S);
   PARAMETER(PAR.Quantity_based_on_U_M2_S);
   PARAMETER(PAR.Quantity_based_on_U_M3_S);
   {
    //?Execute internal function

    //?Clear output parameters
    // PAR.USR Qty based on U/M1 = CON.*ZERO
    PAR.USR_Qty_based_on_U_M1 = *ZERO;

    // PAR.USR Qty based on U/M2 = CON.*ZERO
    PAR.USR_Qty_based_on_U_M2 = *ZERO;

    // PAR.USR Qty based on U/M3 = CON.*ZERO
    PAR.USR_Qty_based_on_U_M3 = *ZERO;

    //?Process based on transaction U/M
    CASE;

    // IF PAR.U/M - Primary EQ PAR.U/M - Transaction
    IF PAR.UOM_Primary = PAR.UOM_Transaction;

    // PAR.USR Qty based on U/M1 = PAR.Transaction Quantity
    PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity;

    //?Process entered U/M2
    CASE;

    // IF PAR.U/M - Second is Entered
    IF PAR.UOM_Second <> *BLANK;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
    PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
    PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

    ENDIF;

    ENDIF;

    // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
    PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

    ENDIF;

    //?Process entered U/M3
    CASE;

    // IF PAR.U/M - Third is Entered
    IF PAR.UOM_Third <> *BLANK;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S * PAR.Multiplier Two
    PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_2
    'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S / PAR.Conversion Fac
    PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_2
    'H';

    ENDIF;

    ENDIF;

    // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
    PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

    ENDIF;

    //?Process based on transaction U/M
    // IF PAR.U/M - Second EQ PAR.U/M - Transaction
    IF PAR.UOM_Second = PAR.UOM_Transaction;

    // PAR.Quantity based on U/M2 = PAR.Transaction Quantity
    PAR.USR_Qty_based_on_U_M2 = PAR.Transaction_Quantity;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Quantity based on U/M1 = PAR.Transaction Quantity / PAR.Conversion Factor 1
    PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

    ENDIF;

    //?Convert based on operation factor
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    // PAR.Quantity based on U/M1 = PAR.Transaction Quantity * PAR.Conversion Factor 1
    PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

    ENDIF;

    //?Process entered U/M3
    CASE;

    // IF PAR.U/M - Third is Entered
    IF PAR.UOM_Third <> *BLANK;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity * PAR.Conversion Factor
    PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity / PAR.Conversion Factor
    PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

    ENDIF;

    ENDIF;

    // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
    PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

    ENDIF;

    //?Process based on transaction U/M
    // IF PAR.U/M - Third EQ PAR.U/M - Transaction
    IF PAR.UOM_Third = PAR.UOM_Transaction;

    // PAR.Quantity based on U/M3 = PAR.Transaction Quantity
    PAR.USR_Qty_based_on_U_M3 = PAR.Transaction_Quantity;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
    PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

    ENDIF;

    //?Convert based on operation factor
    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
    PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

    ENDIF;

    // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
    PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S / PAR.Conversion Facto
    PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

    ENDIF;

    //?Convert based on operation factor
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S * PAR.Conversion Facto
    PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

    ENDIF;

    ENDIF;

   }

   //?USER: Processing before Data update

   // PGM.*Record Data Changed = CND.*YES
   PGM.*Record_Data_Changed = 'Y';

   //?(Creates IB if not found or updates if it exists)
   //?Update IC Item Balance Detail
   EXECUTE FUNCTION(UPD Value/Qty          RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1413032;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Inventory_Trans_ID);
   PARAMETER(PAR.Inventory_Trans_Type);
   PARAMETER(PAR.Transaction_Date_Code);
   PARAMETER(PAR.UOM_Transaction);
   PARAMETER(PAR.Transaction_Quantity);
   PARAMETER(PAR.Transaction_Weight);
   PARAMETER(PAR.UOM_Cost);
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.Shift_Number);
   PARAMETER(PAR.Label_Date);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Conversion_Factor_1);
   PARAMETER(PAR.Operation_Factor_1);
   PARAMETER(PAR.UOM_Second);
   PARAMETER(PAR.Conversion_Factor_2);
   PARAMETER(PAR.Operation_Factor_2);
   PARAMETER(PAR.UOM_Third);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(PAR.Quantity_based_on_U_M1_S);
   {
    //?USER: Processing if Data record not found

    CASE;

    // IF PAR.Quantity based on U/M1 S EQ WRK.ZERO
    IF PAR.Quantity_based_on_U_M1_S = WRK.ZERO;

    EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Production_Date);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*ZERO);
    PARAMETER(PAR.Quantity_based_on_U_M1_S);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('N');
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(PAR.Label_Date);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER('A');
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // Call program RTV System Date/Time   UP.
     CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
     PARAMETER(DB1.Job_Date);
     PARAMETER(DB1.Job_Time);

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Production_Date);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(PAR.Transaction_Weight);
    PARAMETER(PAR.Quantity_based_on_U_M1_S);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('N');
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(PAR.Extended_Amount);
    PARAMETER(PAR.Label_Date);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER('A');
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // Call program RTV System Date/Time   UP.
     CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
     PARAMETER(DB1.Job_Date);
     PARAMETER(DB1.Job_Time);

    }

    ENDIF;

    //?USER: Process Data record

    //?Calculate new On Hand Value
    CASE;

    // IF PAR.Inventory Trans. Type is Adjustment Cycle Count
    IF PAR.Inventory_Trans_Type = 'AC';

    // PAR.Value of On Hand Inventor = DB1.Value of On Hand Inventor + PAR.Extended Amo
    PAR.Value_of_On_Hand_Inventor = DB1.Value_of_On_Hand_Inventor + PAR.Extended_Amount;

    //?Calculate new On Hand Value
    // IF PAR.Inventory Trans. Type is Quantity based Avg. Cost
    IF PAR.Inventory_Trans_Type = 'R'/'RP'/'S'/'TW'/'RW'/'RR';

    // PAR.Value of On Hand Inventor = DB1.Value of On Hand Inventor + PAR.Extended Amo
    PAR.Value_of_On_Hand_Inventor = DB1.Value_of_On_Hand_Inventor + PAR.Extended_Amount;

    ENDIF;

    // PAR.Quantity on Hand - Weight = PAR.Transaction Weight + DB1.Quantity on Hand -
    PAR.Quantity_on_Hand_Weight = PAR.Transaction_Weight + DB1.Quantity_on_Hand_Weight;

    // PAR.Quantity on Hand - U/M1 = DB1.Quantity on Hand - U/M1 + PAR.Quantity based o
    PAR.Quantity_on_Hand_UOM1 = DB1.Quantity_on_Hand_UOM1 + PAR.Quantity_based_on_U_M1_S;

    //?If quantity goes TO exactly 0, wgt and value to go 0
    CASE;

    // IF PAR.Quantity on Hand - U/M1 EQ WRK.ZERO
    IF PAR.Quantity_on_Hand_UOM1 = WRK.ZERO;

    // Call program UPD Create Weight Adj. XF.
    CALL PROGRAM(UPD Create Weight Adj. XF) ('PDMYXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Transaction_Date_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(PAR.UOM_Transaction);
    PARAMETER(PAR.Quantity_on_Hand_Weight);
    PARAMETER(PAR.Unit_Cost_Per_Pound);
    PARAMETER(PAR.UOM_Cost);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(PAR.Shift_Number);
    PARAMETER(DB1.Label_Date);

    // PAR.Quantity on Hand - Weight = CON.*ZERO
    PAR.Quantity_on_Hand_Weight = *ZERO;

    // PAR.Value of On Hand Inventor = CON.*ZERO
    PAR.Value_of_On_Hand_Inventor = *ZERO;

    ENDIF;

    EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Quantity on Hand - U/M1 EQ WRK.ZERO
    IF PAR.Quantity_on_Hand_UOM1 = WRK.ZERO;

    // AND DB1.Production Date NE WRK.ZERO
    AND DB1.Production_Date <> WRK.ZERO;

    // AND PAR.Lot Tracking Flag is Not Yes
    AND PAR.Lot_Tracking_Flag = *BLANK/'N';

    EXECUTE FUNCTION(DLT Item Bal. Detail   DL) TYPE(DLTOBJ) FILE(CAB1REP)          AC1120964;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Date);
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Chg Item Bal. Detail   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1120963;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Physical_Count_Weight);
    PARAMETER(DB1.Physical_Count_Qty_UOM1);
    PARAMETER(DB1.Physical_Count_Qty_UOM2);
    PARAMETER(DB1.Physical_Count_Qty_UOM3);
    PARAMETER(DB1.Physical_Count_Status);
    PARAMETER(PAR.Quantity_on_Hand_Weight);
    PARAMETER(PAR.Quantity_on_Hand_UOM1);
    PARAMETER(DB1.Quantity_on_Hand_UOM2);
    PARAMETER(DB1.Quantity_on_Hand_UOM3);
    PARAMETER(DB1.Quantity_In_Chill);
    PARAMETER(DB1.Weight_In_Chill);
    PARAMETER(DB1.Update_Exception_Status);
    PARAMETER(DB1.Physical_Start_Weight);
    PARAMETER(DB1.Physical_Start_UOM1);
    PARAMETER(DB1.Physical_Start_UOM2);
    PARAMETER(DB1.Physical_Start_UOM3);
    PARAMETER(DB1.Physical_Start_Date);
    PARAMETER(DB1.Unit_Cost_Per_Pound);
    PARAMETER(DB1.Last_Cost);
    PARAMETER(PAR.Value_of_On_Hand_Inventor);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // DB1.Job Name = JOB.*PROGRAM
     DB1.Job_Name = JOB.*PROGRAM;

    }

    ENDIF;

   }

   //?Update the quantity/weight on hand in the item balance file
   EXECUTE FUNCTION(RTV Sum Act Qty,Wgt,ValRT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1402850;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.On_Hand_Weight_Summary);
   PARAMETER(DB1.On_Hand_UOM1_Summary);
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   PARAMETER(DB1.Value_of_On_Hand_Inventor);
   {
    //?USER: Initialize routine

    // PAR.Quantity on Hand - Weight = CON.*ZERO
    PAR.Quantity_on_Hand_Weight = *ZERO;

    // PAR.Quantity on Hand - U/M1 = CON.*ZERO
    PAR.Quantity_on_Hand_UOM1 = *ZERO;

    // PAR.Quantity on Hand - U/M2 = CON.*ZERO
    PAR.Quantity_on_Hand_UOM2 = *ZERO;

    // PAR.Quantity on Hand - U/M3 = CON.*ZERO
    PAR.Quantity_on_Hand_UOM3 = *ZERO;

    // PAR.Value of On Hand Inventor = CON.*ZERO
    PAR.Value_of_On_Hand_Inventor = *ZERO;

    //?USER: Process Data record

    // PAR.Quantity on Hand - Weight = PAR.Quantity on Hand - Weight + DB1.Quantity on
    PAR.Quantity_on_Hand_Weight = PAR.Quantity_on_Hand_Weight + DB1.Quantity_on_Hand_Weight;

    // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.Quantity on Hand
    PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.Quantity_on_Hand_UOM1;

    // PAR.Quantity on Hand - U/M2 = PAR.Quantity on Hand - U/M2 + DB1.Quantity on Hand
    PAR.Quantity_on_Hand_UOM2 = PAR.Quantity_on_Hand_UOM2 + DB1.Quantity_on_Hand_UOM2;

    // PAR.Quantity on Hand - U/M3 = PAR.Quantity on Hand - U/M3 + DB1.Quantity on Hand
    PAR.Quantity_on_Hand_UOM3 = PAR.Quantity_on_Hand_UOM3 + DB1.Quantity_on_Hand_UOM3;

    // PAR.Value of On Hand Inventor = PAR.Value of On Hand Inventor + DB1.Value of On
    PAR.Value_of_On_Hand_Inventor = PAR.Value_of_On_Hand_Inventor
    + DB1.Value_of_On_Hand_Inventor;

   }

   EXECUTE FUNCTION(Available Primary U/M) TYPE(DRVFLD)                            AC1123809;
   PARAMETER(DB1.Quantity_Avail_To_Sell);
   PARAMETER(DB1.On_Hand_UOM1_Summary);
   PARAMETER(DB1.Quantity_Scheduled_UOM1);
   {
    //?Calculate derived field

    // PAR.Available Primary U/M = PAR.On Hand Primary U/M - PAR.USR Allocated Primary
    PAR.Available_Primary_U_M = PAR.On_Hand_Primary_U_M - PAR.USR_Allocated_Primary_U_M;

   }

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


//?** Process Auto-Locate Whse inventory             FP1127
DO;

//?** Auto-Locate if External, Lot Controlled, not Plant/Live W/Carlisle
//?** E13456 JJH 01/11/2019 - Validation for Lot Number
//?Moved logic to get Warehouse info in the Validate Relation UEP
CASE;

// IF LCL.Warehouse Location is External
IF LCL.Warehouse_Location = 'E';

// AND LCL.WHS Live w/Carlisle is *No/Blank
AND LCL.WHS_Live_with_Carlisle = *BLANK/'N';

// AND LCL.Lot Tracking Flag is yes
AND LCL.Lot_Tracking_Flag = 'Y';

EXECUTE FUNCTION(RTV Whse Location Info RT) TYPE(RTVOBJ) FILE(PDL2REP)          AC1910914;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Location_Code);
PARAMETER(LCL.Location_Aisle);
PARAMETER(LCL.Location_Bay);
PARAMETER(LCL.Loc_Unused_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** UPDATE Item Lot/Location
//?** Lot number is now entered on the screen       FP1127 03/05/2009
// Call program UPD Auto-Loc TR Ord ItmXF.
CALL PROGRAM(UPD Auto-Loc TR Ord ItmXF) ('PMBVXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Lot_Number);
PARAMETER(WRK.Location_Code);
PARAMETER(WRK.Location_Level);
PARAMETER(DTL.Transaction_Quantity);
PARAMETER(*ZERO);

ENDIF;

ENDDO;

ENDIF;

//?**************************************************************************
//?08/14/23 DN WI517-Call WIM API if Live or Parallel.
CASE;

// IF LCL.Module Release Status is Is Live
IF LCL.Module_Release_Status = 'Y';

// OR LCL.Module Release Status is Parallel
OR LCL.Module_Release_Status = 'P';

// LCL.API EccResult-MsgId U = CON.*BLANK
LCL.API_EccResult_MsgId_U = *BLANK;

// LCL.API Request Key U = CON.*BLANK
LCL.API_Request_Key_U = *BLANK;

// LCL.API Name = CONCAT(CON.wim.ordershipping.invento,CON.ry,CON.*ZERO)
LCL.API_Name = 'wim.ordershipping.invento' + 'ry' (*ZERO);

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1510877;
PARAMETER('APIWAITTME');
PARAMETER(LCL.API_Wait_Time_U);
{
 //?USER: Process Data record

 // PAR.System Value Numeric = DB1.System Value Numeric
 PAR.System_Value_Numeric = DB1.System_Value_Numeric;

 QUIT;

}


//?Call API Wrapper Program for wim.ordershipping.inventory API
//?1/5/24 DN SR08283-Added 'API Request Key U' & 'API Mode U' Parms.
// Call program API WIM Inv Shipping   UP.
CALL PROGRAM(API WIM Inv Shipping   UP) ('PVAYUPR');
PARAMETER(LCL.API_Wait_Time_U);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.Production_Date);
PARAMETER('IC');
PARAMETER(DTL.Description);
PARAMETER(DTL.Reason_Code);
PARAMETER(*ZERO);
PARAMETER(DTL.Shift_Number);
PARAMETER(*BLANK);
PARAMETER(DTL.Transaction_Weight);
PARAMETER(DTL.Transaction_Quantity);
PARAMETER('N');
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.API_EccResult_MsgId_U);
PARAMETER(LCL.API_EccResult_MsgDesc_U);
PARAMETER(LCL.API_Request_Key_U);
PARAMETER(*SNDRCV);

//?API Call Successful? If Not, Create Log & Send Email.
CASE;

// IF LCL.API EccResult-MsgId U is Success
IF LCL.API_EccResult_MsgId_U = 'ECC0000';

// OR LCL.API EccResult-MsgId U is Timeout
OR LCL.API_EccResult_MsgId_U = 'TIMEOUT';

// LCL.Inventory Updated USR = CND.Yes
LCL.Inventory_Updated_USR = 'Y';

//?01/06/24 DN SR08283-Create Log Record for Timeout Transaction.
CASE;

// IF LCL.API EccResult-MsgId U is Timeout
IF LCL.API_EccResult_MsgId_U = 'TIMEOUT';

// Call program Crt WIM API Failure LogXF.
CALL PROGRAM(Crt WIM API Failure LogXF) ('PVA8XFR');
PARAMETER(LCL.API_Name);
PARAMETER(LCL.API_EccResult_MsgId_U);
PARAMETER(LCL.API_EccResult_MsgDesc_U);
PARAMETER(LCL.API_Request_Key_U);
PARAMETER('ICQLPVR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.Production_Date);
PARAMETER('IC');
PARAMETER(DTL.Description);
PARAMETER(DTL.Reason_Code);
PARAMETER(*ZERO);
PARAMETER(DTL.Shift_Number);
PARAMETER(*BLANK);
PARAMETER(DTL.Transaction_Weight);
PARAMETER(DTL.Transaction_Quantity);
PARAMETER('N');
PARAMETER(LCL.Blank_1_USR);

ENDIF;

//?API Call Successful? If Not, Create Log & Send Email.
// IF *OTHERWISE
IF *OTHERWISE;

//?SR07943 DN 12/21/23-Added 'API EccResult-MsgId U is Entered' Cond.
CASE;

// IF LCL.API EccResult-MsgId U is Entered
IF LCL.API_EccResult_MsgId_U <> *BLANK;

//?1/6/24 DN SR08283-Added 'API Request Key' as Input Parm.
// Call program Crt WIM API Failure LogXF.
CALL PROGRAM(Crt WIM API Failure LogXF) ('PVA8XFR');
PARAMETER(LCL.API_Name);
PARAMETER(LCL.API_EccResult_MsgId_U);
PARAMETER(LCL.API_EccResult_MsgDesc_U);
PARAMETER(LCL.API_Request_Key_U);
PARAMETER('ICQLPVR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.Production_Date);
PARAMETER('IC');
PARAMETER(DTL.Description);
PARAMETER(DTL.Reason_Code);
PARAMETER(*ZERO);
PARAMETER(DTL.Shift_Number);
PARAMETER(*BLANK);
PARAMETER(DTL.Transaction_Weight);
PARAMETER(DTL.Transaction_Quantity);
PARAMETER('N');
PARAMETER(LCL.Blank_1_USR);

//?Send Email to Business & IT.
// Call program Prc Eml Shipping & IT  XF.
CALL PROGRAM(Prc Eml Shipping & IT  XF) ('PVA9XFR');
PARAMETER('ICQLPVR');

ENDIF;

ENDIF;

ENDIF;

//?**************************************************************************
//?09/27/23 DN WI517-Commented Out & Moved Below.
//?09/27/23 DN WI517-Send Info Msg Based on Inventory was Updated or Not.
CASE;

// IF LCL.Inventory Updated USR is Yes
IF LCL.Inventory_Updated_USR = 'Y';

// Send information message - 'Last item &1 processed.'
MESSAGE(USR0400 *INFO);
MSGPARM(DTL.Item_Code);

//?09/27/23 DN WI517-Send Info Msg Based on Inventory was Updated or Not.
// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Last item &1 not processed.'
MESSAGE(USR0399 *INFO);
MSGPARM(DTL.Item_Code);

ENDIF;

//?** Clear non repeating screen fields to prepare for next item
// DTL.Item Code = CON.*ZERO
DTL.Item_Code = *ZERO;

// DTL.Description Line One = CON.*BLANK
DTL.Description_Line_One = *BLANK;

// DTL.U/M - Transaction = CON.*BLANK
DTL.UOM_Transaction = *BLANK;

// DTL.Transaction Quantity = CON.*ZERO
DTL.Transaction_Quantity = *ZERO;

// DTL.Transaction Weight = CON.*ZERO
DTL.Transaction_Weight = *ZERO;

// DTL.Transaction - Unit Cost = CON.*ZERO
DTL.USR_Transaction_Unit_Cost = *ZERO;

// DTL.Description = PAR.Hold description
DTL.Description = PAR.USR_Hold_Description;

// DTL.Lot Number = CON.*ZERO
DTL.Lot_Number = *ZERO;

// DTL.Lot ID = CON.*BLANK
DTL.Lot_ID = *BLANK;

