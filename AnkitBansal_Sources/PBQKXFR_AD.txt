// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBQKXFR
// ?Date: 14.08.2025 Time: 03:48:57
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// LCL.Transfer Price USR = CON.*ZERO
LCL.Transfer_Price_USR = *ZERO;

EXECUTE FUNCTION(Rtv to CLC TP FOB Prc RT) TYPE(RTVOBJ) FILE(PMDNREP)           AC2102402;
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.To_Date_USR);
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Weight_Billed);
PARAMETER(LCL.FOB_Gross_Amount);
PARAMETER(PAR.To_Date_USR);
PARAMETER(LCL.Use_Calcd_Avg_price_Y_N);
PARAMETER(LCL.Commodity_Market_Price);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Initialize routine

 //?S00687  RMC 2/18/09 use JLC price always, dont use 3rd party sales
 // PAR.Weight Billed = CON.*ZERO
 PAR.Weight_Billed = *ZERO;

 // PAR.FOB Gross Amount = CON.*ZERO
 PAR.FOB_Gross_Amount = *ZERO;

 //?Weight of all sales for the orig order's COMPANY/items grouped together
 //? * note: IC sales arent invoiced yet, so accum from order dtl with "R"
 // PAR.Weight Total 13.2     USR = CON.*ZERO
 PAR.Weight_Total_13_2_USR = *ZERO;

 //?Will be yes if % of 3rd party sales >= % in this file for the item
 //?  Will be "J" if Jacobson Letter Chicago price is to be used
 //?& Will be Yes if Item is NOT grouped with other items (ie. not found
 //?   in this file)
 // PAR.Use Calcd Avg price Y/N = CND.No
 PAR.Use_Calcd_Avg_price_Y_N = 'N';

 //?USER: Processing if Data record not found

 //?If Item not grouped with others, read hist for that item only
 //? DONT CARE ABOUT COMPANY HERE - READ ALL SALES FOR THE ITEM
 //?Added Inter-comp Group "G" - only runs from tf410cl for fee&paym from here
 // Call program Clc Transfer Price    XF.
 CALL PROGRAM(Clc Transfer Price    XF) ('PNKOXFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(PAR.Weight_Billed);
 PARAMETER(PAR.FOB_Gross_Amount);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.From_Date_USR);
 PARAMETER(PAR.To_Date_USR);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER('G');

 // PAR.Use Calcd Avg price Y/N = CND.Yes
 PAR.Use_Calcd_Avg_price_Y_N = 'Y';

 //?USER: Process Data record

 //?Accum Sales History records from all items grouped with the input item
 //? DO CARE ABOUT COMPANY HERE - READ ALL SALES FOR THE ORDER'S COMP/ITEM
 //?Skip InterCompany Sales Agreement records (IS)    FP1314
 EXECUTE FUNCTION(Clc Trnsfr Prc-grp-TP RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC2103132;
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(PAR.Weight_Billed);
 PARAMETER(DB1.Group_with_Item_Code);
 PARAMETER(PAR.FOB_Gross_Amount);
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.From_Date_USR);
 PARAMETER(PAR.To_Date_USR);
 PARAMETER(PAR.Weight_Total_13_2_USR);
 PARAMETER(DB1.IGTS_Combine_Sls_all_itms);
 PARAMETER(PAR.TP_Sales_Company_Select);
 PARAMETER(PAR.TP_Sales_Company);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?** 07/06/2009 LJB FP1314  Omit InterCompany Sales Agreement records
  ENDDO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Actual Shipped Date GE PAR.Date From             USR
  IF DB1.Actual_Shipped_Date >= PAR.Date_From_USR;

  // AND DB1.Actual Shipped Date LE PAR.Date To               USR
  AND DB1.Actual_Shipped_Date <= PAR.Date_To_USR;

  EXECUTE FUNCTION(Rtv Pricing Defaults  RT) TYPE(RTVOBJ) FILE(PNF4REP)           AC1994285;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.OE_Dft_Commodity_Market);
  PARAMETER(LCL.OE_Dft_Price_Method_Code);
  PARAMETER(LCL.OE_Dft_Market_Date_Method);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.OE Dft Commodity Market is Prior Week 3rd Party Avg
  IF LCL.OE_Dft_Commodity_Market = 'TPA';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?OMT:  Exempt Items
  CASE;

  // IF DB1.Order TF Exempt Code is Exempt Items
  IF DB1.Order_TF_Exempt_Code = 'EC'/'EP';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  //?Accumulating the volume with IC and without IC later
  //?     See PRC:  Record Selected
  //?SEL: Accounting Company
  CASE;

  // IF PAR.TP Sales Company is Select Company
  IF PAR.TP_Sales_Company = 'S';

  CASE;

  // IF PAR.TP Sales Company Select is greater than zero
  IF PAR.TP_Sales_Company_Select > *ZERO;

  CASE;

  // IF DB1.Company Number NE PAR.TP Sales Company Select
  IF DB1.Company_Number <> PAR.TP_Sales_Company_Select;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  //?SEL: Accounting Company
  // IF PAR.TP Sales Company is Order Accounting Company
  IF PAR.TP_Sales_Company = 'O';

  CASE;

  // IF DB1.Company Number NE PAR.Company Number
  IF DB1.Company_Number <> PAR.Company_Number;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  //?OMT:  Type Code = InterCo Sales Agreement   FP1314
  CASE;

  // IF DB1.Type Code is Inter-Comp Sales Agreemnt
  IF DB1.Type_Code = 'IS';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  //?PRC:  Record Selected
  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  //?If IGTS Combine Sls all itms is yes- accum weight for ALL sales
  CASE;

  // IF PAR.IGTS Combine Sls all itms is yes
  IF PAR.IGTS_Combine_Sls_all_itms = 'Y';

  // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Weight Billed
  PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Weight_Billed;

  ENDIF;

  //?Accum: Type Code = Third Party separately
  CASE;

  // IF DB1.Type Code is 3rd Party Customer
  IF DB1.Type_Code <> 'IC';

  // PAR.Weight Billed = PAR.Weight Billed + DB1.Weight Billed
  PAR.Weight_Billed = PAR.Weight_Billed + DB1.Weight_Billed;

  // PAR.FOB Gross Amount = PAR.FOB Gross Amount + DB1.FOB Gross Amount
  PAR.FOB_Gross_Amount = PAR.FOB_Gross_Amount + DB1.FOB_Gross_Amount;

  //?If IGTS Combine Sls all itms is no, accum TP sales only
  CASE;

  // IF PAR.IGTS Combine Sls all itms is no
  IF PAR.IGTS_Combine_Sls_all_itms = 'N';

  // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Weight Billed
  PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Weight_Billed;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // PAR.IGTS Min Sales Volume Pct = DB1.IGTS Min Sales Volume Pct
 PAR.IGTS_Min_Sales_Volume_Pct = DB1.IGTS_Min_Sales_Volume_Pct;

 // PAR.IGTS 3rd Party Price Type = DB1.IGTS 3rd Party Price Type
 PAR.IGTS_3rd_Party_Price_Type = DB1.IGTS_3rd_Party_Price_Type;

 // PAR.IGTS Commodity Market = DB1.IGTS Commodity Market
 PAR.IGTS_Commodity_Market = DB1.IGTS_Commodity_Market;

 // PAR.IGTS Commodity Group = DB1.IGTS Commodity Group
 PAR.IGTS_Commodity_Group = DB1.IGTS_Commodity_Group;

 //?USER: Exit processing

 CASE;

 // IF PAR.Weight Total 13.2     USR is Not Equal to Zero
 IF PAR.Weight_Total_13_2_USR <> *ZERO;

 CASE;

 // IF PAR.IGTS 3rd Party Price Type is Average
 IF PAR.IGTS_3rd_Party_Price_Type = 'A';

 // PAR.Use Calcd Avg price Y/N = CND.Yes
 PAR.Use_Calcd_Avg_price_Y_N = 'Y';

 // IF PAR.IGTS 3rd Party Price Type is Avg/Mkt w/Min Volume
 IF PAR.IGTS_3rd_Party_Price_Type = 'V';

 // Compute:% 3rd party sales
 LCL.Percent_7_4_USR = ( PAR.Weight_Billed / PAR.Weight_Total_13_2_USR ) * 100;

 //?3rd Party Average or Commodity Market Price
 CASE;

 // IF PAR.IGTS Min Sales Volume Pct is Greater than zero
 IF PAR.IGTS_Min_Sales_Volume_Pct > *ZERO;

 CASE;

 // IF LCL.Percent 7.4 USR GE PAR.IGTS Min Sales Volume Pct
 IF LCL.Percent_7_4_USR >= PAR.IGTS_Min_Sales_Volume_Pct;

 // PAR.Use Calcd Avg price Y/N = CND.Yes
 PAR.Use_Calcd_Avg_price_Y_N = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.IGTS Commodity Market is Jacobsen Letter Chicago
 IF PAR.IGTS_Commodity_Market = 'JLC';

 // PAR.Use Calcd Avg price Y/N = CND.Jacobsen Letter Chicago
 PAR.Use_Calcd_Avg_price_Y_N = 'J';

 EXECUTE FUNCTION(RTV Next Saturday      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1674395;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(LCL.Market_Price_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  // PAR.Scheduled Ship Date = DB1.Post to G/L Date
  PAR.Scheduled_Ship_Date = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 //?W97198 DN 04/11/22-Moved 'RTV Market Price       RT' Below.
 //?W97198 DN 04/11/22-If Co 440, Use 'JLX' to Get Market Price for STF.
 CASE;

 // IF PAR.Company Number is Seaboard Triumph Foods
 IF PAR.Company_Number = 440;

 // LCL.IGTS Commodity Market = CND.Jacobsen Lttr Chicago STF
 LCL.IGTS_Commodity_Market = 'JLX';

 //?W97198 DN 04/11/22-If Co 440, Use 'JLX' to Get Market Price for STF.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.IGTS Commodity Market = CND.Jacobsen Letter Chicago
 LCL.IGTS_Commodity_Market = 'JLC';

 ENDIF;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(LCL.IGTS_Commodity_Market);
 PARAMETER(PAR.IGTS_Commodity_Group);
 PARAMETER(LCL.Market_Price_Date);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(LCL.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 //?Cannot price if saturday market price not found
 CASE;

 // IF LCL.Market Price Date NE LCL.USR Date Priced
 IF LCL.Market_Price_Date <> LCL.USR_Date_Priced;

 // PAR.Use Calcd Avg price Y/N = CND.No
 PAR.Use_Calcd_Avg_price_Y_N = 'N';

 // PAR.Commodity Market Price = CND.Not Entered
 PAR.Commodity_Market_Price = *ZERO;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Use Calcd Avg price Y/N = CND.Yes
 PAR.Use_Calcd_Avg_price_Y_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 // IF PAR.IGTS 3rd Party Price Type is Market Price
 IF PAR.IGTS_3rd_Party_Price_Type = 'M';

 //?Commodity Market Price
 CASE;

 // IF PAR.IGTS Commodity Market is Jacobsen Letter Chicago
 IF PAR.IGTS_Commodity_Market = 'JLC';

 // PAR.Use Calcd Avg price Y/N = CND.Jacobsen Letter Chicago
 PAR.Use_Calcd_Avg_price_Y_N = 'J';

 EXECUTE FUNCTION(RTV Next Saturday      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1674395;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(LCL.Market_Price_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  // PAR.Scheduled Ship Date = DB1.Post to G/L Date
  PAR.Scheduled_Ship_Date = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 //?W97198 DN 04/11/22-If Co 440, Use 'JLX' to Get Market Price for STF.
 CASE;

 // IF PAR.Company Number is Seaboard Triumph Foods
 IF PAR.Company_Number = 440;

 // LCL.IGTS Commodity Market = CND.Jacobsen Lttr Chicago STF
 LCL.IGTS_Commodity_Market = 'JLX';

 //?W97198 DN 04/11/22-If Co 440, Use 'JLX' to Get Market Price for STF.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.IGTS Commodity Market = CND.Jacobsen Letter Chicago
 LCL.IGTS_Commodity_Market = 'JLC';

 ENDIF;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(LCL.IGTS_Commodity_Market);
 PARAMETER(PAR.IGTS_Commodity_Group);
 PARAMETER(LCL.Market_Price_Date);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(LCL.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 //?Cannot price if saturday market price not found
 CASE;

 // IF LCL.Market Price Date NE LCL.USR Date Priced
 IF LCL.Market_Price_Date <> LCL.USR_Date_Priced;

 // PAR.Use Calcd Avg price Y/N = CND.No
 PAR.Use_Calcd_Avg_price_Y_N = 'N';

 // PAR.Commodity Market Price = CND.Not Entered
 PAR.Commodity_Market_Price = *ZERO;

 ENDIF;

 //?Commodity Market Price
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Use Calcd Avg price Y/N = CND.Yes
 PAR.Use_Calcd_Avg_price_Y_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Calculate CUR.Transfer Price USR for market price
CASE;

// IF LCL.Weight Billed is Greater than zero
IF LCL.Weight_Billed > *ZERO;

// AND LCL.Use Calcd Avg price Y/N is Yes
AND ( LCL.Use_Calcd_Avg_price_Y_N = 'Y';

// OR LCL.Use Calcd Avg price Y/N is Jacobsen Letter Chicago
OR LCL.Use_Calcd_Avg_price_Y_N = 'J' );

//?Use Calc'd Avg Price or Jacobsen Letter Charge   4/23/08
CASE;

// IF LCL.Use Calcd Avg price Y/N is Yes
IF LCL.Use_Calcd_Avg_price_Y_N = 'Y';

// LCL.Transfer Price USR = LCL.FOB Gross Amount / LCL.Weight Billed *Rounded
LCL.Transfer_Price_USR = LCL.FOB_Gross_Amount / LCL.Weight_Billed 'H';

//?Use Calc'd Avg Price or Jacobsen Letter Charge   4/23/08
ENDIF;

ENDIF;

// PAR.Market Price = LCL.Transfer Price USR
PAR.Market_Price = LCL.Transfer_Price_USR;

