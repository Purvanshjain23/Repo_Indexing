// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDX1XFR
// ?Date: 14.08.2025 Time: 03:36:30
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?*** Build Claim Download File ***
EXECUTE FUNCTION(CRT DNLD Open Claims   RT) TYPE(RTVOBJ) FILE(PDMKCPP)          AC1573852;
PARAMETER(PAR.Claim_Item_Company_Number);
PARAMETER(PAR.Claim_Item_Code);
PARAMETER(PAR.Reason_Code);
PARAMETER(PAR.Salesperson_to_Rvw_Claim);
PARAMETER(PAR.Claim_Ship_to_Customer);
PARAMETER(PAR.Claim_Status);
PARAMETER(PAR.Claim_Start_Number);
PARAMETER(PAR.Claim_End_Number);
PARAMETER(PAR.Claim_Start_Entry_Date);
PARAMETER(PAR.Claim_End_Entry_Date);
PARAMETER(PAR.Memo_Posting_Str_Date_Usr);
PARAMETER(PAR.Memo_Posting_End_Date_Usr);
{
 //?USER: Initialize routine

 //?***** Change Log
 //?** 01/30/2006 LJB
 //?** If company number is not zeros, select only records with
 //?** matching company number.
 //?*****
 //?USER: Process Data record

 // PAR.*Record selected = CND.*YES
 PAR.*Record_selected = 'Y';

 //?Perform Selections.
 DO;

 //?Select by Company Number                 1/30/06 LJB
 DO;

 CASE;

 // IF PAR.Claim Item Company Number is not equal to zero
 IF PAR.Claim_Item_Company_Number <> *ZERO;

 CASE;

 // IF DB1.Claim Company Number NE PAR.Claim Item Company Number
 IF DB1.Claim_Company_Number <> PAR.Claim_Item_Company_Number;

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDDO;

 //?Select by Claim Number.
 DO;

 CASE;

 // IF PAR.Claim Start Number is Not Zero
 IF PAR.Claim_Start_Number <> *ZERO;

 CASE;

 // IF DB1.Claim Number LT PAR.Claim Start Number
 IF DB1.Claim_Number < PAR.Claim_Start_Number;

 // OR DB1.Claim Number GT PAR.Claim End Number
 OR DB1.Claim_Number > PAR.Claim_End_Number;

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDDO;

 //?Select by Entry Date.
 DO;

 CASE;

 // IF PAR.Claim Start Entry Date is Entered
 IF PAR.Claim_Start_Entry_Date <> *ZERO;

 CASE;

 // IF DB1.Claim Entry Date LT PAR.Claim Start Entry Date
 IF DB1.Claim_Entry_Date < PAR.Claim_Start_Entry_Date;

 // OR DB1.Claim Entry Date GT PAR.Claim End Entry Date
 OR DB1.Claim_Entry_Date > PAR.Claim_End_Entry_Date;

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDDO;

 //?Select by Customer.
 DO;

 CASE;

 // IF PAR.Claim Ship to Customer is not equal to zero
 IF PAR.Claim_Ship_to_Customer <> *ZERO;

 CASE;

 // IF DB1.Claim Ship to Customer NE PAR.Claim Ship to Customer
 IF DB1.Claim_Ship_to_Customer <> PAR.Claim_Ship_to_Customer;

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDDO;

 //?Select by Claim Status.
 DO;

 CASE;

 // IF DB1.Claim Status is Open
 IF DB1.Claim_Status = 'S'/'R'/'A'/'P'/'M';

 //?*** Open Claim ***
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 ENDIF;

 ENDDO;

 //?Select by Salesperson.
 DO;

 CASE;

 // IF PAR.Salesperson to Rvw Claim is entered
 IF PAR.Salesperson_to_Rvw_Claim <> *BLANK;

 CASE;

 // IF DB1.Salesperson to Rvw Claim NE PAR.Salesperson to Rvw Claim
 IF DB1.Salesperson_to_Rvw_Claim <> PAR.Salesperson_to_Rvw_Claim;

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDDO;

 ENDDO;

 CASE;

 // IF PAR.*Record selected is *YES
 IF PAR.*Record_selected = 'Y';

 //?Build file based on Claim Products.        (CM/DM)
 DO;

 //?Clear Arrays.
 DO;

 EXECUTE FUNCTION(CLR Reason Code Array DL) TYPE(DLTOBJ) ARRAY(Claim_Unique_ReasoAC1561322;
 EXECUTE FUNCTION(CLR Dept Code Arrays DL) TYPE(DLTOBJ) ARRAY(Claim_Unique_Dept_CAC1561323;
 ENDDO;

 EXECUTE FUNCTION(CRT DNLD Claims by Cst RT) TYPE(RTVOBJ) FILE(PDMOCPP)          AC1561311;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(PAR.Claim_Item_Code);
 PARAMETER(PAR.Reason_Code);
 PARAMETER(PAR.*Record_selected);
 PARAMETER(PAR.Claim_Reason_Code_first);
 {
  //?USER: Initialize routine

  // PAR.First Time Flag = CND.Yes
  PAR.First_Time_Flag = 'Y';

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  // PAR.Claim Reason Code (first) = CON.*BLANK
  PAR.Claim_Reason_Code_first = *BLANK;

  // PAR.Sequence Number = CON.*ZERO
  PAR.Sequence_Number = *ZERO;

  //?USER: Process Data record

  // PAR.*Record selected = CND.*YES
  PAR.*Record_selected = 'Y';

  //?Perform Selections.
  DO;

  //?Select by Item Code.
  DO;

  CASE;

  // IF PAR.Claim Item Code is Entered
  IF PAR.Claim_Item_Code <> *ZERO;

  CASE;

  // IF DB1.Claim Item Code NE PAR.Claim Item Code
  IF DB1.Claim_Item_Code <> PAR.Claim_Item_Code;

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDDO;

  //?Select by Reason Code.
  DO;

  CASE;

  // IF PAR.Reason Code is Entered
  IF PAR.Reason_Code <> *BLANK;

  CASE;

  // IF DB1.Reason Code NE PAR.Reason Code
  IF DB1.Reason_Code <> PAR.Reason_Code;

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDDO;

  ENDDO;

  CASE;

  // IF PAR.*Record selected is *YES
  IF PAR.*Record_selected = 'Y';

  // PAR.Save *Record Selected USR = CND.*YES
  PAR.Save_Record_Selected_USR = 'Y';

  //?Save First Reason Code.
  DO;

  CASE;

  // IF PAR.First Time Flag is Yes
  IF PAR.First_Time_Flag = 'Y';

  // PAR.First Time Flag = CND.NO
  PAR.First_Time_Flag = 'N';

  // PAR.Claim Reason Code (first) = DB1.Reason Code
  PAR.Claim_Reason_Code_first = DB1.Reason_Code;

  ENDIF;

  ENDDO;

  // PAR.Sequence Number = PAR.Sequence Number + CON.1
  PAR.Sequence_Number = PAR.Sequence_Number + 1;

  EXECUTE FUNCTION(RTV/CRT Reas Cde Array RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_ReasAC1561630;
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(DB1.Reason_Code);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.Reason Code EQ PAR.Reason Code
   IF DB1.Reason_Code = PAR.Reason_Code;

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   ENDIF;

   //?USER: Exit processing

   CASE;

   // IF PAR.Record Found USR is Record Not Found
   IF PAR.Record_Found_USR = 'N';

   EXECUTE FUNCTION(CRT Reason Code Array CR) TYPE(CRTOBJ) ARRAY(Claim_Unique_ReasoAC1561324;
   PARAMETER(PAR.Sequence_Number);
   PARAMETER(PAR.Reason_Code);
   ENDIF;

  }

  EXECUTE FUNCTION(RTV/CRT Dept Cde Array RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_DeptAC1561629;
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(DB1.Claim_Department_Code);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.Claim Department Code EQ PAR.Claim Department Code
   IF DB1.Claim_Department_Code = PAR.Claim_Department_Code;

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   ENDIF;

   //?USER: Exit processing

   CASE;

   // IF PAR.Record Found USR is Record Not Found
   IF PAR.Record_Found_USR = 'N';

   EXECUTE FUNCTION(CRT Dept Code Array CR) TYPE(CRTOBJ) ARRAY(Claim_Unique_Dept_CoAC1561325;
   PARAMETER(PAR.Sequence_Number);
   PARAMETER(PAR.Claim_Department_Code);
   ENDIF;

  }

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.Save *Record Selected USR is *YES
  IF PAR.Save_Record_Selected_USR = 'Y';

  // PAR.*Record selected = CND.*YES
  PAR.*Record_selected = 'Y';

  ENDIF;

 }

 CASE;

 // IF PAR.*Record selected is *YES
 IF PAR.*Record_selected = 'Y';

 //?Build & Create Download Record.
 DO;

 // PAR.Claim Number (unpacked) = DB1.Claim Number
 PAR.Claim_Number_unpacked = DB1.Claim_Number;

 // PAR.Claim Product/Resale Prod = CND.Product
 PAR.Claim_Product_Resale_Prod = 'P';

 EXECUTE FUNCTION(RTV Claim Reason Codes RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_ReasAC1561330;
 PARAMETER(PAR.Claim_Reason_Codes);
 {
  //?USER: Initialize routine

  // PAR.Claim Reason Code(s) = CON.*BLANK
  PAR.Claim_Reason_Codes = *BLANK;

  // PAR.Count USR = CND.One
  PAR.Count_USR = 1;

  //?USER: Process Data record

  CASE;

  // IF PAR.Count USR is LE 4
  IF PAR.Count_USR <= 4;

  CASE;

  // IF PAR.Claim Reason Code(s) is *Blank
  IF PAR.Claim_Reason_Codes = *BLANK;

  // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),DB1.Reason Code,CON.*
  PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + DB1.Reason_Code (*ZERO);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),CON.,,CON.*ZERO)
  PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + ',' (*ZERO);

  // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),DB1.Reason Code,CON.*
  PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + DB1.Reason_Code (*ZERO);

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CND.One
  PAR.Count_USR = PAR.Count_USR + 1;

 }

 // PAR.Claim Short Customer Name = DB1.Claim Customer Name
 PAR.Claim_Short_Customer_Name = DB1.Claim_Customer_Name;

 // PAR.Claim Type = DB1.Claim Type
 PAR.Claim_Type = DB1.Claim_Type;

 //?Get Order Info.
 DO;

 EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1524891;
 PARAMETER(DB1.Claim_Company_Number);
 PARAMETER(DB1.Claim_Order_Number);
 PARAMETER(WRK.Unused_Parm_CD7_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Date_USR);
 PARAMETER(PAR.Claim_Invoice_unpacked);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Date_USR);
 PARAMETER(PAR.Claim_Load_ID_unpacked);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1525060;
 PARAMETER(DB1.Claim_Company_Number);
 PARAMETER(DB1.Claim_Order_Number);
 PARAMETER(WRK.Unused_Parm_CD7_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Date_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(PAR.Claim_Load_ID_unpacked);
 PARAMETER(PAR.Claim_Invoice_unpacked);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Date_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 ENDIF;

 ENDDO;

 // PAR.Claim Order # (unpacked) = DB1.Claim Order Number
 PAR.Claim_Order_#_unpacked = DB1.Claim_Order_Number;

 //?Get Sales Person Last Name.
 DO;

 EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
 PARAMETER(DB1.Salesperson_to_Rvw_Claim);
 PARAMETER(LCL.Salesperson_Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program CLC Find Last Name     UP.
 CALL PROGRAM(CLC Find Last Name     UP) ('POAGUPC');
 PARAMETER(LCL.Salesperson_Name);
 PARAMETER(PAR.Claim_Short_Salesperson);

 ENDDO;

 //?Load Short Explanation.
 DO;

 CASE;

 // IF DB1.Claim Status is Denied
 IF DB1.Claim_Status = 'D';

 // OR DB1.Claim Status is Voided
 OR DB1.Claim_Status = 'V';

 // PAR.Claim Short Explanation = DB1.Claim Resolution Explan.
 PAR.Claim_Short_Explanation = DB1.Claim_Resolution_Explan;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV First Expln Line RT) TYPE(RTVOBJ) FILE(PDMNCPP)            AC1561600;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(PAR.Claim_Short_Explanation);
 {
  //?USER: Initialize routine

  // PAR.Claim Short Explanation = CON.*BLANK
  PAR.Claim_Short_Explanation = *BLANK;

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  //?USER: Process Data record

  CASE;

  // IF PAR.Count USR is LE 2
  IF PAR.Count_USR <= 2;

  // PAR.Claim Short Explanation = CONCAT(PAR.Claim Short Explanation,DB1.Claim Expla
  PAR.Claim_Short_Explanation = PAR.Claim_Short_Explanation + DB1.Claim_Explanation_Text (1);

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  QUIT;

  ENDIF;

 }

 ENDIF;

 ENDDO;

 //?Load Claim Amount & Set Sign.
 DO;

 // PAR.Claim Amount (unpacked) = DB1.Claim Amount
 PAR.Claim_Amount_unpacked = DB1.Claim_Amount;

 CASE;

 // IF PAR.Claim Type is Debit Memo
 IF ( PAR.Claim_Type = 'DM';

 // AND PAR.Claim Amount (unpacked) is Greater than Zero
 AND PAR.Claim_Amount_unpacked > *ZERO );

 // OR PAR.Claim Type is Credit Memo
 OR ( PAR.Claim_Type = 'CM';

 // AND PAR.Claim Amount (unpacked) is Less than Zero
 AND PAR.Claim_Amount_unpacked < *ZERO );

 // PAR.Claim Amount (unpacked) = PAR.Claim Amount (unpacked) * CON.-1 *
 PAR.Claim_Amount_unpacked = PAR.Claim_Amount_unpacked * -1;

 ENDIF;

 ENDDO;

 //?Load Claim Dates.
 DO;

 EXECUTE FUNCTION(Convert DTE to mm/dd/yyyy) TYPE(EXCINTFUN)                     AC1561339;
 PARAMETER(DB1.Claim_Entry_Date);
 PARAMETER(PAR.Claim_Entry_Date_lotus);
 {
  //?Execute internal function

  //?Break apart date.
  // PAR.YYYY numeric USR = PAR.@Date - ATR *YEAR
  PAR.YYYY_numeric_USR = DATEDTLS(PAR.@Date_ATR 'YR' 1111111 'NONE' 'N' 1);

  // PAR.MM   numeric USR = PAR.@Date - ATR *MONTH
  PAR.MM_numeric_USR = DATEDTLS(PAR.@Date_ATR 'MO' 1111111 'NONE' 'N' 1);

  // PAR.DD   numeric USR = PAR.@Date - ATR *DAY OF MONTH
  PAR.DD_numeric_USR = DATEDTLS(PAR.@Date_ATR 'DM' 1111111 'NONE' 'N' 1);

  //?Convert to alpha.
  // PAR.YYYY alpha   USR = CVTVAR(PAR.YYYY numeric USR)
  PAR.YYYY_alpha_USR = CVTVAR(PAR.YYYY_numeric_USR);

  // PAR.MM   alpha   USR = CVTVAR(PAR.MM   numeric USR)
  PAR.MM_alpha_USR = CVTVAR(PAR.MM_numeric_USR);

  // PAR.DD   alpha   USR = CVTVAR(PAR.DD   numeric USR)
  PAR.DD_alpha_USR = CVTVAR(PAR.DD_numeric_USR);

  //?Put back together.
  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.MM   alpha   USR,CON./,CON.*ZERO)
  PAR.Date_mm_dd_yyyy_USR = PAR.MM_alpha_USR + '/' (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.DD   alpha   USR,CO
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.DD_alpha_USR (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,CON./,CON.*ZERO)
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + '/' (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.YYYY alpha   USR,CO
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.YYYY_alpha_USR (*ZERO);

 }

 CASE;

 // IF DB1.Approved/Denied Date is not entered
 IF DB1.Approved_Denied_Date = *ZERO;

 // PAR.Claim Act Shp Dte (lotus) = CON.*BLANK
 PAR.Claim_Act_Shp_Dte_lotus = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Convert DTE to mm/dd/yyyy) TYPE(EXCINTFUN)                     AC1561339;
 PARAMETER(DB1.Approved_Denied_Date);
 PARAMETER(PAR.Claim_Act_Shp_Dte_lotus);
 {
  //?Execute internal function

  //?Break apart date.
  // PAR.YYYY numeric USR = PAR.@Date - ATR *YEAR
  PAR.YYYY_numeric_USR = DATEDTLS(PAR.@Date_ATR 'YR' 1111111 'NONE' 'N' 1);

  // PAR.MM   numeric USR = PAR.@Date - ATR *MONTH
  PAR.MM_numeric_USR = DATEDTLS(PAR.@Date_ATR 'MO' 1111111 'NONE' 'N' 1);

  // PAR.DD   numeric USR = PAR.@Date - ATR *DAY OF MONTH
  PAR.DD_numeric_USR = DATEDTLS(PAR.@Date_ATR 'DM' 1111111 'NONE' 'N' 1);

  //?Convert to alpha.
  // PAR.YYYY alpha   USR = CVTVAR(PAR.YYYY numeric USR)
  PAR.YYYY_alpha_USR = CVTVAR(PAR.YYYY_numeric_USR);

  // PAR.MM   alpha   USR = CVTVAR(PAR.MM   numeric USR)
  PAR.MM_alpha_USR = CVTVAR(PAR.MM_numeric_USR);

  // PAR.DD   alpha   USR = CVTVAR(PAR.DD   numeric USR)
  PAR.DD_alpha_USR = CVTVAR(PAR.DD_numeric_USR);

  //?Put back together.
  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.MM   alpha   USR,CON./,CON.*ZERO)
  PAR.Date_mm_dd_yyyy_USR = PAR.MM_alpha_USR + '/' (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.DD   alpha   USR,CO
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.DD_alpha_USR (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,CON./,CON.*ZERO)
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + '/' (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.YYYY alpha   USR,CO
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.YYYY_alpha_USR (*ZERO);

 }

 ENDIF;

 ENDDO;

 //?Determine if claim is over 10 days old.
 DO;

 // PAR.Number of Days = DB1.Sales Approved Date - DB1.Claim Entry Date *DAYS
 PAR.Number_of_Days = DURATION(DB1.Sales_Approved_Date DB1.Claim_Entry_Date 'DY' 1111111
 'NONE' 'N' 1);

 CASE;

 // IF PAR.Number of Days is > 10
 IF PAR.Number_of_Days > 10;

 // PAR.Claim Over 10 Days = CND.Yes
 PAR.Claim_Over_10_Days = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Claim Over 10 Days = CND.No
 PAR.Claim_Over_10_Days = 'N';

 ENDIF;

 ENDDO;

 //?Load Claim Status.
 DO;

 CASE;

 // IF DB1.Claim Status is Pending
 IF DB1.Claim_Status = 'P';

 // OR DB1.Claim Status is Sls Approved
 OR DB1.Claim_Status = 'S';

 // OR DB1.Claim Status is Reprocess
 OR DB1.Claim_Status = 'R';

 // PAR.Claim Called in by Desc = CON.Sales
 PAR.Claim_Called_in_by_Desc = 'Sales';

 // IF DB1.Claim Status is Approved
 IF DB1.Claim_Status = 'A';

 // OR DB1.Claim Status is Memo Processing
 OR DB1.Claim_Status = 'M';

 // PAR.Claim Called in by Desc = CON.Plant
 PAR.Claim_Called_in_by_Desc = 'Plant';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Claim Called in by Desc = CON.*BLANK
 PAR.Claim_Called_in_by_Desc = *BLANK;

 ENDIF;

 ENDDO;

 //?*-------------------------------------------------------*
 //?* 10/26/01 PKD T960 Added Resale Amount and Net Loss to Download
 EXECUTE FUNCTION(RTV Calc Resale Total  RT) TYPE(RTVOBJ) FILE(PDMPCPP)          AC1535548;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(LCL.Resale_Total_Item_Amount);
 {
  //?USER: Initialize routine

  // PAR.Resale Total Item Amount = CON.*ZERO
  PAR.Resale_Total_Item_Amount = *ZERO;

  //?USER: Process Data record

  // PAR.Resale Total Item Amount = PAR.Resale Total Item Amount + DB1.Resale Item Amount
  PAR.Resale_Total_Item_Amount = PAR.Resale_Total_Item_Amount + DB1.Resale_Item_Amount;

 }

 // PAR.Claim Resale Amt UNPKD = LCL.Resale Total Item Amount
 PAR.Claim_Resale_Amt_UNPKD = LCL.Resale_Total_Item_Amount;

 // PAR.Claim Net Loss Amt UNPKD = DB1.Claim Net Loss
 PAR.Claim_Net_Loss_Amt_UNPKD = DB1.Claim_Net_Loss;

 //?*-------------------------------------------------------*
 EXECUTE FUNCTION(CRT A/R Claim Download CR) TYPE(CRTOBJ) FILE(PDNACPP)          AC1561276;
 PARAMETER(PAR.Claim_Number_unpacked);
 PARAMETER(PAR.Claim_Product_Resale_Prod);
 PARAMETER(PAR.Claim_Short_Customer_Name);
 PARAMETER(PAR.Claim_Reason_Codes);
 PARAMETER(PAR.Claim_Type);
 PARAMETER(PAR.Claim_Load_ID_unpacked);
 PARAMETER(PAR.Claim_Invoice_unpacked);
 PARAMETER(PAR.Claim_Act_Shp_Dte_lotus);
 PARAMETER(DB1.Claim_Company_Number);
 PARAMETER(PAR.Claim_Order_#_unpacked);
 PARAMETER(PAR.Claim_Short_Salesperson);
 PARAMETER(PAR.Claim_Entry_Date_lotus);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Claim_Short_Explanation);
 PARAMETER(PAR.Claim_Amount_unpacked);
 PARAMETER(PAR.Claim_Resale_Amt_UNPKD);
 PARAMETER(PAR.Claim_Net_Loss_Amt_UNPKD);
 PARAMETER(PAR.Claim_Over_10_Days);
 PARAMETER(PAR.Claim_Reason_Code_first);
 PARAMETER(DB1.Claim_Status);
 PARAMETER(PAR.Claim_Called_in_by_Desc);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(DB1.Claim_Order_#_unpacked);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(NLL.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

 }

 ENDDO;

 ENDIF;

 ENDDO;

 //?Build file based on Claim Resale Products. (DM)
 DO;

 //?Clear Arrays.
 DO;

 EXECUTE FUNCTION(CLR Reason Code Array DL) TYPE(DLTOBJ) ARRAY(Claim_Unique_ReasoAC1561322;
 EXECUTE FUNCTION(CLR Dept Code Arrays DL) TYPE(DLTOBJ) ARRAY(Claim_Unique_Dept_CAC1561323;
 ENDDO;

 //?Load Claim Status.
 DO;

 CASE;

 // IF DB1.Claim Status is Pending
 IF DB1.Claim_Status = 'P';

 // OR DB1.Claim Status is Sls Approved
 OR DB1.Claim_Status = 'S';

 // OR DB1.Claim Status is Reprocess
 OR DB1.Claim_Status = 'R';

 // PAR.Claim Called in by Desc = CON.Sales
 PAR.Claim_Called_in_by_Desc = 'Sales';

 // IF DB1.Claim Status is Approved
 IF DB1.Claim_Status = 'A';

 // OR DB1.Claim Status is Memo Processing
 OR DB1.Claim_Status = 'M';

 // PAR.Claim Called in by Desc = CON.Plant
 PAR.Claim_Called_in_by_Desc = 'Plant';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Claim Called in by Desc = CON.*BLANK
 PAR.Claim_Called_in_by_Desc = *BLANK;

 ENDIF;

 ENDDO;

 EXECUTE FUNCTION(CRT DNLD Claims by Cst RT) TYPE(RTVOBJ) FILE(PDMPCPP)          AC1561624;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(PAR.Claim_Item_Code);
 PARAMETER(PAR.Reason_Code);
 PARAMETER(DB1.Salesperson_to_Rvw_Claim);
 PARAMETER(DB1.Claim_Company_Number);
 PARAMETER(DB1.Claim_Order_Number);
 PARAMETER(DB1.Claim_Status);
 PARAMETER(PAR.Claim_Called_in_by_Desc);
 PARAMETER(DB1.Claim_Entry_Date);
 PARAMETER(DB1.Claim_Resolution_Explan);
 {
  //?USER: Initialize routine

  // PAR.First Time Flag = CND.Yes
  PAR.First_Time_Flag = 'Y';

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  // PAR.Claim Reason Code (first) = CON.*BLANK
  PAR.Claim_Reason_Code_first = *BLANK;

  // PAR.Resale Item Amount = CND.equal to zero
  PAR.Resale_Item_Amount = *ZERO;

  // PAR.Sequence Number = CON.*ZERO
  PAR.Sequence_Number = *ZERO;

  // LCL.Save *Record Selected USR = CND.*NO
  LCL.Save_Record_Selected_USR = 'N';

  //?04/26/00 PKD PK0212: Added the following initialization.
  //?----- Initialize Download Record fields with Claim information. -----
  // LCL.Claim Number (unpacked) = PAR.Claim Number
  LCL.Claim_Number_unpacked = PAR.Claim_Number;

  // LCL.Claim Product/Resale Prod = CND.Resale Product
  LCL.Claim_Product_Resale_Prod = 'R';

  // LCL.Claim Type = CND.Debit Memo
  LCL.Claim_Type = 'DM';

  //?Get Order Info.
  DO;

  EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1524891;
  PARAMETER(PAR.Claim_Company_Number);
  PARAMETER(PAR.Claim_Order_Number);
  PARAMETER(WRK.Unused_Parm_CD7_USR);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  PARAMETER(WRK.Unused_Parm_Date_USR);
  PARAMETER(LCL.Claim_Invoice_unpacked);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.Claim_Load_ID_unpacked);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(PAR.Salesperson_to_Rvw_Claim);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1525060;
  PARAMETER(PAR.Claim_Company_Number);
  PARAMETER(PAR.Claim_Order_Number);
  PARAMETER(WRK.Unused_Parm_CD7_USR);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  PARAMETER(LCL.Claim_Load_ID_unpacked);
  PARAMETER(LCL.Claim_Invoice_unpacked);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  PARAMETER(WRK.Unused_Parm_Date_USR);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  PARAMETER(WRK.Unused_Parm_Text_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Warehouse_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
    CASE;

    // IF DB1.Detail Line Status is Cancelled
    IF DB1.Detail_Line_Status = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(PAR.Salesperson_to_Rvw_Claim);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  ENDIF;

  EXECUTE FUNCTION(Convert DTE to mm/dd/yyyy) TYPE(EXCINTFUN)                     AC1561339;
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.Claim_Act_Shp_Dte_lotus);
  {
   //?Execute internal function

   //?Break apart date.
   // PAR.YYYY numeric USR = PAR.@Date - ATR *YEAR
   PAR.YYYY_numeric_USR = DATEDTLS(PAR.@Date_ATR 'YR' 1111111 'NONE' 'N' 1);

   // PAR.MM   numeric USR = PAR.@Date - ATR *MONTH
   PAR.MM_numeric_USR = DATEDTLS(PAR.@Date_ATR 'MO' 1111111 'NONE' 'N' 1);

   // PAR.DD   numeric USR = PAR.@Date - ATR *DAY OF MONTH
   PAR.DD_numeric_USR = DATEDTLS(PAR.@Date_ATR 'DM' 1111111 'NONE' 'N' 1);

   //?Convert to alpha.
   // PAR.YYYY alpha   USR = CVTVAR(PAR.YYYY numeric USR)
   PAR.YYYY_alpha_USR = CVTVAR(PAR.YYYY_numeric_USR);

   // PAR.MM   alpha   USR = CVTVAR(PAR.MM   numeric USR)
   PAR.MM_alpha_USR = CVTVAR(PAR.MM_numeric_USR);

   // PAR.DD   alpha   USR = CVTVAR(PAR.DD   numeric USR)
   PAR.DD_alpha_USR = CVTVAR(PAR.DD_numeric_USR);

   //?Put back together.
   // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.MM   alpha   USR,CON./,CON.*ZERO)
   PAR.Date_mm_dd_yyyy_USR = PAR.MM_alpha_USR + '/' (*ZERO);

   // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.DD   alpha   USR,CO
   PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.DD_alpha_USR (*ZERO);

   // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,CON./,CON.*ZERO)
   PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + '/' (*ZERO);

   // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.YYYY alpha   USR,CO
   PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.YYYY_alpha_USR (*ZERO);

  }

  ENDDO;

  // LCL.Claim Order # (unpacked) = PAR.Claim Order Number
  LCL.Claim_Order_#_unpacked = PAR.Claim_Order_Number;

  EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  PARAMETER(LCL.Salesperson_Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program CLC Find Last Name     UP.
  CALL PROGRAM(CLC Find Last Name     UP) ('POAGUPC');
  PARAMETER(LCL.Salesperson_Name);
  PARAMETER(LCL.Claim_Short_Salesperson);

  //?Load Short Explanation
  CASE;

  // IF PAR.Claim Status is Denied
  IF PAR.Claim_Status = 'D';

  // OR PAR.Claim Status is Voided
  OR PAR.Claim_Status = 'V';

  // LCL.Claim Short Explanation = PAR.Claim Resolution Explan.
  LCL.Claim_Short_Explanation = PAR.Claim_Resolution_Explan;

  //?Load Short Explanation
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV First Expln Line RT) TYPE(RTVOBJ) FILE(PDMNCPP)            AC1561600;
  PARAMETER(PAR.Claim_Number);
  PARAMETER(LCL.Claim_Short_Explanation);
  {
   //?USER: Initialize routine

   // PAR.Claim Short Explanation = CON.*BLANK
   PAR.Claim_Short_Explanation = *BLANK;

   // PAR.Count USR = CON.1
   PAR.Count_USR = 1;

   //?USER: Process Data record

   CASE;

   // IF PAR.Count USR is LE 2
   IF PAR.Count_USR <= 2;

   // PAR.Claim Short Explanation = CONCAT(PAR.Claim Short Explanation,DB1.Claim Expla
   PAR.Claim_Short_Explanation = PAR.Claim_Short_Explanation + DB1.Claim_Explanation_Text (1);

   // PAR.Count USR = PAR.Count USR + CON.1
   PAR.Count_USR = PAR.Count_USR + 1;

   // IF *OTHERWISE
   IF *OTHERWISE;

   QUIT;

   ENDIF;

  }

  ENDIF;

  EXECUTE FUNCTION(Convert DTE to mm/dd/yyyy) TYPE(EXCINTFUN)                     AC1561339;
  PARAMETER(PAR.Claim_Entry_Date);
  PARAMETER(LCL.Claim_Entry_Date_lotus);
  {
   //?Execute internal function

   //?Break apart date.
   // PAR.YYYY numeric USR = PAR.@Date - ATR *YEAR
   PAR.YYYY_numeric_USR = DATEDTLS(PAR.@Date_ATR 'YR' 1111111 'NONE' 'N' 1);

   // PAR.MM   numeric USR = PAR.@Date - ATR *MONTH
   PAR.MM_numeric_USR = DATEDTLS(PAR.@Date_ATR 'MO' 1111111 'NONE' 'N' 1);

   // PAR.DD   numeric USR = PAR.@Date - ATR *DAY OF MONTH
   PAR.DD_numeric_USR = DATEDTLS(PAR.@Date_ATR 'DM' 1111111 'NONE' 'N' 1);

   //?Convert to alpha.
   // PAR.YYYY alpha   USR = CVTVAR(PAR.YYYY numeric USR)
   PAR.YYYY_alpha_USR = CVTVAR(PAR.YYYY_numeric_USR);

   // PAR.MM   alpha   USR = CVTVAR(PAR.MM   numeric USR)
   PAR.MM_alpha_USR = CVTVAR(PAR.MM_numeric_USR);

   // PAR.DD   alpha   USR = CVTVAR(PAR.DD   numeric USR)
   PAR.DD_alpha_USR = CVTVAR(PAR.DD_numeric_USR);

   //?Put back together.
   // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.MM   alpha   USR,CON./,CON.*ZERO)
   PAR.Date_mm_dd_yyyy_USR = PAR.MM_alpha_USR + '/' (*ZERO);

   // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.DD   alpha   USR,CO
   PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.DD_alpha_USR (*ZERO);

   // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,CON./,CON.*ZERO)
   PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + '/' (*ZERO);

   // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.YYYY alpha   USR,CO
   PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.YYYY_alpha_USR (*ZERO);

  }

  // LCL.Claim Called in by Desc = PAR.Claim Called in by Desc
  LCL.Claim_Called_in_by_Desc = PAR.Claim_Called_in_by_Desc;

  //?USER: Process Data record

  // PAR.*Record selected = CND.*YES
  PAR.*Record_selected = 'Y';

  //?SEL:  Item Code
  CASE;

  // IF PAR.Claim Item Code is Entered
  IF PAR.Claim_Item_Code <> *ZERO;

  CASE;

  // IF DB1.Resale Item Code NE PAR.Claim Item Code
  IF DB1.Resale_Item_Code <> PAR.Claim_Item_Code;

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  //?SEL:  Reason Code
  CASE;

  // IF PAR.Reason Code is Entered
  IF PAR.Reason_Code <> *BLANK;

  CASE;

  // IF DB1.Reason Code NE PAR.Reason Code
  IF DB1.Reason_Code <> PAR.Reason_Code;

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  //?Process Selected Record
  CASE;

  // IF PAR.*Record selected is *YES
  IF PAR.*Record_selected = 'Y';

  // LCL.Save *Record Selected USR = CND.*YES
  LCL.Save_Record_Selected_USR = 'Y';

  //?First Time Processing
  CASE;

  // IF PAR.First Time Flag is Yes
  IF PAR.First_Time_Flag = 'Y';

  // PAR.First Time Flag = CND.NO
  PAR.First_Time_Flag = 'N';

  // LCL.Ship To Customer = DB1.Ship To Customer
  LCL.Ship_To_Customer = DB1.Ship_To_Customer;

  // LCL.Claim Reason Code (first) = DB1.Reason Code
  LCL.Claim_Reason_Code_first = DB1.Reason_Code;

  // LCL.Claim Status = PAR.Claim Status
  LCL.Claim_Status = PAR.Claim_Status;

  //?----- Retrieve the Customer Name. -----
  EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Claim_Short_Customer_Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?04/26/00 PKD PK0212: Added the Build & Create.
  //?Build & Create Download Record when Ship To Customer changes.
  CASE;

  // IF DB1.Ship To Customer NE LCL.Ship To Customer
  IF DB1.Ship_To_Customer <> LCL.Ship_To_Customer;

  //?----- Create Download Record. -----
  EXECUTE FUNCTION(RTV Claim Reason Codes RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_ReasAC1561330;
  PARAMETER(LCL.Claim_Reason_Codes);
  {
   //?USER: Initialize routine

   // PAR.Claim Reason Code(s) = CON.*BLANK
   PAR.Claim_Reason_Codes = *BLANK;

   // PAR.Count USR = CND.One
   PAR.Count_USR = 1;

   //?USER: Process Data record

   CASE;

   // IF PAR.Count USR is LE 4
   IF PAR.Count_USR <= 4;

   CASE;

   // IF PAR.Claim Reason Code(s) is *Blank
   IF PAR.Claim_Reason_Codes = *BLANK;

   // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),DB1.Reason Code,CON.*
   PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + DB1.Reason_Code (*ZERO);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),CON.,,CON.*ZERO)
   PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + ',' (*ZERO);

   // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),DB1.Reason Code,CON.*
   PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + DB1.Reason_Code (*ZERO);

   ENDIF;

   ENDIF;

   // PAR.Count USR = PAR.Count USR + CND.One
   PAR.Count_USR = PAR.Count_USR + 1;

  }

  EXECUTE FUNCTION(RTV Claim Dept Codes RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_Dept_CAC1561332;
  PARAMETER(LCL.Claim_Department_Desc);
  {
   //?USER: Initialize routine

   // PAR.Claim Department Desc = CND.*Blank
   PAR.Claim_Department_Desc = *BLANK;

   // PAR.Count USR = CND.One
   PAR.Count_USR = 1;

   //?USER: Process Data record

   CASE;

   // IF PAR.Count USR is LE 4
   IF PAR.Count_USR <= 4;

   //?051705 slm use the department description as is do not
   //?           set condition for the description
   //?           this process was using the responsibility department
   //?           now we use the claim department
   EXECUTE FUNCTION(Rtv Claim Department   RT) TYPE(RTVOBJ) FILE(PPATREP)          AC1721713;
   PARAMETER(DB1.Claim_Department_Code);
   PARAMETER(PAR.Department_Description);
   PARAMETER(NLL.Claim_Responsibility);
   PARAMETER(NLL.Record_Status);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Department Description is equal to blank
   IF PAR.Department_Description = *BLANK;

   // PAR.Department Description = CON.** Unknown **
   PAR.Department_Description = '** Unknown **';

   ENDIF;

   CASE;

   // IF PAR.Claim Department Desc is *Blank
   IF PAR.Claim_Department_Desc = *BLANK;

   // PAR.Claim Department Desc = CONCAT(PAR.Claim Department Desc,PAR.Department Description,CON.*Z
   PAR.Claim_Department_Desc = PAR.Claim_Department_Desc + PAR.Department_Description (*ZERO);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Claim Department Desc = CONCAT(PAR.Claim Department Desc,CON.,,CON.*ZERO)
   PAR.Claim_Department_Desc = PAR.Claim_Department_Desc + ',' (*ZERO);

   // PAR.Claim Department Desc = CONCAT(PAR.Claim Department Desc,PAR.Department Description,CON.*Z
   PAR.Claim_Department_Desc = PAR.Claim_Department_Desc + PAR.Department_Description (*ZERO);

   ENDIF;

   ENDIF;

   // PAR.Count USR = PAR.Count USR + CND.One
   PAR.Count_USR = PAR.Count_USR + 1;

  }

  //?Load Claim Amount & Set Sign.
  CASE;

  // IF PAR.Claim Status is Denied
  IF PAR.Claim_Status = 'D';

  // OR PAR.Claim Status is Voided
  OR PAR.Claim_Status = 'V';

  // LCL.Claim Amount (unpacked) = CON.*ZERO
  LCL.Claim_Amount_unpacked = *ZERO;

  //?Load Claim Amount & Set Sign.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Claim NOT denied or voided.
  CASE;

  // IF PAR.Resale Item Amount is greater than zero
  IF PAR.Resale_Item_Amount > *ZERO;

  // LCL.Claim Amount (unpacked) = PAR.Resale Item Amount * CON.-1 *
  LCL.Claim_Amount_unpacked = PAR.Resale_Item_Amount * -1;

  //?Claim NOT denied or voided.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Claim Amount (unpacked) = PAR.Resale Item Amount
  LCL.Claim_Amount_unpacked = PAR.Resale_Item_Amount;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(CRT A/R Claim Download CR) TYPE(CRTOBJ) FILE(PDNACPP)          AC1561276;
  PARAMETER(LCL.Claim_Number_unpacked);
  PARAMETER(LCL.Claim_Product_Resale_Prod);
  PARAMETER(LCL.Claim_Short_Customer_Name);
  PARAMETER(LCL.Claim_Reason_Codes);
  PARAMETER(LCL.Claim_Type);
  PARAMETER(LCL.Claim_Load_ID_unpacked);
  PARAMETER(LCL.Claim_Invoice_unpacked);
  PARAMETER(LCL.Claim_Act_Shp_Dte_lotus);
  PARAMETER(*MISSING);
  PARAMETER(LCL.Claim_Order_#_unpacked);
  PARAMETER(LCL.Claim_Short_Salesperson);
  PARAMETER(LCL.Claim_Entry_Date_lotus);
  PARAMETER(LCL.Claim_Department_Desc);
  PARAMETER(LCL.Claim_Short_Explanation);
  PARAMETER(LCL.Claim_Amount_unpacked);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Claim_Reason_Code_first);
  PARAMETER(LCL.Claim_Status);
  PARAMETER(LCL.Claim_Called_in_by_Desc);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
   PARAMETER(DB1.Claim_Company_Number);
   PARAMETER(DB1.Claim_Order_#_unpacked);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(NLL.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

  }

  //?----- Initialize New Ship To Customer fields. -----
  // LCL.Ship To Customer = DB1.Ship To Customer
  LCL.Ship_To_Customer = DB1.Ship_To_Customer;

  // LCL.Claim Reason Code (first) = DB1.Reason Code
  LCL.Claim_Reason_Code_first = DB1.Reason_Code;

  // LCL.Claim Status = PAR.Claim Status
  LCL.Claim_Status = PAR.Claim_Status;

  EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Claim_Short_Customer_Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Resale Item Amount = CND.equal to zero
  PAR.Resale_Item_Amount = *ZERO;

  // PAR.Sequence Number = CON.*ZERO
  PAR.Sequence_Number = *ZERO;

  EXECUTE FUNCTION(CLR Reason Code Array DL) TYPE(DLTOBJ) ARRAY(Claim_Unique_ReasoAC1561322;
  EXECUTE FUNCTION(CLR Dept Code Arrays DL) TYPE(DLTOBJ) ARRAY(Claim_Unique_Dept_CAC1561323;
  ENDIF;

  //?----- Process Record -----
  // PAR.Sequence Number = PAR.Sequence Number + CON.1
  PAR.Sequence_Number = PAR.Sequence_Number + 1;

  //?Create Array record with Reason's & Departments for the
  //?Ship To Customer.
  EXECUTE FUNCTION(RTV/CRT Reas Cde Array RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_ReasAC1561630;
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(DB1.Reason_Code);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.Reason Code EQ PAR.Reason Code
   IF DB1.Reason_Code = PAR.Reason_Code;

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   ENDIF;

   //?USER: Exit processing

   CASE;

   // IF PAR.Record Found USR is Record Not Found
   IF PAR.Record_Found_USR = 'N';

   EXECUTE FUNCTION(CRT Reason Code Array CR) TYPE(CRTOBJ) ARRAY(Claim_Unique_ReasoAC1561324;
   PARAMETER(PAR.Sequence_Number);
   PARAMETER(PAR.Reason_Code);
   ENDIF;

  }

  EXECUTE FUNCTION(RTV/CRT Dept Cde Array RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_DeptAC1561629;
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(DB1.Claim_Department_Code);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.Claim Department Code EQ PAR.Claim Department Code
   IF DB1.Claim_Department_Code = PAR.Claim_Department_Code;

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   ENDIF;

   //?USER: Exit processing

   CASE;

   // IF PAR.Record Found USR is Record Not Found
   IF PAR.Record_Found_USR = 'N';

   EXECUTE FUNCTION(CRT Dept Code Array CR) TYPE(CRTOBJ) ARRAY(Claim_Unique_Dept_CoAC1561325;
   PARAMETER(PAR.Sequence_Number);
   PARAMETER(PAR.Claim_Department_Code);
   ENDIF;

  }

  // PAR.Resale Item Amount = PAR.Resale Item Amount + DB1.Resale Item Amount
  PAR.Resale_Item_Amount = PAR.Resale_Item_Amount + DB1.Resale_Item_Amount;

  ENDIF;

  //?USER: Exit processing

  //?04/26/00 PKD PK0212: Added the Build & Create.
  //?----- Create Download Record if Resale existed. -----
  CASE;

  // IF LCL.Save *Record Selected USR is *YES
  IF LCL.Save_Record_Selected_USR = 'Y';

  EXECUTE FUNCTION(RTV Claim Reason Codes RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_ReasAC1561330;
  PARAMETER(LCL.Claim_Reason_Codes);
  {
   //?USER: Initialize routine

   // PAR.Claim Reason Code(s) = CON.*BLANK
   PAR.Claim_Reason_Codes = *BLANK;

   // PAR.Count USR = CND.One
   PAR.Count_USR = 1;

   //?USER: Process Data record

   CASE;

   // IF PAR.Count USR is LE 4
   IF PAR.Count_USR <= 4;

   CASE;

   // IF PAR.Claim Reason Code(s) is *Blank
   IF PAR.Claim_Reason_Codes = *BLANK;

   // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),DB1.Reason Code,CON.*
   PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + DB1.Reason_Code (*ZERO);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),CON.,,CON.*ZERO)
   PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + ',' (*ZERO);

   // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),DB1.Reason Code,CON.*
   PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + DB1.Reason_Code (*ZERO);

   ENDIF;

   ENDIF;

   // PAR.Count USR = PAR.Count USR + CND.One
   PAR.Count_USR = PAR.Count_USR + 1;

  }

  EXECUTE FUNCTION(RTV Claim Dept Codes RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_Dept_CAC1561332;
  PARAMETER(LCL.Claim_Department_Desc);
  {
   //?USER: Initialize routine

   // PAR.Claim Department Desc = CND.*Blank
   PAR.Claim_Department_Desc = *BLANK;

   // PAR.Count USR = CND.One
   PAR.Count_USR = 1;

   //?USER: Process Data record

   CASE;

   // IF PAR.Count USR is LE 4
   IF PAR.Count_USR <= 4;

   //?051705 slm use the department description as is do not
   //?           set condition for the description
   //?           this process was using the responsibility department
   //?           now we use the claim department
   EXECUTE FUNCTION(Rtv Claim Department   RT) TYPE(RTVOBJ) FILE(PPATREP)          AC1721713;
   PARAMETER(DB1.Claim_Department_Code);
   PARAMETER(PAR.Department_Description);
   PARAMETER(NLL.Claim_Responsibility);
   PARAMETER(NLL.Record_Status);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Department Description is equal to blank
   IF PAR.Department_Description = *BLANK;

   // PAR.Department Description = CON.** Unknown **
   PAR.Department_Description = '** Unknown **';

   ENDIF;

   CASE;

   // IF PAR.Claim Department Desc is *Blank
   IF PAR.Claim_Department_Desc = *BLANK;

   // PAR.Claim Department Desc = CONCAT(PAR.Claim Department Desc,PAR.Department Description,CON.*Z
   PAR.Claim_Department_Desc = PAR.Claim_Department_Desc + PAR.Department_Description (*ZERO);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Claim Department Desc = CONCAT(PAR.Claim Department Desc,CON.,,CON.*ZERO)
   PAR.Claim_Department_Desc = PAR.Claim_Department_Desc + ',' (*ZERO);

   // PAR.Claim Department Desc = CONCAT(PAR.Claim Department Desc,PAR.Department Description,CON.*Z
   PAR.Claim_Department_Desc = PAR.Claim_Department_Desc + PAR.Department_Description (*ZERO);

   ENDIF;

   ENDIF;

   // PAR.Count USR = PAR.Count USR + CND.One
   PAR.Count_USR = PAR.Count_USR + 1;

  }

  //?Load Claim Amount & Set Sign.
  CASE;

  // IF PAR.Claim Status is Denied
  IF PAR.Claim_Status = 'D';

  // OR PAR.Claim Status is Voided
  OR PAR.Claim_Status = 'V';

  // LCL.Claim Amount (unpacked) = CON.*ZERO
  LCL.Claim_Amount_unpacked = *ZERO;

  //?Load Claim Amount & Set Sign.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Claim NOT denied or voided.
  CASE;

  // IF PAR.Resale Item Amount is greater than zero
  IF PAR.Resale_Item_Amount > *ZERO;

  // LCL.Claim Amount (unpacked) = PAR.Resale Item Amount * CON.-1 *
  LCL.Claim_Amount_unpacked = PAR.Resale_Item_Amount * -1;

  //?Claim NOT denied or voided.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Claim Amount (unpacked) = PAR.Resale Item Amount
  LCL.Claim_Amount_unpacked = PAR.Resale_Item_Amount;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(CRT A/R Claim Download CR) TYPE(CRTOBJ) FILE(PDNACPP)          AC1561276;
  PARAMETER(LCL.Claim_Number_unpacked);
  PARAMETER(LCL.Claim_Product_Resale_Prod);
  PARAMETER(LCL.Claim_Short_Customer_Name);
  PARAMETER(LCL.Claim_Reason_Codes);
  PARAMETER(LCL.Claim_Type);
  PARAMETER(LCL.Claim_Load_ID_unpacked);
  PARAMETER(LCL.Claim_Invoice_unpacked);
  PARAMETER(LCL.Claim_Act_Shp_Dte_lotus);
  PARAMETER(*MISSING);
  PARAMETER(LCL.Claim_Order_#_unpacked);
  PARAMETER(LCL.Claim_Short_Salesperson);
  PARAMETER(LCL.Claim_Entry_Date_lotus);
  PARAMETER(LCL.Claim_Department_Desc);
  PARAMETER(LCL.Claim_Short_Explanation);
  PARAMETER(LCL.Claim_Amount_unpacked);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Claim_Reason_Code_first);
  PARAMETER(LCL.Claim_Status);
  PARAMETER(LCL.Claim_Called_in_by_Desc);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
   PARAMETER(DB1.Claim_Company_Number);
   PARAMETER(DB1.Claim_Order_#_unpacked);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(NLL.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

  }

  ENDIF;

 }

 //?04/26/00 PKD PK0212: Moved the Build and Create inside the above
 //?             retreive when there is a break on Ship To Customer.
 ENDDO;

 ENDIF;

}


