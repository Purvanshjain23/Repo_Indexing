// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKLRPVR
// ?Date: 14.08.2025 Time: 02:52:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.CC Company Number = WRK.CC Company Number
DTL.CC_Company_Number = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?USER: Process command keys

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.PD Producer Code
IF PGM.*Cursor_field = DTL.PD_Producer_Code;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.PD_Producer_Code);

// IF PGM.*Cursor field <IS> DTL.Defect User  1
IF PGM.*Cursor_field = DTL.Defect_User_1;

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_1);

// IF PGM.*Cursor field <IS> DTL.Defect User  2
IF PGM.*Cursor_field = DTL.Defect_User_2;

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_2);

// IF PGM.*Cursor field <IS> DTL.Defect User  3
IF PGM.*Cursor_field = DTL.Defect_User_3;

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_3);

// IF PGM.*Cursor field <IS> DTL.Defect User  4
IF PGM.*Cursor_field = DTL.Defect_User_4;

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_4);

// IF PGM.*Cursor field <IS> DTL.Defect User  5
IF PGM.*Cursor_field = DTL.Defect_User_5;

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_5);

ENDIF;

ENDIF;

//?USER: Validate fields

CASE;

// IF DTL.Date From USR GT DTL.Date To   USR
IF DTL.Date_From_USR > DTL.Date_To_USR;

// Send error message - 'From date must be less than or equal to the to date.'
ERROR(PRK0472);

ENDIF;

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.Name_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.PD Producer Code is Entered
IF DTL.PD_Producer_Code <> *BLANK;

CASE;

// IF DTL.Name USR EQ WRK.Blank USR
IF DTL.Name_USR = WRK.Blank_USR;

// Send error message - 'Producer not found.'
ERROR(PRK0009);

ENDIF;

ENDIF;

//?Defect 1
CASE;

// IF DTL.Defect User  1 NE WRK.Blank USR
IF DTL.Defect_User_1 <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Defect_Desc_Usr_1);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Defect Desc Usr 1 EQ WRK.Blank USR
IF DTL.Defect_Desc_Usr_1 = WRK.Blank_USR;

// Send error message - 'Hog Defect not found.'
ERROR(PRK0073);

ENDIF;

ENDIF;

//?Defect 2
CASE;

// IF DTL.Defect User  2 NE WRK.Blank USR
IF DTL.Defect_User_2 <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Defect_Desc_Usr_2);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Defect Desc Usr 2 EQ WRK.Blank USR
IF DTL.Defect_Desc_Usr_2 = WRK.Blank_USR;

// Send error message - 'Hog Defect not found.'
ERROR(PRK0073);

ENDIF;

ENDIF;

//?Defect 3
CASE;

// IF DTL.Defect User  3 NE WRK.Blank USR
IF DTL.Defect_User_3 <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Defect_Desc_Usr_3);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Defect Desc Usr 3 EQ WRK.Blank USR
IF DTL.Defect_Desc_Usr_3 = WRK.Blank_USR;

// Send error message - 'Hog Defect not found.'
ERROR(PRK0073);

ENDIF;

ENDIF;

//?Defect 4
CASE;

// IF DTL.Defect User  4 NE WRK.Blank USR
IF DTL.Defect_User_4 <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Defect_Desc_Usr_4);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Defect Desc Usr 4 EQ WRK.Blank USR
IF DTL.Defect_Desc_Usr_4 = WRK.Blank_USR;

// Send error message - 'Hog Defect not found.'
ERROR(PRK0073);

ENDIF;

ENDIF;

//?Defect 5
CASE;

// IF DTL.Defect User  5 NE WRK.Blank USR
IF DTL.Defect_User_5 <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Defect_Desc_Usr_5);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Defect Desc Usr 5 EQ WRK.Blank USR
IF DTL.Defect_Desc_Usr_5 = WRK.Blank_USR;

// Send error message - 'Hog Defect not found.'
ERROR(PRK0073);

ENDIF;

ENDIF;

//?USER: User defined action

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Print Specific Defects');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(1);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Company Number Alpha Usr = CVTVAR(DTL.CC Company Number)
WRK.Company_Number_Alpha_Usr = CVTVAR(DTL.CC_Company_Number);

// WRK.Date Alpha USR = CVTVAR(DTL.Date From USR)
WRK.Date_Alpha_USR = CVTVAR(DTL.Date_From_USR);

// WRK.Date Alpha Usr 2 = CVTVAR(DTL.Date To   USR)
WRK.Date_Alpha_Usr_2 = CVTVAR(DTL.Date_To_USR);

// Execute command - 'SBM Prt Specific Defects Report'
EXECUTE COMMAND(PRK0765);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(WRK.Company_Number_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.PD_Producer_Code);

ENDIF;

