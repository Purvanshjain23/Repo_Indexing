// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPX8XFR
// ?Date: 14.08.2025 Time: 03:42:18
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// PAR.Print Pre-Inv/Exception = WRK.BLANK
PAR.Print_Pre_Inv_Exception = WRK.BLANK;

// PAR.Update Exception Status = WRK.BLANK
PAR.Update_Exception_Status = WRK.BLANK;

// PAR.Load Status = WRK.BLANK
PAR.Load_Status = WRK.BLANK;

// PAR.USR Check Y/N Status = CND.blank
PAR.USR_Check_Y_N_Status = *BLANK;

//?** The usr actual ship date = asd entered on the screen
//?** Put DB1.ASD into the usr date shipped work field
// PAR.USR Date Shipped = PAR.Actual Shipped Date
PAR.USR_Date_Shipped = PAR.Actual_Shipped_Date;

// PAR.Order Status = CND.*Blank
PAR.Order_Status = *BLANK;

//?Validate the first one
//?05/01/18 DN R12926-Removed Absorbed Freight Rate CWT Parm on PMF3XFR.
// Call program PRT Invc Excpt Sel Val XF.
CALL PROGRAM(PRT Invc Excpt Sel Val XF) ('PMF3XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Header_Status);
PARAMETER(PAR.Header_Status_Last);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.USR_Order_Number);
PARAMETER(PAR.Load_ID_USR);
PARAMETER(PAR.USR_Billing_Activty_Type);
PARAMETER(PAR.USR_Actual_Shipped_Date);
PARAMETER(PAR.Update_Exception_Status);
PARAMETER(PAR.*Record_selected);
PARAMETER(LCL.Print_Pre_Inv_Exception);
PARAMETER(PAR.Departure_Sts_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Manual_Prc_Err_Sts_USR);
PARAMETER(PAR.Projected_Market_Price);
PARAMETER(PAR.Average_Ship_Wgt_Err_USR);
PARAMETER(PAR.InterCo_Price_Err_USR);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Order_Status);
PARAMETER(PAR.GTIN_Error_Sts_USR);
PARAMETER(PAR.GTIN_Error_Item_Code_USR);
PARAMETER(PAR.Item_Code_USR);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Market_Overage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(PAR.Process_Cust_Types_Usr);
PARAMETER(PAR.USR_Check_Y_N_Status);
PARAMETER(PAR.D_EDI_INV_PROC_FLAG);

// PAR.Print Pre-Inv/Exception = LCL.Print Pre-Inv/Exception
PAR.Print_Pre_Inv_Exception = LCL.Print_Pre_Inv_Exception;

CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

EXECUTE FUNCTION(Rtv One Invoice /PO   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1801817;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.One_Invoice_Per_PO);
{
 //?USER: Processing if Data record not found

 // PAR.One Invoice Per PO = CND.No
 PAR.One_Invoice_Per_PO = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Combo Exception Error Usr = WRK.BLANK
LCL.Combo_Exception_Error_Usr = WRK.BLANK;

//?Combo po
CASE;

// IF PAR.One Invoice Per PO is Yes
IF PAR.One_Invoice_Per_PO = 'Y';

CASE;

// IF PAR.Order Status is Open
IF PAR.Order_Status = 'O';

//?*Note This will print error on the exception report  slm 042307
// LCL.Print Pre-Inv/Exception = CND.Print on Exception
LCL.Print_Pre_Inv_Exception = 'E';

ENDIF;

//? doc: on the multi records being searched for this combo
DO;

//?Get the first one based on the order number so we can have the
//?order information for the one we are working with.
//?The next Routine will read all of the orders by
//?Customer/PO/Schedule Shipped Date and perform the validation.
//?Rules will be the same as a non combo, but we have to make sure
//?the whole group is validated
//?If error(s) on one or more then the print exception will be
//?turned on for the whole group.
ENDDO;

//?PASS IN ZERO ON THE USER ORDER, AND USER DATE but do
//?pass in the load id based on PARM
//?following is the process for the combo orders
CASE;

// IF LCL.Print Pre-Inv/Exception is Print on Exception
IF LCL.Print_Pre_Inv_Exception = 'E';

//?If errors then STOP. No need to loop thru more records for this
//?combo po. We will not print any of the orders if at least 1 error.
//?following is the process for the combo orders
// IF *OTHERWISE
IF *OTHERWISE;

//?First record was good now let see if the whole group is fine
//?also will validate if this order has all orders ready
//?for shipment.
//?Move Parm to LCL
DO;

// LCL.Print Pre-Inv/Exception = CND.*BLANK
LCL.Print_Pre_Inv_Exception = *BLANK;

// LCL.Company Number = PAR.Company Number
LCL.Company_Number = PAR.Company_Number;

// LCL.Order Number = PAR.Order Number
LCL.Order_Number = PAR.Order_Number;

// LCL.Order Type - Sales = PAR.Order Type - Sales
LCL.Order_Type_Sales = PAR.Order_Type_Sales;

// LCL.Ship To Customer = PAR.Ship To Customer
LCL.Ship_To_Customer = PAR.Ship_To_Customer;

// LCL.Customer Purchase Order # = PAR.Customer Purchase Order #
LCL.Customer_Purchase_Order_# = PAR.Customer_Purchase_Order_#;

// LCL.Order Date = PAR.Order Date
LCL.Order_Date = PAR.Order_Date;

// LCL.Actual Shipped Date = PAR.Actual Shipped Date
LCL.Actual_Shipped_Date = PAR.Actual_Shipped_Date;

// LCL.Header Status = PAR.Header Status
LCL.Header_Status = PAR.Header_Status;

// LCL.Header Status Last = PAR.Header Status Last
LCL.Header_Status_Last = PAR.Header_Status_Last;

// LCL.Scheduled Ship Date = PAR.Scheduled Ship Date
LCL.Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

// LCL.Load ID = PAR.Load ID
LCL.Load_ID = PAR.Load_ID;

// LCL.Price Status = PAR.Price Status
LCL.Price_Status = PAR.Price_Status;

// LCL.Shipping Method = PAR.Shipping Method
LCL.Shipping_Method = PAR.Shipping_Method;

// LCL.Sales Route Code = PAR.Sales Route Code
LCL.Sales_Route_Code = PAR.Sales_Route_Code;

// LCL.Event Code = PAR.Event Code
LCL.Event_Code = PAR.Event_Code;

// LCL.Billing Activity Type = PAR.Billing Activity Type
LCL.Billing_Activity_Type = PAR.Billing_Activity_Type;

// LCL.USR Order Number = PAR.USR Order Number
LCL.USR_Order_Number = PAR.USR_Order_Number;

// LCL.Load ID USR = PAR.Load ID USR
LCL.Load_ID_USR = PAR.Load_ID_USR;

// LCL.USR Billing Activty Type = PAR.USR Billing Activty Type
LCL.USR_Billing_Activty_Type = PAR.USR_Billing_Activty_Type;

// LCL.USR Actual Shipped Date = PAR.USR Actual Shipped Date
LCL.USR_Actual_Shipped_Date = PAR.USR_Actual_Shipped_Date;

// LCL.Update Exception Status = PAR.Update Exception Status
LCL.Update_Exception_Status = PAR.Update_Exception_Status;

// LCL.*Record selected = PAR.*Record selected
LCL.*Record_selected = PAR.*Record_selected;

// LCL.Print Pre-Inv/Exception = CND.*BLANK
LCL.Print_Pre_Inv_Exception = *BLANK;

// LCL.Departure Sts USR = WRK.ZERO
LCL.Departure_Sts_USR = WRK.ZERO;

// LCL.System Value Numeric = PAR.System Value Numeric
LCL.System_Value_Numeric = PAR.System_Value_Numeric;

// LCL.Manual Prc Err Sts USR = PAR.Manual Prc Err Sts USR
LCL.Manual_Prc_Err_Sts_USR = PAR.Manual_Prc_Err_Sts_USR;

// LCL.InterCo Price Err USR = PAR.InterCo Price Err USR
LCL.InterCo_Price_Err_USR = PAR.InterCo_Price_Err_USR;

// LCL.Record Found USR = PAR.Record Found USR
LCL.Record_Found_USR = PAR.Record_Found_USR;

// LCL.Order Status = CND.*Blank
LCL.Order_Status = *BLANK;

ENDDO;

EXECUTE FUNCTION(Val ComboAllasOne /PO RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1801823;
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Header_Status_Last);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Price_Audit);
PARAMETER(LCL.Price_Status);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Event_Code);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.USR_Order_Number);
PARAMETER(LCL.Load_ID_USR);
PARAMETER(LCL.USR_Billing_Activty_Type);
PARAMETER(LCL.USR_Actual_Shipped_Date);
PARAMETER(LCL.Update_Exception_Status);
PARAMETER(LCL.*Record_selected);
PARAMETER(LCL.Print_Pre_Inv_Exception);
PARAMETER(LCL.Departure_Sts_USR);
PARAMETER(LCL.System_Value_Numeric);
PARAMETER(LCL.Manual_Prc_Err_Sts_USR);
PARAMETER(LCL.InterCo_Price_Err_USR);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(LCL.Order_Status);
PARAMETER(LCL.Item_Code_USR);
PARAMETER(LCL.Item_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Commodity_Market_Code);
PARAMETER(LCL.Default_Shipping_Co_Sts);
PARAMETER(LCL.Price_Overage_Override);
PARAMETER(LCL.Process_Cust_Types_Usr);
PARAMETER(LCL.USR_Check_Y_N_Status);
PARAMETER(PAR.D_EDI_INV_PROC_FLAG);
{
 //?USER: Initialize routine

 // PAR.Order Status = CND.Completed
 PAR.Order_Status = 'C';

 //?USER: Process Data record

 CASE;

 // IF DB1.Header Status is Conf/Comp/Canc
 IF DB1.Header_Status = 'X'/'C'/'R';

 // Call program PRT Invc Excpt Sel Val XF.
 CALL PROGRAM(PRT Invc Excpt Sel Val XF) ('PMF3XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Load_ID_USR);
 PARAMETER(PAR.USR_Billing_Activty_Type);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Update_Exception_Status);
 PARAMETER(PAR.*Record_selected);
 PARAMETER(LCL.Print_Pre_Inv_Exception);
 PARAMETER(PAR.Departure_Sts_USR);
 PARAMETER(PAR.System_Value_Numeric);
 PARAMETER(PAR.Manual_Prc_Err_Sts_USR);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(PAR.Average_Ship_Wgt_Err_USR);
 PARAMETER(PAR.InterCo_Price_Err_USR);
 PARAMETER(PAR.Record_Found_USR);
 PARAMETER(PAR.Order_Status);
 PARAMETER(LCL.GTIN_Error_Sts_USR);
 PARAMETER(LCL.GTIN_Error_Item_Code_USR);
 PARAMETER(PAR.Item_Code_USR);
 PARAMETER(LCL.Item_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Market_Overage);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(LCL.Price_Overage_Override);
 PARAMETER(PAR.Process_Cust_Types_Usr);
 PARAMETER(PAR.USR_Check_Y_N_Status);
 PARAMETER(PAR.D_EDI_INV_PROC_FLAG);

 CASE;

 // IF LCL.Print Pre-Inv/Exception is Print on Exception
 IF LCL.Print_Pre_Inv_Exception = 'E';

 // PAR.Print Pre-Inv/Exception = LCL.Print Pre-Inv/Exception
 PAR.Print_Pre_Inv_Exception = LCL.Print_Pre_Inv_Exception;

 // PAR.Order Status = CND.Cmb PO has Errors
 PAR.Order_Status = 'E';

 QUIT;

 ENDIF;

 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // PAR.Record Found USR = LCL.Record Found USR
 PAR.Record_Found_USR = LCL.Record_Found_USR;

 // PAR.Order Status = CND.Cmb PO has Errors
 PAR.Order_Status = 'E';

 QUIT;

 ENDIF;

 //?Reason 1:  Order Unpriced
 CASE;

 // IF DB1.Price Status is Unpriced
 IF DB1.Price_Status = 'U';

 // PAR.Print Pre-Inv/Exception = CND.Print on Exception
 PAR.Print_Pre_Inv_Exception = 'E';

 // PAR.Order Status = CND.Cmb PO has Errors
 PAR.Order_Status = 'E';

 QUIT;

 ENDIF;

 //?Reason 2:  Order Marked for Price Audit
 CASE;

 // IF DB1.Price Audit is Needs Price Audit
 IF DB1.Price_Audit = 'N';

 // PAR.Print Pre-Inv/Exception = CND.Print on Exception
 PAR.Print_Pre_Inv_Exception = 'E';

 // PAR.Order Status = CND.Cmb PO has Errors
 PAR.Order_Status = 'E';

 QUIT;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Order Status = CND.Open
 PAR.Order_Status = 'O';

 // LCL.Print Pre-Inv/Exception = CND.Print on Exception
 LCL.Print_Pre_Inv_Exception = 'E';

 // PAR.Print Pre-Inv/Exception = LCL.Print Pre-Inv/Exception
 PAR.Print_Pre_Inv_Exception = LCL.Print_Pre_Inv_Exception;

 QUIT;

 ENDIF;

}


//?These errors will print on the exception report  slm 042307
CASE;

// IF LCL.Order Status is Open
IF LCL.Order_Status = 'O';

// LCL.Print Pre-Inv/Exception = CND.Print on Exception
LCL.Print_Pre_Inv_Exception = 'E';

// PAR.Order Status = LCL.Order Status
PAR.Order_Status = LCL.Order_Status;

//?These errors will print on the exception report  slm 042307
// IF LCL.Order Status is Cmb PO has Errors
IF LCL.Order_Status = 'E';

// LCL.Print Pre-Inv/Exception = CND.Print on Exception
LCL.Print_Pre_Inv_Exception = 'E';

// PAR.Order Status = LCL.Order Status
PAR.Order_Status = LCL.Order_Status;

ENDIF;

//?errors
CASE;

// IF LCL.Print Pre-Inv/Exception is Print on Exception
IF LCL.Print_Pre_Inv_Exception = 'E';

// PAR.Order Status = CND.Cmb PO has Errors
PAR.Order_Status = 'E';

// PAR.Print Pre-Inv/Exception = LCL.Print Pre-Inv/Exception
PAR.Print_Pre_Inv_Exception = LCL.Print_Pre_Inv_Exception;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

