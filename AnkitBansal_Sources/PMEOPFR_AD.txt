// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMEOPFR
// ?Date: 14.08.2025 Time: 12:05:31
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?** Control display of No Recs Found text
// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?** Control display of First Page Seletion Criteria
// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

// WRK.Blank Date            USR = CON.*ZERO
WRK.Blank_Date_USR = *ZERO;

//?USER: Record selection processing

//?** Select requested Customer
CASE;

// IF DB1.A/R Customer Number NE PAR.A/R Customer Number
IF DB1.AR_Customer_Number <> PAR.AR_Customer_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Skip records outside requested date range
CASE;

// IF DB1.Transaction Date Code LT PAR.Date From             USR
IF DB1.Transaction_Date_Code < PAR.Date_From_USR;

// OR DB1.Transaction Date Code GT PAR.To Date               USR
OR DB1.Transaction_Date_Code > PAR.To_Date_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select only INV, OA, CM, DM Transaction Adjustment Types
CASE;

// IF DB1.Invoice Suffix is IN, OA, DM, or CM
IF DB1.Invoice_Suffix = 'CM'/'DM'/'IN'/'OA';

//?** Select only INV, OA, CM, DM Transaction Adjustment Types
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

CASE;

// IF TOP.A/R Customer Number is not equal to zero
IF TOP_AR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(TOP_Customer_Name_DRV);
PARAMETER(TOP_AR_Customer_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Customer Name DRV = CON.ALL
TOP_Customer_Name_DRV = 'ALL';

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT A/R Customer Number header format

// SUPPRESSED PRINT Invoice Number header format

// SUPPRESSED PRINT Invoice Suffix header format

//?USER: Process before print of detail format

//?** We are looking for invoices with payments made during
//?** the Curreny Year (CY) - which is the date range requested
//?** on the prompt screen. LY will be the previous year.
// WRK.Record Selected       USR = CND.no
WRK.Record_Selected_USR = 'N';

EXECUTE FUNCTION(Rtv Pmt Exsts in Cur YrRT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1811787;
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.To_Date_USR);
PARAMETER(WRK.Record_Selected_USR);
{
 //?USER: Initialize routine

 //?** This subroutine is used to select prior year invoices that
 //?** were paid in the current year
 //?USER: Process Data record

 //?** Skip ARC records
 CASE;

 // IF DB1.Adjustment Type Code is Not Accounts Receivable
 IF DB1.Adjustment_Type_Code <> 'ARC';

 //?** Select record if it is within the date range requested
 CASE;

 // IF DB1.Transaction Date Code GE PAR.Date From             USR
 IF DB1.Transaction_Date_Code >= PAR.Date_From_USR;

 // AND DB1.Transaction Date Code LE PAR.Date To               USR
 AND DB1.Transaction_Date_Code <= PAR.Date_To_USR;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv OA Trans f/Actvy  RT) TYPE(RTVOBJ) FILE(PDNHCPP)           AC2040698;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.To_Date_USR);
PARAMETER(WRK.Record_Selected_USR);
{
 //?USER: Process Data record

 //?** Select record if it is within the date range requested
 CASE;

 // IF DB1.Create Date GE PAR.From Date             USR
 IF DB1.Create_Date >= PAR.From_Date_USR;

 // AND DB1.Create Date LE PAR.To Date               USR
 AND DB1.Create_Date <= PAR.To_Date_USR;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 QUIT;

 ENDIF;

}


//?** Reset accum fields for detail adj type amounts
// PAR.USR Adjustment Amt 1 = CON.*ZERO
PAR.USR_Adjustment_Amt_1 = *ZERO;

// PAR.USR Adjustment Amt 2 = CON.*ZERO
PAR.USR_Adjustment_Amt_2 = *ZERO;

// PAR.USR Adjustment Amt 2 = CON.*ZERO
PAR.USR_Adjustment_Amt_2 = *ZERO;

// PAR.USR Adjustment Amt 3 = CON.*ZERO
PAR.USR_Adjustment_Amt_3 = *ZERO;

// PAR.USR Adjustment Amt 4 = CON.*ZERO
PAR.USR_Adjustment_Amt_4 = *ZERO;

// PAR.USR Adjustment Amt 5 = CON.*ZERO
PAR.USR_Adjustment_Amt_5 = *ZERO;

// PAR.USR Adjustment Amt 6 = CON.*ZERO
PAR.USR_Adjustment_Amt_6 = *ZERO;

// PAR.USR Adjustment Amt 7 = CON.*ZERO
PAR.USR_Adjustment_Amt_7 = *ZERO;

// PAR.USR Adjustment Amt 8 = CON.*ZERO
PAR.USR_Adjustment_Amt_8 = *ZERO;

// PAR.USR Adjustment Amt 9 = CON.*ZERO
PAR.USR_Adjustment_Amt_9 = *ZERO;

// PAR.USR Adjustment Amt 10 = CON.*ZERO
PAR.USR_Adjustment_Amt_10 = *ZERO;

// PAR.Total Trans Amount 1 Usr = CON.*ZERO
PAR.Total_Trans_Amount_1_Usr = *ZERO;

// PAR.Total Trans Amount 2 Usr = CON.*ZERO
PAR.Total_Trans_Amount_2_Usr = *ZERO;

//?USER: On print of detail format

//?** Don't print if no payments within the date range requested
CASE;

// IF WRK.Record Selected       USR is no
IF WRK.Record_Selected_USR = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?** Get the Actual Shipped Date from the Order Header
CASE;

// IF WRK.Record Selected       USR is yes
IF WRK.Record_Selected_USR = 'Y';

MOVE *ALL (To: CUR From: DB1);

EXECUTE FUNCTION(Rtv Actual Ship Date  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1444831;
PARAMETER(DB1.Company_Number);
PARAMETER(CUR.Order_Number_Ref);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(CUR.Scheduled_Ship_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Accum DMs, CMs, INVs and OAs for the current year
CASE;

// IF CUR.Transaction Date Code GE PAR.From Date             USR
IF CUR.Transaction_Date_Code >= PAR.From_Date_USR;

// AND CUR.Transaction Date Code LE PAR.To Date               USR
AND CUR.Transaction_Date_Code <= PAR.To_Date_USR;

//?** Accumulate Credit Memos
CASE;

// IF CUR.Invoice Suffix is Credit Memos
IF CUR.Invoice_Suffix = 'CM';

// PAR.USR Adjustment Amt 5 = PAR.USR Adjustment Amt 5 + CUR.Transaction Amount
PAR.USR_Adjustment_Amt_5 = PAR.USR_Adjustment_Amt_5 + CUR.Transaction_Amount;

ENDIF;

//?** Accumulate Debit Memos
CASE;

// IF CUR.Invoice Suffix is Debit Memos
IF CUR.Invoice_Suffix = 'DM';

// PAR.USR Adjustment Amt 4 = PAR.USR Adjustment Amt 4 + CUR.Transaction Amount
PAR.USR_Adjustment_Amt_4 = PAR.USR_Adjustment_Amt_4 + CUR.Transaction_Amount;

ENDIF;

//?** Accumulate OAs (On Account Cash or Unapplied Cash)
CASE;

// IF CUR.Invoice Suffix is On Account Cash
IF CUR.Invoice_Suffix = 'OA';

// PAR.USR Adjustment Amt 3 = PAR.USR Adjustment Amt 3 + CUR.Transaction Amount
PAR.USR_Adjustment_Amt_3 = PAR.USR_Adjustment_Amt_3 + CUR.Transaction_Amount;

ENDIF;

//?** Accumulate Invoices
CASE;

// IF CUR.Invoice Suffix is Invoices
IF CUR.Invoice_Suffix = 'IN';

// PAR.Total Trans Amount 2 Usr = PAR.Total Trans Amount 2 Usr + CUR.Transaction Amount
PAR.Total_Trans_Amount_2_Usr = PAR.Total_Trans_Amount_2_Usr + CUR.Transaction_Amount;

ENDIF;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Cust A/R Activity  PO
EXECUTE FUNCTION(Prt Cust A/R Activity  PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(WRK.Record_Selected_USR);
PARAMETER(PAR.USR_Adjustment_Amt_1);
PARAMETER(PAR.USR_Adjustment_Amt_2);
PARAMETER(PAR.USR_Adjustment_Amt_3);
PARAMETER(PAR.USR_Adjustment_Amt_6);
PARAMETER(PAR.USR_Adjustment_Amt_7);
PARAMETER(PAR.USR_Adjustment_Amt_8);
PARAMETER(PAR.USR_Adjustment_Amt_9);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.To_Date_USR);
PARAMETER(CUR.Transaction_Date_Code);
PARAMETER(PAR.Total_Trans_Amount_1_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

//?** Accumulate final totals
// NXT.Total Trans Amount 1 Usr = NXT.Total Trans Amount 1 Usr + PAR.Total Trans Amount 1 Usr
NXT.Total_Trans_Amount_1_Usr = NXT.Total_Trans_Amount_1_Usr                                        +
+ PAR.Total_Trans_Amount_1_Usr;

// NXT.USR Adjustment Amt 1 = NXT.USR Adjustment Amt 1 + PAR.USR Adjustment Amt 1
NXT.USR_Adjustment_Amt_1 = NXT.USR_Adjustment_Amt_1 + PAR.USR_Adjustment_Amt_1;

// NXT.USR Adjustment Amt 2 = NXT.USR Adjustment Amt 2 - PAR.USR Adjustment Amt 2
NXT.USR_Adjustment_Amt_2 = NXT.USR_Adjustment_Amt_2 - PAR.USR_Adjustment_Amt_2;

// NXT.USR Adjustment Amt 3 = NXT.USR Adjustment Amt 3 - PAR.USR Adjustment Amt 3
NXT.USR_Adjustment_Amt_3 = NXT.USR_Adjustment_Amt_3 - PAR.USR_Adjustment_Amt_3;

// NXT.USR Adjustment Amt 4 = NXT.USR Adjustment Amt 4 + PAR.USR Adjustment Amt 4
NXT.USR_Adjustment_Amt_4 = NXT.USR_Adjustment_Amt_4 + PAR.USR_Adjustment_Amt_4;

// NXT.USR Adjustment Amt 5 = NXT.USR Adjustment Amt 5 - PAR.USR Adjustment Amt 5
NXT.USR_Adjustment_Amt_5 = NXT.USR_Adjustment_Amt_5 - PAR.USR_Adjustment_Amt_5;

// NXT.USR Adjustment Amt 6 = NXT.USR Adjustment Amt 6 + PAR.USR Adjustment Amt 6
NXT.USR_Adjustment_Amt_6 = NXT.USR_Adjustment_Amt_6 + PAR.USR_Adjustment_Amt_6;

// NXT.USR Adjustment Amt 7 = NXT.USR Adjustment Amt 7 + PAR.USR Adjustment Amt 7
NXT.USR_Adjustment_Amt_7 = NXT.USR_Adjustment_Amt_7 + PAR.USR_Adjustment_Amt_7;

// NXT.USR Adjustment Amt 8 = NXT.USR Adjustment Amt 8 - PAR.USR Adjustment Amt 8
NXT.USR_Adjustment_Amt_8 = NXT.USR_Adjustment_Amt_8 - PAR.USR_Adjustment_Amt_8;

// NXT.USR Adjustment Amt 9 = NXT.USR Adjustment Amt 9 + PAR.USR Adjustment Amt 9
NXT.USR_Adjustment_Amt_9 = NXT.USR_Adjustment_Amt_9 + PAR.USR_Adjustment_Amt_9;

// NXT.Total Trans Amount 2 Usr = NXT.Total Trans Amount 2 Usr + PAR.Total Trans Amount 2 Usr
NXT.Total_Trans_Amount_2_Usr = NXT.Total_Trans_Amount_2_Usr                                        +
+ PAR.Total_Trans_Amount_2_Usr;

//?USER: Print required level totals

// SUPPRESSED PRINT Invoice Suffix totals format

// SUPPRESSED PRINT Invoice Number totals format

// SUPPRESSED PRINT A/R Customer Number totals format

//?USER: Process before print of final totals format

// CUR.USR A/R Customer Number = PAR.A/R Customer Number
CUR.USR_A_R_Customer_Number = PAR.AR_Customer_Number;

//?** PAY Deposits
EXECUTE FUNCTION(RTV Amt Tot for Adj Ty RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1812815;
PARAMETER(PAR.From_Date_USR);
PARAMETER('PAY');
PARAMETER(PAR.To_Date_USR);
PARAMETER(PAR.USR_Adjustment_Amt_2);
PARAMETER(PAR.AR_Customer_Number);
{
 //?USER: Initialize routine

 // PAR.Accrual Amount SUM = CND.Zero
 PAR.Accrual_Amount_SUM = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 //?** Accumulate amount paid for the Adjustment type during date range
 CASE;

 // IF DB1.Payment/Deposit Date GE PAR.Payment/Deposit Date
 IF DB1.Payment_Deposit_Date >= PAR.Payment_Deposit_Date;

 // AND DB1.Payment/Deposit Date LE PAR.To Date               USR
 AND DB1.Payment_Deposit_Date <= PAR.To_Date_USR;

 CASE;

 // IF DB1.Adjustment Type Code EQ PAR.Adjustment Type Code
 IF DB1.Adjustment_Type_Code = PAR.Adjustment_Type_Code;

 EXECUTE FUNCTION(RTV Cust. by Inv.      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1345722;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(WRK.AR_Customer_Number);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.A/R Customer Number EQ PAR.Customer Number       NBR
 IF WRK.AR_Customer_Number = PAR.Customer_Number_NBR;

 // PAR.Accrual Amount SUM = PAR.Accrual Amount SUM + DB1.Transaction Amount
 PAR.Accrual_Amount_SUM = PAR.Accrual_Amount_SUM + DB1.Transaction_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

}


// CUR.USR Adjustment Amt 2 = CON.*ZERO
CUR.USR_Adjustment_Amt_2 = *ZERO;

// CUR.USR Adjustment Amt 2 = CUR.USR Adjustment Amt 2 - PAR.USR Adjustment Amt 2
CUR.USR_Adjustment_Amt_2 = CUR.USR_Adjustment_Amt_2 - PAR.USR_Adjustment_Amt_2;

//?** Bank Fees
EXECUTE FUNCTION(RTV Amt Tot for Adj Ty RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1812815;
PARAMETER(PAR.From_Date_USR);
PARAMETER('FEE');
PARAMETER(PAR.To_Date_USR);
PARAMETER(PAR.USR_Adjustment_Amt_8);
PARAMETER(PAR.AR_Customer_Number);
{
 //?USER: Initialize routine

 // PAR.Accrual Amount SUM = CND.Zero
 PAR.Accrual_Amount_SUM = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 //?** Accumulate amount paid for the Adjustment type during date range
 CASE;

 // IF DB1.Payment/Deposit Date GE PAR.Payment/Deposit Date
 IF DB1.Payment_Deposit_Date >= PAR.Payment_Deposit_Date;

 // AND DB1.Payment/Deposit Date LE PAR.To Date               USR
 AND DB1.Payment_Deposit_Date <= PAR.To_Date_USR;

 CASE;

 // IF DB1.Adjustment Type Code EQ PAR.Adjustment Type Code
 IF DB1.Adjustment_Type_Code = PAR.Adjustment_Type_Code;

 EXECUTE FUNCTION(RTV Cust. by Inv.      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1345722;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(WRK.AR_Customer_Number);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.A/R Customer Number EQ PAR.Customer Number       NBR
 IF WRK.AR_Customer_Number = PAR.Customer_Number_NBR;

 // PAR.Accrual Amount SUM = PAR.Accrual Amount SUM + DB1.Transaction Amount
 PAR.Accrual_Amount_SUM = PAR.Accrual_Amount_SUM + DB1.Transaction_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

}


// CUR.USR Adjustment Amt 8 = CON.*ZERO
CUR.USR_Adjustment_Amt_8 = *ZERO;

// CUR.USR Adjustment Amt 8 = CUR.USR Adjustment Amt 8 - PAR.USR Adjustment Amt 8
CUR.USR_Adjustment_Amt_8 = CUR.USR_Adjustment_Amt_8 - PAR.USR_Adjustment_Amt_8;

//?** plus Write Offs under $100
EXECUTE FUNCTION(RTV Amt Tot for Adj Ty RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1812815;
PARAMETER(PAR.From_Date_USR);
PARAMETER('WO');
PARAMETER(PAR.To_Date_USR);
PARAMETER(PAR.USR_Adjustment_Amt_8);
PARAMETER(PAR.AR_Customer_Number);
{
 //?USER: Initialize routine

 // PAR.Accrual Amount SUM = CND.Zero
 PAR.Accrual_Amount_SUM = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 //?** Accumulate amount paid for the Adjustment type during date range
 CASE;

 // IF DB1.Payment/Deposit Date GE PAR.Payment/Deposit Date
 IF DB1.Payment_Deposit_Date >= PAR.Payment_Deposit_Date;

 // AND DB1.Payment/Deposit Date LE PAR.To Date               USR
 AND DB1.Payment_Deposit_Date <= PAR.To_Date_USR;

 CASE;

 // IF DB1.Adjustment Type Code EQ PAR.Adjustment Type Code
 IF DB1.Adjustment_Type_Code = PAR.Adjustment_Type_Code;

 EXECUTE FUNCTION(RTV Cust. by Inv.      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1345722;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(WRK.AR_Customer_Number);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.A/R Customer Number EQ PAR.Customer Number       NBR
 IF WRK.AR_Customer_Number = PAR.Customer_Number_NBR;

 // PAR.Accrual Amount SUM = PAR.Accrual Amount SUM + DB1.Transaction Amount
 PAR.Accrual_Amount_SUM = PAR.Accrual_Amount_SUM + DB1.Transaction_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

}


// CUR.USR Adjustment Amt 8 = CUR.USR Adjustment Amt 8 - PAR.USR Adjustment Amt 8
CUR.USR_Adjustment_Amt_8 = CUR.USR_Adjustment_Amt_8 - PAR.USR_Adjustment_Amt_8;

//?** plus Write Offs under $50
EXECUTE FUNCTION(RTV Amt Tot for Adj Ty RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1812815;
PARAMETER(PAR.From_Date_USR);
PARAMETER(' WO');
PARAMETER(PAR.To_Date_USR);
PARAMETER(PAR.USR_Adjustment_Amt_8);
PARAMETER(PAR.AR_Customer_Number);
{
 //?USER: Initialize routine

 // PAR.Accrual Amount SUM = CND.Zero
 PAR.Accrual_Amount_SUM = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 //?** Accumulate amount paid for the Adjustment type during date range
 CASE;

 // IF DB1.Payment/Deposit Date GE PAR.Payment/Deposit Date
 IF DB1.Payment_Deposit_Date >= PAR.Payment_Deposit_Date;

 // AND DB1.Payment/Deposit Date LE PAR.To Date               USR
 AND DB1.Payment_Deposit_Date <= PAR.To_Date_USR;

 CASE;

 // IF DB1.Adjustment Type Code EQ PAR.Adjustment Type Code
 IF DB1.Adjustment_Type_Code = PAR.Adjustment_Type_Code;

 EXECUTE FUNCTION(RTV Cust. by Inv.      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1345722;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(WRK.AR_Customer_Number);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.A/R Customer Number EQ PAR.Customer Number       NBR
 IF WRK.AR_Customer_Number = PAR.Customer_Number_NBR;

 // PAR.Accrual Amount SUM = PAR.Accrual Amount SUM + DB1.Transaction Amount
 PAR.Accrual_Amount_SUM = PAR.Accrual_Amount_SUM + DB1.Transaction_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

}


// CUR.USR Adjustment Amt 8 = CUR.USR Adjustment Amt 8 - PAR.USR Adjustment Amt 8
CUR.USR_Adjustment_Amt_8 = CUR.USR_Adjustment_Amt_8 - PAR.USR_Adjustment_Amt_8;

//?USER: On print of final totals format

//?/\ /\ /\ /\   ****************************   /\ /\ /\ /\
//?** Calculations for Adjustment Types of PAY, FEE, and WO were
//?** moved into the "Process before print of final totals" because
//?** the calcs in the PO were producing unreliable results.
