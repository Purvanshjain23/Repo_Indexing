// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMWJPVR
// ?Date: 14.08.2025 Time: 03:44:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*YES
PAR.PRT_Save_Output_Sts = *YES;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CND.JOBD
PAR.PRT_Night_Queue = *JOBD;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// PAR.Change Flag USR = CND.Yes
PAR.Change_Flag_USR = 'Y';

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Load screen

// DTL.Warehouse Type = CND.Fresh
DTL.Warehouse_Type = 'FR';

// DTL.Whse Type Description = Condition name of DTL.Warehouse Type
DTL.Whse_Type_Description = RTVCND(DTL.Warehouse_Type);

//?** If Broker is passed in, protect it               E1704 LJB
CASE;

// IF PAR.Broker Code is Entered
IF PAR.Broker_Code <> *BLANK;

// DTL.Broker Code = PAR.Broker Code
DTL.Broker_Code = PAR.Broker_Code;

// DTL.Email Selection usr = CND.Spreadsheet Format
DTL.Email_Selection_usr = 'S';

// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

//?** Default to User co# to rtv email address, guymon if it is blank
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// LCL.Company Number = PAR.Company Number
LCL.Company_Number = PAR.Company_Number;

//?** Default to User co# to rtv email address, guymon if it is blank
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number = CND.Guymon
LCL.Company_Number = 360;

ENDIF;

EXECUTE FUNCTION(Rtv Broker Name       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1676428;
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Broker_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Email Address = LCL.System Value Alpha
DTL.Email_Address = LCL.System_Value_Alpha;

ENDIF;

//?** Email selector is hidden, all rpts are now emailed  E002587
// DTL.Email Selection usr = CND.Spreadsheet Format
DTL.Email_Selection_usr = 'S';

//?USER: Validate fields

//?** F4 to Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.USR A/R Customer Number
IF PGM.*Cursor_field = DTL.USR_A_R_Customer_Number;

// AND DTL.Broker Code is Entered
AND DTL.Broker_Code <> *BLANK;

//?** F4 Customer Number and Broker is passed in (Jpn Cust) E001704
//?** pass in zeros for Customer, Sel Bill To            E002587
// WRK.Ship to Customer      USR = CON.*ZERO
WRK.Ship_to_Customer_USR = *ZERO;

// Call program Zzz Cust Accr by Brokr SR.
CALL PROGRAM(Zzz Cust Accr by Brokr SR) ('PBBESRR');
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.USR_A_R_Customer_Number);

// IF PGM.*Cursor field <IS> DTL.USR A/R Customer Number
IF PGM.*Cursor_field = DTL.USR_A_R_Customer_Number;

// AND DTL.Broker Code is Not entered
AND DTL.Broker_Code = *BLANK;

//?** F4 Customer Number and no broker code entered
//?** pass in zeros for Customer, Sel Bill To            E002587
// WRK.Ship to Customer      USR = CON.*ZERO
WRK.Ship_to_Customer_USR = *ZERO;

// Call program SEL Bill To for ContrctSR.
CALL PROGRAM(SEL Bill To for ContrctSR) ('PBJASRR');
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(DTL.USR_A_R_Customer_Number);

// IF PGM.*Cursor field <IS> DTL.Broker Code
IF PGM.*Cursor_field = DTL.Broker_Code;

// Call program Sel Broker            SL.
CALL PROGRAM(Sel Broker            SL) ('POY6SRR');
PARAMETER(DTL.Broker_Code);

// IF PGM.*Cursor field <IS> DTL.Company
IF PGM.*Cursor_field = DTL.Company;

// Call program SEL Co By Number       SR.
CALL PROGRAM(SEL Co By Number       SR) ('PDMESRR');
PARAMETER(DTL.Company);
PARAMETER(DTL.Company_Name_DRV);

ENDIF;

ENDIF;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

//?old code
DO;

ENDDO;

//?CALC: Screen function fields

//?* Change Ship To Name to retrieve A/R Customer name   E002587
EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.USR_A_R_Customer_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Retrieve Broker Name if Broker Code entered
CASE;

// IF DTL.Broker Code is Entered
IF DTL.Broker_Code <> *BLANK;

EXECUTE FUNCTION(Broker Name DRV) TYPE(DRVFLD)                                  AC1675815;
PARAMETER(DTL.Broker_Name_DRV);
PARAMETER(DTL.Broker_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
 PARAMETER(*MISSING);
 PARAMETER(PAR.Broker_Name_DRV);
 PARAMETER(NLL.Broker_Address_Line_1);
 PARAMETER(NLL.Broker_Address_Line_2);
 PARAMETER(NLL.Broker_City);
 PARAMETER(NLL.Broker_State);
 PARAMETER(NLL.Broker_Zip);
 PARAMETER(NLL.Broker_Office_Manager);
 PARAMETER(NLL.Broker_Telephone_Number);
 PARAMETER(NLL.Broker_Fax_Number);
 PARAMETER(NLL.Broker_Email_Address);
 PARAMETER(NLL.Broker_G_L_Vendor_Number);
 PARAMETER(NLL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Whse Type Description = Condition name of DTL.Warehouse Type
DTL.Whse_Type_Description = RTVCND(DTL.Warehouse_Type);

//?USER: Validate relations

//?** Dates must be in order, if entered                 E003182
CASE;

// IF DTL.From Date             USR GT DTL.To Date               USR
IF DTL.From_Date_USR > DTL.To_Date_USR;

// AND DTL.From Date             USR is Entered
AND DTL.From_Date_USR <> *ZERO;

// Send error message - 'Date &1 cannot be before date &2'
ERROR(USR3945);
MSGPARM(DTL.From_Date_USR);
MSGPARM(DTL.To_Date_USR);

ENDIF;

//?** Email Address required                             E002587
CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

ENDIF;

//?Validate Customer# and dates are entered if required  E003182
CASE;

// IF DTL.USR A/R Customer Number is equal to zero
IF DTL.USR_A_R_Customer_Number = *ZERO;

//?** Customer Required for all                          E002587
// Send error message - 'Customer Required for spreadsheet report'
ERROR(USR4016);
MSGPARM(DTL.USR_A_R_Customer_Number);

//?Validate Customer# and dates are entered if required  E003182
// IF DTL.Customer Purchase Order # is Blank
IF DTL.Customer_Purchase_Order_# = *BLANK;

// AND DTL.Order Number is Equal to zeros
AND DTL.Order_Number = *ZERO;

// AND DTL.From Date             USR is Not Entered
AND ( ( DTL.From_Date_USR = *ZERO;

// OR DTL.To Date               USR is Not Entered
OR DTL.To_Date_USR = *ZERO );

// AND DTL.Select Report Options USR is Select 1 thru 4
AND DTL.Select_Report_Options_USR = '1'/'2'/'3'/'4' );

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.From_Date_USR);

//?Validate Customer# and dates are entered if required  E003182
// IF DTL.Customer Purchase Order # is Blank
IF DTL.Customer_Purchase_Order_# = *BLANK;

// AND DTL.Order Number is Equal to zeros
AND DTL.Order_Number = *ZERO;

// AND DTL.Select Report Type is Select 5 thru 10
AND DTL.Select_Report_Type = '5'/'6'/'7'/'8';

// Send error message - 'Purchase order or Order# required for Manifes Detail or Summary'
ERROR(USR4752);
MSGPARM(DTL.Customer_Purchase_Order_#);

//?Validate Customer# and dates are entered if required  E003182
// IF DTL.Company is Equal to zero
IF DTL.Company = *ZERO;

// AND DTL.Select Report Type is Select 5 thru 8
AND DTL.Select_Report_Type = '5'/'6'/'7'/'8';

// Send error message - 'Manifest Reports require a Company Number'
ERROR(USR5034);
MSGPARM(DTL.Company);

ENDIF;

//?** Company is required for 4=Summary
CASE;

// IF DTL.Select Report Type is 4 =Summary, All Companies
IF DTL.Select_Report_Type = '4';

//?** Company number must be entered
CASE;

// IF DTL.Company is Equal to zero
IF DTL.Company = *ZERO;

//?** 4=Summary requires Company #, per Janelle    E00227
// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(DTL.Company);

ENDIF;

ENDIF;

//?** Customer validations: Ship To, Broker                E002587
//?09/25/17 DN E011527-Commented Out BTC & Broker Validations & Moved Below.
//?09/25/17 DN E011527-Bypass Bill To Cust & Broker Validations If Opt 5-8.
CASE;

// IF DTL.Select Report Type is Select 5 thru 8
IF DTL.Select_Report_Type = '5'/'6'/'7'/'8';

//?09/25/17 DN E011527-Bypass Bill To Cust & Broker Validations If Opt 5-8.
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Record Status 1 Usr = CND.*Does Not Exist
WRK.Record_Status_1_Usr = 'N';

// WRK.Record Status 2 Usr = CND.*Does Not Exist
WRK.Record_Status_2_Usr = 'N';

// WRK.Record Status 3 usr = CND.*Does Not Exist
WRK.Record_Status_3_usr = 'N';

EXECUTE FUNCTION(RTV ST for BT,Val CPH  IF) TYPE(EXCINTFUN)                     AC2068139;
PARAMETER(1);
PARAMETER(DTL.USR_A_R_Customer_Number);
PARAMETER(WRK.Ship_to_Customer_USR);
PARAMETER(WRK.Record_Status_1_Usr);
PARAMETER(WRK.Record_Status_2_Usr);
PARAMETER(WRK.Record_Status_3_usr);
PARAMETER(DTL.Price_Code_USR);
PARAMETER(DTL.Broker_Code);
{
 //?Execute internal function

 //?* Rtv ship to's. Only an error if no ship to's in
 //?* the Customer Price Header for this Bill To
 //?* If Price Code entered, must be assigned to at least 1 Ship To
 //?* If Broker Code entered, must be assigned to at least 1 Ship To
 EXECUTE FUNCTION(RTV ST for BT,Val CPH  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2068138;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.Ship_to_Customer_USR);
 PARAMETER(PAR.Record_Status_1_Usr);
 PARAMETER(PAR.Record_Status_2_Usr);
 PARAMETER(PAR.Record_Status_3_usr);
 PARAMETER(PAR.Price_Code_USR);
 PARAMETER(PAR.Broker_Code);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Status 1 Usr = CND.*Does Not Exist
  PAR.Record_Status_1_Usr = 'N';

  //?USER: Process Data record

  //?* Customer must already exist in Customer Price Header, however,
  //?* these are Ship To's so check each for the requested Bill To
  //?* Only error of none of the assigned ship to's is in CPH
  EXECUTE FUNCTION(VAL Customer Exists   RT) TYPE(RTVOBJ) FILE(POC6REP)           AC1887805;
  PARAMETER(DB1.Ship_To_Customer);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

  }

  //?Ship To Customer, only one, skip additional tests
  CASE;

  // IF PAR.Record Status 1 Usr is *Exists
  IF PAR.Record_Status_1_Usr = 'E';

  //?Ship To Customer, only one, skip additional tests
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Record Status 1 Usr = CND.*Exists
  PAR.Record_Status_1_Usr = 'E';

  ENDIF;

  ENDIF;

  //?Broker - only need one, skip additional tests
  CASE;

  // IF PAR.Record Status 3 usr is *Exists
  IF PAR.Record_Status_3_usr = 'E';

  //?Broker - only need one, skip additional tests
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?** Validate Broker Code for at least 1 Ship To Customer
  CASE;

  // IF PAR.Broker Code is Entered
  IF PAR.Broker_Code <> *BLANK;

  EXECUTE FUNCTION(VAL Broker for ShipTo  RT) TYPE(RTVOBJ) FILE(OMHOREP)          AC2031619;
  PARAMETER(PAR.Broker_Code);
  PARAMETER(DB1.Ship_To_Customer);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  CASE;

  // IF PGM.*Return code is *Record already exists
  IF PGM.*Return_code = 'Y2U0003';

  // PAR.Record Status 3 usr = CND.*Exists
  PAR.Record_Status_3_usr = 'E';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


//?** Validations:  A/R and its Ship To's               E002587
CASE;

// IF DTL.USR A/R Customer Number is not equal to zero
IF DTL.USR_A_R_Customer_Number <> *ZERO;

//?** Error if no Ship To's in Customer Price Header for Bill To
CASE;

// IF WRK.Record Status 1 Usr is *Does Not Exist
IF WRK.Record_Status_1_Usr = 'N';

//?* Correct the error message to refer to bill to       E003326
// Send error message - 'No Ship To's assigned to this Bill To'
ERROR(USR4779);
MSGPARM(DTL.USR_A_R_Customer_Number);

ENDIF;

ENDIF;

//?** Validations:  Broker                               E002587
CASE;

// IF DTL.Broker Code is Entered
IF DTL.Broker_Code <> *BLANK;

//?** Error if Broker Code and no Ship To for Bill To assigned  E002587
CASE;

// IF WRK.Record Status 3 usr is *Does Not Exist
IF WRK.Record_Status_3_usr = 'N';

// Send error message - 'Broker not found for this customer'
ERROR(USR4468);
MSGPARM(DTL.Broker_Code);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Bill,Shp,PO#,AType RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2068467;
PARAMETER(DTL.Order_Number);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(WRK.USR_Customer_PO_#);
PARAMETER(NLL.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Validate AR# if Ord# and Cust# are entered          E003182
CASE;

// IF DTL.Order Number is Greater then zero
IF DTL.Order_Number > *ZERO;

// AND DTL.USR A/R Customer Number is not equal to zero
AND DTL.USR_A_R_Customer_Number <> *ZERO;

CASE;

// IF DTL.USR A/R Customer Number NE DTL.USR A/R Customer Number
IF DTL.USR_A_R_Customer_Number <> DTL.USR_A_R_Customer_Number;

// Send error message - 'Customer is not on this order number'
ERROR(USR4197);
MSGPARM(DTL.USR_A_R_Customer_Number);

ENDIF;

ENDIF;

//?* Validate PO# exists for this company number         E003182
CASE;

// IF DTL.Customer Purchase Order # is NE Blank
IF DTL.Customer_Purchase_Order_# <> *BLANK;

CASE;

// IF DTL.Company is Equal to zero
IF DTL.Company = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(DTL.Company);

ENDIF;

CASE;

// IF WRK.USR Customer PO # EQ DTL.Customer Purchase Order #
IF WRK.USR_Customer_PO_# = DTL.Customer_Purchase_Order_#;

EXECUTE FUNCTION(VAL PO# Exists for Co# RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2080060;
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Company);
PARAMETER(WRK.Record_Selected_USR);
{
 //?USER: Initialize routine

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 // LCL.Count USR = CON.*ZERO
 LCL.Count_USR = *ZERO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Company Number EQ PAR.Company Number
 IF DB1.Company_Number = PAR.Company_Number;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // DOW DB1.Company Number NE PAR.Company Number
 DOW DB1.Company_Number <> PAR.Company_Number;

 // OR LCL.Count USR is LE 21
 OR LCL.Count_USR <= 21;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

 ENDDO;

 ENDIF;

}


CASE;

// IF WRK.Record Selected       USR is no
IF WRK.Record_Selected_USR = 'N';

// OR PGM.*Return code is *Record does not exist
OR PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer PO# Invalid for Company#'
ERROR(USR4744);
MSGPARM(DTL.Customer_Purchase_Order_#);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?* See if screen PO# is exact match to file PO# or partial  E003182
CASE;

// IF WRK.USR Customer PO # EQ DTL.Customer Purchase Order #
IF WRK.USR_Customer_PO_# = DTL.Customer_Purchase_Order_#;

//?* If exact match, clear out 2nd po# (would be used for range)
// WRK.USR Customer PO # = CND.*Blanks
WRK.USR_Customer_PO_# = *BLANK;

//?* See if screen PO# is exact match to file PO# or partial  E003182
// IF *OTHERWISE
IF *OTHERWISE;

//?** Change wrk po# to a high value by filling it with 9's
//?** this will create a range for the program to test
// WRK.USR Customer PO # = DTL.Customer Purchase Order #
WRK.USR_Customer_PO_# = DTL.Customer_Purchase_Order_#;

// Call program CLC Fill Str with Char UP.
CALL PROGRAM(CLC Fill Str with Char UP) ('PBI2UPC');
PARAMETER(WRK.USR_Customer_PO_#);
PARAMETER(15);
PARAMETER(9);

ENDIF;

ENDIF;

ENDIF;

//?** Populate Company Name if entered                   E001893
CASE;

// IF DTL.Company Name DRV is blanks
IF DTL.Company_Name_DRV = *BLANK;

// AND DTL.Company is greater than zero
AND DTL.Company > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company);
PARAMETER(DTL.Company_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Populate Company Name if entered                   E001893
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Name DRV = CON.*ALL
DTL.Company_Name_DRV = *ALL;

ENDIF;

//?USER: User defined action

// PAR.Order Number 1  PASS  USR = DTL.Order Number
PAR.Order_Number_1_PASS_USR = DTL.Order_Number;

// PAR.Order Number 2  PASS  USR = CON.*ZERO
PAR.Order_Number_2_PASS_USR = *ZERO;

// PAR.From Date Pass        USR = DTL.From Date             USR
PAR.From_Date_Pass_USR = DTL.From_Date_USR;

// PAR.Thru Date Pass        USR = DTL.To Date               USR
PAR.Thru_Date_Pass_USR = DTL.To_Date_USR;

//?* Change Ship To Customer to Bill To Customer         E002587
// PAR.Customer Number Pass  USR = DTL.USR A/R Customer Number
PAR.Customer_Number_Pass_USR = DTL.USR_A_R_Customer_Number;

// PAR.Company Number Pass   USR = DTL.Company
PAR.Company_Number_Pass_USR = DTL.Company;

// PAR.Customer Name = WRK.USR Customer PO #
PAR.Customer_Name = WRK.USR_Customer_PO_#;

// PAR.PRT Description = CON.Contract Orders Report
PAR.PRT_Description = 'Contract Orders Report';

//?* Default printer to QPRINT2 when emailing
CASE;

// IF DTL.Email Selection usr is Not Blanks
IF DTL.Email_Selection_usr = 'E'/'P'/'R'/'S'/'Y';

// PAR.PRT Printer Device = CND.No print printer
PAR.PRT_Printer_Device = 'QPRINT2';

ENDIF;

//?* Set Manifest status                                 E002854
CASE;

// IF DTL.Select Report Type is 5 =Manifest Summary w/PC
IF DTL.Select_Report_Type = '5';

// OR DTL.Select Report Type is 7 =Manif Sum .xls w/PrcCd
OR DTL.Select_Report_Type = '7';

// WRK.Manifest Type STS = CND.Sales Summary
WRK.Manifest_Type_STS = 'SS';

//?* Set Manifest status                                 E002854
// IF DTL.Select Report Type is 6 =Manifest Detail w/PC
IF DTL.Select_Report_Type = '6';

// OR DTL.Select Report Type is 8 =Manif Dtl .xls w/PrcCd
OR DTL.Select_Report_Type = '8';

// WRK.Manifest Type STS = CND.Sales Detail
WRK.Manifest_Type_STS = 'SD';

//?* Set Manifest status                                 E002854
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Manifest Type STS = CND.*BLANKS
WRK.Manifest_Type_STS = *BLANK;

ENDIF;

// Call program CRT Rpt Recs in qtemp CL.
CALL PROGRAM(CRT Rpt Recs in qtemp CL) ('PMWLUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Email_Selection_usr);
PARAMETER(DTL.Select_Report_Type);
PARAMETER(PAR.Customer_Name);
PARAMETER(DTL.Broker_Code);
PARAMETER(WRK.Manifest_Type_STS);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Email_Address);

//?submitted msg
CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Email/Report has been submitted'
MESSAGE(USR4506 *INFO);

ENDIF;

