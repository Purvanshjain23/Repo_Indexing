// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDCGXFR
// ?Date: 14.08.2025 Time: 03:34:01
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(CRT AS Order Hdr/ Dlt  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1481856;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Order_Number);
{
 //?USER: Process Data record

 // PAR.AS Add/Change/Delete = CND.Delete
 PAR.AS_Add_Change_Delete = 'D';

 //?This func will delete existing AS Order header and create a new one
 EXECUTE FUNCTION(CRT AS Order Header    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1322873;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.AS_Add_Change_Delete);
 PARAMETER(DB1.Stop_Drop);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Header Status is Cancelled
  IF DB1.Header_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Delete any Existing records prior to creating new
  // PAR.AS Order Number = CVTVAR(DB1.Order Number)
  PAR.AS_Order_Number = CVTVAR(DB1.Order_Number);

  EXECUTE FUNCTION(DLT AS Order Header    DL) TYPE(DLTOBJ) FILE(PDJQCPP)          AC1322820;
  PARAMETER('H');
  PARAMETER(PAR.AS_Order_Number);
  //?OMS280:  delete existing SNDACC records for order
  EXECUTE FUNCTION(Del SNDACC Entry/Ord   RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC1481967;
  PARAMETER(DB1.Load_ID);
  PARAMETER('SNDACC');
  PARAMETER(DB1.Order_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   CASE;

   // IF DB1.Order Number EQ PAR.Order Number
   IF DB1.Order_Number = PAR.Order_Number;

   EXECUTE FUNCTION(DEL Load/Order Chg Log DR) TYPE(DLTOBJ) FILE(PDLHCPP)          AC1465746;
   PARAMETER(DB1.Created_Date);
   PARAMETER(DB1.Created_Time);
   PARAMETER(DB1.Sequence_Number);
   ENDIF;

  }

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?****
  //?Load AS file fields
  DO;

  // PAR.AS Customer Name = DB1.Ship To Name
  PAR.AS_Customer_Name = DB1.Ship_To_Name;

  // PAR.AS Address 1 = DB1.Ship To Address Line 1
  PAR.AS_Address_1 = DB1.Ship_To_Address_Line_1;

  // PAR.AS Address 2 = DB1.Ship To Address Line 2
  PAR.AS_Address_2 = DB1.Ship_To_Address_Line_2;

  // PAR.AS Address 3 = DB1.Ship To Address Line 3
  PAR.AS_Address_3 = DB1.Ship_To_Address_Line_3;

  // PAR.AS City = DB1.Ship To City
  PAR.AS_City = DB1.Ship_To_City;

  // PAR.AS State = DB1.Ship To State Code
  PAR.AS_State = DB1.Ship_To_State_Code;

  // PAR.AS Zip = DB1.Ship To Zip/Postal Code
  PAR.AS_Zip = DB1.Ship_To_Zip_Postal_Code;

  //?OMS228:  for export orders, change ship to info to sail port info
  CASE;

  // IF DB1.Export Status is yes
  IF DB1.Export_Status = 'Y';

  EXECUTE FUNCTION(RTV Shipping Line/Port RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1447904;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Shipping_Line);
  PARAMETER(PAR.Port_Delv_Terminal);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  CASE;

  // IF PAR.Sail Port Delv Terminal NE WRK.BLANK
  IF PAR.Port_Delv_Terminal <> WRK.BLANK;

  EXECUTE FUNCTION(RTV Shipping Line/PortsRT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1447742;
  PARAMETER(PAR.Shipping_Line);
  PARAMETER(PAR.Port_Delv_Terminal);
  PARAMETER(PAR.AS_City);
  PARAMETER(PAR.AS_Address_1);
  PARAMETER(PAR.AS_Address_2);
  PARAMETER(PAR.AS_State);
  PARAMETER(PAR.AS_Zip);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  // PAR.AS Address 3 = CON.*BLANK
  PAR.AS_Address_3 = *BLANK;

  ENDIF;

  ENDIF;

  // PAR.AS Purchase Order Number = DB1.Customer Purchase Order #
  PAR.AS_Purchase_Order_Number = DB1.Customer_Purchase_Order_#;

  EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(PAR.Date_Out_60_USR);
  {
   //?Execute internal function

   //?convert numeric date to character date.
   // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
   PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

   //?extract month, day, and year.
   // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
   PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

   // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
   PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

   // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
   PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

   //?reconstruct date in mmddyy format.
   // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
   PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
   PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

   //?convert character date to numeric date.
   // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
   PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

  }

  // PAR.AS Req. Delivery Date = CVTVAR(PAR.Date Out (6,0) USR)
  PAR.AS_Req_Delivery_Date = CVTVAR(PAR.Date_Out_60_USR);

  // PAR.Time  4A             USR = CVTVAR(DB1.Requested Delivery Time)
  PAR.Time_4A_USR = CVTVAR(DB1.Requested_Delivery_Time);

  // WRK.Hours  2A            USR = SUBSTRING(PAR.Time  4A             USR,CON.1,CON.
  WRK.Hours_2A_USR = SUBSTRING(PAR.Time_4A_USR:1:2);

  // WRK.Minutes  2A          USR = SUBSTRING(PAR.Time  4A             USR,CON.3,CON.
  WRK.Minutes_2A_USR = SUBSTRING(PAR.Time_4A_USR:3:2);

  // WRK.Hours HH:  3A = CONCAT(WRK.Hours  2A            USR,CON.:,CON.*ZERO)
  WRK.Hours_HH_3A = WRK.Hours_2A_USR + ':' (*ZERO);

  // PAR.AS Req. Delivery Time = CONCAT(WRK.Hours HH:  3A,WRK.Minutes  2A          US
  PAR.AS_Req_Delivery_Time = WRK.Hours_HH_3A + WRK.Minutes_2A_USR (*ZERO);

  EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(PAR.AS_Trucking_Company);
  PARAMETER(WRK.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.AS Load Number = CVTVAR(DB1.Load ID)
  PAR.AS_Load_Number = CVTVAR(DB1.Load_ID);

  // WRK.Calc 2 = PAR.Stop/Drop * CON.1 *
  WRK.Calc_2 = PAR.Stop_Drop * 1;

  // PAR.AS Stop Number = CVTVAR(WRK.Calc 2)
  PAR.AS_Stop_Number = CVTVAR(WRK.Calc_2);

  EXECUTE FUNCTION(RTV Customer Telephone RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1216241;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(WRK.Telephone_Number_FF);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.AS Phone Number = CVTVAR(WRK.Telephone Number FF)
  PAR.AS_Phone_Number = CVTVAR(WRK.Telephone_Number_FF);

  // PAR.AS Reefer Temperature = CON.*BLANK
  PAR.AS_Reefer_Temperature = *BLANK;

  // PAR.AS Collect/Prepaid = Condition name of DB1.Shipping Method
  PAR.AS_Collect_Prepaid = RTVCND(DB1.Shipping_Method);

  // PAR.AS Special Instr. 1 = DB1.Special Instructions
  PAR.AS_Special_Instr_1 = DB1.Special_Instructions;

  // PAR.AS Special Instr. 2 = DB1.Special Instructions 2
  PAR.AS_Special_Instr_2 = DB1.Special_Instructions_2;

  EXECUTE FUNCTION(RTV Ship Inst for AS   RT) TYPE(RTVOBJ) FILE(PDIECPP)          AC1322976;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.AS_Shipping_Instr_1);
  PARAMETER(PAR.AS_Shipping_Instr_2);
  PARAMETER(PAR.AS_Shipping_Instr_3);
  {
   //?USER: Initialize routine

   // WRK.USR Counter = CON.*ZERO
   WRK.USR_Counter = *ZERO;

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // WRK.USR Counter = WRK.USR Counter + CON.1
   WRK.USR_Counter = WRK.USR_Counter + 1;

   CASE;

   // IF WRK.USR Counter is EQ 1
   IF WRK.USR_Counter = 1;

   // PAR.AS Shipping Instr 1 = DB1.Shipping Instructions
   PAR.AS_Shipping_Instr_1 = DB1.Shipping_Instructions;

   // IF WRK.USR Counter is EQ 2
   IF WRK.USR_Counter = 2;

   // PAR.AS Shipping Instr 2 = DB1.Shipping Instructions
   PAR.AS_Shipping_Instr_2 = DB1.Shipping_Instructions;

   // IF WRK.USR Counter is EQ 3
   IF WRK.USR_Counter = 3;

   // PAR.AS Shipping Instr 3 = DB1.Shipping Instructions
   PAR.AS_Shipping_Instr_3 = DB1.Shipping_Instructions;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.AS_Warehouse_ID_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV Trailer Number     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1366270;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Trailer_Id);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.AS Trailer Number = PAR.Trailer Id
  PAR.AS_Trailer_Number = PAR.Trailer_Id;

  // PAR.AS Age Code = DB1.Age Code
  PAR.AS_Age_Code = DB1.Age_Code;

  ENDDO;

  EXECUTE FUNCTION(CRT AS Order Header    CR) TYPE(CRTOBJ) FILE(PDJQCPP)          AC1322818;
  PARAMETER('H');
  PARAMETER(PAR.AS_Order_Number);
  PARAMETER(PAR.AS_Customer_Name);
  PARAMETER(PAR.AS_Address_1);
  PARAMETER(PAR.AS_Address_2);
  PARAMETER(PAR.AS_Address_3);
  PARAMETER(PAR.AS_City);
  PARAMETER(PAR.AS_State);
  PARAMETER(PAR.AS_Zip);
  PARAMETER(PAR.AS_Purchase_Order_Number);
  PARAMETER(PAR.AS_Req_Delivery_Date);
  PARAMETER(PAR.AS_Req_Delivery_Time);
  PARAMETER(PAR.AS_Trucking_Company);
  PARAMETER(PAR.AS_Load_Number);
  PARAMETER(PAR.AS_Stop_Number);
  PARAMETER(PAR.AS_Phone_Number);
  PARAMETER(PAR.AS_Reefer_Temperature);
  PARAMETER(PAR.AS_Collect_Prepaid);
  PARAMETER(PAR.AS_Special_Instr_1);
  PARAMETER(PAR.AS_Special_Instr_2);
  PARAMETER(PAR.AS_Shipping_Instr_1);
  PARAMETER(PAR.AS_Shipping_Instr_2);
  PARAMETER(PAR.AS_Shipping_Instr_3);
  PARAMETER(PAR.AS_Warehouse_ID_Code);
  PARAMETER(PAR.AS_Trailer_Number);
  PARAMETER(PAR.AS_Age_Code);
  PARAMETER(PAR.AS_Add_Change_Delete);
  //?****
  ENDIF;

 }

 //?This func will delete existing AS Order detail and create a new one
 EXECUTE FUNCTION(CRT AS Order Detail    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428513;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.AS_Add_Change_Delete);
 {
  //?USER: Initialize routine

  //?Delete existing detail records prior to create
  // PAR.AS Order Number = CVTVAR(PAR.Order Number)
  PAR.AS_Order_Number = CVTVAR(PAR.Order_Number);

  EXECUTE FUNCTION(DEL All AS Order Dtl   RT) TYPE(RTVOBJ) FILE(PDJRCPP)          AC1483633;
  PARAMETER('D');
  PARAMETER(PAR.AS_Order_Number);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(DLT AS Order Detail    DL) TYPE(DLTOBJ) FILE(PDJRCPP)          AC1320102;
   PARAMETER('D');
   PARAMETER(DB1.AS_Order_Number);
   PARAMETER(DB1.AS_Product_Code);
  }

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  //?The add change flag will be delete.
  //?Load AS file fields
  DO;

  // PAR.AS Order Number = CVTVAR(DB1.Order Number)
  PAR.AS_Order_Number = CVTVAR(DB1.Order_Number);

  // WRK.Calc 5 = DB1.Item Code * CON.1 *
  WRK.Calc_5 = DB1.Item_Code * 1;

  // PAR.AS Product Code = CVTVAR(WRK.Calc 5)
  PAR.AS_Product_Code = CVTVAR(WRK.Calc_5);

  // WRK.Calc 4 = DB1.Quantity Scheduled * CON.1 *
  WRK.Calc_4 = DB1.Quantity_Scheduled * 1;

  // PAR.AS Quantity = CVTVAR(WRK.Calc 4)
  PAR.AS_Quantity = CVTVAR(WRK.Calc_4);

  EXECUTE FUNCTION(RTV First Comment Line RT) TYPE(RTVOBJ) FILE(OPCPCPP)          AC1323024;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.AS_Line_Comment);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   CASE;

   // IF DB1.Comment Text is not equal to blank
   IF DB1.Comment_Text <> *BLANK;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(CLC Oldest Label Dt    IF) TYPE(EXCINTFUN)                     AC1550172;
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(LCL.Date_ATR);
  {
   //?Execute internal function

   //?This internal function will return the 'Oldest Label Date' to it's
   //?calling function based on the input 'Age Code' and 'Scheduled Ship
   //?Date'.
   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   CASE;

   // IF PAR.Age Code is A: 0 Day
   IF PAR.Age_Code = 'A';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR
   PAR.Date_ATR = PAR.Scheduled_Ship_Date_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is B: 1 Day
   IF PAR.Age_Code = 'B';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-1 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-1' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is C: 2 Day
   IF PAR.Age_Code = 'C';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-2 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-2' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is D: 3 Day
   IF PAR.Age_Code = 'D';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-3 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-3' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is E: 4 Day
   IF PAR.Age_Code = 'E';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-4 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-4' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is F: 5 Day
   IF PAR.Age_Code = 'F';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-5 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-5' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is G: 6 Day
   IF PAR.Age_Code = 'G';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-6 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-6' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is H: 7 Days to 119 Days
   IF PAR.Age_Code = 'H';

   // OR PAR.Age Code is I: 120 Days +
   OR PAR.Age_Code = 'I';

   //?RMC 9/12/06 PFS019 90 days chgd to 120 days
   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-7 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-7' 'DY' 1111111 'NONE' 'N' 1);

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  // LCL.Date (Alpha) USR = CVTVAR(LCL.Date - ATR)
  LCL.Date_Alpha_USR = CVTVAR(LCL.Date_ATR);

  // LCL.Date From Convert USR = LCL.Date (Alpha) USR
  LCL.Date_From_Convert_USR = LCL.Date_Alpha_USR;

  // Call program Cvt Date              UP.
  CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
  PARAMETER(LCL.Date_From_Convert_USR);
  PARAMETER(LCL.Date_To_Convert_USR);
  PARAMETER(*CYMD);
  PARAMETER(*YYMD);
  PARAMETER(*NONE);

  // PAR.AS Label Date YYYYMMDD = LCL.Date To Convert USR
  PAR.AS_Label_Date_YYYYMMDD = LCL.Date_To_Convert_USR;

  ENDDO;

  EXECUTE FUNCTION(CRT AS Order Detail    CR) TYPE(CRTOBJ) FILE(PDJRCPP)          AC1320100;
  PARAMETER('D');
  PARAMETER(PAR.AS_Order_Number);
  PARAMETER(PAR.AS_Product_Code);
  PARAMETER(PAR.AS_Quantity);
  PARAMETER(PAR.AS_Line_Comment);
  PARAMETER('D');
  PARAMETER(PAR.AS_Label_Date_YYYYMMDD);
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Load AS file fields
  DO;

  // PAR.AS Order Number = CVTVAR(DB1.Order Number)
  PAR.AS_Order_Number = CVTVAR(DB1.Order_Number);

  // WRK.Calc 5 = DB1.Item Code * CON.1 *
  WRK.Calc_5 = DB1.Item_Code * 1;

  // PAR.AS Product Code = CVTVAR(WRK.Calc 5)
  PAR.AS_Product_Code = CVTVAR(WRK.Calc_5);

  // WRK.Calc 4 = DB1.Quantity Scheduled * CON.1 *
  WRK.Calc_4 = DB1.Quantity_Scheduled * 1;

  // PAR.AS Quantity = CVTVAR(WRK.Calc 4)
  PAR.AS_Quantity = CVTVAR(WRK.Calc_4);

  EXECUTE FUNCTION(RTV First Comment Line RT) TYPE(RTVOBJ) FILE(OPCPCPP)          AC1323024;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.AS_Line_Comment);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   CASE;

   // IF DB1.Comment Text is not equal to blank
   IF DB1.Comment_Text <> *BLANK;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(CLC Oldest Label Dt    IF) TYPE(EXCINTFUN)                     AC1550172;
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(LCL.Date_ATR);
  {
   //?Execute internal function

   //?This internal function will return the 'Oldest Label Date' to it's
   //?calling function based on the input 'Age Code' and 'Scheduled Ship
   //?Date'.
   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   CASE;

   // IF PAR.Age Code is A: 0 Day
   IF PAR.Age_Code = 'A';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR
   PAR.Date_ATR = PAR.Scheduled_Ship_Date_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is B: 1 Day
   IF PAR.Age_Code = 'B';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-1 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-1' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is C: 2 Day
   IF PAR.Age_Code = 'C';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-2 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-2' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is D: 3 Day
   IF PAR.Age_Code = 'D';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-3 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-3' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is E: 4 Day
   IF PAR.Age_Code = 'E';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-4 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-4' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is F: 5 Day
   IF PAR.Age_Code = 'F';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-5 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-5' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is G: 6 Day
   IF PAR.Age_Code = 'G';

   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-6 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-6' 'DY' 1111111 'NONE' 'N' 1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Age Code is H: 7 Days to 119 Days
   IF PAR.Age_Code = 'H';

   // OR PAR.Age Code is I: 120 Days +
   OR PAR.Age_Code = 'I';

   //?RMC 9/12/06 PFS019 90 days chgd to 120 days
   // PAR.Date - ATR = PAR.Scheduled Ship Date USR + CON.-7 *DAYS
   PAR.Date_ATR = DATEINCR(PAR.Scheduled_Ship_Date_USR '-7' 'DY' 1111111 'NONE' 'N' 1);

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  // LCL.Date (Alpha) USR = CVTVAR(LCL.Date - ATR)
  LCL.Date_Alpha_USR = CVTVAR(LCL.Date_ATR);

  // LCL.Date From Convert USR = LCL.Date (Alpha) USR
  LCL.Date_From_Convert_USR = LCL.Date_Alpha_USR;

  // Call program Cvt Date              UP.
  CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
  PARAMETER(LCL.Date_From_Convert_USR);
  PARAMETER(LCL.Date_To_Convert_USR);
  PARAMETER(*CYMD);
  PARAMETER(*YYMD);
  PARAMETER(*NONE);

  // PAR.AS Label Date YYYYMMDD = LCL.Date To Convert USR
  PAR.AS_Label_Date_YYYYMMDD = LCL.Date_To_Convert_USR;

  ENDDO;

  EXECUTE FUNCTION(CRT AS Order Detail    CR) TYPE(CRTOBJ) FILE(PDJRCPP)          AC1320100;
  PARAMETER('D');
  PARAMETER(PAR.AS_Order_Number);
  PARAMETER(PAR.AS_Product_Code);
  PARAMETER(PAR.AS_Quantity);
  PARAMETER(PAR.AS_Line_Comment);
  PARAMETER(PAR.AS_Add_Change_Delete);
  PARAMETER(PAR.AS_Label_Date_YYYYMMDD);
  ENDIF;

 }

}


