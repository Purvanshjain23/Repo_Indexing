// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNHQXFR
// ?Date: 14.08.2025 Time: 03:45:12
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Del OrdDtl SchInv ALL RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1648693;
PARAMETER(360);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.OD_Production_Date);
}


EXECUTE FUNCTION(Del OrdDtl SchInv ALL RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1648693;
PARAMETER(960);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.OD_Production_Date);
}


//?New for STARTUP converting : we want to run orders thru the new
//?order allocation routine, so init this build file with qty and weight
//?  scheduled = 0
EXECUTE FUNCTION(Rtv to Del ODBS f/bld RT) TYPE(RTVOBJ) FILE(PME6CPP)           AC1919406;
PARAMETER(360);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Order Det Bld Sch DO) TYPE(DLTOBJ) FILE(PME6CPP)           AC1918006;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
}


EXECUTE FUNCTION(Rtv to Del ODBS f/bld RT) TYPE(RTVOBJ) FILE(PME6CPP)           AC1919406;
PARAMETER(960);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Order Det Bld Sch DO) TYPE(DLTOBJ) FILE(PME6CPP)           AC1918006;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
}


// PAR.Scheduled Ship Date USR = JOB.*Job date + CON.-3 *DAYS
PAR.Scheduled_Ship_Date_USR = DATEINCR(JOB.*Job_date '-3' 'DY' 1111111 'NONE' 'N' 1);

//?Build Order Detail Build Sched workfile : Start with 3 days prior
//?     Stop with Production Date RGT (Last date in pdi8cpp)
//?4/09/09 Exclude orders with Production Plan sts = "N" ie. 888 samples
//?     Their ordered qty =  sched qty, and they do not go on HOLD
EXECUTE FUNCTION(UPS Crt Ord Dt Bl CONVRT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1932488;
PARAMETER(360);
PARAMETER(PAR.Scheduled_Ship_Date_USR);
PARAMETER(PAR.Production_Date_RGT);
{
 //?USER: Initialize routine

 // LCL.Company Number = CON.*ZERO
 LCL.Company_Number = *ZERO;

 // LCL.Order Number = CON.*ZERO
 LCL.Order_Number = *ZERO;

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // LCL.Ship To Customer = CON.*ZERO
 LCL.Ship_To_Customer = *ZERO;

 //?***** Change Log and Comments
 DO;

 //?** 05/02/2011 RMC E01523
 //?**  Use req delv date/time for ddt calc always
 EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
 {
  //?Execute internal function

  //?FP1309 Inventory Age Code Description
 }

 //?** 10/02/2009 LJB E00495
 //?**  Rtv carrier appointment date/time. If entered, use for
 //?**  deadline departure date/time calcs
 ENDDO;

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 //?CHG:  Order Number
 CASE;

 // IF LCL.Order Number NE DB1.Order Number
 IF LCL.Order_Number <> DB1.Order_Number;

 // LCL.Company Number = DB1.Company Number
 LCL.Company_Number = DB1.Company_Number;

 // LCL.Order Number = DB1.Order Number
 LCL.Order_Number = DB1.Order_Number;

 // LCL.Ship To Customer = DB1.Ship To Customer
 LCL.Ship_To_Customer = DB1.Ship_To_Customer;

 EXECUTE FUNCTION(RTV Typ,Sts,Event,Ld  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1918044;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Date_of_Original_Entry);
 PARAMETER(LCL.Credit_Hold);
 PARAMETER(LCL.Production_Hold);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(LCL.Requested_Delivery_Time);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Event_Code);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(LCL.Time_of_Original_Entry);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Territory using St RT) TYPE(RTVOBJ) FILE(PDLWREP)          AC1494008;
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Territory_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Partial picked Y/N ?
 CASE;

 // IF LCL.Event Code is 03 Picked
 IF LCL.Event_Code = '03';

 // LCL.ODBS Partial Pick Sts = CND.Yes
 LCL.ODBS_Partial_Pick_Sts = 1;

 //?Partial picked Y/N ?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ODBS Partial Pick Sts = CND.No
 LCL.ODBS_Partial_Pick_Sts = 2;

 ENDIF;

 //?Get Deadline from Load if assigned
 CASE;

 // IF LCL.Load ID is GT Zero
 IF LCL.Load_ID > *ZERO;

 EXECUTE FUNCTION(RTV for Build Sched   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1919219;
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Load_Status);
 PARAMETER(LCL.Deadline_Depart_Date_LH);
 PARAMETER(LCL.Deadline_Depart_Time_LH);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Get Deadline from Load if assigned
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Deadline Depart Date LH = DB1.Deadline Depart Date LH
 LCL.Deadline_Depart_Date_LH = DB1.Deadline_Depart_Date_LH;

 // LCL.Deadline Depart Time LH = DB1.Deadline Depart Time LH
 LCL.Deadline_Depart_Time_LH = DB1.Deadline_Depart_Time_LH;

 // LCL.Load Status = CND.*Blank
 LCL.Load_Status = *BLANK;

 ENDIF;

 //?** Rtv carrier appt dt/tm, use if entered for ddd/t calcs  E00495
 //?Calc Deadline Depart DD/Tm if not on load or order
 CASE;

 // IF LCL.Deadline Depart Date LH is not entered
 IF LCL.Deadline_Depart_Date_LH = *ZERO;

 // OR LCL.Deadline Depart Time LH is not entered
 OR LCL.Deadline_Depart_Time_LH = *ZERO;

 EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Load_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?E01523 RMC 5/02/2011 use req delv dt/time for ddt calc always
 // WRK.USR Date - ATR = LCL.Requested Delivery Date
 WRK.USR_Date_ATR = LCL.Requested_Delivery_Date;

 // WRK.USR To Time 4.0 = LCL.Requested Delivery Time
 WRK.USR_To_Time_4_0 = LCL.Requested_Delivery_Time;

 // Call program CLC Deadln Depart Dt  XF.
 CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(WRK.USR_Date_ATR);
 PARAMETER(WRK.USR_To_Time_4_0);
 PARAMETER(LCL.Deadline_Depart_Date_LH);
 PARAMETER(LCL.Deadline_Depart_Time_LH);

 ENDIF;

 CASE;

 // IF DB1.Scheduled Ship Date GT PAR.Production Date RGT
 IF DB1.Scheduled_Ship_Date > PAR.Production_Date_RGT;

 QUIT;

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF LCL.Order Type - Sales is Regular Order
 IF LCL.Order_Type_Sales = 'OR';

 CASE;

 // IF DB1.Detail Line Status is Conf/Comp/Canc
 IF DB1.Detail_Line_Status = 'X'/'C'/'R';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Chill Time USR = CON.*ZERO
 LCL.Chill_Time_USR = *ZERO;

 //?get warehouse type and chill time
 DO;

 //?8/5/2010 Warehouse type was nll fp1309
 EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(NLL.Description_Line_One);
 PARAMETER(NLL.UOM_Primary);
 PARAMETER(NLL.Unit_Weight);
 PARAMETER(NLL.Item_Structure_Class_Code);
 PARAMETER(NLL.Item_Structure_Group_Code);
 PARAMETER(NLL.Item_Structure_Type_Code);
 PARAMETER(NLL.Item_Type_Code);
 PARAMETER(NLL.Default_Warehouse);
 PARAMETER(LCL.Fresh_Chilling_Time);
 PARAMETER(NLL.Base_Conv_Loss_Item);
 PARAMETER(NLL.Variety_Rendered_Cut);
 PARAMETER(NLL.Credit_Item_Status);
 PARAMETER(NLL.Std_Weight_Head_Var_Ren);
 PARAMETER(NLL.Pieces_Per_Head);
 PARAMETER(NLL.Department_Code);
 PARAMETER(NLL.Group_for_Packaging);
 PARAMETER(NLL.Seconds_Item);
 PARAMETER(NLL.Piece_Count_Item);
 PARAMETER(NLL.Pieces_Per_Bag);
 PARAMETER(NLL.Bags_Per_Unit);
 PARAMETER(NLL.Export_Domestic);
 PARAMETER(NLL.Print_On_Schedule);
 PARAMETER(NLL.Fresh_Inv_Allocation_Seq);
 PARAMETER(NLL.Fresh_Sched_As_Ordered);
 PARAMETER(NLL.Frozen_Inv_Allocation_Seq);
 PARAMETER(NLL.Primal_Group_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(NLL.Trans_Contol_AS400_Plant);
 PARAMETER(NLL.Warehouse_Location);
 PARAMETER(LCL.Warehouse_Std_Chill_Time);
 PARAMETER(LCL.Warehouse_Chill_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 CASE;

 // IF LCL.Warehouse Std Chill Time is yes
 IF LCL.Warehouse_Std_Chill_Time = 'Y';

 // LCL.Chill Time USR = LCL.Warehouse Chill Time
 LCL.Chill_Time_USR = LCL.Warehouse_Chill_Time;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Chill Time USR = LCL.Fresh Chilling Time
 LCL.Chill_Time_USR = LCL.Fresh_Chilling_Time;

 ENDIF;

 ENDDO;

 // Call program CLC PA Age FrmToDates XF.
 CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Chilling_Time_USR);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Production_AgeDte_Fr);
 PARAMETER(LCL.Production_AgeDte_To);

 //?output 0 for weight and qty scheduled
 EXECUTE FUNCTION(Crt Order Det Bld Sch CR) TYPE(CRTOBJ) FILE(PME6CPP)           AC1918004;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(LCL.ODBS_Partial_Pick_Sts);
 PARAMETER(DB1.Detail_Line_Status);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Consumed_Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(DB1.Weight_Ordered);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Event_Code);
 PARAMETER(LCL.Deadline_Depart_Date_LH);
 PARAMETER(LCL.Deadline_Depart_Time_LH);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Export_Status);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Production_Hold);
 PARAMETER(LCL.Credit_Hold);
 PARAMETER(LCL.Load_Status);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(LCL.Time_of_Original_Entry);
 PARAMETER(WRK.ODBS_Sched_Override_Sts);
 PARAMETER('OA');
 PARAMETER(*ZERO);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Production_AgeDte_Fr);
 PARAMETER(LCL.Production_AgeDte_To);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(LCL.ODBS_Status_2_2_size);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Territory_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(UPS Crt Ord Dt Bl CONVRT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1932488;
PARAMETER(960);
PARAMETER(PAR.Scheduled_Ship_Date_USR);
PARAMETER(PAR.Production_Date_RGT);
{
 //?USER: Initialize routine

 // LCL.Company Number = CON.*ZERO
 LCL.Company_Number = *ZERO;

 // LCL.Order Number = CON.*ZERO
 LCL.Order_Number = *ZERO;

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // LCL.Ship To Customer = CON.*ZERO
 LCL.Ship_To_Customer = *ZERO;

 //?***** Change Log and Comments
 DO;

 //?** 05/02/2011 RMC E01523
 //?**  Use req delv date/time for ddt calc always
 EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
 {
  //?Execute internal function

  //?FP1309 Inventory Age Code Description
 }

 //?** 10/02/2009 LJB E00495
 //?**  Rtv carrier appointment date/time. If entered, use for
 //?**  deadline departure date/time calcs
 ENDDO;

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 //?CHG:  Order Number
 CASE;

 // IF LCL.Order Number NE DB1.Order Number
 IF LCL.Order_Number <> DB1.Order_Number;

 // LCL.Company Number = DB1.Company Number
 LCL.Company_Number = DB1.Company_Number;

 // LCL.Order Number = DB1.Order Number
 LCL.Order_Number = DB1.Order_Number;

 // LCL.Ship To Customer = DB1.Ship To Customer
 LCL.Ship_To_Customer = DB1.Ship_To_Customer;

 EXECUTE FUNCTION(RTV Typ,Sts,Event,Ld  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1918044;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Date_of_Original_Entry);
 PARAMETER(LCL.Credit_Hold);
 PARAMETER(LCL.Production_Hold);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(LCL.Requested_Delivery_Time);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Event_Code);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(LCL.Time_of_Original_Entry);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Territory using St RT) TYPE(RTVOBJ) FILE(PDLWREP)          AC1494008;
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Territory_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Partial picked Y/N ?
 CASE;

 // IF LCL.Event Code is 03 Picked
 IF LCL.Event_Code = '03';

 // LCL.ODBS Partial Pick Sts = CND.Yes
 LCL.ODBS_Partial_Pick_Sts = 1;

 //?Partial picked Y/N ?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ODBS Partial Pick Sts = CND.No
 LCL.ODBS_Partial_Pick_Sts = 2;

 ENDIF;

 //?Get Deadline from Load if assigned
 CASE;

 // IF LCL.Load ID is GT Zero
 IF LCL.Load_ID > *ZERO;

 EXECUTE FUNCTION(RTV for Build Sched   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1919219;
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Load_Status);
 PARAMETER(LCL.Deadline_Depart_Date_LH);
 PARAMETER(LCL.Deadline_Depart_Time_LH);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Get Deadline from Load if assigned
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Deadline Depart Date LH = DB1.Deadline Depart Date LH
 LCL.Deadline_Depart_Date_LH = DB1.Deadline_Depart_Date_LH;

 // LCL.Deadline Depart Time LH = DB1.Deadline Depart Time LH
 LCL.Deadline_Depart_Time_LH = DB1.Deadline_Depart_Time_LH;

 // LCL.Load Status = CND.*Blank
 LCL.Load_Status = *BLANK;

 ENDIF;

 //?** Rtv carrier appt dt/tm, use if entered for ddd/t calcs  E00495
 //?Calc Deadline Depart DD/Tm if not on load or order
 CASE;

 // IF LCL.Deadline Depart Date LH is not entered
 IF LCL.Deadline_Depart_Date_LH = *ZERO;

 // OR LCL.Deadline Depart Time LH is not entered
 OR LCL.Deadline_Depart_Time_LH = *ZERO;

 EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Load_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?E01523 RMC 5/02/2011 use req delv dt/time for ddt calc always
 // WRK.USR Date - ATR = LCL.Requested Delivery Date
 WRK.USR_Date_ATR = LCL.Requested_Delivery_Date;

 // WRK.USR To Time 4.0 = LCL.Requested Delivery Time
 WRK.USR_To_Time_4_0 = LCL.Requested_Delivery_Time;

 // Call program CLC Deadln Depart Dt  XF.
 CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(WRK.USR_Date_ATR);
 PARAMETER(WRK.USR_To_Time_4_0);
 PARAMETER(LCL.Deadline_Depart_Date_LH);
 PARAMETER(LCL.Deadline_Depart_Time_LH);

 ENDIF;

 CASE;

 // IF DB1.Scheduled Ship Date GT PAR.Production Date RGT
 IF DB1.Scheduled_Ship_Date > PAR.Production_Date_RGT;

 QUIT;

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF LCL.Order Type - Sales is Regular Order
 IF LCL.Order_Type_Sales = 'OR';

 CASE;

 // IF DB1.Detail Line Status is Conf/Comp/Canc
 IF DB1.Detail_Line_Status = 'X'/'C'/'R';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Chill Time USR = CON.*ZERO
 LCL.Chill_Time_USR = *ZERO;

 //?get warehouse type and chill time
 DO;

 //?8/5/2010 Warehouse type was nll fp1309
 EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(NLL.Description_Line_One);
 PARAMETER(NLL.UOM_Primary);
 PARAMETER(NLL.Unit_Weight);
 PARAMETER(NLL.Item_Structure_Class_Code);
 PARAMETER(NLL.Item_Structure_Group_Code);
 PARAMETER(NLL.Item_Structure_Type_Code);
 PARAMETER(NLL.Item_Type_Code);
 PARAMETER(NLL.Default_Warehouse);
 PARAMETER(LCL.Fresh_Chilling_Time);
 PARAMETER(NLL.Base_Conv_Loss_Item);
 PARAMETER(NLL.Variety_Rendered_Cut);
 PARAMETER(NLL.Credit_Item_Status);
 PARAMETER(NLL.Std_Weight_Head_Var_Ren);
 PARAMETER(NLL.Pieces_Per_Head);
 PARAMETER(NLL.Department_Code);
 PARAMETER(NLL.Group_for_Packaging);
 PARAMETER(NLL.Seconds_Item);
 PARAMETER(NLL.Piece_Count_Item);
 PARAMETER(NLL.Pieces_Per_Bag);
 PARAMETER(NLL.Bags_Per_Unit);
 PARAMETER(NLL.Export_Domestic);
 PARAMETER(NLL.Print_On_Schedule);
 PARAMETER(NLL.Fresh_Inv_Allocation_Seq);
 PARAMETER(NLL.Fresh_Sched_As_Ordered);
 PARAMETER(NLL.Frozen_Inv_Allocation_Seq);
 PARAMETER(NLL.Primal_Group_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(NLL.Trans_Contol_AS400_Plant);
 PARAMETER(NLL.Warehouse_Location);
 PARAMETER(LCL.Warehouse_Std_Chill_Time);
 PARAMETER(LCL.Warehouse_Chill_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 CASE;

 // IF LCL.Warehouse Std Chill Time is yes
 IF LCL.Warehouse_Std_Chill_Time = 'Y';

 // LCL.Chill Time USR = LCL.Warehouse Chill Time
 LCL.Chill_Time_USR = LCL.Warehouse_Chill_Time;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Chill Time USR = LCL.Fresh Chilling Time
 LCL.Chill_Time_USR = LCL.Fresh_Chilling_Time;

 ENDIF;

 ENDDO;

 // Call program CLC PA Age FrmToDates XF.
 CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Chilling_Time_USR);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Production_AgeDte_Fr);
 PARAMETER(LCL.Production_AgeDte_To);

 //?output 0 for weight and qty scheduled
 EXECUTE FUNCTION(Crt Order Det Bld Sch CR) TYPE(CRTOBJ) FILE(PME6CPP)           AC1918004;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(LCL.ODBS_Partial_Pick_Sts);
 PARAMETER(DB1.Detail_Line_Status);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Consumed_Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(DB1.Weight_Ordered);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Event_Code);
 PARAMETER(LCL.Deadline_Depart_Date_LH);
 PARAMETER(LCL.Deadline_Depart_Time_LH);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Export_Status);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Production_Hold);
 PARAMETER(LCL.Credit_Hold);
 PARAMETER(LCL.Load_Status);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(LCL.Time_of_Original_Entry);
 PARAMETER(WRK.ODBS_Sched_Override_Sts);
 PARAMETER('OA');
 PARAMETER(*ZERO);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Production_AgeDte_Fr);
 PARAMETER(LCL.Production_AgeDte_To);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(LCL.ODBS_Status_2_2_size);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Territory_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 ENDIF;

 ENDIF;

}


//?Process workfile in ORDER number seq
EXECUTE FUNCTION(BPS Proc ODBS f/CONV  RT) TYPE(RTVOBJ) FILE(PME6CPP)           AC1932484;
{
 //?USER: Initialize routine

 //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
 //?FP1054 Read all orders in the build file
 // LCL.Company Number = CON.*ZERO
 LCL.Company_Number = *ZERO;

 // LCL.Order Number = CON.*ZERO
 LCL.Order_Number = *ZERO;

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.ATS Adj Type USR 2 = CND.Ship Off Cut
 LCL.ATS_Adj_Type_USR_2 = 'SC';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 //?CHG:  Order Number    process all
 CASE;

 // IF LCL.Order Number NE DB1.Order Number
 IF LCL.Order_Number <> DB1.Order_Number;

 //?Update if not 1st time: Post Order, unlock load if applicable
 CASE;

 // IF LCL.Order Number is Greater then zero
 IF LCL.Order_Number > *ZERO;

 CASE;

 // IF LCL.Order Type - Sales is Regular Order
 IF LCL.Order_Type_Sales = 'OR';

 // Call program EDT Post Open Orders   XF.
 CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Number);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(WRK.Order_Value_Total);
 PARAMETER(WRK.Order_Weight_Total);
 PARAMETER('PS');

 ENDIF;

 //?Unlock load if an order is still short scheduled
 CASE;

 // IF LCL.Load ID is GT Zero
 IF LCL.Load_ID > *ZERO;

 CASE;

 // IF LCL.Load Status New is Unlock
 IF LCL.Load_Status_New = 'U';

 EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
  PARAMETER(PAR.Load_ID);
  PARAMETER('U');
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  {
   //?Execute internal function

   //?*** Return Plant Code from first Order Header
   EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Trans_Contol_AS400_Plant);
     {
      //?USER: Process Data record

      CASE;

      // IF DB1.Detail Line Status is Not cancelled
      IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

      EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(WRK.Warehouse_Description);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      QUIT;

      ENDIF;

     }

     CASE;

     // IF WRK.Trans Contol AS400/Plant is Plant
     IF WRK.Trans_Contol_AS400_Plant = 'P';

     // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
     PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
   PARAMETER('PLTFLRSYS');
   PARAMETER(LCL.Plant_Floor_System_USR);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(PAR.Company_Number);
   PARAMETER('LDORDD');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?UPD:  AccuSort
   CASE;

   // IF LCL.PFS AccuSort Active is Yes
   IF LCL.PFS_AccuSort_Active = 'Y';

   //?Notify Accusort if locked load
   CASE;

   // IF PAR.Trans Contol AS400/Plant is Plant
   IF PAR.Trans_Contol_AS400_Plant = 'P';

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('L');

   // Call program DEL AS Order Hdr/Dtl   XF.
   CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Company_Number);

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('U');

   ENDIF;

   ENDIF;

   //?UPD:  Carlisle
   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS Unlock Load/Order XF.
   CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
   PARAMETER(PAR.Load_ID);

   // Call program PFS Lock Load/Order   XF.
   CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
   PARAMETER(PAR.Load_ID);

   ENDIF;

   //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
   //?   delete it if Unproc, else change it to "D"elete/and reprocess
   // Call program Exc ChgDel EDI f/UnlckXF.
   CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
   PARAMETER(PAR.Load_ID);

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Stop_Drop_Sequence_Number);
   PARAMETER(DB1.Miles_to_next_stop);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Order_Number);
   {
    //?USER: Initialize routine

    //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
    //?                                    to remove Company RST or Pos
    //?USER: Process Data record

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // Call program TRG Order Hdr CHG Trig XT.
     CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Type_Sales);
     PARAMETER(DB1.AR_Customer_Number);
     PARAMETER(DB1.Ship_To_Customer);
     PARAMETER(DB1.Ship_To_Name);
     PARAMETER(DB1.Ship_To_Address_Line_1);
     PARAMETER(DB1.Ship_To_Address_Line_2);
     PARAMETER(DB1.Ship_To_Address_Line_3);
     PARAMETER(DB1.Ship_To_City);
     PARAMETER(DB1.Ship_To_State_Code);
     PARAMETER(DB1.Ship_To_Zip_Postal_Code);
     PARAMETER(DB1.Bill_to_Customer);
     PARAMETER(DB1.Bill_to_Name);
     PARAMETER(DB1.Bill_to_Address_Line_1);
     PARAMETER(DB1.Bill_to_Address_Line_2);
     PARAMETER(DB1.Bill_to_Address_Line_3);
     PARAMETER(DB1.Bill_to_City);
     PARAMETER(DB1.Bill_to_State_Code);
     PARAMETER(DB1.Bill_to_Zip_Postal_Code);
     PARAMETER(DB1.Customer_Purchase_Order_#);
     PARAMETER(DB1.Order_Date);
     PARAMETER(DB1.Requested_Ship_Date);
     PARAMETER(DB1.Actual_Shipped_Date);
     PARAMETER(DB1.Cancel_Date);
     PARAMETER(DB1.Terms_Code);
     PARAMETER(DB1.Special_Instructions);
     PARAMETER(DB1.Special_Instructions_2);
     PARAMETER(DB1.Carrier_Code);
     PARAMETER(DB1.Comment_Print_Acknowledge);
     PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
     PARAMETER(DB1.Comment_Print_Pick_Slip);
     PARAMETER(DB1.Comment_Print_Ship_Doc);
     PARAMETER(DB1.Reason_Code);
     PARAMETER(DB1.Order_in_Use);
     PARAMETER(DB1.Header_Status);
     PARAMETER(DB1.Header_Status_Last);
     PARAMETER(DB1.Order_Type_Print_Status);
     PARAMETER(DB1.Scheduled_Ship_Date);
     PARAMETER(DB1.User_Original_Entry);
     PARAMETER(DB1.Date_of_Original_Entry);
     PARAMETER(DB1.Order_Value_Total);
     PARAMETER(DB1.Order_Weight_Total);
     PARAMETER(DB1.Credit_Hold);
     PARAMETER(DB1.Production_Hold);
     PARAMETER(DB1.New_Customer_Hold);
     PARAMETER(DB1.Requested_Delivery_Date);
     PARAMETER(DB1.Requested_Delivery_Time);
     PARAMETER(DB1.Accounts_Receiv_Ent_1);
     PARAMETER(DB1.Accounts_Receiv_Ent_2);
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
     PARAMETER(DB1.Rated_Freight);
     PARAMETER(DB1.LTL_Flag);
     PARAMETER(DB1.Price_Audit);
     PARAMETER(DB1.Price_Status);
     PARAMETER(DB1.Shipping_Method);
     PARAMETER(DB1.Export_Status);
     PARAMETER(DB1.Palletize);
     PARAMETER(DB1.Shrink_Wrap);
     PARAMETER(DB1.Slip_Sheet);
     PARAMETER(DB1.Age_Code);
     PARAMETER(DB1.Reefer_Temperature);
     PARAMETER(DB1.Load_Type);
     PARAMETER(DB1.Attach_to_Invoice_Number);
     PARAMETER(DB1.Load_Plan_Order);
     PARAMETER(DB1.Print_Pick_Slip);
     PARAMETER(DB1.Resell_Reference_Number);
     PARAMETER(DB1.Special_Comment_1);
     PARAMETER(DB1.Special_Comment_2);
     PARAMETER(DB1.Affect_Auto_Accruals);
     PARAMETER(DB1.Sales_Route_Code);
     PARAMETER(DB1.Manager_Level_Code);
     PARAMETER(DB1.VP_Level_Code);
     PARAMETER(DB1.Attach_to_Order_Number);
     PARAMETER(DB1.Reason_for_Price_Audit);
     PARAMETER(DB1.Invoice_Number);
     PARAMETER(DB1.Invoice_Suffix);
     PARAMETER(DB1.Invoice_Date);
     PARAMETER(DB1.Event_Code);
     PARAMETER(DB1.Trans_Contol_AS400_Plant);
     PARAMETER(DB1.Modified_Flag);
     PARAMETER(DB1.A_R_order_Value_Total);
     PARAMETER(DB1.Billing_Activity_Type);
     PARAMETER(DB1.Block_Order_Flag);
     PARAMETER(DB1.Order_Certification_Flag);
     PARAMETER(DB1.Invoice_Order_Value_Tot);
     PARAMETER(DB1.Process_Sts_for_3C);
     PARAMETER(DB1.Order_Conf_Fax_Sts);
     PARAMETER(DB1.Manifest_Fax_Sts);
     PARAMETER(DB1.Invoice_Fax_Sts);
     PARAMETER(DB1.Transfer_in_Storage_Ind);
     PARAMETER(DB1.Email_Cust_On_Order_Ship);
     PARAMETER(DB1.Order_Emailed);
     PARAMETER(DB1.Export_Docs_Go_w_Driver);
     PARAMETER(DB1.Shipping_Temp_Code_C_F);
     PARAMETER(DB1.Broker_Order_Status);
     PARAMETER(DB1.Air_Freight_Order);
     PARAMETER(DB1.Order_Requires_Review);
     PARAMETER(DB1.OH_Load_Plan_Ready);
     PARAMETER(DB1.Export_USDA_Approved);
     PARAMETER(DB1.HPB_Ship_to_Warehouse);
     PARAMETER(DB1.OH_TF_Exempt_Code);
     PARAMETER(DB1.OH_Appt_Confirmation_Dt);
     PARAMETER(DB1.JPN_Invoice_Issuance_Date);
     PARAMETER(DB1.Load_Actual_Shipped_Date);
     PARAMETER(DB1.Load_BOL_Complete_Date);
     PARAMETER(DB1.Load_Truck_Departure_Date);
     PARAMETER(DB1.Maximum_Gross_Weight);
     PARAMETER(DB1.Time_of_Original_Entry);
     PARAMETER(DB1.OH_Appt_Confirmation_Tm);
     PARAMETER(DB1.Load_BOL_Complete_Time);
     PARAMETER(DB1.Load_Truck_Departure_Time);
     PARAMETER(DB1.Act_Frt_Reference_Amount);
     PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
     PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
     PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
     PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
     PARAMETER(DB1.Claim_Number);
     PARAMETER(DB1.EDI_Status_1);
     PARAMETER(DB1.EDI_Status_2);
     PARAMETER(DB1.EDI_Status_3);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);

    }

    //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
    //?                              was using the par replace with db1
    EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(*ZERO);
    {
     //?USER: Initialize routine

     //?par.@rated freight is the sum of all the detail rated frt, for adjusting
     // PAR.@Rated Freight = CON.*ZERO
     PAR.@Rated_Freight = *ZERO;

     //?par.usr process status is used to indicate if there are detail present
     // PAR.USR Process status = CND.no
     PAR.USR_Process_status = 'N';

     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Cancelled
     IF DB1.Detail_Line_Status = 'X';

     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(*ZERO);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.USR Process status = CND.yes
     PAR.USR_Process_status = 'Y';

     CASE;

     // IF PAR.Order Weight Total is Equal to zero
     IF PAR.Order_Weight_Total = *ZERO;

     // OR PAR.Total Rated Freight is Zero
     OR PAR.Total_Rated_Freight = *ZERO;

     // PAR.Rated Freight = CON.*ZERO
     PAR.Rated_Freight = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF DB1.Detail Line Status is Confirmed & Complete
     IF DB1.Detail_Line_Status = 'C'/'R';

     // Synon (17,9) work field =       * Compute Dtl Rated Freight
     PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
     * PAR.Total_Rated_Freight 'H';

     // IF *OTHERWISE
     IF *OTHERWISE;

     // Synon (17,9) work field =       * Compute Dtl Rated Freight
     PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
     / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

     ENDIF;

     // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
     PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

     ENDIF;

     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Rated_Freight);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
     PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

     // PAR.Order Sequence Number = DB1.Order Sequence Number
     PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

     // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
     PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

     ENDIF;

     //?USER: Exit processing

     //?Adjust totals
     CASE;

     // IF PAR.@Rated Freight NE PAR.Total Rated Freight
     IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

     // AND PAR.USR Process status is yes
     AND PAR.USR_Process_status = 'Y';

     // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
     WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

     // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
     PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

     //?Update last detail line processed
     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Order_Sequence_Number);
     PARAMETER(PAR.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Rated_Freight);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     ENDIF;

    }

   }

  }

  // Execute function Clr Program Message Q  US.
  EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
  {
   * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
   C                     CALL 'Y2CLMSC'
   C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
   C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
   * RESET FIRST MESSAGE ONLY FLAG.
   C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
  }

 }

 // WRK.Load Change Type = CND.Unlock Load
 WRK.Load_Change_Type = 'UNLOCK';

 // WRK.Department Control Code = CND.Shipping
 WRK.Department_Control_Code = 'SHP';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Stop_Drop);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(WRK.Department_Control_Code);
 PARAMETER(LCL.Load_Status);
 PARAMETER('U');
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Number);

 ENDIF;

 ENDIF;

 ENDIF;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // LCL.Company Number = DB1.Company Number
 LCL.Company_Number = DB1.Company_Number;

 // LCL.Order Number = DB1.Order Number
 LCL.Order_Number = DB1.Order_Number;

 // LCL.Order Type - Sales = DB1.Order Type - Sales
 LCL.Order_Type_Sales = DB1.Order_Type_Sales;

 // LCL.Load ID = DB1.Load ID
 LCL.Load_ID = DB1.Load_ID;

 // LCL.Ship To Customer = DB1.Ship To Customer
 LCL.Ship_To_Customer = DB1.Ship_To_Customer;

 // LCL.Carrier Code = DB1.Carrier Code
 LCL.Carrier_Code = DB1.Carrier_Code;

 // LCL.Load Status = DB1.Load Status
 LCL.Load_Status = DB1.Load_Status;

 // LCL.Load Status New = CND.*Blank
 LCL.Load_Status_New = *BLANK;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?Process Record
 CASE;

 // IF DB1.Order Type - Sales is Regular Order
 IF DB1.Order_Type_Sales = 'OR';

 CASE;

 // IF DB1.Detail Line Status is Conf/Comp/Canc
 IF DB1.Detail_Line_Status = 'X'/'C'/'R';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(LCL.UOM_Primary);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(WRK.Item_Structure_Class_Code);
 PARAMETER(WRK.Item_Structure_Group_Code);
 PARAMETER(WRK.Item_Structure_Type_Code);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(WRK.Default_Warehouse);
 PARAMETER(LCL.Fresh_Chilling_Time);
 PARAMETER(LCL.Base_Conv_Loss_Item);
 PARAMETER(WRK.Variety_Rendered_Cut);
 PARAMETER(WRK.Credit_Item_Status);
 PARAMETER(WRK.Std_Weight_Head_Var_Ren);
 PARAMETER(LCL.Pieces_Per_Head);
 PARAMETER(WRK.Department_Code);
 PARAMETER(WRK.Group_for_Packaging);
 PARAMETER(WRK.Seconds_Item);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(LCL.Pieces_Per_Bag);
 PARAMETER(LCL.Bags_Per_Unit);
 PARAMETER(WRK.Export_Domestic);
 PARAMETER(WRK.Print_On_Schedule);
 PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
 PARAMETER(WRK.Fresh_Sched_As_Ordered);
 PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
 PARAMETER(WRK.Primal_Group_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Warehouse_Location);
 PARAMETER(LCL.Warehouse_Std_Chill_Time);
 PARAMETER(LCL.Warehouse_Chill_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?Reallocate Item
 CASE;

 // IF DB1.Detail Line Status is Conf/Comp/Canc
 IF DB1.Detail_Line_Status = 'X'/'C'/'R';

 //?Reallocate Item
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Dlt Ord Dtl Sched     RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1656356;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
 }

 EXECUTE FUNCTION(Del OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1647987;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(DB1.ODS_Sequence_Number);
 }

 // LCL.Quantity Scheduled = CON.*ZERO
 LCL.Quantity_Scheduled = *ZERO;

 // LCL.Weight Scheduled = CON.*ZERO
 LCL.Weight_Scheduled = *ZERO;

 // Call program UPD Avail-To-Sell  ORD XF.
 CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(DB1.Weight_Ordered);
 PARAMETER(LCL.Quantity_Scheduled);
 PARAMETER(LCL.Weight_Scheduled);
 PARAMETER('OA');
 PARAMETER('REALC');
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);

 EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Quantity_Scheduled);
 PARAMETER(LCL.Weight_Scheduled);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Still Short after trying to allocate
 CASE;

 // IF LCL.Quantity Scheduled NE DB1.Quantity Ordered
 IF LCL.Quantity_Scheduled <> DB1.Quantity_Ordered;

 CASE;

 // IF DB1.Production Hold is No
 IF DB1.Production_Hold = 'N';

 // AND DB1.ODBS Partial Pick Sts is No
 AND DB1.ODBS_Partial_Pick_Sts = '2';

 //?above CASE chgd to AND condition  6/11/09
 //?Put order on hold and
 //?If Load is locked, unlock load, send to carlisle
 CASE;

 // IF LCL.Load Status is Lock
 IF LCL.Load_Status = 'L';

 // LCL.Load Status New = CND.Unlock
 LCL.Load_Status_New = 'U';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF LCL.Order Number is Greater then zero
 IF LCL.Order_Number > *ZERO;

 // Call program EDT Post Open Orders   XF.
 CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Number);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(WRK.Order_Value_Total);
 PARAMETER(WRK.Order_Weight_Total);
 PARAMETER('PS');

 //?Unlock load if an order is still short scheduled
 CASE;

 // IF LCL.Load ID is GT Zero
 IF LCL.Load_ID > *ZERO;

 CASE;

 // IF LCL.Load Status New is Unlock
 IF LCL.Load_Status_New = 'U';

 EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
  PARAMETER(PAR.Load_ID);
  PARAMETER('U');
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  {
   //?Execute internal function

   //?*** Return Plant Code from first Order Header
   EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Trans_Contol_AS400_Plant);
     {
      //?USER: Process Data record

      CASE;

      // IF DB1.Detail Line Status is Not cancelled
      IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

      EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(WRK.Warehouse_Description);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      QUIT;

      ENDIF;

     }

     CASE;

     // IF WRK.Trans Contol AS400/Plant is Plant
     IF WRK.Trans_Contol_AS400_Plant = 'P';

     // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
     PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
   PARAMETER('PLTFLRSYS');
   PARAMETER(LCL.Plant_Floor_System_USR);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(PAR.Company_Number);
   PARAMETER('LDORDD');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?UPD:  AccuSort
   CASE;

   // IF LCL.PFS AccuSort Active is Yes
   IF LCL.PFS_AccuSort_Active = 'Y';

   //?Notify Accusort if locked load
   CASE;

   // IF PAR.Trans Contol AS400/Plant is Plant
   IF PAR.Trans_Contol_AS400_Plant = 'P';

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('L');

   // Call program DEL AS Order Hdr/Dtl   XF.
   CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Company_Number);

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('U');

   ENDIF;

   ENDIF;

   //?UPD:  Carlisle
   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS Unlock Load/Order XF.
   CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
   PARAMETER(PAR.Load_ID);

   // Call program PFS Lock Load/Order   XF.
   CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
   PARAMETER(PAR.Load_ID);

   ENDIF;

   //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
   //?   delete it if Unproc, else change it to "D"elete/and reprocess
   // Call program Exc ChgDel EDI f/UnlckXF.
   CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
   PARAMETER(PAR.Load_ID);

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Stop_Drop_Sequence_Number);
   PARAMETER(DB1.Miles_to_next_stop);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Order_Number);
   {
    //?USER: Initialize routine

    //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
    //?                                    to remove Company RST or Pos
    //?USER: Process Data record

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // Call program TRG Order Hdr CHG Trig XT.
     CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Type_Sales);
     PARAMETER(DB1.AR_Customer_Number);
     PARAMETER(DB1.Ship_To_Customer);
     PARAMETER(DB1.Ship_To_Name);
     PARAMETER(DB1.Ship_To_Address_Line_1);
     PARAMETER(DB1.Ship_To_Address_Line_2);
     PARAMETER(DB1.Ship_To_Address_Line_3);
     PARAMETER(DB1.Ship_To_City);
     PARAMETER(DB1.Ship_To_State_Code);
     PARAMETER(DB1.Ship_To_Zip_Postal_Code);
     PARAMETER(DB1.Bill_to_Customer);
     PARAMETER(DB1.Bill_to_Name);
     PARAMETER(DB1.Bill_to_Address_Line_1);
     PARAMETER(DB1.Bill_to_Address_Line_2);
     PARAMETER(DB1.Bill_to_Address_Line_3);
     PARAMETER(DB1.Bill_to_City);
     PARAMETER(DB1.Bill_to_State_Code);
     PARAMETER(DB1.Bill_to_Zip_Postal_Code);
     PARAMETER(DB1.Customer_Purchase_Order_#);
     PARAMETER(DB1.Order_Date);
     PARAMETER(DB1.Requested_Ship_Date);
     PARAMETER(DB1.Actual_Shipped_Date);
     PARAMETER(DB1.Cancel_Date);
     PARAMETER(DB1.Terms_Code);
     PARAMETER(DB1.Special_Instructions);
     PARAMETER(DB1.Special_Instructions_2);
     PARAMETER(DB1.Carrier_Code);
     PARAMETER(DB1.Comment_Print_Acknowledge);
     PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
     PARAMETER(DB1.Comment_Print_Pick_Slip);
     PARAMETER(DB1.Comment_Print_Ship_Doc);
     PARAMETER(DB1.Reason_Code);
     PARAMETER(DB1.Order_in_Use);
     PARAMETER(DB1.Header_Status);
     PARAMETER(DB1.Header_Status_Last);
     PARAMETER(DB1.Order_Type_Print_Status);
     PARAMETER(DB1.Scheduled_Ship_Date);
     PARAMETER(DB1.User_Original_Entry);
     PARAMETER(DB1.Date_of_Original_Entry);
     PARAMETER(DB1.Order_Value_Total);
     PARAMETER(DB1.Order_Weight_Total);
     PARAMETER(DB1.Credit_Hold);
     PARAMETER(DB1.Production_Hold);
     PARAMETER(DB1.New_Customer_Hold);
     PARAMETER(DB1.Requested_Delivery_Date);
     PARAMETER(DB1.Requested_Delivery_Time);
     PARAMETER(DB1.Accounts_Receiv_Ent_1);
     PARAMETER(DB1.Accounts_Receiv_Ent_2);
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
     PARAMETER(DB1.Rated_Freight);
     PARAMETER(DB1.LTL_Flag);
     PARAMETER(DB1.Price_Audit);
     PARAMETER(DB1.Price_Status);
     PARAMETER(DB1.Shipping_Method);
     PARAMETER(DB1.Export_Status);
     PARAMETER(DB1.Palletize);
     PARAMETER(DB1.Shrink_Wrap);
     PARAMETER(DB1.Slip_Sheet);
     PARAMETER(DB1.Age_Code);
     PARAMETER(DB1.Reefer_Temperature);
     PARAMETER(DB1.Load_Type);
     PARAMETER(DB1.Attach_to_Invoice_Number);
     PARAMETER(DB1.Load_Plan_Order);
     PARAMETER(DB1.Print_Pick_Slip);
     PARAMETER(DB1.Resell_Reference_Number);
     PARAMETER(DB1.Special_Comment_1);
     PARAMETER(DB1.Special_Comment_2);
     PARAMETER(DB1.Affect_Auto_Accruals);
     PARAMETER(DB1.Sales_Route_Code);
     PARAMETER(DB1.Manager_Level_Code);
     PARAMETER(DB1.VP_Level_Code);
     PARAMETER(DB1.Attach_to_Order_Number);
     PARAMETER(DB1.Reason_for_Price_Audit);
     PARAMETER(DB1.Invoice_Number);
     PARAMETER(DB1.Invoice_Suffix);
     PARAMETER(DB1.Invoice_Date);
     PARAMETER(DB1.Event_Code);
     PARAMETER(DB1.Trans_Contol_AS400_Plant);
     PARAMETER(DB1.Modified_Flag);
     PARAMETER(DB1.A_R_order_Value_Total);
     PARAMETER(DB1.Billing_Activity_Type);
     PARAMETER(DB1.Block_Order_Flag);
     PARAMETER(DB1.Order_Certification_Flag);
     PARAMETER(DB1.Invoice_Order_Value_Tot);
     PARAMETER(DB1.Process_Sts_for_3C);
     PARAMETER(DB1.Order_Conf_Fax_Sts);
     PARAMETER(DB1.Manifest_Fax_Sts);
     PARAMETER(DB1.Invoice_Fax_Sts);
     PARAMETER(DB1.Transfer_in_Storage_Ind);
     PARAMETER(DB1.Email_Cust_On_Order_Ship);
     PARAMETER(DB1.Order_Emailed);
     PARAMETER(DB1.Export_Docs_Go_w_Driver);
     PARAMETER(DB1.Shipping_Temp_Code_C_F);
     PARAMETER(DB1.Broker_Order_Status);
     PARAMETER(DB1.Air_Freight_Order);
     PARAMETER(DB1.Order_Requires_Review);
     PARAMETER(DB1.OH_Load_Plan_Ready);
     PARAMETER(DB1.Export_USDA_Approved);
     PARAMETER(DB1.HPB_Ship_to_Warehouse);
     PARAMETER(DB1.OH_TF_Exempt_Code);
     PARAMETER(DB1.OH_Appt_Confirmation_Dt);
     PARAMETER(DB1.JPN_Invoice_Issuance_Date);
     PARAMETER(DB1.Load_Actual_Shipped_Date);
     PARAMETER(DB1.Load_BOL_Complete_Date);
     PARAMETER(DB1.Load_Truck_Departure_Date);
     PARAMETER(DB1.Maximum_Gross_Weight);
     PARAMETER(DB1.Time_of_Original_Entry);
     PARAMETER(DB1.OH_Appt_Confirmation_Tm);
     PARAMETER(DB1.Load_BOL_Complete_Time);
     PARAMETER(DB1.Load_Truck_Departure_Time);
     PARAMETER(DB1.Act_Frt_Reference_Amount);
     PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
     PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
     PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
     PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
     PARAMETER(DB1.Claim_Number);
     PARAMETER(DB1.EDI_Status_1);
     PARAMETER(DB1.EDI_Status_2);
     PARAMETER(DB1.EDI_Status_3);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);

    }

    //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
    //?                              was using the par replace with db1
    EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(*ZERO);
    {
     //?USER: Initialize routine

     //?par.@rated freight is the sum of all the detail rated frt, for adjusting
     // PAR.@Rated Freight = CON.*ZERO
     PAR.@Rated_Freight = *ZERO;

     //?par.usr process status is used to indicate if there are detail present
     // PAR.USR Process status = CND.no
     PAR.USR_Process_status = 'N';

     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Cancelled
     IF DB1.Detail_Line_Status = 'X';

     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(*ZERO);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.USR Process status = CND.yes
     PAR.USR_Process_status = 'Y';

     CASE;

     // IF PAR.Order Weight Total is Equal to zero
     IF PAR.Order_Weight_Total = *ZERO;

     // OR PAR.Total Rated Freight is Zero
     OR PAR.Total_Rated_Freight = *ZERO;

     // PAR.Rated Freight = CON.*ZERO
     PAR.Rated_Freight = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF DB1.Detail Line Status is Confirmed & Complete
     IF DB1.Detail_Line_Status = 'C'/'R';

     // Synon (17,9) work field =       * Compute Dtl Rated Freight
     PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
     * PAR.Total_Rated_Freight 'H';

     // IF *OTHERWISE
     IF *OTHERWISE;

     // Synon (17,9) work field =       * Compute Dtl Rated Freight
     PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
     / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

     ENDIF;

     // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
     PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

     ENDIF;

     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Rated_Freight);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
     PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

     // PAR.Order Sequence Number = DB1.Order Sequence Number
     PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

     // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
     PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

     ENDIF;

     //?USER: Exit processing

     //?Adjust totals
     CASE;

     // IF PAR.@Rated Freight NE PAR.Total Rated Freight
     IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

     // AND PAR.USR Process status is yes
     AND PAR.USR_Process_status = 'Y';

     // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
     WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

     // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
     PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

     //?Update last detail line processed
     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Order_Sequence_Number);
     PARAMETER(PAR.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Rated_Freight);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     ENDIF;

    }

   }

  }

  // Execute function Clr Program Message Q  US.
  EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
  {
   * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
   C                     CALL 'Y2CLMSC'
   C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
   C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
   * RESET FIRST MESSAGE ONLY FLAG.
   C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
  }

 }

 // WRK.Load Change Type = CND.Unlock Load
 WRK.Load_Change_Type = 'UNLOCK';

 // WRK.Department Control Code = CND.Shipping
 WRK.Department_Control_Code = 'SHP';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Stop_Drop);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(WRK.Department_Control_Code);
 PARAMETER(LCL.Load_Status);
 PARAMETER('U');
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Number);

 ENDIF;

 ENDIF;

 ENDIF;

}


