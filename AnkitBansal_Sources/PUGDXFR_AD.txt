// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUGDXFR
// ?Date: 14.08.2025 Time: 03:50:19
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?R11411 RMC 03/06/18 After EDI 947 is received, adjust inventory
//? accordingly for the 3PL warehouse on the AS400
//? Inventory on the Warehouse:
//? 1. CAB7CPP Create TW -/+ transactions
//? 2. CAB0REP Update Item Balance - on hand
//? 3. CAB1CPP Adjust Item Balance detail - on hand
//?Initialize.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Execute function EUS EDI 947 Data Dfn  US.
EXECUTE FUNCTION(EUS EDI 947 Data Dfn  US) TYPE(EXCUSRSRC) ('PUGJUFR');
{
 * Declare EDI 947 Data Definitions
 D digits          C                   '0123456789'
 D len             S              3  0
}


ENDIF;

//?WI517 DN 10/12/23-Setup Eradani's Environment Libraries.
// Call program Upd Setup Eradani Libs CL.
CALL PROGRAM(Upd Setup Eradani Libs CL) ('PVBFUPC');

//?Validation / Update Inventory Adjustment.
//?WI517 DN 10/03/23-Added 'Send Email f/Failed API U' Output Parm.
EXECUTE FUNCTION(Upd Proc 947 Whs InvAdjRT) TYPE(RTVOBJ) FILE(ECP070)           AC2148058;
PARAMETER(LCL.Send_Email_f_Failed_API_U);
{
 //?USER: Initialize routine

 // LCL.Email Subject USR = CONCAT(CON.EDI 947 Error-Inv Adjustm,CON.ent:,CON.*ZERO)
 LCL.Email_Subject_USR = 'EDI 947 Error-Inv Adjustm' + 'ent:' (0);

 //?WI517 DN 10/03/23-Initialize Flags.
 // PAR.Send Email f/Failed API U = CND.No
 PAR.Send_Email_f_Failed_API_U = 'N';

 // LCL.API was Called? U = CND.No
 LCL.API_was_Called_U = 'N';

 // LCL.Inventory Updated USR = CND.No
 LCL.Inventory_Updated_USR = 'N';

 // LCL.First Time Through USR = CND.Yes
 LCL.First_Time_Through_USR = 'Y';

 //?USER: Process Data record

 //?Data Validation.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Initialize.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Not Processed
 PAR.EDI_Record_Processed = 'N';

 // PAR.EDI 947 Error Desc USR = CND.Not entered
 PAR.EDI_947_Error_Desc_USR = *BLANK;

 // PAR.Email Subject USR = CND.Not entered
 PAR.Email_Subject_USR = *BLANK;

 ENDIF;

 //?Validate Trade Partner/Warehouse Code.
 CASE;

 // IF DB1.TRADE PARTNER CODE is Not Entered
 IF DB1.TRADE_PARTNER_CODE = *BLANK;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 947 Error Desc USR = CONCAT(CON.Invalid Trade Partner,CON.code.,CON.1)
 PAR.EDI_947_Error_Desc_USR = 'Invalid Trade Partner' + 'code.' (1);

 //?Validate Trade Partner/Warehouse Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Warehouse/Company RT) TYPE(RTVOBJ) FILE(ECP072)            AC2148095;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Company_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?use override company/warehouse?
  // LCL.Status Flag 1  Y/N = CND.No
  LCL.Status_Flag_1_Y_N = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.N101-NAME TYPE CODE is Warehouse
  IF DB1.N101_NAME_TYPE_CODE = 'WH';

  // Execute function EUS TrimL Warehouse CdeUS.
  EXECUTE FUNCTION(EUS TrimL Warehouse CdeUS) TYPE(EXCUSRSRC) ('PUGHUFR');
  PARAMETER(DB1.N104_ID_CODE);
  PARAMETER(LCL.Warehouse_Code);
  {
   * Trim Left Warehouse Code.
   c                   eval      #OAJCD = %triml(#IDCDE)
   *
  }

  //?Get EDI WHS INterchange override company 5/13/21 RMC if entered get acctCo
  EXECUTE FUNCTION(Rtv EDI Company # ovrd RT) TYPE(RTVOBJ) FILE(PNG0REP)          AC2197166;
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER('WHSINV');
  PARAMETER(LCL.EDI_Company_#_940_846_947);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.EDI Company # 940 846 947 is Entered
  IF LCL.EDI_Company_#_940_846_947 > 0;

  EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  ENDIF;

  //?use override co/whse is no
  CASE;

  // IF LCL.Status Flag 1  Y/N is No
  IF LCL.Status_Flag_1_Y_N = 'N';

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  ENDIF;

  // IF DB1.N101-NAME TYPE CODE is Company Number
  IF DB1.N101_NAME_TYPE_CODE = 'B5';

  CASE;

  // IF DB1.N104-ID CODE is Sioux City 440
  IF DB1.N104_ID_CODE = '440';

  // OR DB1.N104-ID CODE is Guymon 360
  OR DB1.N104_ID_CODE = '360';

  // OR DB1.N104-ID CODE is Triumph 960
  OR DB1.N104_ID_CODE = '960';

  //?Hard Coding Company Number.
  CASE;

  // IF DB1.N104-ID CODE is Guymon 360
  IF DB1.N104_ID_CODE = '360';

  // PAR.Company Number = CND.Guymon
  PAR.Company_Number = 360;

  //?Hard Coding Company Number.
  // IF DB1.N104-ID CODE is Sioux City 440
  IF DB1.N104_ID_CODE = '440';

  // PAR.Company Number = CND.Sioux City
  PAR.Company_Number = 440;

  //?Hard Coding Company Number.
  // IF DB1.N104-ID CODE is Triumph 960
  IF DB1.N104_ID_CODE = '960';

  // PAR.Company Number = CND.St. Joseph
  PAR.Company_Number = 960;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?RTV EDI Override company's warehouse from edi whs interchange rcd
  //? then get that warehouse's accounting company
  // Execute function EUS TrimL Warehouse CdeUS.
  EXECUTE FUNCTION(EUS TrimL Warehouse CdeUS) TYPE(EXCUSRSRC) ('PUGHUFR');
  PARAMETER(DB1.N104_ID_CODE);
  PARAMETER(LCL.Company_Alpha);
  {
   * Trim Left Warehouse Code.
   c                   eval      #OAJCD = %triml(#IDCDE)
   *
  }

  // LCL.EDI Company # 940 846 947 = CVTVAR(LCL.Company Alpha)
  LCL.EDI_Company_#_940_846_947 = CVTVAR(LCL.Company_Alpha);

  CASE;

  // IF LCL.EDI Company # 940 846 947 is Entered
  IF LCL.EDI_Company_#_940_846_947 > 0;

  EXECUTE FUNCTION(Rtv EDI Ovrd Co Whse   RT) TYPE(RTVOBJ) FILE(PNG0REP)          AC2201759;
  PARAMETER(LCL.EDI_Company_#_940_846_947);
  PARAMETER('WHSINV');
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Accounting Company is not equal to zero
  IF LCL.Accounting_Company <> *ZERO;

  // PAR.Company Number = LCL.Accounting Company
  PAR.Company_Number = LCL.Accounting_Company;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  // LCL.Status Flag 1  Y/N = CND.Yes
  LCL.Status_Flag_1_Y_N = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?Ensure Warehouse/Company is Entered & Trade Partner Matches.
 CASE;

 // IF LCL.Warehouse Code is Blanks
 IF LCL.Warehouse_Code = *BLANK;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 947 Error Desc USR = CON.Warehouse Code is blank.
 PAR.EDI_947_Error_Desc_USR = 'Warehouse Code is blank.';

 //?Ensure Warehouse/Company is Entered & Trade Partner Matches.
 // IF LCL.Company Number is Equal to zero
 IF LCL.Company_Number = *ZERO;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 947 Error Desc USR = CON.Company Number is blank.
 PAR.EDI_947_Error_Desc_USR = 'Company Number is blank.';

 //?Ensure Warehouse/Company is Entered & Trade Partner Matches.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv WHS Interchg All  RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2138766;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER('WHSINV');
 PARAMETER(NLL.Class_Code);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(NLL.EDI_Whs_Duns_Number);
 PARAMETER(LCL.Record_Status);
 PARAMETER(NLL.Create_Date);
 PARAMETER(NLL.Create_Time);
 PARAMETER(NLL.Create_User);
 PARAMETER(NLL.Create_Program);
 PARAMETER(NLL.Change_Date);
 PARAMETER(NLL.Change_Time);
 PARAMETER(NLL.Change_User);
 PARAMETER(NLL.Change_Program);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?EDI Warehouse Code Found?
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Trade Partner Mismatch / Not Active.
 CASE;

 // IF DB1.TRADE PARTNER CODE NE LCL.EDI Trading Partner No.
 IF DB1.TRADE_PARTNER_CODE <> LCL.EDI_Trading_Partner_No;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 947 Error Desc USR = CONCAT(CON.Invalid Trade Partner,CON.code.,CON.1)
 PAR.EDI_947_Error_Desc_USR = 'Invalid Trade Partner' + 'code.' (1);

 //?Trade Partner Mismatch / Not Active.
 // IF NOT LCL.Record Status is Active
 IF ! LCL.Record_Status = 'A';

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 947 Error Desc USR = CONCAT(CON.EDI Interchange WHSINV,CON.code is not active.,CON.1)
 PAR.EDI_947_Error_Desc_USR = 'EDI Interchange WHSINV' + 'code is not active.' (1);

 ENDIF;

 //?EDI Warehouse Code Found?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 947 Error Desc USR = CON.Invalid Warehouse Code.
 PAR.EDI_947_Error_Desc_USR = 'Invalid Warehouse Code.';

 ENDIF;

 ENDIF;

 ENDIF;

 //?If Not in Error, Check Company/Warehouse Combination.
 CASE;

 // IF NOT PAR.EDI-Record Processed is Error
 IF ! PAR.EDI_Record_Processed = 'E';

 EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Company # from EDI NAM (ECP072) File Mismatch with Acct Company.
 CASE;

 // IF LCL.Accounting Company NE LCL.Company Number
 IF LCL.Accounting_Company <> LCL.Company_Number;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 947 Error Desc USR = CONCAT(CON.Invalid Company/Warehouse,CON.combination.,CON.1)
 PAR.EDI_947_Error_Desc_USR = 'Invalid Company/Warehouse' + 'combination.' (1);

 ENDIF;

 ENDIF;

 //?If Not in Error, Check Product Code.
 CASE;

 // IF NOT PAR.EDI-Record Processed is Error
 IF ! PAR.EDI_Record_Processed = 'E';

 EXECUTE FUNCTION(Val Product & Adj Code RT) TYPE(RTVOBJ) FILE(ECP071)           AC2148125;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.EDI_Record_Processed);
 PARAMETER(PAR.EDI_947_Error_Desc_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?Validate Product.
  CASE;

  // IF DB1.W1906 PRODUCT is Entered
  IF DB1.W1906_PRODUCT <> *BLANK;

  // Execute function EUS TrimL Prod ID Code US.
  EXECUTE FUNCTION(EUS TrimL Prod ID Code US) TYPE(EXCUSRSRC) ('PUEHUFR');
  PARAMETER(DB1.W1906_PRODUCT);
  PARAMETER(LCL.Item_Code_Txt);
  {
   * Trim Left Product ID.
   c                   eval      #OFYTX = %triml(#IF3C7)
   *
  }

  // Execute function Val Numeric Digit     US.
  EXECUTE FUNCTION(Val Numeric Digit     US) TYPE(EXCUSRSRC) ('PUD6UFR');
  PARAMETER(LCL.Item_Code_Txt);
  PARAMETER(LCL.Validation_Pass_USR);
  {
   *
   c                   Monitor
   *
   c                   If        %check(digits : %trim(#IA2T1)) = 0
   * All Digit, Validation Pass.
   c                   eval      #OFASC = 'Y'
   c                   else
   * Non-Digit Found, Validation Fail.
   c                   eval      #OFASC = 'N'
   c                   endif
   *
   * Monitor Message RNX0105 - 'A character representation of a numeric value is in error.
   c                   On-Error  00105                                        Do Nothing
   *
   c                   EndMon
   *
  }

  //?Item Code Pass Digit Check?
  CASE;

  // IF LCL.Validation Pass USR is Yes
  IF LCL.Validation_Pass_USR = 'Y';

  // Execute function Cvt Item Code to Nbr   US.
  EXECUTE FUNCTION(Cvt Item Code to Nbr   US) TYPE(EXCUSRSRC) ('PUETUFR');
  PARAMETER(LCL.Item_Code_Txt);
  PARAMETER(LCL.Item_Code);
  {
   * Trim Item Code and Convert to Numeric.
   c                   eval      #OHGCD = %dec(%trim(#IFYTX) : 7:0)
   *
  }

  EXECUTE FUNCTION(Val Company/Item Exist RT) TYPE(RTVOBJ) FILE(CABZREP)          AC2148148;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Item_Code);
  //?Record Found?
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Record Found?
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 947 Error Desc USR = CONCAT(CON.Invalid Company/Product,CON.combination.,CON.1)
  PAR.EDI_947_Error_Desc_USR = 'Invalid Company/Product' + 'combination.' (1);

  QUIT;

  ENDIF;

  //?Item Code Pass Digit Check?
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 947 Error Desc USR = CON.Invalid Product Number.
  PAR.EDI_947_Error_Desc_USR = 'Invalid Product Number.';

  QUIT;

  ENDIF;

  //?Validate Product.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 947 Error Desc USR = CON.Invalid Product Number.
  PAR.EDI_947_Error_Desc_USR = 'Invalid Product Number.';

  QUIT;

  ENDIF;

  //?Validate Adjustment Reason Code.
  CASE;

  // IF DB1.W1901 ADJUSTMENT RSN CDE is *ALL values
  IF DB1.W1901_ADJUSTMENT_RSN_CDE = 'AA'/'07'/'AV'/'AY'/'AU'/'05'/'55';

  //?Validate Adjustment Reason Code.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 947 Error Desc USR = CONCAT(CON.Invalid Adjustment Reason,CON.code.,CON.1)
  PAR.EDI_947_Error_Desc_USR = 'Invalid Adjustment Reason' + 'code.' (1);

  QUIT;

  ENDIF;

  //?Validate Reference Status Code.
  CASE;

  // IF DB1.W902 Reference Status Cde is *ALL values
  IF DB1.W902_Reference_Status_Cde = 'HO'/'QU'/'BL'/'AL'/'AV'/*BLANK/'AU';

  //?RMC added AU as valid for 947 - it comes with reason 07
  //?Validate Reference Status Code.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 947 Error Desc USR = CONCAT(CON.Invalid Reference Status,CON.code.,CON.1)
  PAR.EDI_947_Error_Desc_USR = 'Invalid Reference Status' + 'code.' (1);

  QUIT;

  ENDIF;

  //?Validate Production Date.
  CASE;

  // IF DB1.G6202 Production Date is Entered
  IF DB1.G6202_Production_Date <> *ZERO;

  // Execute function EUS Val Production Dte US.
  EXECUTE FUNCTION(EUS Val Production Dte US) TYPE(EXCUSRSRC) ('PUGKUFR');
  PARAMETER(DB1.G6202_Production_Date);
  PARAMETER(LCL.Validation_Pass_USR);
  {
   * Check Production Date is a Valid Date.
   d wkccyymmdd      S              8A
   *
   c                   eval      #OFASC = 'Y'
   c                   eval      wkccyymmdd = %char(#ICTNZ)                   Convert to Charc.
   /free
   test(de) *iso0 wkccyymmdd ;
   if %error() ;
   #OFASC = 'N' ;  // Invalid Date
   endif ;
   /end-free
   *
  }

  //?Invalid Date.
  CASE;

  // IF LCL.Validation Pass USR is No
  IF LCL.Validation_Pass_USR = 'N';

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 947 Error Desc USR = CON.Invalid Production Date.
  PAR.EDI_947_Error_Desc_USR = 'Invalid Production Date.';

  QUIT;

  ENDIF;

  //?Validate Production Date.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 947 Error Desc USR = CON.Invalid Production Date.
  PAR.EDI_947_Error_Desc_USR = 'Invalid Production Date.';

  QUIT;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?Validation Passed Then Update for Inventory Adjustment.
 CASE;

 // IF NOT PAR.EDI-Record Processed is Error
 IF ! PAR.EDI_Record_Processed = 'E';

 //?WI517 DN 10/03/23-Added 'Inventory Updated USR' & 'API was Called? U' Flag
 EXECUTE FUNCTION(Upd Proc 947 Whs InvAdjRT) TYPE(RTVOBJ) FILE(ECP071)           AC2148476;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Company_Number);
 PARAMETER(DB1.N902_Transfer_Order_Nbr);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Inventory_Updated_USR);
 PARAMETER(LCL.API_was_Called_U);
 {
  //?USER: Initialize routine

  // Execute function Get System Date       US.
  EXECUTE FUNCTION(Get System Date       US) TYPE(EXCUSRSRC) ('PUGLUFR');
  PARAMETER(LCL.System_Date_Nbr_USR);
  {
   * Get System Date - CCYYMMDD
   c                   eval      #OC0NZ = *date
  }

  // LCL.Transaction Date D8# USR = LCL.System Date Nbr USR
  LCL.Transaction_Date_D8#_USR = LCL.System_Date_Nbr_USR;

  // LCL.Transaction Date Code = LCL.Transaction Date D8# USR
  LCL.Transaction_Date_Code = LCL.Transaction_Date_D8#_USR;

  // LCL.Inventory Trans. Type = CND.Adjustment Quantity
  LCL.Inventory_Trans_Type = 'A';

  // LCL.Inv Trans. Type Desc USR = Condition name of LCL.Inventory Trans. Type
  LCL.Inv_Trans_Type_Desc_USR = RTVCND(LCL.Inventory_Trans_Type);

  //?USER: Process Data record

  //?Format Data.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Production Date USR D8# = DB1.G6202 Production Date
  LCL.Production_Date_USR_D8# = DB1.G6202_Production_Date;

  // LCL.Production Date = LCL.Production Date USR D8#
  LCL.Production_Date = LCL.Production_Date_USR_D8#;

  // Execute function EUS TrimL Prod ID Code US.
  EXECUTE FUNCTION(EUS TrimL Prod ID Code US) TYPE(EXCUSRSRC) ('PUEHUFR');
  PARAMETER(DB1.W1906_PRODUCT);
  PARAMETER(LCL.Item_Code_Txt);
  {
   * Trim Left Product ID.
   c                   eval      #OFYTX = %triml(#IF3C7)
   *
  }

  // Execute function Cvt Item Code to Nbr   US.
  EXECUTE FUNCTION(Cvt Item Code to Nbr   US) TYPE(EXCUSRSRC) ('PUETUFR');
  PARAMETER(LCL.Item_Code_Txt);
  PARAMETER(LCL.Item_Code);
  {
   * Trim Item Code and Convert to Numeric.
   c                   eval      #OHGCD = %dec(%trim(#IFYTX) : 7:0)
   *
  }

  // LCL.Description = CONCAT(LCL.Inv Trans. Type Desc USR,DB1.W902 Reference Status Cde,CON.2)
  LCL.Description = LCL.Inv_Trans_Type_Desc_USR + DB1.W902_Reference_Status_Cde (2);

  //?Translate Adjustment Reason Code to AS400 Reason Code.
  CASE;

  // IF DB1.W1901 ADJUSTMENT RSN CDE is Cycle Count (Add/Remove)
  IF DB1.W1901_ADJUSTMENT_RSN_CDE = 'AA';

  //?Increase/Decrease Inventory.
  CASE;

  // IF DB1.W1902 CREDIT DEBIT QTY is Decrease Inventory
  IF DB1.W1902_CREDIT_DEBIT_QTY < *ZERO;

  // LCL.Reason Code = CND.Cycle Count-Decrease
  LCL.Reason_Code = 'CCD';

  //?Increase/Decrease Inventory.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Reason Code = CND.C01/C02/C04: Cycle Count
  LCL.Reason_Code = 'CCA';

  ENDIF;

  //?Translate Adjustment Reason Code to AS400 Reason Code.
  // IF DB1.W1901 ADJUSTMENT RSN CDE is Dump/Destroy
  IF DB1.W1901_ADJUSTMENT_RSN_CDE = '07';

  // LCL.Reason Code = CND.Dump/Destroy
  LCL.Reason_Code = 'TNK';

  //?Translate Adjustment Reason Code to AS400 Reason Code.
  // IF DB1.W1901 ADJUSTMENT RSN CDE is Inbound/Carrier Damage
  IF DB1.W1901_ADJUSTMENT_RSN_CDE = 'AV';

  // LCL.Reason Code = CND.Inbound/Carrier Damage
  LCL.Reason_Code = 'CRD';

  //?Translate Adjustment Reason Code to AS400 Reason Code.
  // IF DB1.W1901 ADJUSTMENT RSN CDE is Receipt Error (Add/Remov)
  IF DB1.W1901_ADJUSTMENT_RSN_CDE = 'AY';

  //?Increase/Decrease Inventory.
  CASE;

  // IF DB1.W1902 CREDIT DEBIT QTY is Decrease Inventory
  IF DB1.W1902_CREDIT_DEBIT_QTY < *ZERO;

  // LCL.Reason Code = CND.Receipt Error (Remove)
  LCL.Reason_Code = 'GRD';

  //?Increase/Decrease Inventory.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Reason Code = CND.Receipt Error (Add)
  LCL.Reason_Code = 'GRA';

  ENDIF;

  //?Translate Adjustment Reason Code to AS400 Reason Code.
  // IF DB1.W1901 ADJUSTMENT RSN CDE is Warehouse Damage
  IF DB1.W1901_ADJUSTMENT_RSN_CDE = 'AU';

  // LCL.Reason Code = CND.Warehouse Damage
  LCL.Reason_Code = 'WHD';

  //?Translate Adjustment Reason Code to AS400 Reason Code.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Reason Code = CND.Not Entered
  LCL.Reason_Code = *BLANK;

  ENDIF;

  //?Net weight - use company item if -0-
  CASE;

  // IF DB1.W1910 WEIGHT-GROSS is Not Entered
  IF DB1.W1910_WEIGHT_GROSS = *ZERO;

  //?the net and gross wts are swapped in the file. use Gross here which is NET
  EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Quality_Level);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.W1913 WEIGHT-NET = LCL.Unit Weight * DB1.W1902 CREDIT DEBIT QTY *
  LCL.W1913_WEIGHT_NET = LCL.Unit_Weight * DB1.W1902_CREDIT_DEBIT_QTY;

  //?Net weight - use company item if -0-
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.W1913 WEIGHT-NET = DB1.W1910 WEIGHT-GROSS
  LCL.W1913_WEIGHT_NET = DB1.W1910_WEIGHT_GROSS;

  ENDIF;

  ENDIF;

  //?INVENTORY IS KEPT BY SHIPPING COMPANY
  EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Shipping_Company_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?MANIPULATE THE WAREHOUSES IF NA3 OR NA5 Then do Adjust  RMC 4.29.19 R14364
  CASE;

  // IF PAR.Warehouse Code is NA3 Nor Am-Fresh-360
  IF PAR.Warehouse_Code = 'NA3';

  // OR PAR.Warehouse Code is NA5 Nor Am-Fresh-960
  OR PAR.Warehouse_Code = 'NA5';

  // LCL.Warehouse Code = PAR.Warehouse Code
  LCL.Warehouse_Code = PAR.Warehouse_Code;

  // LCL.Shipping Company Number = PAR.Shipping Company USR
  LCL.Shipping_Company_Number = PAR.Shipping_Company_USR;

  EXECUTE FUNCTION(RTV Sold 100% Frozen  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC2085833;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Sold_100_Percent_Frozen);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Change 100% frozen product in NA3 to NA8 (101257) No longer 100%
  CASE;

  // IF PAR.Warehouse Code is NA3 Nor Am-Fresh-360
  IF PAR.Warehouse_Code = 'NA3';

  //?W101257 DN 06/20/22-Removed test: LCL.Sold 100% Frozen is yes
  // LCL.Warehouse Code = CND.NA8 Nor Am-Frozen-360
  LCL.Warehouse_Code = 'NA8';

  // PAR.Warehouse Code SavUsr = CND.NA8 Nor Am-Frozen-360
  PAR.Warehouse_Code_SavUsr = 'NA8';

  EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
  PARAMETER(PAR.Warehouse_Code_SavUsr);
  PARAMETER(PAR.Shipping_Company_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Shipping Company Number = PAR.Shipping Company USR
  LCL.Shipping_Company_Number = PAR.Shipping_Company_USR;

  ENDIF;

  //?Change 100% frozen product in NA5 to NA6
  CASE;

  // IF PAR.Warehouse Code is NA5 Nor Am-Fresh-960
  IF PAR.Warehouse_Code = 'NA5';

  // AND LCL.Sold 100% Frozen is yes
  AND LCL.Sold_100_Percent_Frozen = 'Y';

  // LCL.Warehouse Code = CND.NA6 Nor Am-Frozen-960
  LCL.Warehouse_Code = 'NA6';

  // PAR.Warehouse Code SavUsr = CND.NA6 Nor Am-Frozen-960
  PAR.Warehouse_Code_SavUsr = 'NA6';

  EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
  PARAMETER(PAR.Warehouse_Code_SavUsr);
  PARAMETER(PAR.Shipping_Company_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Shipping Company Number = PAR.Shipping Company USR
  LCL.Shipping_Company_Number = PAR.Shipping_Company_USR;

  ENDIF;

  //?Dont adjust if the reason is not established. we arent doing  anything
  //?with status changes: w1901 of 05 and 55
  CASE;

  // IF LCL.Reason Code is Entered
  IF LCL.Reason_Code <> *BLANK;

  //?WI517 DN 07/06/23-Added 'Upd Both Legacy & WIM USR=N'. Update Legacy Only.
  //?  - Added 'Called From Program' as input parm.
  //?  - Added 'Inventory Updated USR' & 'API was Called? U' as output parms.
  // Call program Upd Balances Issue/Adj XF.
  CALL PROGRAM(Upd Balances Issue/Adj XF) ('PDQRXFR');
  PARAMETER(LCL.Shipping_Company_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER('A');
  PARAMETER('A');
  PARAMETER(LCL.Transaction_Date_Code);
  PARAMETER(LCL.Production_Date);
  PARAMETER('IC');
  PARAMETER(LCL.Description);
  PARAMETER(LCL.Reason_Code);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Number);
  PARAMETER('1');
  PARAMETER(LCL.Production_Date);
  PARAMETER(LCL.W1913_WEIGHT_NET);
  PARAMETER(DB1.W1902_CREDIT_DEBIT_QTY);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER(PAR.Inventory_Updated_USR);
  PARAMETER(PAR.API_was_Called_U);
  PARAMETER('PUGDXFR');

  ENDIF;

  //?MANIPULATE THE WAREHOUSES IF NA3 OR NA5 Then do Adjust  RMC 4.29.19 R14364
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Dont adjust if the reason is not established. we arent doing  anything
  //?with status changes: w1901 of 05 and 55
  CASE;

  // IF LCL.Reason Code is Entered
  IF LCL.Reason_Code <> *BLANK;

  //?WI517 DN 07/06/23-Added 'Upd Both Legacy & WIM USR=N'. Update Legacy Only.
  //?  - Added 'Called From Program' as input parm.
  //?  - Added 'Inventory Updated USR' & 'API was Called? U' as output parms.
  // Call program Upd Balances Issue/Adj XF.
  CALL PROGRAM(Upd Balances Issue/Adj XF) ('PDQRXFR');
  PARAMETER(PAR.Shipping_Company_USR);
  PARAMETER(LCL.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('A');
  PARAMETER('A');
  PARAMETER(LCL.Transaction_Date_Code);
  PARAMETER(LCL.Production_Date);
  PARAMETER('IC');
  PARAMETER(LCL.Description);
  PARAMETER(LCL.Reason_Code);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Number);
  PARAMETER('1');
  PARAMETER(LCL.Production_Date);
  PARAMETER(LCL.W1913_WEIGHT_NET);
  PARAMETER(DB1.W1902_CREDIT_DEBIT_QTY);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER(PAR.Inventory_Updated_USR);
  PARAMETER(PAR.API_was_Called_U);
  PARAMETER('PUGDXFR');

  ENDIF;

  ENDIF;

 }

 //?WI517 DN 10/03/23-Set 'Send Email f/Failed API U' for Failed API Call.
 CASE;

 // IF LCL.API was Called? U is Yes
 IF LCL.API_was_Called_U = 'Y';

 // AND LCL.Inventory Updated USR is No
 AND LCL.Inventory_Updated_USR = 'N';

 // AND LCL.First Time Through USR is Yes
 AND LCL.First_Time_Through_USR = 'Y';

 // LCL.First Time Through USR = CND.No
 LCL.First_Time_Through_USR = 'N';

 // PAR.Send Email f/Failed API U = CND.Yes
 PAR.Send_Email_f_Failed_API_U = 'Y';

 ENDIF;

 // PAR.EDI-Record Processed = CND.Processed
 PAR.EDI_Record_Processed = 'Y';

 ENDIF;

 EXECUTE FUNCTION(Chg Whs Inv Adj Adv HDRCH) TYPE(CHGOBJ) FILE(ECP070)           AC2144943;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.TRADE_PARTNER_CODE);
 PARAMETER(PAR.EDI_Record_Processed);
 PARAMETER(DB1.W1501_Date);
 PARAMETER(DB1.W1502_Adj_Number_whse);
 PARAMETER(DB1.W1503_Adj_Number_depostr);
 PARAMETER(DB1.N902_Transfer_Order_Nbr);
 PARAMETER(DB1.G6202_Contact_User_ID);
 PARAMETER(DB1.G6204_Adjustment_Time);
 //?Validation Failed, Send Email.
 CASE;

 // IF PAR.EDI-Record Processed is Error
 IF PAR.EDI_Record_Processed = 'E';

 //?Format Email Subject & Message and Send Email.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDI Surrogate Nbr Txt USR = CVTVAR(DB1.EDI SURROGATE NUMBER)
 LCL.EDI_Surrogate_Nbr_Txt_USR = CVTVAR(DB1.EDI_SURROGATE_NUMBER);

 // Execute function EUS TrimL Surrogate #  US.
 EXECUTE FUNCTION(EUS TrimL Surrogate #  US) TYPE(EXCUSRSRC) ('PUGGUFR');
 PARAMETER(LCL.EDI_Surrogate_Nbr_Txt_USR);
 {
  * Trim Left EDI Surrogate Number; Suppress Leading Zero.
  c                   eval      #BIWU1 = %triml(#BIWU1 : '0 ')
  *
 }

 // PAR.Email Subject USR = CONCAT(LCL.Email Subject USR,CON.Surrogate #,CON.1)
 PAR.Email_Subject_USR = LCL.Email_Subject_USR + 'Surrogate #' (1);

 // PAR.Email Subject USR = CONCAT(PAR.Email Subject USR,LCL.EDI Surrogate Nbr Txt USR,CON.1)
 PAR.Email_Subject_USR = PAR.Email_Subject_USR + LCL.EDI_Surrogate_Nbr_Txt_USR (1);

 // LCL.Email Message USR = CONCAT(CON.EDI 947 Error -,PAR.EDI 947 Error Desc USR,CON.1)
 LCL.Email_Message_USR = 'EDI 947 Error -' + PAR.EDI_947_Error_Desc_USR (1);

 //?Default Company to 360 if Zero.
 CASE;

 // IF LCL.Company Number is Equal to zero
 IF LCL.Company_Number = *ZERO;

 // LCL.Company Number = CND.Guymon
 LCL.Company_Number = 360;

 ENDIF;

 EXECUTE FUNCTION(Exc ESNDMAIL Generic  IF) TYPE(EXCINTFUN)                      AC2144041;
 PARAMETER(LCL.Company_Number);
 PARAMETER('EDI947ERR');
 PARAMETER(PAR.Email_Subject_USR);
 PARAMETER(LCL.Email_Message_USR);
 {
  //?Execute internal function

  //?Execute ESNDMAIL to Send Email Message.
  EXECUTE FUNCTION(RTV Alpha Value 2     RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2134765;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Company_Value_Code);
  PARAMETER(LCL.Email_Address);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Email Address is Entered
  IF LCL.Email_Address <> *BLANK;

  // Call program Exc ESNDMAIL Generic  CL.
  CALL PROGRAM(Exc ESNDMAIL Generic  CL) ('PUE8UPC');
  PARAMETER(LCL.Email_Address);
  PARAMETER(PAR.Email_Subject_USR);
  PARAMETER(PAR.Email_Message_USR);

  ENDIF;

 }

 ENDIF;

 ENDIF;

}


//?WI517 DN 10/03/23-If 'Send Email f/Failed API U=Yes' Then Send Email.
CASE;

// IF LCL.Send Email f/Failed API U is Yes
IF LCL.Send_Email_f_Failed_API_U = 'Y';

// Call program Prc Eml Shipping & IT  XF.
CALL PROGRAM(Prc Eml Shipping & IT  XF) ('PVA9XFR');
PARAMETER('PUGDXFR');

ENDIF;

