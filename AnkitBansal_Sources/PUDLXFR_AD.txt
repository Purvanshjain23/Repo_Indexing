// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUDLXFR
// ?Date: 14.08.2025 Time: 03:50:03
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?SR21655 DN 11/19/24-Exit Program if Between 3:30AM thru 3:50AM.
CASE;

// IF JOB.*Job time is Between 3:30am & 3:50am
IF JOB.*Job_time >= 033000;
AND JOB.*Job_time <= 035000;

RETURN;

ENDIF;

// Execute function EUS EDI 944 Data Dfn  US.
EXECUTE FUNCTION(EUS EDI 944 Data Dfn  US) TYPE(EXCUSRSRC) ('PUEEUFR');
{
 * Declare EDI 944 Data Definitions
 D digits          C                   '0123456789'
 D len             S              3  0
}


//?WI517 DN 10/12/23-Setup Eradani's Environment Libraries.
// Call program Upd Setup Eradani Libs CL.
CALL PROGRAM(Upd Setup Eradani Libs CL) ('PVBFUPC');

//?WI517 DN 10/05/23-Added/Init 'Send Email f/Failed API U' Output Parm.
// LCL.Send Email f/Failed API U = CND.No
LCL.Send_Email_f_Failed_API_U = 'N';

EXECUTE FUNCTION(Rtv Upd EDI 944 Trsn   RT) TYPE(RTVOBJ) FILE(ECP065)           AC2139806;
PARAMETER(LCL.Send_Email_f_Failed_API_U);
{
 //?USER: Process Data record

 //?Data Validation.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Initialize.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Processed
 PAR.EDI_Record_Processed = 'Y';

 // PAR.OHE EDI Error Reasons = CND.Blank
 PAR.OHE_EDI_Error_Reasons = *BLANK;

 // PAR.Invalid Order Number USR = CND.Yes
 PAR.Invalid_Order_Number_USR = 'Y';

 ENDIF;

 //?Validate Order Number.
 CASE;

 // IF DB1.W1704 Depositor Order Nbr is Not Entered
 IF DB1.W1704_Depositor_Order_Nbr = *BLANK;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 //?Validate Order Number.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Order Number = CON.*ZERO
 LCL.Order_Number = *ZERO;

 // Execute function Val Numeric Digit     US.
 EXECUTE FUNCTION(Val Numeric Digit     US) TYPE(EXCUSRSRC) ('PUD6UFR');
 PARAMETER(DB1.W1704_Depositor_Order_Nbr);
 PARAMETER(LCL.Validation_Pass_USR);
 {
  *
  c                   Monitor
  *
  c                   If        %check(digits : %trim(#IA2T1)) = 0
  * All Digit, Validation Pass.
  c                   eval      #OFASC = 'Y'
  c                   else
  * Non-Digit Found, Validation Fail.
  c                   eval      #OFASC = 'N'
  c                   endif
  *
  * Monitor Message RNX0105 - 'A character representation of a numeric value is in error.
  c                   On-Error  00105                                        Do Nothing
  *
  c                   EndMon
  *
 }

 //?Order Number Pass Digit Check?
 CASE;

 // IF LCL.Validation Pass USR is Yes
 IF LCL.Validation_Pass_USR = 'Y';

 //?Order Number Cannot Be More Than 7 Digits Long.
 // Execute function Val Order# Data Length US.
 EXECUTE FUNCTION(Val Order# Data Length US) TYPE(EXCUSRSRC) ('PUD2UFR');
 PARAMETER(DB1.W1704_Depositor_Order_Nbr);
 PARAMETER(LCL.Validation_Pass_USR);
 PARAMETER(LCL.Order_Number);
 {
  *
  * Check Order Number Data Length.
  c                   eval      len = %len(%trim(#IAVNZ))
  * Order Number Cannot Be Greater Than 7.
  c                   If        len <= 7
  c                   eval      #OFASC = 'Y'
  c                   eval      #OC4NB = %dec(%trim(#IAVNZ) : 7:0)
  c                   else
  * Order # Data Length > 7, Validation Fail.
  c                   eval      #OFASC = 'N'
  c                   eval      #OC4NB = 0
  c                   endif
  *
 }

 //?Order Number Pass Length Check?
 CASE;

 // IF LCL.Validation Pass USR is Yes
 IF LCL.Validation_Pass_USR = 'Y';

 EXECUTE FUNCTION(RTV Order Hdr EDI 944  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2140434;
 PARAMETER(LCL.Order_Number);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Load_ID);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Order Found?
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Error if NOT a Transfer Order.
 CASE;

 // IF LCL.Order Type - Sales is Transfer Order
 IF LCL.Order_Type_Sales = 'TR';

 // PAR.Invalid Order Number USR = CND.No
 PAR.Invalid_Order_Number_USR = 'N';

 CASE;

 // IF LCL.Header Status is Confirmed & Complete
 IF LCL.Header_Status = 'C'/'R';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.OHE EDI Error Reasons = CND.Order Status
 PAR.OHE_EDI_Error_Reasons = 'ORDST';

 ENDIF;

 //?Error if NOT a Transfer Order.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.OHE EDI Error Reasons = CND.Order Number
 PAR.OHE_EDI_Error_Reasons = 'ORDNM';

 ENDIF;

 //?Order Found?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 ENDIF;

 //?Order Number Pass Length Check?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 ENDIF;

 //?Order Number Pass Digit Check?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 ENDIF;

 ENDIF;

 //?If Order Number Not in Error, Continue Validation.
 CASE;

 // IF NOT PAR.EDI-Record Processed is Error
 IF ! PAR.EDI_Record_Processed = 'E';

 //?Check Receipt Date.
 CASE;

 // IF DB1.W1702 Receipt Date is Not Entered
 IF DB1.W1702_Receipt_Date = *BLANK;

 // PAR.OHE EDI Error Reasons = CND.Receipt Date
 PAR.OHE_EDI_Error_Reasons = 'RCPDT';

 //?Check Receipt Date.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Val Numeric Digit     US.
 EXECUTE FUNCTION(Val Numeric Digit     US) TYPE(EXCUSRSRC) ('PUD6UFR');
 PARAMETER(DB1.W1702_Receipt_Date);
 PARAMETER(LCL.Validation_Pass_USR);
 {
  *
  c                   Monitor
  *
  c                   If        %check(digits : %trim(#IA2T1)) = 0
  * All Digit, Validation Pass.
  c                   eval      #OFASC = 'Y'
  c                   else
  * Non-Digit Found, Validation Fail.
  c                   eval      #OFASC = 'N'
  c                   endif
  *
  * Monitor Message RNX0105 - 'A character representation of a numeric value is in error.
  c                   On-Error  00105                                        Do Nothing
  *
  c                   EndMon
  *
 }

 //?Receipt Date Pass Digit Check?
 CASE;

 // IF LCL.Validation Pass USR is Yes
 IF LCL.Validation_Pass_USR = 'Y';

 // LCL.Receipt Date USR = CVTVAR(DB1.W1702 Receipt Date)
 LCL.Receipt_Date_USR = CVTVAR(DB1.W1702_Receipt_Date);

 // LCL.Receipt Date 2 USR = LCL.Receipt Date USR
 LCL.Receipt_Date_2_USR = LCL.Receipt_Date_USR;

 //?Receipt Date Cannot Be < Actual Ship Date OR Rcpt Dte > ASD (+14 days).
 CASE;

 // IF LCL.Receipt Date 2 USR LT LCL.Actual Shipped Date
 IF LCL.Receipt_Date_2_USR < LCL.Actual_Shipped_Date;

 // PAR.OHE EDI Error Reasons = CND.Receipt Date
 PAR.OHE_EDI_Error_Reasons = 'RCPDT';

 //?Receipt Date Cannot Be < Actual Ship Date OR Rcpt Dte > ASD (+14 days).
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Actual Ship Date Usr = LCL.Actual Shipped Date + CON.14 *DAYS
 LCL.Actual_Ship_Date_Usr = DATEINCR(LCL.Actual_Shipped_Date 14 'DY' 1111111 'NONE' 'N' 1);

 CASE;

 // IF LCL.Receipt Date 2 USR GT LCL.Actual Ship Date Usr
 IF LCL.Receipt_Date_2_USR > LCL.Actual_Ship_Date_Usr;

 // PAR.OHE EDI Error Reasons = CND.Receipt Date
 PAR.OHE_EDI_Error_Reasons = 'RCPDT';

 ENDIF;

 ENDIF;

 //?Receipt Date Pass Digit Check?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.OHE EDI Error Reasons = CND.Receipt Date
 PAR.OHE_EDI_Error_Reasons = 'RCPDT';

 ENDIF;

 ENDIF;

 //?If Not in Error, Check Ship To Warehouse DUNS#.
 CASE;

 // IF PAR.OHE EDI Error Reasons is Blank
 IF PAR.OHE_EDI_Error_Reasons = *BLANK;

 EXECUTE FUNCTION(RTV Validte Ship To WhsRT) TYPE(RTVOBJ) FILE(ECP069)           AC2142558;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(LCL.Invalid_Ship_To_Whs_USR);
 {
  //?USER: Initialize routine

  // PAR.Invalid Ship To Whs USR = CND.No
  PAR.Invalid_Ship_To_Whs_USR = 'N';

  //?USER: Process Data record

  //?Validate Ship To Warehouse DUNS#.
  CASE;

  // IF DB1.N101-NAME TYPE CODE is Warehouse
  IF ( DB1.N101_NAME_TYPE_CODE = 'WH';

  // OR DB1.N101-NAME TYPE CODE is Ship To
  OR DB1.N101_NAME_TYPE_CODE = 'ST' );

  // AND DB1.N104-ID CODE is Entered
  AND DB1.N104_ID_CODE <> *BLANK;

  // AND DB1.N103-ID CODE QUALIFIER is Duns ID
  AND DB1.N103_ID_CODE_QUALIFIER = '9';

  // Execute function EUS TrimL ShpToWh DUNS US.
  EXECUTE FUNCTION(EUS TrimL ShpToWh DUNS US) TYPE(EXCUSRSRC) ('PUEIUFR');
  PARAMETER(DB1.N104_ID_CODE);
  PARAMETER(LCL.EDI_Whs_Duns_Number);
  {
   * Trim Left Ship To Warehouse DUNS #.
   c                   eval      #OX2T1 = %triml(#IDCDE)
   *
  }

  EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Ship_To_Warehouse);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv WHS Interchg All  RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2138766;
  PARAMETER(LCL.Ship_To_Warehouse);
  PARAMETER('WHSTAD');
  PARAMETER(NLL.Class_Code);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(PAR.EDI_Whs_Duns_Number);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Create_Date);
  PARAMETER(NLL.Create_Time);
  PARAMETER(NLL.Create_User);
  PARAMETER(NLL.Create_Program);
  PARAMETER(NLL.Change_Date);
  PARAMETER(NLL.Change_Time);
  PARAMETER(NLL.Change_User);
  PARAMETER(NLL.Change_Program);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?DUNS # Mismatch.
  CASE;

  // IF PAR.EDI Whs Duns Number NE LCL.EDI Whs Duns Number
  IF PAR.EDI_Whs_Duns_Number <> LCL.EDI_Whs_Duns_Number;

  // PAR.Invalid Ship To Whs USR = CND.Yes
  PAR.Invalid_Ship_To_Whs_USR = 'Y';

  QUIT;

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.Invalid Ship To Whs USR is Yes
 IF LCL.Invalid_Ship_To_Whs_USR = 'Y';

 // PAR.OHE EDI Error Reasons = CND.Order Ship To Warehouse
 PAR.OHE_EDI_Error_Reasons = 'ORDWH';

 ENDIF;

 ENDIF;

 //?If Not in Error, Check Total Qty Received.
 CASE;

 // IF PAR.OHE EDI Error Reasons is Blank
 IF PAR.OHE_EDI_Error_Reasons = *BLANK;

 CASE;

 // IF DB1.W1401 Total Qty Received is LE 0
 IF DB1.W1401_Total_Qty_Received <= 0;

 // PAR.OHE EDI Error Reasons = CND.Receipt Quantity
 PAR.OHE_EDI_Error_Reasons = 'RCPQT';

 ENDIF;

 ENDIF;

 //?If Not in Error, Check Pallet ID.
 CASE;

 // IF PAR.OHE EDI Error Reasons is Blank
 IF PAR.OHE_EDI_Error_Reasons = *BLANK;

 EXECUTE FUNCTION(RTV Validate Pallet ID RT) TYPE(RTVOBJ) FILE(ECP067)           AC2142341;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 {
  //?USER: Initialize routine

  // PAR.OHE EDI Error Reasons = CND.Blank
  PAR.OHE_EDI_Error_Reasons = *BLANK;

  //?USER: Process Data record

  CASE;

  // IF DB1.N0901 Reference ID Qlfr is Pallet Number
  IF DB1.N0901_Reference_ID_Qlfr = 'W';

  CASE;

  // IF DB1.N0902 Reference ID is Entered
  IF DB1.N0902_Reference_ID <> *BLANK;

  // Execute function EUS TrimL Pallet ID    US.
  EXECUTE FUNCTION(EUS TrimL Pallet ID    US) TYPE(EXCUSRSRC) ('PUEGUFR');
  PARAMETER(DB1.N0902_Reference_ID);
  PARAMETER(LCL.Pallet_ID_USR);
  {
   * Trim Left & Substring Out the Pallet ID.
   c                   eval      #OH3U1 = %subst(%triml(#IHGU1):11:9)
   *
  }

  // Execute function Val Numeric Digit     US.
  EXECUTE FUNCTION(Val Numeric Digit     US) TYPE(EXCUSRSRC) ('PUD6UFR');
  PARAMETER(LCL.Pallet_ID_USR);
  PARAMETER(LCL.Validation_Pass_USR);
  {
   *
   c                   Monitor
   *
   c                   If        %check(digits : %trim(#IA2T1)) = 0
   * All Digit, Validation Pass.
   c                   eval      #OFASC = 'Y'
   c                   else
   * Non-Digit Found, Validation Fail.
   c                   eval      #OFASC = 'N'
   c                   endif
   *
   * Monitor Message RNX0105 - 'A character representation of a numeric value is in error.
   c                   On-Error  00105                                        Do Nothing
   *
   c                   EndMon
   *
  }

  //?Pallet ID Pass Digit Check?
  CASE;

  // IF LCL.Validation Pass USR is No
  IF LCL.Validation_Pass_USR = 'N';

  // PAR.OHE EDI Error Reasons = CND.Invalid Pallet
  PAR.OHE_EDI_Error_Reasons = 'PALLT';

  QUIT;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.OHE EDI Error Reasons = CND.Invalid Pallet
  PAR.OHE_EDI_Error_Reasons = 'PALLT';

  QUIT;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.OHE EDI Error Reasons = CND.Invalid Pallet Qlfr
  PAR.OHE_EDI_Error_Reasons = 'PALQL';

  QUIT;

  ENDIF;

 }

 ENDIF;

 //?If Not in Error, Check Serial #.
 CASE;

 // IF PAR.OHE EDI Error Reasons is Blank
 IF PAR.OHE_EDI_Error_Reasons = *BLANK;

 EXECUTE FUNCTION(RTV Validate Serial #  RT) TYPE(RTVOBJ) FILE(ECP166)           AC2144177;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 {
  //?USER: Initialize routine

  // PAR.OHE EDI Error Reasons = CND.Blank
  PAR.OHE_EDI_Error_Reasons = *BLANK;

  //?USER: Process Data record

  CASE;

  // IF DB1.N901 Reference ID Qlfr is Serial Number
  IF DB1.N901_Reference_ID_Qlfr = 'SE';

  CASE;

  // IF DB1.N902 Reference ID Nbr is Entered
  IF DB1.N902_Reference_ID_Nbr <> *BLANK;

  // Execute function EUS TrimL Serial Nbr   US.
  EXECUTE FUNCTION(EUS TrimL Serial Nbr   US) TYPE(EXCUSRSRC) ('PUERUFR');
  PARAMETER(DB1.N902_Reference_ID_Nbr);
  PARAMETER(LCL.PT_Serial_Number_Txt_USR);
  {
   * Trim Left Serial Number.
   c                   eval      #OH6U1 = %triml(#IHGU1)
   *
  }

  // Execute function Val Numeric Digit     US.
  EXECUTE FUNCTION(Val Numeric Digit     US) TYPE(EXCUSRSRC) ('PUD6UFR');
  PARAMETER(LCL.PT_Serial_Number_Txt_USR);
  PARAMETER(LCL.Validation_Pass_USR);
  {
   *
   c                   Monitor
   *
   c                   If        %check(digits : %trim(#IA2T1)) = 0
   * All Digit, Validation Pass.
   c                   eval      #OFASC = 'Y'
   c                   else
   * Non-Digit Found, Validation Fail.
   c                   eval      #OFASC = 'N'
   c                   endif
   *
   * Monitor Message RNX0105 - 'A character representation of a numeric value is in error.
   c                   On-Error  00105                                        Do Nothing
   *
   c                   EndMon
   *
  }

  //?Serial # Pass Digit Check?
  CASE;

  // IF LCL.Validation Pass USR is No
  IF LCL.Validation_Pass_USR = 'N';

  // PAR.OHE EDI Error Reasons = CND.Invalid Serial
  PAR.OHE_EDI_Error_Reasons = 'SERLN';

  QUIT;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.OHE EDI Error Reasons = CND.Invalid Serial
  PAR.OHE_EDI_Error_Reasons = 'SERLN';

  QUIT;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.OHE EDI Error Reasons = CND.Invalid Serial Qlfr
  PAR.OHE_EDI_Error_Reasons = 'SERQL';

  QUIT;

  ENDIF;

 }

 ENDIF;

 //?If Not in Error, Check Unit of Measure (UOM).
 CASE;

 // IF PAR.OHE EDI Error Reasons is Blank
 IF PAR.OHE_EDI_Error_Reasons = *BLANK;

 EXECUTE FUNCTION(RTV Validate UOM       RT) TYPE(RTVOBJ) FILE(ECP066)           AC2141627;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Invalid_UOM_USR);
 {
  //?USER: Initialize routine

  // PAR.Invalid UOM USR = CND.No
  PAR.Invalid_UOM_USR = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.W0702 UOM is Boxes
  IF DB1.W0702_UOM = 'CA';

  // OR DB1.W0702 UOM is Combos
  OR DB1.W0702_UOM = 'CZ';

  // OR DB1.W0702 UOM is Each
  OR DB1.W0702_UOM = 'EA';

  // OR DB1.W0702 UOM is Pounds
  OR DB1.W0702_UOM = 'LB';

  // OR DB1.W0702 UOM is Cases
  OR DB1.W0702_UOM = 'CS';

  //?R14364 DN 04/10/19-Added 'CS' (Cases).
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Invalid UOM USR = CND.Yes
  PAR.Invalid_UOM_USR = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Invalid UOM USR is Yes
 IF LCL.Invalid_UOM_USR = 'Y';

 // PAR.OHE EDI Error Reasons = CND.Invalid UOM
 PAR.OHE_EDI_Error_Reasons = 'UOM';

 ENDIF;

 ENDIF;

 //?If Not in Error, DTL/MAN Missing,Check Item Number & Item Number Mismatch.
 CASE;

 // IF PAR.OHE EDI Error Reasons is Blank
 IF PAR.OHE_EDI_Error_Reasons = *BLANK;

 EXECUTE FUNCTION(Val WHS Stk Txfr MAN  RT) TYPE(RTVOBJ) FILE(ECP067)            AC2180398;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 //?RMC 1/29/20  ERROR if missing MAN or DTL
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.OHE EDI Error Reasons = CND.EDI MAN Segment Missing
 PAR.OHE_EDI_Error_Reasons = 'EDIMN';

 //?RMC 1/29/20  ERROR if missing MAN or DTL
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Validate Item Code RT) TYPE(RTVOBJ) FILE(ECP066)           AC2141867;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Number);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 {
  //?USER: Processing if Data record not found

  //?RMC added -- if no rcds found     1/29/20
  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.W0704 Prod ID Qlfr is Vendor Item Number
  IF DB1.W0704_Prod_ID_Qlfr = 'VN';

  // AND DB1.W0705 Prod ID Code is Not DIVIDERS
  AND DB1.W0705_Prod_ID_Code <> 'DIVIDERS';

  CASE;

  // IF DB1.W0705 Prod ID Code is Entered
  IF DB1.W0705_Prod_ID_Code <> *BLANK;

  // Execute function EUS TrimL Prod ID Code US.
  EXECUTE FUNCTION(EUS TrimL Prod ID Code US) TYPE(EXCUSRSRC) ('PUEHUFR');
  PARAMETER(DB1.W0705_Prod_ID_Code);
  PARAMETER(LCL.Item_Code_Txt);
  {
   * Trim Left Product ID.
   c                   eval      #OFYTX = %triml(#IF3C7)
   *
  }

  // LCL.Item Code 5A = LCL.Item Code Txt
  LCL.Item_Code_5A = LCL.Item_Code_Txt;

  // Execute function Val Numeric Digit     US.
  EXECUTE FUNCTION(Val Numeric Digit     US) TYPE(EXCUSRSRC) ('PUD6UFR');
  PARAMETER(LCL.Item_Code_5A);
  PARAMETER(LCL.Validation_Pass_USR);
  {
   *
   c                   Monitor
   *
   c                   If        %check(digits : %trim(#IA2T1)) = 0
   * All Digit, Validation Pass.
   c                   eval      #OFASC = 'Y'
   c                   else
   * Non-Digit Found, Validation Fail.
   c                   eval      #OFASC = 'N'
   c                   endif
   *
   * Monitor Message RNX0105 - 'A character representation of a numeric value is in error.
   c                   On-Error  00105                                        Do Nothing
   *
   c                   EndMon
   *
  }

  //?Item Code Pass Digit Check?
  CASE;

  // IF LCL.Validation Pass USR is Yes
  IF LCL.Validation_Pass_USR = 'Y';

  //?Validate Item Code Exist in Order Detail.
  // LCL.Item Code 5.0 = CVTVAR(LCL.Item Code 5A)
  LCL.Item_Code_5_0 = CVTVAR(LCL.Item_Code_5A);

  // LCL.Item Code = LCL.Item Code 5.0
  LCL.Item_Code = LCL.Item_Code_5_0;

  //?Item Code Pass Digit Check?
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.OHE EDI Error Reasons = CND.Invalid Item Number
  PAR.OHE_EDI_Error_Reasons = 'ITEMN';

  QUIT;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.OHE EDI Error Reasons = CND.Invalid Item Number
  PAR.OHE_EDI_Error_Reasons = 'ITEMN';

  QUIT;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.W0705 Prod ID Code is Not DIVIDERS
  IF DB1.W0705_Prod_ID_Code <> 'DIVIDERS';

  // PAR.OHE EDI Error Reasons = CND.Invalid Item Nbr Qlfr
  PAR.OHE_EDI_Error_Reasons = 'ITMQL';

  QUIT;

  ENDIF;

  ENDIF;

 }

 //?RMC 1/29/20  ERROR if missing DTL
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.OHE EDI Error Reasons = CND.EDI DTL Segment Missing
 PAR.OHE_EDI_Error_Reasons = 'EDIDT';

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.OHE EDI Error Reasons is Blank
 IF PAR.OHE_EDI_Error_Reasons = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Continue with Update.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If Valid Order Number then Update OHE & Create Manifest Detail EDI Rcpt.
 CASE;

 // IF PAR.Invalid Order Number USR is No
 IF PAR.Invalid_Order_Number_USR = 'N';

 CASE;

 // IF PAR.OHE EDI Error Reasons is Blank
 IF PAR.OHE_EDI_Error_Reasons = *BLANK;

 // LCL.OHE EDI 944 Action = CND.Received
 LCL.OHE_EDI_944_Action = 'R';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.OHE EDI 944 Action = CND.Rcv-Error
 LCL.OHE_EDI_944_Action = 'E';

 ENDIF;

 EXECUTE FUNCTION(Upd OHE EDI 944 Action RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2141913;
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Number);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER(LCL.OHE_EDI_944_Action);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Actual_Shipped_Date);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT OHE EDI 944 Action CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2139810;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.OHE_EDI_Error_Reasons);
  PARAMETER(PAR.OHE_EDI_944_Action);
  {
   //?USER: Processing before Data update

   // DB1.Record Status = CND.Active
   DB1.Record_Status = 'A';

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(CHG OHE EDI 944 Action CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2139811;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.OHE_EDI_Error_Reasons);
  PARAMETER(PAR.OHE_EDI_944_Action);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

 }

 ENDIF;

 //?Crt Manifest; Adjust the Inv on the TO warehouse if sent/recvd is diff
 CASE;

 // IF PAR.OHE EDI Error Reasons is Blank
 IF PAR.OHE_EDI_Error_Reasons = *BLANK;

 EXECUTE FUNCTION(UPD Mnfst Dtl EDI Rcpt RT) TYPE(RTVOBJ) FILE(ECP067)           AC2141866;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Receipt_Date_2_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(UPD Mnfst Dtl EDI Rcpt RT) TYPE(RTVOBJ) FILE(ECP066)           AC2141865;
  PARAMETER(DB1.EDI_SURROGATE_NUMBER);
  PARAMETER(DB1.LX01_Sequence_Number);
  PARAMETER(DB1.N0902_Reference_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Receipt_Date_2_USR);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.W0705 Prod ID Code is Not DIVIDERS
   IF DB1.W0705_Prod_ID_Code <> 'DIVIDERS';

   // AND DB1.W0701 Quantity Received is GT 0
   AND DB1.W0701_Quantity_Received > 0;

   EXECUTE FUNCTION(UPD Mnfst Dtl EDI Rcpt RT) TYPE(RTVOBJ) FILE(ECP166)           AC2144181;
   PARAMETER(DB1.EDI_SURROGATE_NUMBER);
   PARAMETER(DB1.LX01_Sequence_Number);
   PARAMETER(DB1.EDI_Case_Sequence_Number);
   PARAMETER(PAR.N0902_Reference_ID);
   PARAMETER(DB1.W0701_Quantity_Received);
   PARAMETER(DB1.W0702_UOM);
   PARAMETER(DB1.W0705_Prod_ID_Code);
   PARAMETER(DB1.W0708_Warehouse_Lot_Nbr);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Receipt_Date_2_USR);
   {
    //?USER: Initialize routine

    // LCL.MDER Receipt Date = PAR.Receipt Date 2 USR
    LCL.MDER_Receipt_Date = PAR.Receipt_Date_2_USR;

    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    //?Format Data.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out the Pallet ID, Position 11 for 9 bytes.
    // Execute function EUS TrimL Pallet ID    US.
    EXECUTE FUNCTION(EUS TrimL Pallet ID    US) TYPE(EXCUSRSRC) ('PUEGUFR');
    PARAMETER(PAR.N0902_Reference_ID);
    PARAMETER(LCL.Pallet_ID_USR);
    {
     * Trim Left & Substring Out the Pallet ID.
     c                   eval      #OH3U1 = %subst(%triml(#IHGU1):11:9)
     *
    }

    // Execute function Cvt Pallet ID to Nbr   US.
    EXECUTE FUNCTION(Cvt Pallet ID to Nbr   US) TYPE(EXCUSRSRC) ('PUFBUFR');
    PARAMETER(LCL.Pallet_ID_USR);
    PARAMETER(LCL.Manifest_Pallet_Number);
    {
     * Trim Pallet ID and Convert to Numeric.
     c                   eval      #OH7NY = %dec(%trim(#IH3U1) : 9:0)
     *
    }

    //?Item Code.
    // Execute function EUS TrimL Prod ID Code US.
    EXECUTE FUNCTION(EUS TrimL Prod ID Code US) TYPE(EXCUSRSRC) ('PUEHUFR');
    PARAMETER(PAR.W0705_Prod_ID_Code);
    PARAMETER(LCL.Item_Code_Txt);
    {
     * Trim Left Product ID.
     c                   eval      #OFYTX = %triml(#IF3C7)
     *
    }

    // Execute function Cvt Item Code to Nbr   US.
    EXECUTE FUNCTION(Cvt Item Code to Nbr   US) TYPE(EXCUSRSRC) ('PUETUFR');
    PARAMETER(LCL.Item_Code_Txt);
    PARAMETER(LCL.Item_Code);
    {
     * Trim Item Code and Convert to Numeric.
     c                   eval      #OHGCD = %dec(%trim(#IFYTX) : 7:0)
     *
    }

    //?Serial #.
    // Execute function EUS TrimL Serial Nbr   US.
    EXECUTE FUNCTION(EUS TrimL Serial Nbr   US) TYPE(EXCUSRSRC) ('PUERUFR');
    PARAMETER(DB1.N902_Reference_ID_Nbr);
    PARAMETER(LCL.PT_Serial_Number_Txt_USR);
    {
     * Trim Left Serial Number.
     c                   eval      #OH6U1 = %triml(#IHGU1)
     *
    }

    // Execute function Cvt Serial# Txt to Nbr US.
    EXECUTE FUNCTION(Cvt Serial# Txt to Nbr US) TYPE(EXCUSRSRC) ('PUE9UFR');
    PARAMETER(LCL.PT_Serial_Number_Txt_USR);
    PARAMETER(LCL.PT_Serial_Number);
    {
     * Trim Serial # and Convert to Numeric.
     c                   eval      #OPFNX = %dec(%trim(#IH6U1) : 8:0)
     *
    }

    //?Production Date.
    CASE;

    // IF DB1.N904 Production Date is Entered
    IF DB1.N904_Production_Date <> *ZERO;

    // LCL.Production Date USR D8# = DB1.N904 Production Date
    LCL.Production_Date_USR_D8# = DB1.N904_Production_Date;

    // LCL.MDER Production Date = LCL.Production Date USR D8#
    LCL.MDER_Production_Date = LCL.Production_Date_USR_D8#;

    //?Production Date.
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.MDER Production Date = CON.*ZERO
    LCL.MDER_Production_Date = *ZERO;

    ENDIF;

    ENDIF;

    EXECUTE FUNCTION(CRT Manifest Dtl EDI   CR) TYPE(CRTOBJ) FILE(PUAOCPP)          AC2139364;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(DB1.LX01_Sequence_Number);
    PARAMETER(DB1.EDI_Case_Sequence_Number);
    PARAMETER(DB1.EDI_Ref_Sequence_Nbr);
    PARAMETER(PAR.Load_ID);
    PARAMETER(LCL.Item_Code);
    PARAMETER(LCL.Manifest_Pallet_Number);
    PARAMETER(LCL.PT_Serial_Number);
    PARAMETER(1);
    PARAMETER(DB1.N903_Reference_ID_Wgt);
    PARAMETER(PAR.W0702_UOM);
    PARAMETER(PAR.W0708_Warehouse_Lot_Nbr);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(PAR.Receipt_Date_2_USR);
    PARAMETER(JOB.*Job_time);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(LCL.MDER_Production_Date);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // DB1.Job Name = JOB.*PROGRAM
     DB1.Job_Name = JOB.*PROGRAM;

    }

   }

   //?If no serial level REF is found:
   // LCL.MDER Receipt Date = PAR.Receipt Date 2 USR
   LCL.MDER_Receipt_Date = PAR.Receipt_Date_2_USR;

   //?Write manifest dtl rcpt with pallet no. serial will be -0-
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   //?Format Data
   DO;

   //?Substring Out the Pallet ID, Position 11 for 9 bytes.
   // Execute function EUS TrimL Pallet ID    US.
   EXECUTE FUNCTION(EUS TrimL Pallet ID    US) TYPE(EXCUSRSRC) ('PUEGUFR');
   PARAMETER(PAR.N0902_Reference_ID);
   PARAMETER(LCL.Pallet_ID_USR);
   {
    * Trim Left & Substring Out the Pallet ID.
    c                   eval      #OH3U1 = %subst(%triml(#IHGU1):11:9)
    *
   }

   CASE;

   // IF LCL.Pallet ID USR is NE Blanks
   IF LCL.Pallet_ID_USR <> *BLANK;

   // Execute function Cvt Pallet ID to Nbr   US.
   EXECUTE FUNCTION(Cvt Pallet ID to Nbr   US) TYPE(EXCUSRSRC) ('PUFBUFR');
   PARAMETER(LCL.Pallet_ID_USR);
   PARAMETER(LCL.Manifest_Pallet_Number);
   {
    * Trim Pallet ID and Convert to Numeric.
    c                   eval      #OH7NY = %dec(%trim(#IH3U1) : 9:0)
    *
   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Manifest Pallet Number = CON.*ZERO
   LCL.Manifest_Pallet_Number = *ZERO;

   ENDIF;

   //?Item Code.
   // Execute function EUS TrimL Prod ID Code US.
   EXECUTE FUNCTION(EUS TrimL Prod ID Code US) TYPE(EXCUSRSRC) ('PUEHUFR');
   PARAMETER(DB1.W0705_Prod_ID_Code);
   PARAMETER(LCL.Item_Code_5A);
   {
    * Trim Left Product ID.
    c                   eval      #OFYTX = %triml(#IF3C7)
    *
   }

   // LCL.Item Code 5.0 = CVTVAR(LCL.Item Code 5A)
   LCL.Item_Code_5_0 = CVTVAR(LCL.Item_Code_5A);

   // LCL.Item Code = LCL.Item Code 5.0
   LCL.Item_Code = LCL.Item_Code_5_0;

   //?Production Date.
   CASE;

   // IF DB1.W0708 Warehouse Lot Nbr is Entered
   IF DB1.W0708_Warehouse_Lot_Nbr > *BLANK;

   // LCL.Date (Char-6) USR = DB1.W0708 Warehouse Lot Nbr
   LCL.Date_Char_6_USR = DB1.W0708_Warehouse_Lot_Nbr;

   // Execute function Val Numeric Digit     US.
   EXECUTE FUNCTION(Val Numeric Digit     US) TYPE(EXCUSRSRC) ('PUD6UFR');
   PARAMETER(LCL.Date_Char_6_USR);
   PARAMETER(LCL.Validation_Pass_USR);
   {
    *
    c                   Monitor
    *
    c                   If        %check(digits : %trim(#IA2T1)) = 0
    * All Digit, Validation Pass.
    c                   eval      #OFASC = 'Y'
    c                   else
    * Non-Digit Found, Validation Fail.
    c                   eval      #OFASC = 'N'
    c                   endif
    *
    * Monitor Message RNX0105 - 'A character representation of a numeric value is in error.
    c                   On-Error  00105                                        Do Nothing
    *
    c                   EndMon
    *
   }

   //?Date Pass Digit Check?
   CASE;

   // IF LCL.Validation Pass USR is No
   IF LCL.Validation_Pass_USR = 'N';

   //?Date Pass Digit Check?
   // IF *OTHERWISE
   IF *OTHERWISE;

   //??? format date from mmddyy
   // LCL.Month/Day Alpha MMDD = SUBSTRING(LCL.Date (Char-6) USR,CON.1,CON.4)
   LCL.Month_Day_Alpha_MMDD = SUBSTRING(LCL.Date_Char_6_USR:1:4);

   // LCL.Year  (Char) USR = SUBSTRING(LCL.Date (Char-6) USR,CON.5,CON.2)
   LCL.Year_Char_USR = SUBSTRING(LCL.Date_Char_6_USR:5:2);

   // LCL.Date (Char-6) USR = CONCAT(LCL.Year  (Char) USR,LCL.Month/Day Alpha MMDD,CON.*ZERO)
   LCL.Date_Char_6_USR = LCL.Year_Char_USR + LCL.Month_Day_Alpha_MMDD (*ZERO);

   // LCL.Date (Alpha) USR = CONCAT(CON.1,LCL.Date (Char-6) USR,CON.*ZERO)
   LCL.Date_Alpha_USR = '1' + LCL.Date_Char_6_USR (*ZERO);

   // LCL.MDER Production Date = CVTVAR(LCL.Date (Alpha) USR)
   LCL.MDER_Production_Date = CVTVAR(LCL.Date_Alpha_USR);

   ENDIF;

   //?RMC 9/13/21
   //?output 0 date if date is invalid - CB from CP will have order# here
   EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.MDER_Production_Date);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

   }

   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // LCL.MDER Production Date = CON.*ZERO
   LCL.MDER_Production_Date = *ZERO;

   ENDIF;

   //?Production Date.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.MDER Production Date = CON.*ZERO
   LCL.MDER_Production_Date = *ZERO;

   ENDIF;

   ENDDO;

   EXECUTE FUNCTION(RTV Unit Weight/UM Prm RT) TYPE(RTVOBJ) FILE(CABZREP)          AC2154000;
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Item_Code);
   PARAMETER(LCL.UOM_Primary);
   PARAMETER(LCL.Unit_Weight);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // LCL.Weight Received = LCL.Unit Weight * DB1.W0701 Quantity Received *
   LCL.Weight_Received = LCL.Unit_Weight * DB1.W0701_Quantity_Received;

   EXECUTE FUNCTION(CRT Manifest Dtl EDI   CR) TYPE(CRTOBJ) FILE(PUAOCPP)          AC2139364;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(DB1.LX01_Sequence_Number);
   PARAMETER(DB1.EDI_Case_Sequence_Number);
   PARAMETER(1);
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Item_Code);
   PARAMETER(LCL.Manifest_Pallet_Number);
   PARAMETER(LCL.PT_Serial_Number);
   PARAMETER(DB1.W0701_Quantity_Received);
   PARAMETER(LCL.Weight_Received);
   PARAMETER(LCL.UOM_Primary);
   PARAMETER(DB1.W0708_Warehouse_Lot_Nbr);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(LCL.MDER_Receipt_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(LCL.MDER_Production_Date);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.Job Name = JOB.*PROGRAM
    DB1.Job_Name = JOB.*PROGRAM;

   }

   ENDIF;

   ENDIF;

  }

 }

 //?R14364 DN 03/25/19-Check EDI Inv Upd Flag Whether to Run Inv Adjustment.
 EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Inventory Update  RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2169152;
 PARAMETER(LCL.Ship_To_Warehouse);
 PARAMETER('WHSTAD');
 PARAMETER(LCL.EDI_Inventory_Update);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.EDI Inventory Update is Yes
 IF LCL.EDI_Inventory_Update = 'Y';

 //?WI517 DN 10/05/23-Added Parms 'Called From Program' &
 //?  'Send Email f/Failed API U'.
 // Call program Exc Adj To Whs Inv     XF.
 CALL PROGRAM(Exc Adj To Whs Inv     XF) ('PUFAXFR');
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Order_Number);
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER('PUDLXFR');
 PARAMETER(PAR.Send_Email_f_Failed_API_U);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CHG WHS StckTxf ADV HD CH) TYPE(CHGOBJ) FILE(ECP065)           AC2139334;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.TRADE_PARTNER_CODE);
 PARAMETER(PAR.EDI_Record_Processed);
 PARAMETER(DB1.W1701_Reporting_Code);
 PARAMETER(DB1.W1702_Receipt_Date);
 PARAMETER(DB1.W1703_Warehouse_Rcpt_Nbr);
 PARAMETER(DB1.W1704_Depositor_Order_Nbr);
 PARAMETER(DB1.W1705_Shipment_Num_BOL);
 PARAMETER(DB1.W0801_Transportation_Type);
 PARAMETER(DB1.W0802_SCAC_Carrier_Code);
 PARAMETER(DB1.W0803_Routing);
 PARAMETER(DB1.G6201_ARRIV_DATE_QLFR);
 PARAMETER(DB1.G6202_ARRIV_DATE);
 PARAMETER(DB1.G6203_ARRIV_TIME_QLFR);
 PARAMETER(DB1.G6204_ARRIV_TIME);
 PARAMETER(DB1.G6205_ARRIV_TIME_CODE);
 PARAMETER(DB1.G6201_UNLD_DATE_QLFR);
 PARAMETER(DB1.G6202_UNLD_DATE);
 PARAMETER(DB1.G6203_UNLD_TIME_QLFR);
 PARAMETER(DB1.G6204_UNLD_TIME);
 PARAMETER(DB1.G6205_UNLD_TIME_CODE);
 PARAMETER(DB1.G6201_SPOT_UNLD_DATE_QLFR);
 PARAMETER(DB1.G6202_SPOT_UNLD_DATE);
 PARAMETER(DB1.G6203_SPOT_UNLD_TIME_QLFR);
 PARAMETER(DB1.G6204_SPOT_UNLD_TIME);
 PARAMETER(DB1.G6205_SPOT_UNLD_TIME_CODE);
 PARAMETER(DB1.W1401_Total_Qty_Received);
 ENDIF;

}


//?WI517 DN 10/05/23-If 'Send Email f/Failed API U=Yes' Then Send Email.
CASE;

// IF LCL.Send Email f/Failed API U is Yes
IF LCL.Send_Email_f_Failed_API_U = 'Y';

// Call program Prc Eml Shipping & IT  XF.
CALL PROGRAM(Prc Eml Shipping & IT  XF) ('PVA9XFR');
PARAMETER('PUDLXFR');

ENDIF;

