// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDGIE1R
// ?Date: 14.08.2025 Time: 03:28:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Modification Log ***
DO;

//?TPA071607 - Authorized Salesperson not used on this file any more.
//?Field R8CD and the associated description have been removed from
//?the detail screen.
ENDDO;

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


CASE;

// IF PAR.Sales Route Code is not entered
IF PAR.Sales_Route_Code = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV VP Level Descript  RT) TYPE(RTVOBJ) FILE(PDIFREP)          AC1275069;
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.VP_Level_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Manager Descript   RT) TYPE(RTVOBJ) FILE(CAALREP)          AC1160582;
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DB1.Position Level is Vice President
IF DB1.Position_Level = 'V';

// DTL.Manager Name = CON.*BLANK
DTL.Manager_Name = *BLANK;

// PAR.Manager Salesperson Code = CON.*BLANK
PAR.Manager_Salesperson_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

EXECUTE FUNCTION(RTV Mgr Name, Code     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1277255;
PARAMETER('M');
PARAMETER(*BLANK);
PARAMETER(DB1.Manager_Level_Code);
PARAMETER(DTL.Manager_Name);
PARAMETER(PAR.Manager_Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Name, status       RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1260515;
 PARAMETER(DB1.Salesperson_Code);
 PARAMETER(PAR.Manager_Name);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND PAR.Record Status is Active
 AND PAR.Record_Status = 'A';

 // PAR.Manager Salesperson Code = DB1.Salesperson Code
 PAR.Manager_Salesperson_Code = DB1.Salesperson_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Manager Name = CON.*BLANK
 PAR.Manager_Name = *BLANK;

 ENDIF;

}


CASE;

// IF DTL.Manager Name EQ WRK.BLANK
IF DTL.Manager_Name = WRK.BLANK;

// DTL.Manager Name = CON.No Manager found for Rte.
DTL.Manager_Name = 'No Manager found for Rte.';

ENDIF;

// DTL.Description. . . . . . . = Condition name of DTL.Position Level
DTL.Description = RTVCND(DTL.Position_Level);

//?TPA071607 - Authorized Salesperson not used on this file any more.
// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

//?USER: Validate detail screen fields

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV VP Level Descript  RT) TYPE(RTVOBJ) FILE(PDIFREP)          AC1275069;
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.VP_Level_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Mgr Desc,VP Level  RT) TYPE(RTVOBJ) FILE(CAALREP)          AC1277261;
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Mgr Name, Code     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1277255;
PARAMETER('M');
PARAMETER(*BLANK);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.Manager_Name);
PARAMETER(PAR.Manager_Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Name, status       RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1260515;
 PARAMETER(DB1.Salesperson_Code);
 PARAMETER(PAR.Manager_Name);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND PAR.Record Status is Active
 AND PAR.Record_Status = 'A';

 // PAR.Manager Salesperson Code = DB1.Salesperson Code
 PAR.Manager_Salesperson_Code = DB1.Salesperson_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Manager Name = CON.*BLANK
 PAR.Manager_Name = *BLANK;

 ENDIF;

}


CASE;

// IF DTL.Manager Name EQ WRK.BLANK
IF DTL.Manager_Name = WRK.BLANK;

CASE;

// IF DTL.Position Level is Manager
IF DTL.Position_Level = 'M';

// DTL.Manager Name = DTL.Salesperson Name
DTL.Manager_Name = DTL.Salesperson_Name;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Manager Name = CON.No Manager found for Rte.
DTL.Manager_Name = 'No Manager found for Rte.';

ENDIF;

ENDIF;

// DTL.Description. . . . . . . = Condition name of DTL.Position Level
DTL.Description = RTVCND(DTL.Position_Level);

//?TPA071607 - Authorized Salesperson not used on this file any more.
//?VP Level code req'd for VP position, else not allowed
CASE;

// IF DTL.Position Level is Vice President
IF DTL.Position_Level = 'V';

CASE;

// IF DTL.VP Level Code is Not Entered
IF DTL.VP_Level_Code = *BLANK;

// Send error message - 'VP Level Required'
ERROR(USR1814);
MSGPARM(DTL.VP_Level_Code);

ENDIF;

//?VP Level code req'd for VP position, else not allowed
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.VP Level Code is Entered
IF DTL.VP_Level_Code <> *BLANK;

// Send error message - 'VP Level not allowed'
ERROR(USR1818);
MSGPARM(DTL.VP_Level_Code);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?If manager, check for duplicates
CASE;

// IF DTL.Position Level is Manager
IF DTL.Position_Level = 'M';

CASE;

// IF PAR.Manager Salesperson Code is entered
IF PAR.Manager_Salesperson_Code <> *BLANK;

// AND PAR.Manager Salesperson Code NE DTL.Salesperson Code
AND PAR.Manager_Salesperson_Code <> DTL.Salesperson_Code;

// Send error message - 'Duplicate Managers not allowed.'
ERROR(USR1815);
MSGPARM(DTL.Position_Level);

ENDIF;

ENDIF;

//?If VP, check for duplicates
CASE;

// IF DTL.Position Level is Vice President
IF DTL.Position_Level = 'V';

EXECUTE FUNCTION(RTV Check for dup VP   RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1277512;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.Position_Level);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Sales Route Code NE PAR.Sales Route Code
 IF DB1.Sales_Route_Code <> PAR.Sales_Route_Code;

 CASE;

 // IF DB1.VP Level Code EQ PAR.VP Level Code
 IF DB1.VP_Level_Code = PAR.VP_Level_Code;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Vice President already has a sales route'
ERROR(USR1819);
MSGPARM(DTL.VP_Level_Code);

ENDIF;

ENDIF;

//?TPA071607 - Authorized Salesperson not used on this file any more.
//?USER: Create DBF record

EXECUTE FUNCTION(CRT PD Sales Route     CR) TYPE(CRTOBJ) FILE(PDJEREP)          AC1270377;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Sales_Route_Description);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.Position_Level);
PARAMETER(DTL.Authorized_Salesperson_Sa);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG PD Sales Route     CH) TYPE(CHGOBJ) FILE(PDJEREP)          AC1270378;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Sales_Route_Description);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.Position_Level);
PARAMETER(DTL.Authorized_Salesperson_Sa);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

