      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP418
      * TITLE:       WORK WITH EXPENSE TICKETS
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     04/04/94
      *
      * FUNCTION: THIS IS A WORK WITH THAT DISPLAYS THE RECORDS
      *           FROM THE EXPENSE TICKET FILE.
      *
      *           RESTRICTORS:
      *               SHOW CURRENT TICKETS ONLY
      *               Busines Office
      *
      *           POSITIONERS:
      *               EXPENSE TICKET NUMBER   (DESCENDING)
      *
      *           SELECTORS:
      *               EXPENSE CODE
      *               TICKET STATUS
      *               ALLOCATION FLAG
      *
      *           IT HAS F4-PROMPT LOGIC.
      *           IT LOADS THE SUBFILE A PAGE AT A TIME.
      *           IT USES THE STANDARD MESSAGE HANDLING PROGRAM.
      *           IT HAS STANDARD SUBFILE OPTION EDITING.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/29/02  LeAnne Fedor
      *           We added a restrictor field 'view current tickets only'.
      *           (Current means 'not posted to period end').
      *
      *           Also, since all data in HPS is now, basically, for a single business
      *           office, we removed 'business office' as restrictor on the screen.
      *           We left most of the security logic in place....we just now use a
      *           default 'live' business office instead of making the user key an
      *           'originating b.o.'
      *
      * 07/06/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 03/07/16  Barb Gutierrez (E5190)
      *           With the new Iowa Plant, we will have a new live office (IFLIV).  We need to
      *           allow user to be able to select an office for expense tickets so they will
      *           get allocated correctly.
      *
      * 04/07/16  Barb Gutierrez (E5190)
      *           Fix problem with logic to select the business office.  We only want LIVE
      *           business offices.  No Feed mills.  E5190
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD418    CF   E             WORKSTN SFILE(HP418S1:HDRRN1)
     F                                     INFDS(IOFEED)
      *
      *
     FHSL048H   IF   E           K DISK
      *  EXPENSE TICKET
      *
      *
     FHSL048G   IF   E           K DISK    RENAME(XTREC:XTRECG)
      *  EXPENSE TICKET
      *  (Logical view limits records to 'current' records only.)
      *
      *
     FHSJ048F   IF   E           K DISK    RENAME(XTREC:XTRECF)
      *  EXPENSE TICKET
      *  HOG GROUPS
      *  (SELECT: HGGSCD = CL)
      *
      *
     FHSP049    IF   E           K DISK
      *    EXPENSE TICKET STATUS CODES
      *
      *
     FHSP052    IF   E           K DISK
      *    EXPENSE CODES MASTER
      *
      /EJECT
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  STANDARD MESSAGE ARRAYS
      *---------------------------------------------------------------
      *
      /EJECT
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *---------------------------------------------------------------
      *STANDARD SUBFILE SELECTOR CONVERSION
      *---------------------------------------------------------------
     D                 DS
     D  DFOPT                  1      2
     D  WKOPT1                 1      1
     D  WKOPT2                 2      2
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
      *
      *---------------------------------------------------------------
      *  DATE FORMATS
      *---------------------------------------------------------------
      *
      * DATE IN MMDDYY FORMAT
      *
     D                 DS
     D  WKMDY                  1      6  0
     D  WKMM                   1      2  0
     D  WKDD                   3      4  0
     D  WKYY                   5      6  0
      *
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      *  FILL THE SUBFILE
      *
     C     TERMFL        IFEQ      NO
     C                   EXSR      $CLR1
     C                   EXSR      $FRSH1
     C                   ENDIF
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * IF THE USER FAILED THE INITIAL SECURITY CHECKS, SETON 99
      * TO PROTECT INPUT FIELDS AND INVALIDATE FUNCTION KEYS.
      *
     C     TERMFL        IFEQ      YES
     C                   SETON                                        99
     C                   ENDIF
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP418K1
     C                   WRITE     HP418EC
     C                   EXFMT     HP418C1
      *
      * SAVE THE VALUE OF THE LOWEST SUBFILE RRN ON THE SCREEN FOR
      * LATER REPOSITIONING THE SUBFILE
      *
     C                   Z-ADD     IDFLOW        WKFLOW
      *
      * CLEAR THE MESSAGES FROM THE MESSAGE DATA STRUCTURES AND PROGRAM
      * MESSAGE QUEUE.
      *
     C                   EXSR      $CLMSG
      *
      * GET USER'S ENTRY AND SET THE NEXT ROUTINE
      *
     C                   SELECT
      *
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C     TERMFL        OREQ      YES
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C                   EXSR      $F4S1
      *
     C     FLD           IFEQ      'C1FSBO'
     C     C1FSBO        ANDNE     SVFSBO
     C                   MOVEL(P)  'HP418'       WKFNCD
     C                   EXSR      $CHKBO
     C                   ENDIF
      *
     C                   if        error = 0
      *
     C                   if        fld = 'C1CURFL' and c1curfl <> svcurfl
     C                   exsr      $curfl
     C                   endif
      *
     C                   if        error = 0
     C                   EXSR      $CHKSV
     C                   ELSE
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C                   MOVEL     YES           RESET
     C                   MOVEL     SVFSBO        C1FSBO
     C                   MOVEL     SVBODS        C1BODS
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN06         WHENEQ    *ON                                          F6-CREATE
     C     C1FSBO        IFNE      SVFSBO
     C                   MOVEL(P)  'HP418'       WKFNCD
     C                   EXSR      $CHKBO
     C                   ENDIF
      *
      *  CHECK USER AUTHORITY TO THE FUNCTION
      *
     C     ERROR         IFEQ      0
     C                   MOVEL     C1FSBO        SVFSBO
     C                   MOVEL     C1BODS        SVBODS
     C                   MOVEL(P)  'HP118'       WKFNCD
     C                   EXSR      $SEC
     C                   ENDIF
      *
     C                   IF        ERROR = 0
     C                   EXSR      $CREAT
     C                   ENDIF
      *
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     *IN20         WHENEQ    *ON                                          F20-WRKSPLF
     C                   CALL      'QEZOUTPT'                                    API
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   MOVEL     SCRN1         ROUTNE
      *
      * REPOSITION THE SUBFILE IF THE USER HAS CHANGED ANY OF THE
      * RESTRICTORS/POSITIONERS/SELECTORS IN THE CONTROL RECORD.
      *
     C     SVFSBO        WHENNE    C1FSBO                                       IF RESTRICT  E5190
     C     SVXTSN        orne      C1XTSN                                       IF POSITION
     C     SVCURFL       ORNE      C1CURFL
      *
     C     SVFSBO        IFNE      C1FSBO                                       E5190
     C                   MOVE      *BLANK        C1BODS                            "
     C                   MOVEL(P)  'HP418'       WKFNCD                            "
     C                   EXSR      $CHKBO                                          "
     C                   ENDIF                                                     "
      *
     C     ERROR         IFEQ      0                                               "
     C                   MOVEL     C1FSBO        SVFSBO                           E5190
     C                   MOVEL     C1BODS        SVBODS                           E5190
     C                   EXSR      $CHKSV
     c                   else
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF                                                     "
      *
     C                   if        c1curfl <> svcurfl                                           nge
     C                   exsr      $curfl
     C                   endif
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
      *
     C     *IN25         WHENEQ    *ON                                          F25-ROLLUP
     C                   EXSR      $LOAD1
     C                   OTHER
      *
      * USER HAS PRESSED ENTER
      *
     C     NORECS        IFEQ      YES                                          IF EMPTY SFL
     C                   MOVEL     SET1          ROUTNE
     C                   ELSE
     C                   MOVEL     EDIT1         ROUTNE
     C                   ENDIF                                                  IF EMPTY SFL
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $CHKSV - SAVE THE CONTROL RECORD POSITIONERS/SELECTORS
      *----------------------------------------------------------------
      *
     C     $CHKSV        BEGSR
      *
     C                   MOVEL     NO            RESET
     C                   MOVEL     SET1          ROUTNE
      *
      *
     C                   MOVEL     C1CURFL       SVCURFL
     C                   Z-ADD     C1XTSN        SVXTSN
     C                   MOVEL     C1EXCD        SVEXCD
     C                   MOVEL     C1XSCD        SVXSCD
     C                   MOVEL     C1ALFL        SVALFL
      *
     C                   MOVEL     C1FSBO        SVFSBO                          E5190
     C                   MOVEL     C1BODS        SVBODS                             "
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDIT1 - SUBROUTINE TO EDIT INPUT FIELDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      * FIRST, EDIT ALL THE SELECTIONS ENTERED BY THE USER IN THE
      * SUBFILE OPTION FIELD TO SEE THAT VALID SELECTIONS WERE INPUT
      *
     C                   EXSR      $EDOP1
      *
      * IF THERE ARE NO ERRORS IN THE SUBFILE OPTIONS ENTERED
      * BY THE USER, THEN EXECUTE THE SUBROUTINE TO READ AND PROCESS
      * THE SUBFILE RECORDS SELECTED BY THE USER.  AFTER COMPLETING THE
      * SUBROUTINE, SET THE ROUTINE TO START OVER.
      *
     C     ERROR         IFEQ      0                                            IF NO ERROR
     C                   EXSR      $PROC1
      *
     C     RTNCD         IFEQ      '00'
     C                   MOVEL     SET1          ROUTNE
     C                   ELSE
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF
     C                   ELSE
      *
      * ELSE THERE WERE ERRORS IN THE SUBFILE OPTIONS ENTERED, SO SET
      * TO REDISPLAY SCREEN WITH ERRORS TO USER
      *
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF                                                  IF NO ERROR
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $CLR1  - SUBROUTINE TO CLEAR THE SUBFILE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $CLR1         BEGSR
      *
     C                   Z-ADD     0             SVRRN1
     C                   Z-ADD     0             WKXTSN
      *
     C                   CLEAR                   HP418S1
     C                   SETON                                        83        SFLCLR
     C                   WRITE     HP418C1
     C                   SETOFF                                       818283
      *                                                    81=SFLDSP
      *                                                    82=SFLEND
      *                                                    83=SFLCLR
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $FRSH1 - SUBROUTINE TO REFRESH/FILL THE SUBFILE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $FRSH1        BEGSR
      *
      * SET POSITION IN EXPENSE TICKET FILE
      *
      *
     C                   select
     C                   when      c1curfl = yes
     C                   if        c1xtsn = 0
     C     c1fsbo        setll     hsl048g
     C                   else
     C     key048        setll     hsl048g
     C                   endif
     C                   other
      *
     C                   if        c1xtsn = 0
     C     c1fsbo        setll     hsl048h
     C                   else
     C     key048        setll     hsl048h
     C                   endif
     C                   endsl
      *
      * THE FIELD 'RESET' IS A FLAG FIELD TO INDICATE WHETHER YOU ARE
      * ATTEMPTING TO REPOSITION THE USER CLOSE TO WHERE HE WAS IN THE
      * SUBFILE.
      * THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) WAS RETRIEVED EARLIER AND PUT IN WKFLOW.
      * ADD TO WKFLOW THE NUMBER OF LINES ON YOUR SUBFILE PAGE OR THE
      * NUMBER LESS 1 TO DETERMINE A SUBFILE RRN TO REPOSITION TO.
      * IF RESET IS 'NO', JUST START THE SUBFILE OVER
      *
     C     RESET         IFEQ      YES
     C     WKFLOW        ADD       WKRLIN        MAXRRN
     C                   ELSE
     C                   Z-ADD     WKPLIN        MAXRRN
     C                   ENDIF
      *
      * LOAD THE SUBFILE UNTIL YOU HAVE THE REQUIRED NUMBER OF RECORDS.
      * THE NUMBER WILL DEPEND ON WHETHER YOU ARE REPOSITIONING THE
      * SUBFILE OR NOT. STOP IF YOU GET TO THE END OF THE SUBFILE.
      *
     C     SVRRN1        DOUGE     MAXRRN
     C     *IN82         OREQ      *ON
     C                   EXSR      $LOAD1
     C                   ENDDO
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $LOAD1- SUBROUTINE TO LOAD THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $LOAD1        BEGSR
      *
     C                   Z-ADD     SVRRN1        HDRRN1
      *
      * SET THE COUNT OF RECORDS ON THE SUBFILE PAGE TO ZERO.
      *
     C                   Z-ADD     0             COUNT             2 0
      *
      * FILL THE SUBFILE UNTIL THE END OF THE DATABASE FILE OR YOU
      * HAVE FILLED ALL THE LINES ON THE SUBFILE PAGE. ONLY INCLUDE
      * RECORDS FROM THE EXPENSE TICKET FILE THAT MATCH THE USER'S
      * SELECTORS
      *
     C                   SETOFF                                       82
     C     *IN82         DOUEQ     *ON                                          DO FILL LOOP
     C     COUNT         ORGE      WKPLIN
      *
     C                   select
     C                   when      c1curfl = yes
     C     c1fsbo        reade     hsl048g                                82
     C                   other
     C     c1fsbo        reade     hsl048h                                82
     C                   endsl
      *
     C     *IN82         IFEQ      *OFF                                          IF READ
     c**   xtbobo        andeq     c1fsbo                                        E5190
     C     XTXTSN        ANDNE     WKXTSN
      *
     C     C1EXCD        IFNE      *BLANK                                        IF EXP
     C     C1EXCD        ANDNE     XTEXCD
     C                   ELSE
      *
     C     C1XSCD        IFNE      *BLANK                                        IF STATUS
     C     C1XSCD        ANDNE     XTXSCD
     C                   ELSE
      *
     C     C1ALFL        IFNE      *BLANK                                        IF FLAG
     C     C1ALFL        ANDNE     XTALFL
     C                   ELSE
      *
      *
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
     C                   MOVE      *BLANK        DFOPT
     C                   Z-ADD     XTXTSN        DFXTSN
     C                   MOVEL     XTEXCD        DFEXCD
     C                   MOVEL     XTXSCD        DFXSCD
     C                   MOVEL     XTALFL        DFALFL
      *
      * RETRIEVE THE EXPENSE CODE DESCRIPTION
      *
     C     XTEXCD        CHAIN     HSP052                             93
     C     *IN93         IFEQ      *OFF
     C                   MOVEL     EXEXDS        DFEXDS
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     DFEXDS
     C                   ENDIF
      *
      * USING THE TICKET STATUS CODE FROM THE FILE,
      * RETRIEVE THE STATUS CODE RECORD AND MOVE THE VALUE OF THE
      * 'POSTED FLAG' INTO A HIDDEN SUBFILE FIELD TO USE IN CHECKING
      * ALLOWABLE OPTIONS
      *
     C     XTXSCD        CHAIN     HSP049                             91
     C     *IN91         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL     XSPOFL        HDPOFL
     C                   ELSE
     C                   MOVE      *BLANK        HDPOFL
     C                   ENDIF                                                  IF FOUND
      *
      * FLIP DATES FROM CCYYMMDD TO MMDDYY
      *
     C                   EXSR      $FLIP1
      *
     C                   WRITE     HP418S1
     C                   SETON                                        81
      *
      * FOR POSITIONING, PLACE THE SUBFILE RELATIVE RECORD NUMBER INTO
      * THE SFLRCDNBR FIELD (HDPAG1)
      *
     C                   Z-ADD     HDRRN1        HDPAG1
      *
      * SAVE THE TICKET NUMBER
     C                   Z-ADD     XTXTSN        WKXTSN
      *
     C                   ENDIF                                                  IF FLAG
     C                   ENDIF                                                  IF STATUS
     C                   ENDIF                                                  IF EXP
     C                   ENDIF                                                  IF READ
     C                   ENDDO                                                  DO FILL LOOP
      *
     C                   Z-ADD     HDRRN1        SVRRN1
      *
      * IF NO RECORDS WERE WRITTEN TO THE SUBFILE, THEN ISSUE
      * THE STANDARD MESSAGE 'NO DATA TO DISPLAY'.
      *
     C     HDRRN1        IFEQ      0
     C                   MOVEL     YES           NORECS
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09002'     MGID(E)
     C                   ENDIF
     C                   ELSE
     C                   MOVEL     NO            NORECS
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $CREAT - SUBROUTINE TO CALL MAINTENANCE PROGRAM WHEN THE USER
      *          HAS TAKEN F6=CREATE
      *----------------------------------------------------------------
      *
     C     $CREAT        BEGSR
      *
     C                   MOVEL     '00'          RTNCD
     C                   MOVEL     CREATE        MODE
     C                   Z-ADD     0             DFXTSN
     C                   CALL      'HP118'       PLIST1
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $CHKBO - CHECK THE BUSINESS OFFICE ENTERED AS A RESTRICTOR    subr added E5190
      *----------------------------------------------------------------
      *
      * THE BUSINESS OFFICE ENTERED MUST:
      *    BE A VALID OFFICE IN THE BUSINESS OFFICE MASTER
      *    BE A 'LIVE PRODUCTION' DIVISION OFFICE
      *    HAVE A SECURITY LOCATION TO WHICH THE USER IS AUTHORIZED
      *
     C     $CHKBO        BEGSR
      *
      * CLEAR SUBFILE
      *
     C                   EXSR      $CLR1
      *
      * CHECK THE USER'S SECURITY TO THIS BUSINESS OFFICE.
      * SET INDVFL TO YES TO TELL SECURITY PROGRAM TO COMPARE THE
      * FUNCTION DIVISION CODE TO THE B.O. DIVISION CODE.
      *
     C                   MOVEL     YES           INDVFL
     C                   EXSR      $SEC
     C     OUBOFL        IFEQ      YES
     C                   SETON                                        31
     C                   ENDIF
     C                   MOVEL     NO            INDVFL                          RESET FL
      *
     C                   MOVEL     OUBODS        C1BODS
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * Validate 'show current tickets only-yes/no' flag
      *---------------------------------------------------------------
      *
     C     $curfl        begsr
      *
     C                   if        c1curfl <> yes and
     C                             c1curfl <> no
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $EDOP1 - SUBROUTINE TO READ CHANGED RECORDS IN SUBFILE AND
      *          EDIT FOR VALID SUBFILE OPTIONS FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $EDOP1        BEGSR
      *
     C                   Z-ADD     0             ERROR
      *
      * READ ALL THE CHANGED SUBFILE RECORDS EDITING FOR VALID SUBFILE
      * OPTIONS
      *
     C                   SETOFF                                       80
     C     *IN80         DOUEQ     *ON                                          DO READC
     C                   READC     HP418S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
      *
      * SET OFF ERROR INDICATOR FOR SUBFILE SELECTOR
      *
     C                   SETOFF                                       30
      *
      * CONVERT OPTION USER ENTERED TO STANDARD FORMAT. FOR EXAMPLE,
      * A ' 1', '01', AND '1 ' MUST BE STANDARDIZED TO ' 1'.
      *
     C     WKOPT2        IFEQ      *BLANK                                       IF 2 = BLANK
     C                   MOVE      WKOPT1        WKOPT2
     C                   MOVE      *BLANK        WKOPT1
     C                   ENDIF                                                  IF 2 = BLANK
      *
     C     WKOPT1        IFEQ      *ZEROS                                       IF 1 IS ZERO
     C                   MOVE      *BLANK        WKOPT1
     C                   ENDIF                                                  IF 1 IS ZERO
      *
      * TEST FOR VALID SUBFILE OPTION ENTRY ON ALL CHANGED RECORDS
      *
     C     DFOPT         IFNE      ' 2'                                         IF BAD OPT
     C     DFOPT         ANDNE     ' 4'
     C     DFOPT         ANDNE     ' 5'
     C     DFOPT         ANDNE     '  '
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09006'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * CHECK THE USER'S AUTHORITY TO THE FUNCTION
      *
     C     DFOPT         IFEQ      ' 2'                                         IF OPTION
     C     DFOPT         OREQ      ' 4'
     C     DFOPT         OREQ      ' 5'
      *
     C                   SELECT
     C     DFOPT         WHENEQ    ' 2'
     C                   MOVEL(P)  'HP118'       WKFNCD
      *
     C     DFOPT         WHENEQ    ' 4'
     C                   MOVEL(P)  'HP118'       WKFNCD
      *
     C     DFOPT         WHENEQ    ' 5'
     C                   MOVEL(P)  'HP718'       WKFNCD
     C                   ENDSL
      *
      *  CHECK USER AUTHORITY TO THE FUNCTION
      *
     C                   EXSR      $sec
      *
     C     SECFL         IFEQ      YES                                          IF PROBLEM
     C                   SETON                                        30
     C                   EXSR      $ERR1
     C                   ENDIF                                                  IF PROBLEM
     C                   ENDIF                                                  IF OPTION
      *
      * PERFORM ADDITIONAL VALIDATIONS FOR OPTION 2=REVISE
      *
     C     DFOPT         IFEQ      ' 2'
     C                   EXSR      $OPT2
     C                   ELSE
      *
      * PERFORM DELETION INTEGRITY CHEKCS FOR OPTION 4
      *
     C     DFOPT         IFEQ      ' 4'
     C                   EXSR      $DLTCK
     C                   ENDIF
     C                   ENDIF
     C                   ENDIF                                                  IF BAD OPT
      *
     C     ERROR         IFEQ      0
     C     DFOPT         ANDEQ     *BLANK
     C                   SETOFF                                       85
     C                   ELSE
     C                   SETON                                        85
     C                   ENDIF
      *
     C                   UPDATE    HP418S1
     C                   SETOFF                                       8530
      *
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO READC
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $OPT2 - REVISE VALIDATIONS
      *---------------------------------------------------------------
      *
      *  POSTED TICKETS CANNOT BE REVISED.
      *  ALLOCATED TICKETS CANNOT BE REVISED
      *
     C     $OPT2         BEGSR
      *
      * A TICKET CANNOT BE REVISED IF IT IS ALREADY POSTED
      *
     C     HDPOFL        IFEQ      YES                                          IF POSTED
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00374'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF POSTED
      *
      * A TICKET CANNOT BE REVISED IF IT HAS ALREADY BEEN ALLOCATED
      *
     C     DFALFL        IFEQ      'A'                                          IF ALLOC
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00375'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF ALLOC
      *
      * A TICKET CANNOT BE REVISED IF IT IS ASSOCIATED WITH
      * ANY CLOSED GROUPS.
      *
     C     DFXTSN        CHAIN     HSJ048F                            96
     C     *IN96         IFEQ      *OFF                                         IF CLOSE GRP
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00383'     MGID(E)
     C                   MOVEL     DFXTSN        XXXTSN
     C                   CLEAR                   MGW
     C                   MOVEA     XXXTSN        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF CLOSE GRP
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $DLTCK - DELETION INTEGRITY CHECKS
      *---------------------------------------------------------------
      *
      * A TICKET CANNOT BE DELETED IF IT IS ALREADY POSTED
      *
     C     $DLTCK        BEGSR
      *
     C     HDPOFL        IFEQ      YES                                          IF POSTED
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00376'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF POSTED
      *
      * A TICKET CANNOT BE DELETED IF IT HAS BEEN ALLOCATED
      * TO ANY CLOSED GROUPS.
      *
     C     DFXTSN        CHAIN     HSJ048F                            96
     C     *IN96         IFEQ      *OFF                                         IF CLOSE GRP
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00506'     MGID(E)
     C                   MOVEL     DFXTSN        XXXTSN
     C                   CLEAR                   MGW
     C                   MOVEA     XXXTSN        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF CLOSE GRP
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $PROC1 - SUBROUTINE TO READ SUBFILE RECORDS AND PROCESS
      *          USER SELECTIONS FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $PROC1        BEGSR
      *
     C                   Z-ADD     0             ERROR
     C                   MOVEL     '00'          RTNCD
      *
      * READ ALL THE CHANGED SUBFILE RECORDS AND PROCESS
      *
     C                   SETOFF                                       80
     C     *IN80         DOUEQ     *ON                                          DO PROCESS
     C                   READC     HP418S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
      *
     C     RTNCD         IFEQ      '00'                                         IF ENTER
      *
      * IF USER SELECTED OPTION 2=REVISE, SET PARM FOR REVISE MODE
      * AND SET THE FLAG 'RESET' TO YES SO THAT WHEN YOU RETURN TO THIS
      * WORK WITH YOU WILL REPOSITION TO THE SAME PLACE IN THE SUBFILE.
      *
     C     DFOPT         IFEQ      ' 2'                                         IF REVISE
     C                   MOVEL     YES           RESET
     C                   MOVEL     REVISE        MODE
     C                   CALL      'HP118'       PLIST1
     C                   ELSE
      *
      * IF USER SELECTED OPTION 4=DELETE, SET PARM FOR DELETE MODE
      * AND SET THE FLAG 'RESET' TO YES SO THAT WHEN YOU RETURN TO THIS
      * WORK WITH YOU WILL REPOSITION TO THE SAME PLACE IN THE SUBFILE.
      *
     C     DFOPT         IFEQ      ' 4'                                         IF DELETE
     C                   MOVEL     YES           RESET
     C                   MOVEL     DELETE        MODE
     C                   CALL      'HP118'       PLIST1
     C                   ELSE
      *
      * IF USER SELECTED OPTION 5=VIEW TICKET,
      * SET THE FLAG 'RESET' TO YES SO THAT WHEN YOU RETURN TO THIS
      * WORK WITH YOU WILL REPOSITION TO THE SAME PLACE IN THE SUBFILE.
      *
     C     DFOPT         IFEQ      ' 5'                                         IF VIEW
     C                   MOVEL     YES           RESET
     C                   CALL      'HP718'
     C                   PARM                    DFXTSN
     C                   PARM                    RTNCD
     C                   ENDIF                                                  IF VIEW
     C                   ENDIF                                                  IF DELETE
     C                   ENDIF                                                  IF REVISE
      *
      * UPON RETURNING FROM THE CALLED PROGRAM,
      * CLEAR THE SUBFILE OPTION SELECTOR ENTERED BY THE USER AND
      * REWRITE THE SUBFILE RECORD
      *
     C                   MOVE      *BLANK        DFOPT
     C                   SETOFF                                       85
     C                   ELSE
     C                   SETON                                        85
     C                   ENDIF                                                  IF ENTER
      *
     C                   UPDATE    HP418S1
      *
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO PROCESS
      *
     C                   ENDSR
      /EJECT
      ****************************************************************
      * SUBROUTINE: $F4S1 - F4 PROMPT ON SCREEN 1                        *
      ****************************************************************
      *
     C     $F4S1         BEGSR
      *
     C                   SELECT
      *
      * IF BUSINESS OFFICE CODE                               E5190
      *
     C     FLD           WHENEQ    'C1FSBO'
     C                   MOVE      *BLANK        XXFSBO
     C                   MOVE      *BLANK        XXBODS
     C                   CALL      'HP503'
     C                   PARM                    XXFSBO
     C                   PARM                    XXBODS
     C                   PARM                    SVDVCD
     C                   SETON                                        51
     C     XXFSBO        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXFSBO        C1FSBO
     C                   MOVEL     XXBODS        C1BODS
     C                   ENDIF                                                  IF SELECTED
      *
      * Show current tickets only yes/no flag
      *
     C                   when      fld = 'C1CURFL'
     C                   call      'HP522'
     C                   parm                    xxcurfl
     C                   seton                                        53
     C                   if        xxcurfl <> *blank
     C                   movel     xxcurfl       c1curfl
     C                   endif
      *
      * IF EXPENSE CODE
      *
     C     FLD           WHENEQ    'C1EXCD'
     C                   MOVE      *BLANK        XXEXCD
     C                   MOVE      *BLANK        XXEXDS
     C                   CALL      'HP546'
     C                   PARM                    XXEXCD
     C                   PARM                    XXEXDS
     C                   SETON                                        53
     C     XXEXCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXEXCD        C1EXCD
     C                   ENDIF                                                  IF SELECTED
      *
      * IF TICKET STATUS
      *
     C     FLD           WHENEQ    'C1XSCD'
     C                   MOVE      *BLANK        XXXSCD
     C                   MOVE      *BLANK        XXXSDS           20
     C                   CALL      'HP552'
     C                   PARM                    XXXSCD
     C                   PARM                    XXXSDS
     C                   SETON                                        55
     C     XXXSCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXXSCD        C1XSCD
     C                   ENDIF                                                  IF SELECTED
      *
      * IF ALLOCATED FLAG
      *
     C     FLD           WHENEQ    'C1ALFL'
     C                   MOVE      *BLANK        XXALFL
     C                   CALL      'HP549'
     C                   PARM                    XXALFL
     C                   SETON                                        57
     C     XXALFL        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXALFL        C1ALFL
     C                   ENDIF                                                  IF SELECTED
      *
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR                                        013
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $ERR1  - SUBROUTINE TO SET THE SUBFILE TO REDISPLAY AT THE
      *          FIRST PAGE THAT HAS ERRORS ON SCREEN 1
      *----------------------------------------------------------------
      *
     C     $ERR1         BEGSR
      *
     C     ERROR         IFEQ      1
     C                   Z-ADD     HDRRN1        HDPAG1
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      ********************************************************************
      * SUBROUTINE: $FLIP1 - FLIP DATES FROM CCYYMMDD TO MMDDYY          *
      ********************************************************************
      *
     C     $FLIP1        BEGSR
      *
      * FLIP BEGIN DATE
      *
     C                   Z-ADD     XTXBDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         DFBMDY
      *
     C                   ENDSR
      /EJECT
      ********************************************************************
      * SUBROUTINE: $TOMDY   FLIP DATE FROM YYMMDD TO MMDDYY             *
      ********************************************************************
      *
     C     $TOMDY        BEGSR
      *
     C                   Z-ADD     WKMON         WKMM
     C                   Z-ADD     WKDAY         WKDD
     C                   Z-ADD     WKYER         WKYY
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *---------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $SEC   - CALL SECURITY PROGRAM
      *---------------------------------------------------------------
      *
     C     $SEC          BEGSR
      *
      * SETUP THE FIELDS TO SEND INTO THE SECURITY PROGRAM
      *
     C                   MOVEL     WKFNCD        INFNCD                         PGM NAME
      *
     C                   MOVEL     C1FSBO        INBOBO                         E5190
     C                   MOVE      *BLANK        OUBOBO                         BO CODE   E5190
     C                   MOVE      *BLANK        OUBODS                         BO DESC   E5190
     C**                 MOVE      NO            OUDVCD                         FUNCTION DIV
     C                   MOVEL     NO            TERMFL            1            TERMINAL FLG
     C**                 MOVEL     NO            INDVFL
      *
     C                   CALL      'HPSEC  '
      **** IN
     C                   PARM                    MGID                           MSGID ARRAY
     C                   PARM                    MGDT                           MSGDTA DATA
     C                   PARM                    ERROR                          # OF ERRORS
     C                   PARM                    INFNCD           10            FUNC CODE
     C                   PARM                    INBOBO            5            BO CODE
     C                   PARM                    INDVFL            1            CHECK DIV?
     C                   PARM                    INBOFL            1            CHECK B.O.?
      **** OUT
     C                   PARM                    OUBOBO            5            BO CODE
     C                   PARM                    OUBODS           30            BO DESC.
     C                   PARM                    OUDVCD            5            DIV CODE
     C                   PARM                    SECFL             1            SEC FLAG
     C                   PARM                    OUBOFL            1            B.O. ERR FLG
     C                   PARM                    OURMFL            1            RSTRCT MAINT
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * PARM LISTS
      *
     C     PLIST1        PLIST
     C                   PARM                    MODE
     C                   PARM                    svfsbo
     C                   PARM                    SVRMFL
     C                   PARM                    DFXTSN
     C                   PARM                    RTNCD
      *
     C     KEY048        KLIST
     C                   KFLD                    C1FSBO
     C                   KFLD                    C1XTSN
      *
      * GLOBAL DEFINES
      *
     C                   MOVE      *BLANK        MODE              6            PARM
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6            ROUTINE
     C                   Z-ADD     0             MAXRRN            4 0          REPOSITION
     C                   MOVEL     NO            RESET             1            REPOSITION
     C                   MOVEL     NO            NORECS            1            NO RECORDS
     C     *LIKE         DEFINE    IDFLOW        WKFLOW
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
     C     *LIKE         DEFINE    HDRRN1        SVRRN1
      *
      * DEFINE SAVE AND WORK FIELDS
      *
     C     *LIKE         DEFINE    C1FSBO        SVFSBO                            E5190
     C     *LIKE         DEFINE    C1BODS        SVBODS                            E5190
     C     *LIKE         DEFINE    C1XTSN        SVXTSN
     C     *LIKE         DEFINE    C1XTSN        WKXTSN
     C     *LIKE         DEFINE    C1EXCD        SVEXCD
     C     *LIKE         DEFINE    C1XSCD        SVXSCD
     C     *LIKE         DEFINE    C1ALFL        SVALFL
     C     *LIKE         DEFINE    OURMFL        SVRMFL
     C     *LIKE         DEFINE    C1CURFL       SVCURFL
     C     *LIKE         DEFINE    oudvcd        svdvcd                         5190
      *
      * DEFINE FIELDS FOR USE AS PARMS WHEN CALLING PROMPT PROGRAMS
      * OR IN MESSAGES.
      *
     C     *LIKE         DEFINE    C1BODS        XXBODS                          e5190
     C     *LIKE         DEFINE    C1XSCD        XXFSCD
     C     *LIKE         DEFINE    XTBOBO        XXFSBO
     C     *LIKE         DEFINE    C1XSCD        XXXSCD
     C     *LIKE         DEFINE    C1ALFL        XXALFL
     C     *LIKE         DEFINE    C1EXCD        XXEXCD
     C     *LIKE         DEFINE    DFEXDS        XXEXDS
     C                   MOVE      *BLANK        XXXTSN            7
     C     *LIKE         DEFINE    C1CURFL       XXCURFL
      *
      * TO SUPPORT F5-REFRESH, LOGIC REQUIRES THE NUMBER OF LINES ON
      * THE SUBFILE PAGE AND ALSO THE NUMBER OF LINES LESS 1.  BY
      * SETTING THESE VALUES UP AS CONSTANT WORK FIELDS, THE PROCESSING
      * LOGIC CAN BE STANDARDIZED BETWEEN PROGRAMS.
      *
     C                   Z-ADD     10            WKPLIN            2 0          SFLPAG
     C     WKPLIN        SUB       1             WKRLIN            2 0          SFLPAG - 1
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM
     C                   EXSR      $CLMSG
      *
      *
      * EXECUTE THE SECURITY SUBROUTINE TO DETERMINE USER
      * AUTHORIZATIONS.
      *
     C                   MOVEL     NO            INBOFL
     C                   MOVEL(P)  SDPGM         WKFNCD           10
     C                   EXSR      $SEC
     C                   MOVEL     YES           INBOFL                        E5190
      *
      * IF ERRORS ON INITIAL CALL, SET TERMINAL FLAG TO YES.
      *
     C     SECFL         IFEQ      YES
     C                   MOVEL     YES           TERMFL
     C                   ENDIF
      *
      *
      * SAVE THIS FUNCTION'S:
      * 1) DEFAULT BUSINESS OFFICE
      * 2) USER'S RESTRICTED FOR MAINTENANCE FLAG
      *
      * MOVE RETURNED FIELDS TO SCREEN (AND SAVE IN WORK                       E5190
      * FIELDS FOR USE WITH F5=REFRESH LOGIC)                                 "
      *                                                                      "
     C                   MOVEL     OUBOBO        C1FSBO                      "
     C                   MOVEL     OUBOBO        SVFSBO                      "
     C                   MOVEL     OUBODS        C1BODS                      "
     C                   MOVEL     OUBODS        SVBODS                       E5190
     C                   MOVEL     OUDVCD        SVDVCD                       E5190
      *
     C                   MOVEL     OURMFL        SVRMFL
      *
      *
      * Default 'show current tickets only' flag to YES
      *
     C                   move      yes           c1curfl
     C                   move      yes           svcurfl
      *
     C                   ENDSR
      /EJECT
