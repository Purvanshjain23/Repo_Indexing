// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMAPXFR
// ?Date: 14.08.2025 Time: 03:44:37
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?MODIFICATION HISTORY
DO;

//?E4119 JJH 09/21/16 - Include Orders without a Load ID
//?- Modification added after going live with Mercury Gate
//?- If NO Load ID, then get Deadline Deaparture Date/Time from
//?  the Order Detail file.
//?- Set Scheduled Seq Nbr = ZERO as it is not used by Mercury Gate
//?E3796 JJH 02/18/15 - Logic changes for Requested Ship Date for
//? Production Schedule.
//? - Changed I PAR from Scheduled Ship Date to Requested Ship Date
//? - Replace "PAR.Scheduled Ship Date" with "PAR.Requested Ship Date"
//?E3796 JJH 02/11/15 - Add OPS Requested Ship Date to WF OrderProd
//? Schedule - Recompiled with no logic changes.
//?06/21/2012 SLM e02098 Add information for Generic process
//?using the item category 6 for the primal reports
//?12/3/2010 SLM e001196 2 work ahead days
ENDDO;

EXECUTE FUNCTION(RtvDlt Wf OrderProdRecRT) TYPE(RTVOBJ) FILE(PMEUCPP)           AC1905339;
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt WF OrderProdRecs  DO) TYPE(DLTOBJ) FILE(PMEUCPP)           AC1905338;
 PARAMETER(DB1.OPS_Sequence_No);
}


//?E3796 JJH 02/19/15 - Chg Scheduled Ship Date to Requested Ship Date
CASE;

// IF PAR.Print HoldOvers Usr is no
IF PAR.Print_HoldOvers_Usr = 'N';

//?*do not select held overs do not go backwards in date selection
// WRK.Prior Schedule Ship DteUs = PAR.Requested Ship Date
WRK.Prior_Schedule_Ship_DteUs = PAR.Requested_Ship_Date;

// IF *OTHERWISE
IF *OTHERWISE;

//?Go to the Calendar and get the >>>> date from 3 days ago
// WRK.Prior Schedule Ship DteUs = PAR.Requested Ship Date + CON.-00000003 *DAYS
WRK.Prior_Schedule_Ship_DteUs = DATEINCR(PAR.Requested_Ship_Date '-00000003' 'DY'                  +
1111111 'NONE' 'N' 1);

ENDIF;

//?E3796 JJH 02/19/15 - Chg Scheduled Ship Date to Requested Ship Date
CASE;

// IF PAR.Requested Ship Date LE JOB.*Job date
IF PAR.Requested_Ship_Date <= JOB.*Job_date;

//?CURRENT DATE GO GET NEXT PRODUCTION DATE
//?GET THE NEXT PRODUCTION DATE BASED ON THE REQUESTED SHIPPED DATE
//?Susan Review 1
// PAR.Next Production Day Usr = PAR.Requested Ship Date + CON.1 *DAYS
PAR.Next_Production_Day_Usr = DATEINCR(PAR.Requested_Ship_Date 1 'DY' 1111111 'NONE' 'N'           +
1);

// PAR.Next Production Day Usr2 = PAR.Requested Ship Date + CON.2 *DAYS
PAR.Next_Production_Day_Usr2 = DATEINCR(PAR.Requested_Ship_Date 2 'DY' 1111111 'NONE'              +
'N' 1);

// IF PAR.Requested Ship Date GT JOB.*Job date
IF PAR.Requested_Ship_Date > JOB.*Job_date;

//?USER HAS ENTERED THE NEXT PRODUCTION DATE DUE THEY HAVE ENTER IT
//?Susan Review 2
// PAR.Next Production Day Usr = PAR.Requested Ship Date + CON.1 *DAYS
PAR.Next_Production_Day_Usr = DATEINCR(PAR.Requested_Ship_Date 1 'DY' 1111111 'NONE' 'N'           +
1);

// PAR.Next Production Day Usr2 = PAR.Requested Ship Date + CON.2 *DAYS
PAR.Next_Production_Day_Usr2 = DATEINCR(PAR.Requested_Ship_Date 2 'DY' 1111111 'NONE'              +
'N' 1);

//?CURRENT DATE GO GET NEXT PRODUCTION DATE
ENDIF;

//?Susan Review 3
//?E3796 JJH 02/19/15 - Chg Scheduled Ship Date to Requested Ship Date
//? Changed the following parameters
//? I  Requested Ship Date     POS FLD  WRK Prior Schedule Ship DteUs
//? I  Date To             USR     FLD  PAR Requested Ship Date
EXECUTE FUNCTION(Rtv PrimSchByGroup    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1905193;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Prior_Schedule_Ship_DteUs);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Next_Production_Day_Usr);
PARAMETER(PAR.Next_Production_Day_Usr2);
PARAMETER(PAR.Item_Category_Code);
{
 //?USER: Initialize routine

 // WRK.Record Created        USR = CND.Blank
 WRK.Record_Created_USR = *BLANK;

 //?Modification history
 DO;

 //?send the item age days and dates to this work file.
 //?Rules on the E2098, Need Picnic schedule report & new totals
 DO;

 //?SLM 5/8/2012 - these rules will apply to trim and belly report
 //?e2098 add the unit of measure to work file
 //?add status to know if the record will print in the detail
 //?if Y then record will be added to the totals and print in the detail
 //?if N then record will be added to the totals no print in the detail
 //?new totals by uom and if currently box do not print the detail
 ENDDO;

 //?Rules on the E2098, add new rules using the item category
 DO;

 //?SLM 6/13/2012- these rules will apply to trim and belly report
 //?e2098 add the item category 06 number and category 06 code
 ENDDO;

 //?E3796 JJH 02/19/15 - Requested Ship Date
 //? - Change Access Path to Co/Whse/RqsDt/Itm,Sel A,E
 //? - Changed I POS from Scheduled Ship Date to Requested Ship Date
 ENDDO;

 //?USER: Process Data record

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 //?Susan Review Item and boxes
 //?General information on Boxes, and Combo, and Snd to Carlisle
 DO;

 //?This process is building the data for the combo production schedules
 //?processing for combos, no boxes WILL be placed in this data
 //?There are some combo's that the production schedule
 //?want to appear with
 //?the box schedules :
 //?that would be any combo that the primal report
 //?snd to Carlisle is a C or F,
 //?                 do not write this combo to this wrk file
 //?Not Snd to Carlisle Not C,F then write this combo to this wrk file
 //?                 write this combo to this wrk file
 ENDDO;

 //?Selection information for item and no boxes, snd to Carlisle no combos
 DO;

 EXECUTE FUNCTION(Rtv PrimSch Sel       RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1905194;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(LCL.Item_Structure_Class_Code);
 PARAMETER(LCL.Item_Structure_Group_Code);
 PARAMETER(LCL.Item_Structure_Type_Code);
 PARAMETER(06);
 PARAMETER(PAR.Item_Category_Code);
 PARAMETER(LCL.Primal_Group_Code);
 PARAMETER(LCL.Record_Selected_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Selected       USR = CND.no
  PAR.Record_Selected_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Selected       USR = CND.yes
  PAR.Record_Selected_USR = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  //?Verify if active
  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  //?Verify if active
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Record Selected       USR = CND.no
  PAR.Record_Selected_USR = 'N';

  ENDIF;

  //?Select only if Print on Schedule = N ,
  CASE;

  // IF DB1.Print On Schedule is no
  IF DB1.Print_On_Schedule = 'N';

  //?Select only if Print on Schedule = N ,
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Record Selected       USR = CND.no
  PAR.Record_Selected_USR = 'N';

  ENDIF;

  //?Select only Finish Goods
  CASE;

  // IF DB1.Item Type Code is Finished Good
  IF DB1.Item_Type_Code = 'FG';

  //?Select only Finish Goods
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Record Selected       USR = CND.no
  PAR.Record_Selected_USR = 'N';

  ENDIF;

 }

 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF DB1.U/M - Ordered is EQ Boxes
 IF DB1.U_M_Ordered = 'BX';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?IF send to Carlisle or Future totals, the do not send combos
 //?IF do not send to Carlisle then include combos only
 EXECUTE FUNCTION(Val Carlisle Intface  RT) TYPE(RTVOBJ) FILE(PDJIREP)           AC2055120;
 PARAMETER(PAR.Company_Number);
 PARAMETER(06);
 PARAMETER(PAR.Item_Category_Code);
 PARAMETER(WRK.EDI_Status_3);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.EDI Status 3 is Send to Carlisle
 IF WRK.EDI_Status_3 = 'C'/'F';

 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 ENDDO;

 //?Logical view on the Order detail is only status of A or E
 //?A=Avaiable or E=Entered
 //?slm 11/06/08 User had addition changes
 //?will use the same logical file but do not
 //?send in any "E" records
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 //?Susan Review invdiual order selection
 //?E3796 JJH 02/19/15 - Scheduled Ship Date to Requested Ship Date
 //?Based selection for flds from the order detail
 CASE;

 // IF DB1.Quantity Ordered is Greater than zero
 IF DB1.Quantity_Ordered > *ZERO;

 // AND DB1.Detail Line Status is Available
 AND DB1.Detail_Line_Status = 'A';

 // AND DB1.Requested Ship Date LE PAR.Next Production Day Usr2
 AND DB1.Requested_Ship_Date <= PAR.Next_Production_Day_Usr2;

 //?During balance new report found  the select should have been
 //?on the schedule  order
 //?Use Qty Order instead of Sch Quantity
 //?use the 2day work ahead for more data to appear on report
 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 //?Based selection for flds from the order detail
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 ENDIF;

 //?IF Record selected write out record
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 //?Ready to write out work file
 EXECUTE FUNCTION(RTV Load ID/Cust/ReqDlvRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2008122;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Cancelled_Flag_USR);
 {
  //?USER: Initialize routine

  // PAR.Cancelled Flag USR = CND.No
  PAR.Cancelled_Flag_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?Set Cancelled Flag.
  CASE;

  // IF DB1.Header Status is Cancelled
  IF DB1.Header_Status = 'X';

  // PAR.Cancelled Flag USR = CND.Yes
  PAR.Cancelled_Flag_USR = 'Y';

  ENDIF;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Cancelled Flag USR is Yes
 IF LCL.Cancelled_Flag_USR = 'Y';

 //?If canceled order do not create work record
 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If Load ID > 0, get DDT from Load Header; ELSE get from Order
 CASE;

 // IF LCL.Load ID is Entered
 IF LCL.Load_ID <> *ZERO;

 EXECUTE FUNCTION(RTV SchSeqA#Deadline   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1905271;
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Schedule_Sequence_Number);
 PARAMETER(LCL.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 //?If record not found, use values from current Order Detail record
 CASE;

 // IF NOT PGM.*Return code is *Normal
 IF ! PGM.*Return_code = *BLANK;

 // LCL.Schedule Sequence Number = CND.Zero
 LCL.Schedule_Sequence_Number = *ZERO;

 // LCL.Deadline Departure Date = DB1.Deadline Depart Date LH
 LCL.Deadline_Departure_Date = DB1.Deadline_Depart_Date_LH;

 // LCL.Deadline Departure Time = DB1.Deadline Depart Time LH
 LCL.Deadline_Departure_Time = DB1.Deadline_Depart_Time_LH;

 ENDIF;

 //?Set return code to *Normal to perform next step
 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?If Load ID > 0, get DDT from Load Header; ELSE get from Order
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If Load ID not Entered, use values from current Order Detail record
 // LCL.Schedule Sequence Number = CND.Zero
 LCL.Schedule_Sequence_Number = *ZERO;

 // LCL.Deadline Departure Date = DB1.Deadline Depart Date LH
 LCL.Deadline_Departure_Date = DB1.Deadline_Depart_Date_LH;

 // LCL.Deadline Departure Time = DB1.Deadline Depart Time LH
 LCL.Deadline_Departure_Time = DB1.Deadline_Depart_Time_LH;

 ENDIF;

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Use Qty Order instead of Sch Quantity
 EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Production_AgeDte_Fr);
 PARAMETER(LCL.Production_AgeDte_To);
 PARAMETER(LCL.Error_Status);
 PARAMETER('S');
 PARAMETER('C');
 {
  //?Execute internal function

  // WRK.Error Flag            USR = CND.Blank
  WRK.Error_Flag_USR = *BLANK;

  // PAR.Error Status = CND.blank
  PAR.Error_Status = *BLANK;

  // WRK.Error Reason Descript 1 = CON.*BLANK
  WRK.Error_Reason_Descript_1 = *BLANK;

  // WRK.Error Reason Descript 2 = CON.*BLANK
  WRK.Error_Reason_Descript_2 = *BLANK;

  // WRK.Error Reason Descript 3 = CON.*BLANK
  WRK.Error_Reason_Descript_3 = *BLANK;

  // WRK.Error Reason Descript 4 = CON.*BLANK
  WRK.Error_Reason_Descript_4 = *BLANK;

  // WRK.Error Reason Descript 5 = CON.*BLANK
  WRK.Error_Reason_Descript_5 = *BLANK;

  CASE;

  // IF PAR.Company Organization is Seaboard
  IF PAR.Company_Organization = 'S';

  CASE;

  // IF PAR.Requested Delivery Date is not entered
  IF PAR.Requested_Delivery_Date = *ZERO;

  // Send error message - 'Requested Delv Date is required'
  ERROR(USR4329);
  MSGPARM(PAR.Requested_Delivery_Date);

  // IF PAR.Scheduled Ship Date is not entered
  IF PAR.Scheduled_Ship_Date = *ZERO;

  // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
  ERROR(USR2230);
  MSGPARM(PAR.Scheduled_Ship_Date);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Val Age information   XF.
  CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(WRK.Error_Flag_USR);
  PARAMETER(WRK.Error_Reason_Descript_1);
  PARAMETER(WRK.Error_Reason_Descript_2);
  PARAMETER(WRK.Error_Reason_Descript_3);
  PARAMETER(WRK.Error_Reason_Descript_4);
  PARAMETER(WRK.Error_Reason_Descript_5);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
  PARAMETER(PAR.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.Production_AgeDte_Fr);
  PARAMETER(PAR.Production_AgeDte_To);

  //?Verify if message should be sent if validation is required
  CASE;

  // IF WRK.Error Flag            USR is Yes
  IF WRK.Error_Flag_USR = 'Y';

  // AND PAR.Production Dates Sts Usr is Validation routine
  AND PAR.Production_Dates_Sts_Usr = 'V';

  //?message 1 Product is shipped before product is made
  CASE;

  // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

  // Send error message - 'Prd Date is invalid for requested delivery date'
  ERROR(USR4307);
  MSGPARM(PAR.Production_AgeDte_Fr);

  ENDIF;

  //?message 2 Either Days or override date but not both
  CASE;

  // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

  // Send error message - 'Enter Age Days or Dates'
  ERROR(USR4304);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 3 With Chill Days Either Days or Override Dates required
  CASE;

  // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 4 From date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 5 To date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  CASE;

  // IF PAR.Production Ovr AgeDte Fr is not entered
  IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

  // Send error message - 'Invalid Item Age Days'
  ERROR(USR4309);
  MSGPARM(PAR.Item_Age_Days);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send error message - 'Invalid Production Override Age Frm/To Dates'
  ERROR(USR4310);
  MSGPARM(PAR.Production_AgeDte_Fr);
  MSGPARM(PAR.Production_AgeDte_To);

  ENDIF;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // WRK.OPS Print on Detail Sch = CND.yes
 WRK.OPS_Print_on_Detail_Sched = 'Y';

 // WRK.OPS U/M Sequence = CON.002
 WRK.OPS_UOM_Sequence = 002;

 //?Susan 6
 //?E3796 JJH 02/11/15 - Add OPS Requested Ship Date to WF OrderProd
 //? Schedule.
 EXECUTE FUNCTION(Crt WF OrderProd SchedIF) TYPE(EXCINTFUN)                      AC1905287;
 PARAMETER(LCL.OPS_Sequence_No);
 PARAMETER(LCL.Primal_Group_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(WRK.OPS_Report_Type);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Schedule_Sequence_Number);
 PARAMETER(LCL.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(WRK.OPS_Sort_Break);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Production_AgeDte_Fr);
 PARAMETER(LCL.Production_AgeDte_To);
 PARAMETER(WRK.OPS_Print_on_Detail_Sched);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(WRK.OPS_UOM_Sequence);
 PARAMETER(WRK.OPS_Status_1);
 PARAMETER(WRK.OPS_Status_2);
 PARAMETER(06);
 PARAMETER(PAR.Item_Category_Code);
 PARAMETER(WRK.Record_Created_USR);
 {
  //?Execute internal function

  //?add 1 to sequence number
  // PAR.OPS Sequence No = PAR.OPS Sequence No + CON.1
  PAR.OPS_Sequence_No = PAR.OPS_Sequence_No + 1;

  //?E3796 JJH 02/11/15 - Add OPS Requested Ship Date to WF OrderProd
  //? Schedule.
  EXECUTE FUNCTION(Crt WF OrderProd SchedCR) TYPE(CRTOBJ) FILE(PMEUCPP)           AC1905230;
  PARAMETER(PAR.OPS_Sequence_No);
  PARAMETER(PAR.OPS_Primal_Group_Code);
  PARAMETER(PAR.OPS_Company_Number);
  PARAMETER(PAR.OPS_Warehouse);
  PARAMETER(PAR.OPS_Schedule_Ship_Date);
  PARAMETER(PAR.OPS_Requested_Ship_Date);
  PARAMETER(PAR.OPS_Report_Type);
  PARAMETER(PAR.OPS_Order_Number);
  PARAMETER(PAR.OPS_Load_Id);
  PARAMETER(PAR.OPS_Customer_Name);
  PARAMETER(PAR.OPS_Load_Schedule_Seq_Nbr);
  PARAMETER(PAR.OPS_Deadline_Depart_Date);
  PARAMETER(PAR.OPS_Deadline_Depart_Time);
  PARAMETER(PAR.OPS_Item_Code);
  PARAMETER(PAR.OPS_Item_Description);
  PARAMETER(PAR.OPS_Quantity_Ordered);
  PARAMETER(PAR.OPS_Sort_Break);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
  PARAMETER(PAR.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.Production_AgeDte_Fr);
  PARAMETER(PAR.Production_AgeDte_To);
  PARAMETER(PAR.OPS_Print_on_Detail_Sched);
  PARAMETER(PAR.OPS_UOM_Primary);
  PARAMETER(PAR.OPS_UOM_Sequence);
  PARAMETER(PAR.OPS_Status_1);
  PARAMETER(PAR.OPS_Status_2);
  PARAMETER(PAR.Item_Category_Number_6);
  PARAMETER(PAR.Item_Primal_Sched_Report);
  {
   //?USER: Processing before Data update

   //?E3796 JJH 02/23/15 - Requested Ship Date for Production Schedule
   //?- Add I Parm: OPS Requested Ship Date
   // Call program Crt WF orderprodSortB XP.
   CALL PROGRAM(Crt WF orderprodSortB XP) ('PMAOXFR');
   PARAMETER(DB1.OPS_Sequence_No);
   PARAMETER(DB1.OPS_Primal_Group_Code);
   PARAMETER(DB1.OPS_Company_Number);
   PARAMETER(DB1.OPS_Warehouse);
   PARAMETER(DB1.OPS_Schedule_Ship_Date);
   PARAMETER(DB1.OPS_Requested_Ship_Date);
   PARAMETER(DB1.OPS_Report_Type);
   PARAMETER(DB1.OPS_Order_Number);
   PARAMETER(DB1.OPS_Load_Id);
   PARAMETER(DB1.OPS_Customer_Name);
   PARAMETER(DB1.OPS_Load_Schedule_Seq_Nbr);
   PARAMETER(DB1.OPS_Deadline_Depart_Date);
   PARAMETER(DB1.OPS_Deadline_Depart_Time);
   PARAMETER(DB1.OPS_Item_Code);
   PARAMETER(DB1.OPS_Item_Description);
   PARAMETER(DB1.OPS_Quantity_Ordered);
   PARAMETER(DB1.OPS_Sort_Break);

  }

  // PAR.Record Created        USR = CND.Yes
  PAR.Record_Created_USR = 'Y';

 }

 ENDIF;

 ENDIF;

 ENDIF;

}


