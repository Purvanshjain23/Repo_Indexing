// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKAOETR
// ?Date: 14.08.2025 Time: 02:48:48
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 7/02/2021 JBB WHD80995 - Increase rollover values for BO#
//?                          Recompile only after changing the
//?                          RTVOBJ-Rtv Crt Next BOH      RT to
//?                          rollover when the BO# reaches 999999,
//?                          instead of 99999.
//? 4/25/2019 JBB E14910 - Edit Buy Order Load, Validate Buy Order Type
//?- There is a business rule that states that if the Producer's
//?  Source Code = TO, then the BO Type must = C.
//?10/04/2018 JBB E13859 - Protecting Carcass Merit Program field
//?- The Carcass Merit Program field is converted from input to
//?  protected when any Tattoos are paid.  This modification will
//?  only check for Market Hogs that are paid, instead of all hogs.
//? 4/12/2017 JBB E12898 - Validate Commodity Market Code/Price Group
//?- Validate against the OMS Commodity Mrkt Price file OMF0CPL0.
//?E10812 JJH 01/22/18 - Market Hog Order to Cash
//?- Correct the Column Headings in the Subfile Record to correctly
//?  display in GREEN.
//? 5/22/2017 JBB  C9426 - Remove validation of the REF fields.
//? 4/12/2017 JBB  C9426 - Add Ref Fields to screen and create or
//?- change Buy Order Load Reference file with REF fields.
//?RMC 11/04/16 R7805 add BOH MPR purch type
//?RMC Comment hedge stuff.. never installed 9/27/16
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field length from
//?                      5 to 7.
ENDDO;

//?E3577 11/5/14 RMC Allow new BOH Type is Hedge. Hedge wont have any
//? Loads.  They will have BOH Hedge Head and get reported to USDA MPR
EXECUTE FUNCTION(HPE034) TYPE(EXCINTFUN)                                        AB1195750;
{
 //?Execute internal function

 //?Create a Trucker edit. - Dwight Shepard
 //?Purpose:
 //?Clone the Trucker report that post and remove
 //?all update of vouchers.  Producer the report
 //?for the user to sight review before continue on.
 //?Modification History
 //?Date        Person   Description
}


//?PK0495 12/12/02 Make subfile fields output & dsp movement#
//?  & Comment SFL Detail validations
//?PK0495 01/20/03 Allow subfile input and validate.
// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// LCL.Company Value Code    USR = CND.HPE & HPS Application Usd
LCL.Company_Value_Code_USR = 'DLVTRKRULE';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.Company_Value_Code_USR);
PARAMETER(LCL.System_Value_Alpha_USR);

// WRK.Co Uses HPE & HPS usr = LCL.System Value Alpha    USR
WRK.Co_Uses_HPE_HPS_usr = LCL.System_Value_Alpha_USR;

//?USER: Load existing header

// LCL.Tattoo is paid Usr = CND.No
LCL.Tattoo_is_paid_Usr = 'N';

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

//?10/04/2018 JBB E13859 - Protecting Carcass Merit Program field
EXECUTE FUNCTION(Rtv Paid Mkt Tattoos  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1346805;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(LCL.Tattoo_is_paid_Usr);
{
 //?USER: Initialize routine

 // PAR.Tattoo is paid Usr = CND.No
 PAR.Tattoo_is_paid_Usr = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?Check if any Market hog records are paid
 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 //?Ignore any resale hog records
 //?Check if any Market hog records are paid
 // IF DB1.TH Payment Sts is Paid Anything
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // PAR.Tattoo is paid Usr = CND.Yes
 PAR.Tattoo_is_paid_Usr = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

// WRK.Display Output Only Usr = CND.Blank
WRK.Display_Output_Only_Usr = *BLANK;

// WRK.Display Output Only 2 USR = CND.Blank
WRK.Display_Output_Only_2_USR = *BLANK;

CASE;

// IF CTL.BOH Status is Locked
IF CTL.BOH_Status = 'L';

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

ENDIF;

CASE;

// IF CTL.BOH Buy Order Type is Internal
IF CTL.BOH_Buy_Order_Type = 'I';

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

// IF CTL.PO Option Code is Multi Market Price
IF CTL.PO_Option_Code = 'MMP';

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

// IF CTL.BOH Buy Order Type is Contract
IF CTL.BOH_Buy_Order_Type = 'C';

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

ENDIF;

// LCL.Status 1 = CND.No
LCL.Status_1 = 'N';

//?USER: Initialize subfile record (old record)

CASE;

// IF DB1.BOH MPR Purchase Type is *ALL values
IF DB1.BOH_MPR_Purchase_Type = '01'/'02'/'03'/'04'/'05'/'06'/'07'/'08'/'09'/'10'/'11';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV MPR Prdcr Purch TpRT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235599;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(LCL.MPR_Purchase_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CTL.BOH MPR Purchase Type = CVTVAR(LCL.MPR Purchase Type Code)
CTL.BOH_MPR_Purchase_Type = CVTVAR(LCL.MPR_Purchase_Type_Code);

ENDIF;

EXECUTE FUNCTION(Rtv Mvmnt,Farm f/BOL  RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1245116;
PARAMETER(DB2.BOL_Kill_Date);
PARAMETER(LCL.DSD_Farm_Site_Code);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(DB2.BOH_Company_Number);
PARAMETER(DB2.BOH_Buy_Order_Number);
PARAMETER(DB2.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF RCD.TH HPS Movement Ref # is Not entered
IF RCD.TH_HPS_Movement_Ref_# = *ZERO;

EXECUTE FUNCTION(Rtv Movement Number   RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1247975;
PARAMETER(DB2.BOH_Company_Number);
PARAMETER(DB2.BOH_Buy_Order_Number);
PARAMETER(DB2.BOL_Load_Number);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?1/21/03 Save date/time to check for Delivery tracking change necessary
// RCD.Time USR = DB2.BOL Pln Delv Start Time
RCD.Time_USR = DB2.BOL_Pln_Delv_Start_Time;

// RCD.Date Beg USR = DB2.BOL Pln Delv Date
RCD.Date_Beg_USR = DB2.BOL_Pln_Delv_Date;

CASE;

// IF DB1.RS Record Status is InActive
IF DB1.RS_Record_Status = 'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.BOL Pln Delv Date = DB2.BOL Pln Delv Date
RCD.BOL_Pln_Delv_Date = DB2.BOL_Pln_Delv_Date;

//?E3577 SET STS TO YES IF A DETAIL EXISTS
// LCL.Status 1 = CND.Yes
LCL.Status_1 = 'Y';

EXECUTE FUNCTION(Rtv Buy Order Load Ref RT) TYPE(RTVOBJ) FILE(PWACCPP)          AB1333104;
PARAMETER(DB2.BOH_Company_Number);
PARAMETER(DB2.BOH_Buy_Order_Number);
PARAMETER(DB2.BOL_Load_Number);
PARAMETER(RCD.BOL_Ref_1);
PARAMETER(RCD.BOL_Ref_2);
PARAMETER(RCD.BOL_Ref_Status);
PARAMETER(NLL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//? 5/22/17 JBB C9426 - Remove validation of the REF fields.
//?USER: Initialize subfile record (new record)

// RCD.BOL Freight Exp Paid By = LCL.PD Freight Exp Paid By
RCD.BOL_Freight_Exp_Paid_By = LCL.PD_Freight_Exp_Paid_By;

CASE;

// IF DB1.BOH MPR Purchase Type is *ALL values
IF DB1.BOH_MPR_Purchase_Type = '01'/'02'/'03'/'04'/'05'/'06'/'07'/'08'/'09'/'10'/'11';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV MPR Prdcr Purch TpRT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235599;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(LCL.MPR_Purchase_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CTL.BOH MPR Purchase Type = CVTVAR(LCL.MPR Purchase Type Code)
CTL.BOH_MPR_Purchase_Type = CVTVAR(LCL.MPR_Purchase_Type_Code);

ENDIF;

//?USER: Validate header non-key fields

CASE;

// IF CTL.BOH Buy Order Date GT CTL.BOH Kill Date
IF CTL.BOH_Buy_Order_Date > CTL.BOH_Kill_Date;

// Send error message - 'Buy Date must be less than or equal to the Kill Date.'
ERROR(PRK0838);
MSGPARM(CTL.BOH_Buy_Order_Date);
MSGPARM(CTL.BOH_Kill_Date);

ENDIF;

//?USER: Validate header non-key relations

EXECUTE FUNCTION(Rtv Producer Split    RT) TYPE(RTVOBJ) FILE(PKBFREP)           AB1107922;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.Primary_Split_USR);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.PSS_Split_Percent = 100;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Producer TrkSz,Src RT) TYPE(RTVOBJ) FILE(PKACREP)          AB1121114;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Std_Truck_Size);
PARAMETER(LCL.PD_Freight_Exp_Paid_By);
PARAMETER(LCL.SR_Source_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(LCL.SR_Source_Code);
PARAMETER(WRK.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.BOH Status Desc Usr = Condition name of CTL.BOH Status
CTL.BOH_Status_Desc_Usr = RTVCND(CTL.BOH_Status);

// LCL.Buy Order Type Error = CND.No
LCL.Buy_Order_Type_Error = 'N';

//?Validate Buy Order Type with Producer Source Type
CASE;

// IF CTL.BOH Buy Order Type EQ LCL.BOH Buy Order Type
IF CTL.BOH_Buy_Order_Type = LCL.BOH_Buy_Order_Type;

// LCL.Buy Order Type Error = CND.Yes
LCL.Buy_Order_Type_Error = 'Y';

// Send error message - 'Value Required.'
ERROR(PRK1201);
MSGPARM(CTL.BOH_Buy_Order_Type);

//?Validate Buy Order Type with Producer Source Type
// IF WRK.SR Type is External
IF WRK.SR_Type = 'E';

//?External Validations
CASE;

// IF LCL.SR Source Code is Triumph Member (Owner)
IF LCL.SR_Source_Code = 'TO';

EXECUTE FUNCTION(Chk Src/BO Type XREF  RT) TYPE(RTVOBJ) FILE(PWAIREP)           AB1339345;
PARAMETER(LCL.SR_Source_Code);
PARAMETER(CTL.BOH_Buy_Order_Type);

//?If record not found, Buy Order Type not valid for TO hogs
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

//?4/25/2019 JBB E14910 - Buy Order Type not valid for Source = 'TO'
// LCL.Buy Order Type Error = CND.Yes
LCL.Buy_Order_Type_Error = 'Y';

// Send error message - 'Buy Order Type not a valid value for Triumph Owned hogs.'
ERROR(PRK1538);
MSGPARM(CTL.BOH_Buy_Order_Type);

ENDIF;

//?External Validations
// IF CTL.BOH Buy Order Type is Contract
IF CTL.BOH_Buy_Order_Type = 'C';

// OR CTL.BOH Buy Order Type is Open Market
OR CTL.BOH_Buy_Order_Type = 'O';

// OR CTL.BOH Buy Order Type is Hedge
OR CTL.BOH_Buy_Order_Type = 'H';

//?External Validations
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Buy Order Type Error = CND.Yes
LCL.Buy_Order_Type_Error = 'Y';

// Send error message - 'BO Type must be (C)ontract,(O)pen market, (H)edge for producer source Exter
ERROR(PRK0388);

ENDIF;

//?Validate Buy Order Type with Producer Source Type
// IF *OTHERWISE
IF *OTHERWISE;

//?Internal validations
CASE;

// IF WRK.SR Type is Internal
IF WRK.SR_Type = 'I';

CASE;

// IF CTL.BOH Buy Order Type is Internal
IF CTL.BOH_Buy_Order_Type = 'I';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Buy Order Type must Be (I)nternal for producer source Internal.'
ERROR(PRK0389);

ENDIF;

ENDIF;

ENDIF;

//?Buy Order Header is open
CASE;

// IF CTL.BOH Status is Open
IF CTL.BOH_Status = 'O';

CASE;

// IF LCL.Buy Order Type Error is Yes
IF LCL.Buy_Order_Type_Error = 'Y';

//?No more validation when there is an Buy Order Type error
// IF CTL.BOH Buy Order Type is Contract or Internal
IF CTL.BOH_Buy_Order_Type = 'C'/'I';

// AND CTL.PC Contract Code is *BLANKS
AND CTL.PC_Contract_Code = *BLANK;

// Call program Sel Sub-Contract PP   SR.
CALL PROGRAM(Sel Sub-Contract PP   SR) ('PKFFSRR');
PARAMETER(CTL.PC_Contract_Code);
PARAMETER(CTL.PSC_Sub_Contract_Code);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv Sub-Contract Info RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1110451;
PARAMETER(CTL.PC_Contract_Code);
PARAMETER(CTL.PSC_Sub_Contract_Code);
PARAMETER(LCL.PSC_Sub_Contract_Type);
PARAMETER(CTL.BOH_Commodity_Market_Code);
PARAMETER(CTL.BOH_Commodity_Price_Group);
PARAMETER(CTL.BOH_Market_Add_Deduct);
PARAMETER(CTL.BOH_Market_Date_Method);
PARAMETER(CTL.GN_Genetic_Code);
PARAMETER(CTL.PO_Option_Code);
PARAMETER(CTL.CMP_Program_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?HPE127:  for Mkt/CM sub-contract type, pay live
CASE;

// IF LCL.PSC Sub-Contract Type is Market/Carcass Merit
IF LCL.PSC_Sub_Contract_Type = 'M';

// CTL.BOH Payment Type = CND.Live
CTL.BOH_Payment_Type = 'L';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Bo Type Req/Cont/Sub Con'
ERROR(PRK0239);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.BOH Buy Order Type is Contract or Internal
IF CTL.BOH_Buy_Order_Type = 'C'/'I';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.PC Contract Code = CON.*BLANK
CTL.PC_Contract_Code = *BLANK;

// CTL.PSC Sub-Contract Code = CON.*BLANK
CTL.PSC_Sub_Contract_Code = *BLANK;

ENDIF;

ENDIF;

//?If Open Market use cash base price for Pricing Option
CASE;

// IF CTL.BOH Buy Order Type is Open Market
IF CTL.BOH_Buy_Order_Type = 'O';

// CTL.PO Option Code = CND.Cash Basis Price
CTL.PO_Option_Code = 'CBP';

// WRK.Display Output Only Usr = CND.Blank
WRK.Display_Output_Only_Usr = *BLANK;

// WRK.Display Output Only 2 USR = CND.Blank
WRK.Display_Output_Only_2_USR = *BLANK;

//?If Open Market use cash base price for Pricing Option
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

CASE;

// IF CTL.BOH Buy Order Type is Internal
IF CTL.BOH_Buy_Order_Type = 'I';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

// IF CTL.BOH Buy Order Type is Contract
IF CTL.BOH_Buy_Order_Type = 'C';

// WRK.Display Output Only 2 USR = CND.Blank
WRK.Display_Output_Only_2_USR = *BLANK;

ENDIF;

ENDIF;

//?Either Base quote or Market +/- are allowed not both
CASE;

// IF CTL.BOH Quoted Base Mkt Price is Not Zeros
IF CTL.BOH_Quoted_Base_Mkt_Price <> *ZERO;

CASE;

// IF CTL.BOH Market Add/Deduct is Not Zeros
IF CTL.BOH_Market_Add_Deduct <> *ZERO;

// Send error message - 'Either Base Qte or Mkt +-'
ERROR(PRK0248);
MSGPARM(CTL.BOH_Market_Add_Deduct);
MSGPARM(CTL.BOH_Quoted_Base_Mkt_Price);

ENDIF;

ENDIF;

//?Carcass Market Program -- Required .
CASE;

// IF CTL.BOH Payment Type is Carcass Merit
IF CTL.BOH_Payment_Type = 'C';

CASE;

// IF CTL.CMP Program Code is *Blank
IF CTL.CMP_Program_Code = *BLANK;

// Send error message - 'Carcass Merit Program value required.'
ERROR(PRK0252);
MSGPARM(CTL.CMP_Program_Code);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

CASE;

// IF CTL.CMP Program Code is *Blank
IF CTL.CMP_Program_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv CMP type          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1167001;
PARAMETER(CTL.CMP_Program_Code);
PARAMETER(WRK.CMP_Type);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.CMP_Type = WRK.Blank_USR;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.CMP_Type = DB1.CMP_Type;

}


CASE;

// IF WRK.CMP Type is Seaboard's
IF WRK.CMP_Type = 'N'/'S';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Carcass Merit Program must have a Seaboard program type.'
ERROR(PRK0580);

ENDIF;

ENDIF;

//?Buy Order Header is open
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

ENDIF;

//?Open Market validation, comm code/group and market date method
CASE;

// IF CTL.BOH Buy Order Type is Open Market
IF CTL.BOH_Buy_Order_Type = 'O';

//?Select Market Date Method
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.BOH Market Date Method
IF PGM.*Cursor_field = CTL.BOH_Market_Date_Method;

// Call program Sel Market Date Method UP.
CALL PROGRAM(Sel Market Date Method UP) ('PDZWXFR');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(CTL.BOH_Market_Date_Method);
PARAMETER(WRK.Market_Date_Method_Desc);
PARAMETER('H');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

CASE;

// IF CTL.PO Option Code is Multi Market Price
IF CTL.PO_Option_Code = 'MMP';

// IF *OTHERWISE
IF *OTHERWISE;

//?Select Commodity Market Code & Price Group
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.BOH Commodity Market Code
IF PGM.*Cursor_field = CTL.BOH_Commodity_Market_Code;

// Call program Sel Commodity Market  XF.
CALL PROGRAM(Sel Commodity Market  XF) ('PDEDSRR');
PARAMETER(CTL.BOH_Commodity_Market_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

// IF PGM.*Cursor field <IS> CTL.BOH Commodity Price Group
IF PGM.*Cursor_field = CTL.BOH_Commodity_Price_Group;

// Call program Sel Commodity Group   XF.
CALL PROGRAM(Sel Commodity Group   XF) ('PDECSRR');
PARAMETER(CTL.BOH_Commodity_Price_Group);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

//?Validate Market and Group
DO;

// WRK.Invalid Y/N USR = CND.Blank
WRK.Invalid_Y_N_USR = *BLANK;

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(CTL.BOH_Commodity_Market_Code);
PARAMETER(WRK.Market_Code_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market Code is invalid.'
ERROR(PRK0028);
MSGPARM(CTL.BOH_Commodity_Market_Code);

ENDIF;

// WRK.Invalid Y/N USR = CND.Blank
WRK.Invalid_Y_N_USR = *BLANK;

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(CTL.BOH_Commodity_Price_Group);
PARAMETER(WRK.Market_Group_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Price Group is invalid.'
ERROR(PRK0027);
MSGPARM(CTL.BOH_Commodity_Price_Group);

ENDIF;

ENDDO;

ENDIF;

// WRK.Market Date Method Desc = WRK.Blank USR
WRK.Market_Date_Method_Desc = WRK.Blank_USR;

// Call program Val Market Date Method UP.
CALL PROGRAM(Val Market Date Method UP) ('PDZUXFR');
PARAMETER(WRK.*Return_code);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(CTL.BOH_Market_Date_Method);
PARAMETER(WRK.Market_Date_Method_Desc);
PARAMETER('H');

CASE;

// IF WRK.Market Date Method Desc NE WRK.Blank USR
IF WRK.Market_Date_Method_Desc <> WRK.Blank_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Market Date Method.'
ERROR(PRK0556);
MSGPARM(CTL.BOH_Market_Date_Method);

ENDIF;

// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

ENDIF;

//?Validate Commodity Mrkt/Group if entered, regardless of BO Type
CASE;

// IF CTL.BOH Commodity Market Code is Entered
IF CTL.BOH_Commodity_Market_Code <> *BLANK;

// OR CTL.BOH Commodity Price Group is Entered
OR CTL.BOH_Commodity_Price_Group <> *BLANK;

//? 4/10/18 JBB E12898 Validate Commodity Market Code/Price Group
// WRK.Invalid Y/N USR = CND.Blank
WRK.Invalid_Y_N_USR = *BLANK;

// Call program Val Commodity Cde/Grp XF.
CALL PROGRAM(Val Commodity Cde/Grp XF) ('PNH5XFR');
PARAMETER(CTL.BOH_Commodity_Market_Code);
PARAMETER(CTL.BOH_Commodity_Price_Group);
PARAMETER(WRK.Invalid_Y_N_USR);

//?If not found in OMS, send error message
CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market Code/Price Group combination is invalid.'
ERROR(PRK1492);
MSGPARM(CTL.BOH_Commodity_Market_Code);
MSGPARM(CTL.BOH_Commodity_Price_Group);

ENDIF;

ENDIF;

//?********** 08/02/95 PKP **********
//?If Payment Type = Carcass Merit, validate Base Quote & Type.
//?If Payment Type = Live, Base Quote must be 0 and Type is blank.
//?Validate/Initialize Base Quote and Type.
CASE;

// IF CTL.BOH Payment Type is Carcass Merit
IF CTL.BOH_Payment_Type = 'C';

//?If Base Quote is entered, type is required.
CASE;

// IF CTL.BOH Quoted Base Mkt Price is Zeros
IF CTL.BOH_Quoted_Base_Mkt_Price = *ZERO;

// CTL.BOH Quote Price Type = CND.Not Entered
CTL.BOH_Quote_Price_Type = *BLANK;

//?If Base Quote is entered, type is required.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.BOH Quote Price Type is Not Entered
IF CTL.BOH_Quote_Price_Type = *BLANK;

// Send error message - 'Base Quote Type is required.'
ERROR(PRK0497);
MSGPARM(CTL.BOH_Quote_Price_Type);

ENDIF;

ENDIF;

//?Validate/Initialize Base Quote and Type.
// IF CTL.BOH Payment Type is Live
IF CTL.BOH_Payment_Type = 'L';

// CTL.BOH Quoted Base Mkt Price = CON.*ZERO
CTL.BOH_Quoted_Base_Mkt_Price = *ZERO;

// CTL.BOH Quote Price Type = CND.Not Entered
CTL.BOH_Quote_Price_Type = *BLANK;

ENDIF;

//?**********************************
//?USER: Validate subfile record fields

//?E3577 RMC 11/6/14 BOH Type Hedge cannot have load detail
CASE;

// IF CTL.BOH Buy Order Type is Hedge
IF CTL.BOH_Buy_Order_Type = 'H';

CASE;

// IF RCD.BOL Pln Head Delv is GT Zero
IF RCD.BOL_Pln_Head_Delv > *ZERO;

// OR RCD.BOL Scheduled Kill Shift is *ALL values
OR RCD.BOL_Scheduled_Kill_Shift = '1'/'2'/'3'/*BLANK;

// OR RCD.BOL Load Number is Entered
OR RCD.BOL_Load_Number <> *ZERO;

// OR RCD.BOL Pln Delv Date is Not EQ Zero
OR RCD.BOL_Pln_Delv_Date <> *ZERO;

// Send error message - 'Buy Order Type Hedge cannot have Load Detail.'
ERROR(PRK1323);
MSGPARM(CTL.BOH_Buy_Order_Type);

ENDIF;

ENDIF;

//?Validate: Delv start time
CASE;

// IF RCD.BOL Pln Delv Start Time is Valid on 24 hr clock
IF RCD.BOL_Pln_Delv_Start_Time <= 2400;

//?Validate: Delv start time
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Delivery start time &1 not valid.'
ERROR(PRK0278);
MSGPARM(RCD.BOL_Pln_Delv_Start_Time);

ENDIF;

//?Default Delivery Date
CASE;

// IF RCD.BOL Pln Delv Date is EQ Zero
IF RCD.BOL_Pln_Delv_Date = *ZERO;

// RCD.BOL Pln Delv Date = CTL.BOH Kill Date
RCD.BOL_Pln_Delv_Date = CTL.BOH_Kill_Date;

ENDIF;

//?Validate Delv date greater than or equal to kill date
CASE;

// IF RCD.BOL Pln Delv Date LE CTL.BOH Kill Date
IF RCD.BOL_Pln_Delv_Date <= CTL.BOH_Kill_Date;

//?Validate Delv date greater than or equal to kill date
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Must be prior/= Kill Date'
ERROR(PRK0242);
MSGPARM(RCD.BOL_Pln_Delv_Date);

ENDIF;

//?Validate the Standard Truck Size
DO;

CASE;

// IF RCD.BOL Pln Head Delv GT CTL.PD Std Truck Size
IF RCD.BOL_Pln_Head_Delv > CTL.PD_Std_Truck_Size;

// Send error message - 'Plan Head cannot be more than the Standard Truck Size.'
ERROR(PRK0247);
MSGPARM(RCD.BOL_Pln_Head_Delv);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDDO;

//?RMC Comment this!  :@   3/2/18
//?CALC: Subfile record function fields

CTL.Head_Total_SUM = SUM(RCD.BOL_Pln_Head_Delv);

//?USER: Validate totals

//?Command 14 comments
CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

// Call program Edt BO Comments       EF.
CALL PROGRAM(Edt BO Comments       EF) ('PKASEFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F15 EDIT PRODUCER SPLITE WAS removed this is a payment function
//?and should not be here
//?USER: Change header DBF record

//?and should not be here
EXECUTE FUNCTION(Chg Buy Order Header  CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1100515;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOH_Buy_Order_Date);
PARAMETER(CTL.BOH_Kill_Date);
PARAMETER(CTL.BOH_Payment_Type);
PARAMETER(CTL.BOH_Buy_Order_Type);
PARAMETER(CTL.BOH_Market_Add_Deduct);
PARAMETER(CTL.BOH_Status);
PARAMETER(CTL.BOH_Delv_Plan_Printed);
PARAMETER(CTL.BOH_Quote_Price_Type);
PARAMETER(CTL.BOH_Quoted_Base_Mkt_Price);
PARAMETER(CTL.BOH_Commodity_Market_Code);
PARAMETER(CTL.BOH_Commodity_Price_Group);
PARAMETER(CTL.BOH_Market_Date_Method);
PARAMETER(CTL.BOH_MPR_Reporting_Date);
PARAMETER(CTL.BOH_Hedge_Date);
PARAMETER(CTL.BOH_Unused_Date_3);
PARAMETER(CTL.BOH_Unused_Date_4);
PARAMETER(CTL.BOH_Unused_Date_5);
PARAMETER(CTL.BOH_Hedge_Head_Total);
PARAMETER(CTL.BOH_Hedge_Reference_BO);
PARAMETER(CTL.BOH_Hedge_Time_hhmm);
PARAMETER(CTL.BOH_Unused_Nbr_4);
PARAMETER(CTL.BOH_Unused_Nbr_5);
PARAMETER(CTL.BOH_Unused_Nbr_6);
PARAMETER(CTL.BOH_Unused_Nbr_7);
PARAMETER(CTL.BOH_Unused_Nbr_8);
PARAMETER(CTL.BOH_Unused_Nbr_9);
PARAMETER(CTL.BOH_Unused_Nbr_10);
PARAMETER(CTL.BOH_MPR_Reporting_Time);
PARAMETER(CTL.BOH_MPR_EST_RPT_STS);
PARAMETER(CTL.BOH_MPR_Purchase_Type);
PARAMETER(CTL.BOH_Status_4);
PARAMETER(CTL.BOH_Status_5);
PARAMETER(CTL.PPWS_Company_Number);
PARAMETER(CTL.CW_Year);
PARAMETER(CTL.CW_Week_Number);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PC_Contract_Code);
PARAMETER(CTL.PSC_Sub_Contract_Code);
PARAMETER(CTL.GN_Genetic_Code);
PARAMETER(CTL.PO_Option_Code);
PARAMETER(CTL.CMP_Program_Code);
PARAMETER(CTL.HB_Buyer_Code);
PARAMETER(CTL.RS_User_Changed);
PARAMETER(CTL.RS_Date_Changed);
PARAMETER(CTL.RS_Time_Changed);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(CTL.RS_Job);
PARAMETER(CTL.RS_Program);
PARAMETER(CTL.RS_User_Added);
PARAMETER(CTL.RS_Date_Added);
PARAMETER(CTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Change detail DBF record

//?and should not be here
EXECUTE FUNCTION(Chg BOL and BOL Ref   CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1332939;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.BOL_Kill_Date);
PARAMETER(RCD.BOL_Pln_Delv_Start_Time);
PARAMETER(RCD.BOL_Pln_Delv_End_Time);
PARAMETER(RCD.BOL_Pln_Head_Delv);
PARAMETER(RCD.BOL_Shipped_Wgt);
PARAMETER(RCD.BOL_Pln_Delv_Date);
PARAMETER(RCD.BOL_Freight_UOM);
PARAMETER(RCD.BOL_Freight_Unit_Amt);
PARAMETER(RCD.BOL_Freight_Amt);
PARAMETER(RCD.BOL_Freight_Allocation);
PARAMETER(RCD.BOL_Head_Received);
PARAMETER(RCD.BOL_Live_Wgt_Received);
PARAMETER(RCD.BOL_Trucker_Payment_Sts);
PARAMETER(RCD.BOL_Trucker_Check_Number);
PARAMETER(RCD.BOL_Trucker_Check_Date);
PARAMETER(RCD.BOL_AP_Voucher);
PARAMETER(RCD.BOL_Trailer);
PARAMETER(RCD.BOL_Freight_Exp_Paid_By);
PARAMETER(RCD.BOL_Scheduled_Kill_Shift);
PARAMETER(RCD.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(RCD.BOL_MPR_Prior_Day_Prch);
PARAMETER(RCD.BOL_Violated_Auth_Tme_Sts);
PARAMETER(RCD.TRK_Trucker_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.BOL_Ref_1);
PARAMETER(RCD.BOL_Ref_2);
PARAMETER(RCD.BOL_Ref_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Crt/Upd BO Load Ref   IF) TYPE(EXCINTFUN)                      AB1331981;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.BOL_Ref_1);
 PARAMETER(PAR.BOL_Ref_2);
 PARAMETER(PAR.BOL_Ref_Status);
 {
  //?Execute internal function

  //?C9426 032217 slm
  //?C9426 use the BOL Referene to store the Ref1,Ref2 and Ref Status
  EXECUTE FUNCTION(Crt/Chg BO Load Ref   RT) TYPE(RTVOBJ) FILE(PWACCPP)           AB1331982;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_Ref_1);
  PARAMETER(PAR.BOL_Ref_2);
  PARAMETER(PAR.BOL_Ref_Status);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Buy Order Load Ref CR) TYPE(CRTOBJ) FILE(PWACCPP)          AB1331978;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.BOL_Ref_1);
   PARAMETER(PAR.BOL_Ref_2);
   PARAMETER(PAR.BOL_Ref_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Buy Order Load Ref CH) TYPE(CHGOBJ) FILE(PWACCPP)          AB1331979;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(PAR.BOL_Ref_1);
   PARAMETER(PAR.BOL_Ref_2);
   PARAMETER(PAR.BOL_Ref_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

}


//?USER: Create detail DBF record

//?and should not be here
EXECUTE FUNCTION(Crt BOL and BOL Ref   IF) TYPE(EXCINTFUN) FILE(PKAXCPP)        AB1332940;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(CTL.BOH_Kill_Date);
PARAMETER(RCD.BOL_Pln_Delv_Start_Time);
PARAMETER(RCD.BOL_Pln_Delv_End_Time);
PARAMETER(RCD.BOL_Pln_Head_Delv);
PARAMETER(RCD.BOL_Shipped_Wgt);
PARAMETER(RCD.BOL_Pln_Delv_Date);
PARAMETER(RCD.BOL_Freight_UOM);
PARAMETER(RCD.BOL_Freight_Unit_Amt);
PARAMETER(RCD.BOL_Freight_Amt);
PARAMETER(RCD.BOL_Freight_Allocation);
PARAMETER(RCD.BOL_Head_Received);
PARAMETER(RCD.BOL_Live_Wgt_Received);
PARAMETER(RCD.BOL_Trucker_Payment_Sts);
PARAMETER(RCD.BOL_Trucker_Check_Number);
PARAMETER(RCD.BOL_Trucker_Check_Date);
PARAMETER(RCD.BOL_AP_Voucher);
PARAMETER(RCD.BOL_Trailer);
PARAMETER(RCD.BOL_Freight_Exp_Paid_By);
PARAMETER(RCD.BOL_Scheduled_Kill_Shift);
PARAMETER(RCD.Reported_to_USDA);
PARAMETER(RCD.BOL_MPR_Prior_Day_Prch);
PARAMETER(RCD.TRK_Trucker_Code);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(CTL.PD_Std_Truck_Size);
PARAMETER(RCD.BOL_Ref_1);
PARAMETER(RCD.BOL_Ref_2);
PARAMETER(RCD.BOL_Ref_Status);
{
 //?Execute internal function

 //?E9426 JBB  4/12/17 Create Buy Order Load Reference record after
 //?                   Buy Order Load record is created.
 //?E3577 RMC 11/7/14 input the mpr prior day purch status
 // WRK.BOL Pln Head Delv = PAR.BOL Pln Head Delv
 WRK.BOL_Pln_Head_Delv = PAR.BOL_Pln_Head_Delv;

 //?If Std truck size is zero, default to Planned head delivered qty
 CASE;

 // IF PAR.PD Std Truck Size EQ WRK.Zero USR
 IF PAR.PD_Std_Truck_Size = WRK.Zero_USR;

 // WRK.PD Std Truck Size = WRK.BOL Pln Head Delv
 WRK.PD_Std_Truck_Size = WRK.BOL_Pln_Head_Delv;

 //?If Std truck size is zero, default to Planned head delivered qty
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.PD Std Truck Size = PAR.PD Std Truck Size
 WRK.PD_Std_Truck_Size = PAR.PD_Std_Truck_Size;

 ENDIF;

 //?Write Load records with planned head not exceeding std truck size
 // DOW WRK.BOL Pln Head Delv GT WRK.Zero USR
 DOW WRK.BOL_Pln_Head_Delv > WRK.Zero_USR;

 // WRK.BOL Pln Head Delv = WRK.BOL Pln Head Delv - WRK.PD Std Truck Size
 WRK.BOL_Pln_Head_Delv = WRK.BOL_Pln_Head_Delv - WRK.PD_Std_Truck_Size;

 CASE;

 // IF WRK.BOL Pln Head Delv LT WRK.Zero USR
 IF WRK.BOL_Pln_Head_Delv < WRK.Zero_USR;

 // WRK.PD Std Truck Size = WRK.PD Std Truck Size + WRK.BOL Pln Head Delv
 WRK.PD_Std_Truck_Size = WRK.PD_Std_Truck_Size + WRK.BOL_Pln_Head_Delv;

 ENDIF;

 EXECUTE FUNCTION(Delete A/P Payment Rgster) TYPE(RTVOBJ) FILE(PKAXCPP)          AA1101124;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 EXECUTE FUNCTION(Crt Buy Order Detail  CR) TYPE(CRTOBJ) FILE(PKAXCPP)           AB1100530;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.BOL_Kill_Date);
 PARAMETER(PAR.BOL_Pln_Delv_Start_Time);
 PARAMETER(PAR.BOL_Pln_Delv_End_Time);
 PARAMETER(WRK.PD_Std_Truck_Size);
 PARAMETER(PAR.BOL_Shipped_Wgt);
 PARAMETER(PAR.BOL_Pln_Delv_Date);
 PARAMETER(PAR.BOL_Freight_UOM);
 PARAMETER(PAR.BOL_Freight_Unit_Amt);
 PARAMETER(PAR.BOL_Freight_Amt);
 PARAMETER(PAR.BOL_Freight_Allocation);
 PARAMETER(PAR.BOL_Head_Received);
 PARAMETER(PAR.BOL_Live_Wgt_Received);
 PARAMETER(PAR.BOL_Trucker_Payment_Sts);
 PARAMETER(PAR.BOL_Trucker_Check_Number);
 PARAMETER(PAR.BOL_Trucker_Check_Date);
 PARAMETER(PAR.BOL_AP_Voucher);
 PARAMETER(PAR.BOL_Trailer);
 PARAMETER(PAR.BOL_Freight_Exp_Paid_By);
 PARAMETER(PAR.BOL_Scheduled_Kill_Shift);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 PARAMETER(PAR.BOL_Shipped_Head);
 PARAMETER(PAR.Reported_to_USDA);
 PARAMETER(PAR.BOL_MPR_Prior_Day_Prch);
 PARAMETER(LCL.BOL_Violated_Auth_Tme_Sts);
 PARAMETER(PAR.BOL_Status_5);
 PARAMETER(PAR.BOL_Status_6);
 PARAMETER(PAR.BOL_Status_7);
 PARAMETER(PAR.BOL_HPS_Movement_Number);
 PARAMETER(PAR.BOL_Head_LFT);
 PARAMETER(PAR.BOL_Head_EUT_KOA);
 PARAMETER(PAR.BOL_Auth_Gate_Entry_Time);
 PARAMETER(PAR.BOL_Head_Received_Market);
 PARAMETER(PAR.BOL_Unused_Wgt_1);
 PARAMETER(PAR.BOL_Unused_Wgt_2);
 PARAMETER(PAR.BOL_Unused_Wgt_3);
 PARAMETER(PAR.BOL_Unused_Wgt_4);
 PARAMETER(PAR.BOL_Unused_Wgt_5);
 PARAMETER(PAR.BOL_Auth_Gate_Entry_Date);
 PARAMETER(PAR.BOL_Unused_Date_2);
 PARAMETER(PAR.BOL_Unused_Date_3);
 PARAMETER(PAR.BOL_Unused_Date_4);
 PARAMETER(PAR.BOL_Unused_Date_5);
 PARAMETER(PAR.TRK_Trucker_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(Crt Buy Order Load Ref CR) TYPE(CRTOBJ) FILE(PWACCPP)          AB1331978;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.BOL_Ref_1);
 PARAMETER(PAR.BOL_Ref_2);
 PARAMETER(PAR.BOL_Ref_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDDO;

}


//?USER: Process detail record

CASE;

// IF WRK.Co Uses HPE & HPS usr is Uses HPS Applications
IF WRK.Co_Uses_HPE_HPS_usr = 'Y';

// IF RCD.*SFLSEL is Select Option 5
IF RCD.*SFLSEL = '5'/'5';

// AND RCD.BOL Head Received is Equals 0
AND RCD.BOL_Head_Received = *ZERO;

// Call program Pmt MoveTimeSltFromBolPV.
CALL PROGRAM(Pmt MoveTimeSltFromBolPV) ('PLOLPVR');
PARAMETER('Edt Buy Order & Load');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.BOL_Kill_Date);
PARAMETER(RCD.BOL_Pln_Delv_Start_Time);
PARAMETER(RCD.BOL_HPS_Movement_Number);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);

ENDIF;

//?USER: Process command keys

RETURN;

