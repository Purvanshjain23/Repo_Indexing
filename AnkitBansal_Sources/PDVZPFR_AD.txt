// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDVZPFR
// ?Date: 14.08.2025 Time: 12:04:40
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?DOC:
//?The production adjustments are applied to schedule for
//?modifying the quantity of an item to be produced for a
//?particular production date.  The adjustments may be positive
//?or negative.
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?USER: Record selection processing

CASE;

// IF DB1.Production Date GT PAR.Production Date RGT
IF DB1.Production_Date > PAR.Production_Date_RGT;

// Execute function Prt End of File 'A'    US.
EXECUTE FUNCTION(Prt End of File 'A'    US) TYPE(EXCUSRSRC) ('USKXUFR');
{
 C                     MOVEL'1'       W0EOFA           END OF FILE
}


ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


MOVE *ALL (To: CUR From: PAR);

// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

// SUPPRESSED PRINT Production Date header format

CASE;

IF NEW Item_Code;
// SUPPRESSED PRINT Item Code header format

ENDIF;

CASE;

IF NEW Warehouse_Code;
// SUPPRESSED PRINT Warehouse Code header format

ENDIF;

CASE;

IF NEW PS_Adjustment_Type;
// SUPPRESSED PRINT PS Adjustment Type header format

ENDIF;

//?USER: Process before print of detail format

EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Item_Type_Code);
PARAMETER(PAR.Default_Warehouse);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Variety_Rendered_Cut);
PARAMETER(PAR.Credit_Item_Status);
PARAMETER(PAR.Std_Weight_Head_Var_Ren);
PARAMETER(PAR.Pieces_Per_Head);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Group_for_Packaging);
PARAMETER(PAR.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Warehouse_Location);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.PS_Item_Id);
{
 //?Execute internal function

 EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.PS_Item_Id);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Item Type Code is Raw Materials
  IF PAR.Item_Type_Code = 'RM';

  // PAR.PS Item Identification = CND.RM Base
  PAR.PS_Item_Id = 'RMB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Seconds Item is Yes
  IF PAR.Seconds_Item = 'Y';

  // PAR.PS Item Identification = CND.FG Seconds
  PAR.PS_Item_Id = 'FSC';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Variety/Rendered/Cut is Variety
  IF PAR.Variety_Rendered_Cut = 'V';

  // PAR.PS Item Identification = CND.FG Variety
  PAR.PS_Item_Id = 'FVR';

  // IF PAR.Variety/Rendered/Cut is Rendered
  IF PAR.Variety_Rendered_Cut = 'R';

  // PAR.PS Item Identification = CND.FG Rendered
  PAR.PS_Item_Id = 'FRD';

  // IF PAR.Variety/Rendered/Cut is Cut
  IF PAR.Variety_Rendered_Cut = 'C';

  //?Base/Converted/Fabricated
  CASE;

  // IF PAR.Credit Item Status is yes
  IF PAR.Credit_Item_Status = 'Y';

  //?Setup Base/Converted/Fabricated Credit
  CASE;

  // IF PAR.Converted/Base Item is Base
  IF PAR.Base_Conv_Loss_Item = 'B';

  // PAR.PS Item Identification = CND.FG Base Credit
  PAR.PS_Item_Id = 'FBC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Converted
  IF PAR.Base_Conv_Loss_Item = 'C';

  // PAR.PS Item Identification = CND.FG Converted Credit
  PAR.PS_Item_Id = 'FCC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Fabricated
  IF PAR.Base_Conv_Loss_Item = 'F';

  // PAR.PS Item Identification = CND.FG Fabricated Credit
  PAR.PS_Item_Id = 'FFC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Loss
  IF PAR.Base_Conv_Loss_Item = 'L';

  // PAR.PS Item Identification = CND.FG Loss Credit
  PAR.PS_Item_Id = 'FLC';

  ENDIF;

  //?Base/Converted/Fabricated
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Setup Base/Converted/Fabricated
  CASE;

  // IF PAR.Converted/Base Item is Base
  IF PAR.Base_Conv_Loss_Item = 'B';

  // PAR.PS Item Identification = CND.FG Base
  PAR.PS_Item_Id = 'FGB';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Converted
  IF PAR.Base_Conv_Loss_Item = 'C';

  // PAR.PS Item Identification = CND.FG Converted
  PAR.PS_Item_Id = 'FCV';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Fabricated
  IF PAR.Base_Conv_Loss_Item = 'F';

  // PAR.PS Item Identification = CND.FG Fabricated
  PAR.PS_Item_Id = 'FFB';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Loss
  IF PAR.Base_Conv_Loss_Item = 'L';

  // PAR.PS Item Identification = CND.FG Loss
  PAR.PS_Item_Id = 'FLS';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


// CUR.Unit Weight = PAR.Unit Weight
CUR.Unit_Weight = PAR.Unit_Weight;

// CUR.Weight Adjust = CUR.PS Adjustment Quantity * CUR.Unit Weight *Rounded
CUR.Weight_Adjust = CUR.PS_Adjustment_Quantity * CUR.Unit_Weight 'H';

//?USER: Process after print of detail format

//?Determine Production Type
CASE;

// IF CUR.Production Date EQ JOB.*Job date
IF CUR.Production_Date = JOB.*Job_date;

// PAR.Production Type = CND.Schedule
PAR.Production_Type = 'S';

EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
PARAMETER(CUR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(CUR.Production_Date);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Set to Plan if record not found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PAR.Production Type = CND.Plan
PAR.Production_Type = 'P';

ENDIF;

//?Determine Production Type
// IF CUR.Production Date GT JOB.*Job date
IF CUR.Production_Date > JOB.*Job_date;

// PAR.Production Type = CND.Plan
PAR.Production_Type = 'P';

ENDIF;

EXECUTE FUNCTION(Rtv AvgPcWgt/Prd/PrdAl RT) TYPE(RTVOBJ) FILE(PDI8CPP)          AC1484812;
PARAMETER(CUR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(PAR.PS_Weight_Production_Need);
PARAMETER(PAR.PS_Pieces_Production_Need);
PARAMETER(WRK.PS_Avg_Piece_Wgt);
PARAMETER(WRK.PS_Weight_Prod_Allocated);
PARAMETER(WRK.PS_Pieces_Prod_Allocated);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // Total Production Weight
 PAR.PS_Weight_Planned_Prod = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Total Production Pieces
 PAR.PS_Pieces_Planned_Prod = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

}


CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// Pieces Prod after delete
PAR.ATS_Pieces_Available_USR = PAR.PS_Pieces_Production_Need + ( (                                 +
CUR.PS_Adjustment_Quantity * PAR.Pieces_Per_Bag ) * PAR.Bags_Per_Unit );

//?If pieces available is GE zero then Process Adjustment
CASE;

// IF PAR.ATS Pieces Available USR is GE Zeros
IF PAR.ATS_Pieces_Available_USR >= *ZERO;

//?* 11/13/01 PDroge Commented out,
// Call program UPD Avail-To-Sell  SCH XF.
CALL PROGRAM(UPD Avail-To-Sell  SCH XF) ('PDTRXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.PS_Adjustment_Quantity);
PARAMETER('SA');
PARAMETER(PAR.Production_Type);
PARAMETER(WRK.Return_Code_ATS_USR);
PARAMETER(CUR.PS_Adjustment_Number);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Weight Prod after delete
PAR.ATS_Weight_Available_USR = PAR.PS_Weight_Production_Need + (                                   +
CUR.PS_Adjustment_Quantity * PAR.Unit_Weight );

//?If weight available is GE zero then Process Adjustment
CASE;

// IF PAR.ATS Weight Available USR is Greater or equal to zero
IF PAR.ATS_Weight_Available_USR >= *ZERO;

//?* 11/13/01 PDroge Commented out,
// Call program UPD Avail-To-Sell  SCH XF.
CALL PROGRAM(UPD Avail-To-Sell  SCH XF) ('PDTRXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.PS_Adjustment_Quantity);
PARAMETER('SA');
PARAMETER(PAR.Production_Type);
PARAMETER(WRK.Return_Code_ATS_USR);
PARAMETER(CUR.PS_Adjustment_Number);

ENDIF;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT PS Adjustment Type totals format

// SUPPRESSED PRINT Warehouse Code totals format

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Production Date totals format

// SUPPRESSED PRINT Accounting Company Number totals format

