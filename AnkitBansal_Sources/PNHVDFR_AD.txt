// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNHVDFR
// ?Date: 14.08.2025 Time: 03:45:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(WRK.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?F8=toggle prior day plan = Y / am schedule = N >default
// PAR.Status Flag 1  Y/N = CND.No
PAR.Status_Flag_1_Y_N = 'N';

//?F10=dsp var <> 0 only
// PAR.Status Flag 10 Y/N = CND.No
PAR.Status_Flag_10_Y_N = 'N';

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

//?***** Change Log and Comments
DO;

//?** 04/27/09  FP1054 new function
ENDDO;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Print On Schedule = CND.yes
CTL.Print_On_Schedule = 'Y';

// PAR.Print On Schedule = CND.yes
PAR.Print_On_Schedule = 'Y';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

SET CURSOR;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(CTL.Warehouse_Desc_DRV);
PARAMETER(CTL.PS_Production_Warehouse);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

// CTL.Text USR 20 = CON.AM Sched
CTL.Text_USR_20 = 'AM Sched';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Text USR 20 = CON.Prior Day
CTL.Text_USR_20 = 'Prior Day';

ENDIF;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(RCD.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Plan Prod Sts     XF.
CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Plan_Production_Sts);

CASE;

// IF LCL.Plan Production Sts is No
IF LCL.Plan_Production_Sts = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Print on Schedule selection
CASE;

// IF CTL.Print On Schedule is yes
IF CTL.Print_On_Schedule = 'Y';

//?If item is marked as print on schedule "N"o then don't display
CASE;

// IF WRK.Print On Schedule is yes
IF WRK.Print_On_Schedule = 'Y';

//?If item is marked as print on schedule "N"o then don't display
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Print on Schedule selection
// IF CTL.Print On Schedule is no
IF CTL.Print_On_Schedule = 'N';

//?If item is marked do not print on schedule select N only
CASE;

// IF WRK.Print On Schedule is no
IF WRK.Print_On_Schedule = 'N';

//?If item is marked do not print on schedule select N only
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Print on Schedule selection
// IF *OTHERWISE
IF *OTHERWISE;

//?Ctl print on schedule is no value,  so do not check
ENDIF;

// Weight Scheduled
RCD.PS_Weight_Sched_Prod = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )                   +
- DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

// Pieces Scheduled
RCD.PS_Pieces_Sched_Prod = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )                   +
- DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

//?Quantity Production
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// Quantity Production
RCD.Scheduled_Quantity = RCD.PS_Pieces_Sched_Prod / ( PAR.Pieces_Per_Bag                           +
* PAR.Bags_Per_Unit );

//?Quantity Production
// IF *OTHERWISE
IF *OTHERWISE;

//?** If unit wt is zeros, set prod schedule to zeros    FP1235
CASE;

// IF PAR.Unit Weight is Not equal zero
IF PAR.Unit_Weight <> *ZERO;

// Quantity Production
RCD.Scheduled_Quantity = RCD.PS_Weight_Sched_Prod / PAR.Unit_Weight;

//?** If unit wt is zeros, set prod schedule to zeros    FP1235
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Scheduled Quantity = CON.*ZERO
RCD.Scheduled_Quantity = *ZERO;

ENDIF;

ENDIF;

//?Retrieve PLANNED production for the day from the "P" rcd OR
//?Retrieve Sched production for the day from the "X" rcd
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

EXECUTE FUNCTION(Rtv Pland Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1932826;
PARAMETER(RCD.Company_Number);
PARAMETER('X');
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.PS_Avg_Piece_Wgt);
PARAMETER(LCL.Weight_Production_USR);
PARAMETER(LCL.Pieces_Production_USR);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Production = Standard + Prod Adj - Converted  - whse txfr
 //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
 CASE;

 // IF DB1.PS Lock Status is NOT LOCKED
 IF DB1.PS_Lock_Status = 'N';

 // Weight Production
 PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Pieces Production
 PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

 // Weight Available
 PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
 + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )                                     +
 - DB1.PS_Weight_Prod_Allocated;

 // Pieces Available
 PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
 + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )                                     +
 - DB1.PS_Pieces_Prod_Allocated;

 //?Weight Avail
 CASE;

 // IF PAR.ATS Weight Available USR is Less than zero
 IF PAR.ATS_Weight_Available_USR < *ZERO;

 // PAR.ATS Weight Available USR = CON.*ZERO
 PAR.ATS_Weight_Available_USR = *ZERO;

 // PAR.ATS Pieces Available USR = CON.*ZERO
 PAR.ATS_Pieces_Available_USR = *ZERO;

 ENDIF;

 // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
 PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Pland Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1932826;
PARAMETER(RCD.Company_Number);
PARAMETER('P');
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.PS_Avg_Piece_Wgt);
PARAMETER(LCL.Weight_Production_USR);
PARAMETER(LCL.Pieces_Production_USR);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Production = Standard + Prod Adj - Converted  - whse txfr
 //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
 CASE;

 // IF DB1.PS Lock Status is NOT LOCKED
 IF DB1.PS_Lock_Status = 'N';

 // Weight Production
 PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Pieces Production
 PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

 // Weight Available
 PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
 + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )                                     +
 - DB1.PS_Weight_Prod_Allocated;

 // Pieces Available
 PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
 + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )                                     +
 - DB1.PS_Pieces_Prod_Allocated;

 //?Weight Avail
 CASE;

 // IF PAR.ATS Weight Available USR is Less than zero
 IF PAR.ATS_Weight_Available_USR < *ZERO;

 // PAR.ATS Weight Available USR = CON.*ZERO
 PAR.ATS_Weight_Available_USR = *ZERO;

 // PAR.ATS Pieces Available USR = CON.*ZERO
 PAR.ATS_Pieces_Available_USR = *ZERO;

 ENDIF;

 // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
 PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

 ENDIF;

}


ENDIF;

// RCD.Weight Sched Prod USR = LCL.Weight Production USR
RCD.Weight_Sched_Prod_USR = LCL.Weight_Production_USR;

//?Quantity Production from PLANNED rcd
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// Quantity Production
RCD.Scheduled_Qty_Usr = LCL.Pieces_Production_USR / ( PAR.Pieces_Per_Bag                           +
* PAR.Bags_Per_Unit 'H' );

//?Quantity Production from PLANNED rcd
// IF *OTHERWISE
IF *OTHERWISE;

//?** If unit wt is zeros, set prod schedule to zeros    FP1235
CASE;

// IF PAR.Unit Weight is Not equal zero
IF PAR.Unit_Weight <> *ZERO;

// Quantity Production
RCD.Scheduled_Qty_Usr = LCL.Weight_Production_USR / PAR.Unit_Weight;

//?** If unit wt is zeros, set prod schedule to zeros    FP1235
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Scheduled Qty Usr = CON.*ZERO
RCD.Scheduled_Qty_Usr = *ZERO;

ENDIF;

ENDIF;

// RCD.Weight 9.2 USR = RCD.PS Weight Sched Prod - RCD.Weight Sched Prod USR
RCD.Weight_9_2_USR = RCD.PS_Weight_Sched_Prod - RCD.Weight_Sched_Prod_USR;

// RCD.Quantity 7.0 USR = RCD.Scheduled Quantity - RCD.Scheduled Qty Usr
RCD.Quantity_7_0_USR = RCD.Scheduled_Quantity - RCD.Scheduled_Qty_Usr;

//?Select only records something sched
CASE;

// IF RCD.Scheduled Qty Usr is NE Zero
IF RCD.Scheduled_Qty_Usr <> *ZERO;

// OR RCD.Scheduled Quantity is NE Zero
OR RCD.Scheduled_Quantity <> *ZERO;

//?Select only records something sched
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.Status Flag 10 Y/N is Yes
IF PAR.Status_Flag_10_Y_N = 'Y';

//?Select only records w/variance <> 0
CASE;

// IF RCD.Quantity 7.0 USR is NE Zero
IF RCD.Quantity_7_0_USR <> *ZERO;

//?Select only records w/variance <> 0
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?Print List
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Production Items');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

//?Submit Print
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Submit Print
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Prod Date Alpha USR = CVTVAR(CTL.Production Date)
PAR.Prod_Date_Alpha_USR = CVTVAR(CTL.Production_Date);

// Execute command - 'PS Print Schedule Variance'
EXECUTE COMMAND(USR4150);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(CTL.Production_Type);
PARAMETER(PAR.Prod_Date_Alpha_USR);
PARAMETER('PRTSCHVAR');
PARAMETER(CTL.PS_Production_Warehouse);
PARAMETER(PAR.Status_Flag_10_Y_N);
PARAMETER(CTL.Print_On_Schedule);
PARAMETER(PAR.Status_Flag_1_Y_N);

ENDIF;

ENDIF;

//?Display "X" sched or "P" rcds
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

CASE;

// IF PAR.Status Flag 1  Y/N is Yes
IF PAR.Status_Flag_1_Y_N = 'Y';

// PAR.Status Flag 1  Y/N = CND.No
PAR.Status_Flag_1_Y_N = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Status Flag 1  Y/N = CND.Yes
PAR.Status_Flag_1_Y_N = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Display var<> 0 only
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF PAR.Status Flag 10 Y/N is Yes
IF PAR.Status_Flag_10_Y_N = 'Y';

// PAR.Status Flag 10 Y/N = CND.No
PAR.Status_Flag_10_Y_N = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Status Flag 10 Y/N = CND.Yes
PAR.Status_Flag_10_Y_N = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Print On Schedule NE PAR.Print On Schedule
IF CTL.Print_On_Schedule <> PAR.Print_On_Schedule;

// PAR.Print On Schedule = CTL.Print On Schedule
PAR.Print_On_Schedule = CTL.Print_On_Schedule;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

EXECUTE FUNCTION(Rtv First Consumed Itm RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1559427;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER('C');
PARAMETER(LCL.Component_Item_Code);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.Description_Line_Two);
 PARAMETER(WRK.UOM_Primary);
 PARAMETER(WRK.Conversion_Factor_1);
 PARAMETER(WRK.Operation_Factor_1);
 PARAMETER(WRK.UOM_Second);
 PARAMETER(WRK.Conversion_Factor_2);
 PARAMETER(WRK.Operation_Factor_2);
 PARAMETER(WRK.UOM_Third);
 PARAMETER(WRK.UOM_Pricing);
 PARAMETER(WRK.Unit_Weight);
 PARAMETER(WRK.Production_Date_Control);
 PARAMETER(WRK.Catch_Weight_Status);
 PARAMETER(WRK.Fresh_Chilling_Time);
 PARAMETER(LCL.Base_Conv_Loss_Item);
 PARAMETER(WRK.Piece_Count_Item);
 PARAMETER(WRK.Pieces_Per_Bag);
 PARAMETER(WRK.Bags_Per_Unit);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Processing if Data record not found

 // PAR.Component Item Code = PAR.Item Code
 PAR.Component_Item_Code = PAR.Item_Code;

 //?USER: Process Data record

 CASE;

 // IF DB1.Consume Priority is NE Zero
 IF DB1.Consume_Priority <> *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 CASE;

 // IF LCL.Base/Conv/Loss Item is Base
 IF LCL.Base_Conv_Loss_Item = 'B';

 // PAR.Component Item Code = DB1.Item Code
 PAR.Component_Item_Code = DB1.Item_Code;

 ENDIF;

 QUIT;

 ENDIF;

}


// Call program WW OrdPrdSch Edit     DF.
CALL PROGRAM(WW OrdPrdSch Edit     DF) ('POQJDFR');
PARAMETER(LCL.Component_Item_Code);
PARAMETER(CTL.PS_Production_Warehouse);
PARAMETER(RCD.Item_Code);
PARAMETER('whatever');

ENDIF;

