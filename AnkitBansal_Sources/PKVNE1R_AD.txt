// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKVNE1R
// ?Date: 14.08.2025 Time: 02:50:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?01/23/2021 ISE H16853 - Increased the length from 5 to 7 and
//?                        corrected the alignment of Buy Order Number field
//?USER: Initialize detail screen (existing record)

// DTL.Shift Description USR = Condition name of DB1.LTN Shift
DTL.Shift_Description_USR = RTVCND(DB1.LTN_Shift);

// DTL.Error Status Desc Usr = Condition name of DB1.LTN Error Sts
DTL.Error_Status_Desc_Usr = RTVCND(DB1.LTN_Error_Sts);

// DTL.Record Crtd Sts Desc USR = Condition name of DB1.LTN Record Created Status
DTL.Record_Crtd_Sts_Desc_USR = RTVCND(DB1.LTN_Record_Created_Status);

EXECUTE FUNCTION(Rtv Loss Type Desc    RT) TYPE(RTVOBJ) FILE(PKBPREP)           AB1125227;
PARAMETER(DB1.LT_Type_Code);
PARAMETER(DTL.LT_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Name 1 USR = Condition name of DB1.LTN Extent
DTL.Condition_Name_1_USR = RTVCND(DB1.LTN_Extent);

// DTL.Condition Name 2 USR = Condition name of DB1.LTN Trim Location
DTL.Condition_Name_2_USR = RTVCND(DB1.LTN_Trim_Location);

// DTL.Record Status Desc Usr = Condition name of DB1.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DB1.RS_Record_Status);

// Call program Val Loss Trans        XF.
CALL PROGRAM(Val Loss Trans        XF) ('PKPJXFR');
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(DTL.LTN_Kill_Date);
PARAMETER(DTL.LTN_Record_Number);
PARAMETER(DTL.LTN_Tattoo_Number);
PARAMETER(DTL.LTN_Shift);
PARAMETER(DTL.LTN_Wgt);
PARAMETER(DTL.LTN_Extent);
PARAMETER(DTL.LTN_Trim_Location);
PARAMETER(DTL.LTN_Error_Sts);
PARAMETER(DTL.LTN_Record_Created_Status);
PARAMETER(DTL.LTN_User_Error_Override);
PARAMETER(DTL.LTN_Source_Type);
PARAMETER(DTL.LT_Type_Code);
PARAMETER(DTL.LR_Reason_Code);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.RU_Date);
PARAMETER(DTL.RU_Time);
PARAMETER(WRK.TH_Head_Condemned);
PARAMETER(WRK.Loss_Error_1_Usr);
PARAMETER(WRK.Loss_Error_2_Usr);
PARAMETER(WRK.Loss_Error_3_Usr);
PARAMETER(WRK.Loss_Error_4_Usr);
PARAMETER(WRK.Loss_Error_5_Usr);
PARAMETER(WRK.TH_Detail_Error_Sts);

//?USER: Validate detail screen fields

// DTL.Shift Description USR = Condition name of DTL.LTN Shift
DTL.Shift_Description_USR = RTVCND(DTL.LTN_Shift);

// DTL.Error Status Desc Usr = Condition name of DTL.LTN Error Sts
DTL.Error_Status_Desc_Usr = RTVCND(DTL.LTN_Error_Sts);

// DTL.Record Crtd Sts Desc USR = Condition name of DTL.LTN Record Created Status
DTL.Record_Crtd_Sts_Desc_USR = RTVCND(DTL.LTN_Record_Created_Status);

EXECUTE FUNCTION(Rtv Loss Type Desc    RT) TYPE(RTVOBJ) FILE(PKBPREP)           AB1125227;
PARAMETER(DB1.LT_Type_Code);
PARAMETER(DTL.LT_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Name 1 USR = Condition name of DTL.LTN Extent
DTL.Condition_Name_1_USR = RTVCND(DTL.LTN_Extent);

// DTL.Condition Name 2 USR = Condition name of DTL.LTN Trim Location
DTL.Condition_Name_2_USR = RTVCND(DTL.LTN_Trim_Location);

// DTL.Record Status Desc Usr = Condition name of DTL.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

//?USER: Validate detail screen relations

// WRK.Return Code USR = CND.*Normal
WRK.Return_Code_USR = *BLANK;

EXECUTE FUNCTION(Rtv Tatts Info        RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1212126;
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.LTN_Tattoo_Number);
PARAMETER(DTL.LTN_Kill_Date);
PARAMETER(WRK.TH_Sex);
PARAMETER(DTL.LTN_Source_Type);
PARAMETER(WRK.TH_Hog_Class_Type);
PARAMETER(WRK.THP_Process_Code);
PARAMETER(WRK.HC_Class_Code);
PARAMETER(WRK.Return_Code_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Return Code USR is *Normal
IF WRK.Return_Code_USR = *BLANK;

// Call program Val Loss Trans        XF.
CALL PROGRAM(Val Loss Trans        XF) ('PKPJXFR');
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(DTL.LTN_Kill_Date);
PARAMETER(DTL.LTN_Record_Number);
PARAMETER(DTL.LTN_Tattoo_Number);
PARAMETER(DTL.LTN_Shift);
PARAMETER(DTL.LTN_Wgt);
PARAMETER(DTL.LTN_Extent);
PARAMETER(DTL.LTN_Trim_Location);
PARAMETER(DTL.LTN_Error_Sts);
PARAMETER(DTL.LTN_Record_Created_Status);
PARAMETER(DTL.LTN_User_Error_Override);
PARAMETER(DTL.LTN_Source_Type);
PARAMETER(DTL.LT_Type_Code);
PARAMETER(DTL.LR_Reason_Code);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.RU_Date);
PARAMETER(DTL.RU_Time);
PARAMETER(WRK.TH_Head_Condemned);
PARAMETER(WRK.Loss_Error_1_Usr);
PARAMETER(WRK.Loss_Error_2_Usr);
PARAMETER(WRK.Loss_Error_3_Usr);
PARAMETER(WRK.Loss_Error_4_Usr);
PARAMETER(WRK.Loss_Error_5_Usr);
PARAMETER(WRK.TH_Detail_Error_Sts);

//?Send message for correct error
CASE;

// IF WRK.Loss Error 1 Usr is Failed
IF WRK.Loss_Error_1_Usr = 'F';

// Send error message - 'Weight is Required'
ERROR(PRK0362);
MSGPARM(DTL.LTN_Wgt);

//?Send message for correct error
// IF WRK.Loss Error 2 Usr is Failed
IF WRK.Loss_Error_2_Usr = 'F';

// Send error message - 'Loss Extent is required, or invalid'
ERROR(PRK0363);
MSGPARM(DTL.LTN_Extent);

//?Send message for correct error
// IF WRK.Loss Error 3 Usr is Failed
IF WRK.Loss_Error_3_Usr = 'F';

// Send error message - 'Reason is Required'
ERROR(PRK0364);
MSGPARM(DTL.LR_Reason_Code);

//?Send message for correct error
// IF WRK.Loss Error 4 Usr is Failed
IF WRK.Loss_Error_4_Usr = 'F';

// Send error message - 'Loss Type is required'
ERROR(PRK0365);
MSGPARM(DTL.LT_Type_Code);

//?Send message for correct error
// IF WRK.Loss Error 5 Usr is Failed
IF WRK.Loss_Error_5_Usr = 'F';

// Send error message - 'Trim Location is required, invalid'
ERROR(PRK0508);
MSGPARM(DTL.LTN_Trim_Location);

ENDIF;

CASE;

// IF WRK.TH Hog Class Type is Resale
IF WRK.TH_Hog_Class_Type = 'R';

// Send error message - 'Tattoo is resale'
ERROR(PRK0468);
MSGPARM(DTL.LTN_Tattoo_Number);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Number Not Found'
ERROR(PRK0368);
MSGPARM(DTL.LTN_Tattoo_Number);

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Loss Transaction  CH) TYPE(CHGOBJ) FILE(PKBSCPP)           AB1102906;
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(DTL.LTN_Kill_Date);
PARAMETER(DTL.LTN_Record_Number);
PARAMETER(DTL.LTN_Tattoo_Number);
PARAMETER(DTL.LTN_Shift);
PARAMETER(DTL.LTN_Wgt);
PARAMETER(DTL.LTN_Extent);
PARAMETER(DTL.LTN_Trim_Location);
PARAMETER(DTL.LTN_Error_Sts);
PARAMETER(DTL.LTN_Record_Created_Status);
PARAMETER(DTL.LTN_User_Error_Override);
PARAMETER(DTL.LTN_Source_Type);
PARAMETER(DTL.LT_Type_Code);
PARAMETER(DTL.LR_Reason_Code);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.RU_Date);
PARAMETER(DTL.RU_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Head Condemn      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227599;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Head Condemned    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1227600;
  PARAMETER(02);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.TH Head Condemned = PAR.TH Head Condemned + CON.1
   PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + 1;

  }

  EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1227604;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER('E');
  {
   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1227617;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TH_Head_Condemned);
   {
    //?USER: Process Data record

    // LCL.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
    LCL.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

    // Call program Rtv Stress Pens Only  XF.
    CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(LCL.Stress_Market_Type);

    //?Stress pen is now defined at the pen ext instead of ST1
    CASE;

    // IF LCL.Stress/Market Type is Stress
    IF LCL.Stress_Market_Type = 'S';

    // IF LCL.Net Head Usr is *Zeros
    IF LCL.Net_Head_Usr = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKDYCPP)           AB1227618;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(DB1.TD_Sequence_Number);
    PARAMETER(PAR.TH_Head_Condemned);
    {
     //?USER: Processing if Data record not found

     EXECUTE FUNCTION(Crt Tattoo Detail Ext  CR) TYPE(CRTOBJ) FILE(PKDYCPP)          AB1196901;
     PARAMETER(PAR.BOH_Company_Number);
     PARAMETER(PAR.BOH_Buy_Order_Number);
     PARAMETER(PAR.BOL_Load_Number);
     PARAMETER(PAR.TH_Tattoo_Number);
     PARAMETER(PAR.TH_Kill_Date);
     PARAMETER(PAR.TD_Sequence_Number);
     PARAMETER('N');
     PARAMETER(*ZERO);
     PARAMETER(PAR.TDE_Head_Condemned);
     PARAMETER(*ZERO);
     PARAMETER('N');
     PARAMETER('N');
     PARAMETER(PAR.RS_User_Changed);
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);
     PARAMETER(PAR.RS_Record_Status);
     PARAMETER(PAR.RS_Job);
     PARAMETER(PAR.RS_Program);
     PARAMETER(PAR.RS_User_Added);
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
      PARAMETER(DB1.RS_Record_Status);
      PARAMETER(DB1.RS_Job);
      PARAMETER(DB1.RS_Program);
      PARAMETER(DB1.RS_User_Added);
      PARAMETER(DB1.RS_Date_Added);
      PARAMETER(DB1.RS_Time_Added);
      {
       //?Execute internal function

       // PAR.RS Record Status = CND.Active
       PAR.RS_Record_Status = 'A';

       // PAR.RS User Added = JOB.*USER
       PAR.RS_User_Added = JOB.*USER;

       // PAR.RS Date Added = JOB.*Job date
       PAR.RS_Date_Added = JOB.*Job_date;

       // PAR.RS Time Added = JOB.*Job time
       PAR.RS_Time_Added = JOB.*Job_time;

       // PAR.RS Program = JOB.*PROGRAM
       PAR.RS_Program = JOB.*PROGRAM;

       // PAR.RS Job = JOB.*JOB
       PAR.RS_Job = JOB.*JOB;

      }

     }

     //?USER: Process Data record

     EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKDYCPP)           AB1227625;
     PARAMETER(DB1.BOH_Company_Number);
     PARAMETER(DB1.BOH_Buy_Order_Number);
     PARAMETER(DB1.BOL_Load_Number);
     PARAMETER(DB1.TH_Tattoo_Number);
     PARAMETER(DB1.TH_Kill_Date);
     PARAMETER(DB1.TD_Sequence_Number);
     PARAMETER(PAR.TDE_Head_Condemned);
    }

    QUIT;

    ENDIF;

   }

  }

 }

}


