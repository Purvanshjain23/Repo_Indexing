// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDRTPFR
// ?Date: 14.08.2025 Time: 12:04:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

//?Select A/R Header Types
CASE;

// IF DB1.Invoice Suffix is All Except Invoices-A/R
IF ( DB1.Invoice_Suffix = 'CB'/'CM'/'DM'/'OA'/'RB';

// AND PAR.Invoice Suffix EQ WRK.Blank for 4           USR
AND PAR.Invoice_Suffix = WRK.Blank_for_4_USR );

// OR PAR.Invoice Suffix EQ DB1.Invoice Suffix
OR PAR.Invoice_Suffix = DB1.Invoice_Suffix;

CASE;

// IF DB1.Remaining Balance Due is not equal to zeros
IF DB1.Remaining_Balance_Due <> *ZERO;

// PAR.USR Adjustment Amount 1 = CND.equal to zero
PAR.USR_Adjustment_Amount_1 = *ZERO;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Invoice Suffix is CM or OA
IF DB1.Invoice_Suffix = 'CM'/'OA';

// PAR.USR Remaining Balance = PAR.USR Adjustment Amount 1 - DB1.Remaining Balance
PAR.USR_Remaining_Balance = PAR.USR_Adjustment_Amount_1 - DB1.Remaining_Balance_Due;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Remaining Balance = DB1.Remaining Balance Due
PAR.USR_Remaining_Balance = DB1.Remaining_Balance_Due;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select A/R Header Types
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Invoice Suffix = PAR.Invoice Suffix
X1PG_Invoice_Suffix = PAR.Invoice_Suffix;

CASE;

// IF 1PG.Invoice Suffix NE WRK.Blank for 4           USR
IF X1PG_Invoice_Suffix <> WRK.Blank_for_4_USR;

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Invoice Suffix
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Invoice_Suffix);

// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 1  USR = CON.ALL
X1PG_Condition_Desc_1_USR = 'ALL';

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Salesperson_Code;
EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(CUR.Salesperson_Code);
PARAMETER(CUR.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Salesperson Code header format
PRINT Salesperson Code header format;

ENDIF;

CASE;

IF NEW AR_Customer_Number;
// Print A/R Customer Number header format
PRINT A/R Customer Number header format;

ENDIF;

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR Aging date - 1 = CUR.Due Date + CON.30 *DAYS
PAR.USR_Aging_date_1 = DATEINCR(CUR.Due_Date 30 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Aging date - 2 = CUR.Due Date + CON.60 *DAYS
PAR.USR_Aging_date_2 = DATEINCR(CUR.Due_Date 60 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Aging date - 3 = CUR.Due Date + CON.90 *DAYS
PAR.USR_Aging_date_3 = DATEINCR(CUR.Due_Date 90 'DY' 1111111 'NONE' 'N' 1);

//?Less Than 30
CASE;

// IF JOB.*Job date LT PAR.USR Aging date - 1
IF JOB.*Job_date < PAR.USR_Aging_date_1;

// CUR.USR Age Current = PAR.USR Remaining Balance + CUR.USR Age Current
CUR.USR_Age_Current = PAR.USR_Remaining_Balance + CUR.USR_Age_Current;

ENDIF;

//?30 - 60 past due field
CASE;

// IF JOB.*Job date GE PAR.USR Aging date - 1
IF JOB.*Job_date >= PAR.USR_Aging_date_1;

// AND JOB.*Job date LT PAR.USR Aging date - 2
AND JOB.*Job_date < PAR.USR_Aging_date_2;

// CUR.USR Past Due 30-60 = PAR.USR Remaining Balance + CUR.USR Past Due 30-60
CUR.USR_Past_Due_30_60 = PAR.USR_Remaining_Balance + CUR.USR_Past_Due_30_60;

ENDIF;

//?60 - 90 Past Due
CASE;

// IF JOB.*Job date GE PAR.USR Aging date - 2
IF JOB.*Job_date >= PAR.USR_Aging_date_2;

// AND JOB.*Job date LT PAR.USR Aging date - 3
AND JOB.*Job_date < PAR.USR_Aging_date_3;

// CUR.USR Past Due 60 -90 = PAR.USR Remaining Balance + CUR.USR Past Due 60 -90
CUR.USR_Past_Due_60_90 = PAR.USR_Remaining_Balance + CUR.USR_Past_Due_60_90;

ENDIF;

//?Over 90 days past due
CASE;

// IF JOB.*Job date GE PAR.USR Aging date - 3
IF JOB.*Job_date >= PAR.USR_Aging_date_3;

// CUR.USR Past Due Over 90 = PAR.USR Remaining Balance + CUR.USR Past Due Over 90
CUR.USR_Past_Due_Over_90 = PAR.USR_Remaining_Balance + CUR.USR_Past_Due_Over_90;

ENDIF;

//?USER: Process after print of detail format

// NXT.USR Cust Tot. Less 30 = CUR.USR Age Current + NXT.USR Cust Tot. Less 30
NXT.USR_Cust_Tot_Less_30 = CUR.USR_Age_Current + NXT.USR_Cust_Tot_Less_30;

// NXT.USR Cust Tot. 30 -60 = CUR.USR Past Due 30-60 + NXT.USR Cust Tot. 30 -60
NXT.USR_Cust_Tot_30_60 = CUR.USR_Past_Due_30_60 + NXT.USR_Cust_Tot_30_60;

// NXT.USR Cust Tot. 60 90 = CUR.USR Past Due 60 -90 + NXT.USR Cust Tot. 60 90
NXT.USR_Cust_Tot_60_90 = CUR.USR_Past_Due_60_90 + NXT.USR_Cust_Tot_60_90;

// NXT.USR Cust Tot. Over 90 = CUR.USR Past Due Over 90 + NXT.USR Cust Tot. Over 90
NXT.USR_Cust_Tot_Over_90 = CUR.USR_Past_Due_Over_90 + NXT.USR_Cust_Tot_Over_90;

//?USER: Print required level totals

CASE;

IF NEW AR_Customer_Number;
// NXT.USR Slsm Less 30 = CUR.USR Cust Tot. Less 30 + NXT.USR Slsm Less 30
NXT.USR_Slsm_Less_30 = CUR.USR_Cust_Tot_Less_30 + NXT.USR_Slsm_Less_30;

// NXT.USR Slsm 30 -60 = CUR.USR Cust Tot. 30 -60 + NXT.USR Slsm 30 -60
NXT.USR_Slsm_30_60 = CUR.USR_Cust_Tot_30_60 + NXT.USR_Slsm_30_60;

// NXT.USR Slsm 60 - 90 = CUR.USR Cust Tot. 60 90 + NXT.USR Slsm 60 - 90
NXT.USR_Slsm_60_90 = CUR.USR_Cust_Tot_60_90 + NXT.USR_Slsm_60_90;

// NXT.USR Slsm Over 90 = CUR.USR Cust Tot. Over 90 + NXT.USR Slsm Over 90
NXT.USR_Slsm_Over_90 = CUR.USR_Cust_Tot_Over_90 + NXT.USR_Slsm_Over_90;

// Print A/R Customer Number totals format
PRINT A/R Customer Number totals format;

ENDIF;

CASE;

IF NEW Salesperson_Code;
// NXT.USR Total Less Than 30 = CUR.USR Slsm Less 30 + NXT.USR Total Less Than 30
NXT.USR_Total_Less_Than_30 = CUR.USR_Slsm_Less_30 + NXT.USR_Total_Less_Than_30;

// NXT.USR Total 30-60 = CUR.USR Slsm 30 -60 + NXT.USR Total 30-60
NXT.USR_Total_30_60 = CUR.USR_Slsm_30_60 + NXT.USR_Total_30_60;

// NXT.USR Total 60 90 = CUR.USR Slsm 60 - 90 + NXT.USR Total 60 90
NXT.USR_Total_60_90 = CUR.USR_Slsm_60_90 + NXT.USR_Total_60_90;

// NXT.USR Total Over 90 = CUR.USR Slsm Over 90 + NXT.USR Total Over 90
NXT.USR_Total_Over_90 = CUR.USR_Slsm_Over_90 + NXT.USR_Total_Over_90;

// Print Salesperson Code totals format
PRINT Salesperson Code totals format;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

