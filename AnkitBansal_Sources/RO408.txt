      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO408
      * TITLE:       Work with Meat Cost
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     02/13/07
      *
      * FUNCTION: This is a Work With that displays the records in the Item Meat Cost
      *           file.
      *
      *           We created this Work With to allow, basically, an on-line view of
      *           the file data.  There is no create, delete, revise functionality
      *           in this Work With.
      *
      *           Restrictors:
      *               None
      *
      *           Positioners:
      *               Company
      *
      *           Selectors:
      *               Week-ending date (descending)
      *               Primal group code
      *               Production line code
      *               Item code
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/11/07  LeAnne Ramsey
      *           Recompile only. Added "produced" values to Meat Cost file.
      *
      * 11/02/07  LeAnne Ramsey
      *           Recompile only. Added "sales yield" to Item Meat Cost file.
      *
      * 11/05/07  LeAnne Ramsey
      *           Added new subfile options:
      *              6=Print Meat Cost Report
      *             15=View Ham Group Yield Breakdown
      *           Moved Item Code to be the first field in the subfile (the subfile
      *           is sorted by Company/WeekEnding Date/Item.)
      *
      * 01/03/08  LeAnne Ramsey
      *           Added new subfile options:
      *             16=Print Ham Group Yield Breakdown
      *           Added logic to retrieve user's default output queue.
      *
      * 11/21/08  LeAnne Ramsey
      *           As part of synchronizing the LDAs between the TFS Margin Adjustment Close
      *           and the Meat Costing, we changed the LDA positions.
      *           Also, replaced RO408CL on the SUBMIT with RO413CL.  All RO408CL did was
      *           call RO413CL.  It was too confusing...
      *
      * 05/12/09  LeAnne Ramsey
      *           Added 'out LDA' in the Initialization Subroutine.
      *
      * 06/17/09  LeAnne Ramsey
      *           Recompile only. Three fields were added to ROP103-Item Meat Cost:
      *               TF Classification Code, TF Class Group Code, Item Structure Type Code
      /EJECT
      ****************************************************************
      * FILE SPECIFICATION
      ****************************************************************
      *
     Frod408    cf   e             workstn sfile(ro408s1:hdrrn1)
     F                                     infds(iofeed)
      *
     Fombyrel1  if   e           k disk
      *  Item default
      *
      *
     Fpdllrel1  if   e           k disk
      *   Primal group
      *
      *
     frol103c   if   e           k disk
      *  Item meat cost
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2
     D svrrn1          s                   like(hdrrn1)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Save fields for restrictors, positioners and selectors
      *
     D svwemdy         s                   like(c1wemdy)
     D svcono          s                   like(c1cono)
     D svpgcd          s                   like(c1pgcd)
     D svplcd          s                   like(c1plcd)
     D svitcd          s                   like(c1itcd)
      *
      *
      * Parm fields
      *
     D xxpgcd          s                   like(d1pgcd)
     D xxpgds          s             30
     D xxcono          s                   like(d1cono)
     D xxwemdy         s                   like(d1wemdy)
     D xxwedt          s                   like(hdwedt)
     D xxitcd          s                   like(d1itcd)
     D xxitds          s                   like(d1itds)
     D xxplcd          s                   like(d1plcd)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
     D wkwedt          s                   like(imwedt)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('ROMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldpfcd                 1      1
      *
     D  ldwedt                29     36  0
     D  ldwemdy               44     49  0
      *
     D  ldcono                82     84  0
     D  ldrpfl               113    113
     D  lddsfl               135    135
      *
     D  lditcd               222    228  0
     D  lditds               229    258
     D  ldpgcd               259    264
     D  ldpgds               265    294
     D  ldplcd               299    304
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     ro408k1
     C                   write     ro408ec
     C                   exfmt     ro408c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      '03'          rtncd
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   eval      routne = scrn1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in07 = *on                                  F07-Report
     C                   call      'RO413'
     C                   parm      c1cono        xxcono
     C                   parm      c1wemdy       xxwemdy
     C                   parm      c1itcd        xxitcd
     C                   parm      c1pgcd        xxpgcd
     C                   parm      c1plcd        xxplcd
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svwemdy <> c1wemdy or                         Selections
     C                             svcono  <> c1cono  or
     C                             svpgcd  <> c1pgcd  or
     C                             svplcd  <> c1plcd  or
     C                             svitcd  <> c1itcd
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   z-add     c1cono        svcono
     C                   move      c1pgcd        svpgcd
     C                   move      c1plcd        svplcd
     C                   z-add     c1itcd        svitcd
      *
     C                   z-add     c1wemdy       svwemdy
      *
      * Flip date selector from mmddyy to ccyymmdd format
      *
     C     *mdy          test(d)                 c1wemdy                92
     C                   if        *in92 = *on                                  If bad date
     C                   z-add     0             wkwedt
     C                   else
     C     *mdy          move      c1wemdy       wkisodate
     C                   move      wkisodate     wkwedt
     C                   endif                                                  If bad date
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   ro408s1
     C                   seton                                        83        sflclr
     C                   write     ro408c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     c1cono        setll     rol103c
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      rol103c                                82
     C                   if        *in82 = *off                                 If read
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1wemdy <> 0 and                             If date
     C                             wkwedt <> imwedt
     C                   else
      *
     C                   if        c1pgcd <> *blank and                         If primal
     C                             c1pgcd <> impgcd
     C                   else
      *
     C                   if        c1plcd <> *blank and                         If line
     C                             c1plcd <> implcd
     C                   else
      *
     C                   if        c1itcd <> 0 and                              If item
     C                             c1itcd <> imitcd
     C                   else
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      *blank        d1opt
     C                   z-add     imcono        d1cono
     C                   move      impgcd        d1pgcd
     C                   move      implcd        d1plcd
     C                   z-add     imitcd        d1itcd
     C                   z-add     imymco        d1ymco
     C                   z-add     imbspr        d1bspr
     C                   z-add     imcrvl        d1crvl
     C                   move      imbids        d1bids
      *
      * Retrieve Item Description
      *
     C     imitcd        chain     ombyrel1                           92
     C                   if        *in92 = *off
     C                   eval      d1itds = byavna
     C                   else
     C                   eval      d1itds = 'Unknown'
     C                   endif
      *
      *
      * Week-ending date
      *
     C     *iso          test(d)                 imwedt                 92
     C                   if        *in92 = *off
     C                   move      imwedt        wkisodate
     C     *mdy          move      wkisodate     d1wemdy
     C                   z-add     imwedt        hdwedt
     C                   else
     C                   z-add     0             d1wemdy
     C                   z-add     0             hdwedt
     C                   endif
      *
     C                   write     ro408s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If item
     C                   endif                                                  If line
     C                   endif                                                  If primal
     C                   endif                                                  If date
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------
      * Read and edit changed subfile records for valid subfile options on Screen 1
      *-------------------------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   z-add     0             error
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     ro408s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 5' and                            If bad opt
     C                             d1opt <> ' 6' and
     C                             d1opt <> '15' and
     C                             d1opt <> '16' and
     C                             d1opt <> '  '
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09006'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If bad opt
      *
      * Rewrite the subfile record with the modified data tag on so it
      * will be reread and processed.
      *
     C                   if        error = 0 and d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif
      *
     C                   update    ro408s1
     C                   setoff                                       8530
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Read subfile records and process user selections for Screen 1
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   z-add     0             error
     C                   movel     '00'          rtncd
      *
      * Read all the changed subfile records processing the subfile
      * selection
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     ro408s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        rtncd = '00'                                 If enter
      *
     C                   select
      *
      * View Component Items
     C                   when      d1opt = ' 5'
     C                   movel     yes           reset
     C                   call      'RO708'
     C                   parm      d1cono        xxcono
     C                   parm      d1wemdy       xxwemdy
     C                   parm      hdwedt        xxwedt
     C                   parm      d1itcd        xxitcd
     C                   parm                    rtncd
      *
      * Print Meat Cost Report
     C                   when      d1opt = ' 6'
     C                   move      'M'           ldrpfl
     C                   movea     'MEATCOST'    cmd(36)
     C                   movel     yes           reset
     C                   exsr      $list
      *
      * View Ham Group Yield Breakdown
      *
     C                   when      d1opt = '15'
     C                   movel     yes           reset
     C                   call      'RO711'
     C                   parm      d1cono        xxcono
     C                   parm      hdwedt        xxwedt
     C                   parm      d1itcd        xxitcd
     C                   parm                    rtncd
      *
      * Print Ham Group Yield Breakdown
     C                   when      d1opt = '16'
     C                   move      'H'           ldrpfl
     C                   movea     'HAMYIELD'    cmd(36)
     C                   movel     yes           reset
     C                   exsr      $list
     C                   endsl
      *
      * Upon returning from the called program,
      * clear the subfile option selected by the user and rewrite
      * the subfile record.
      *
     C                   move      *blank        d1opt
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    ro408s1
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Print Meat Cost Report for selected Item
      *---------------------------------------------------------------
      *
     C     $list         begsr
      *
     C                   move      'D'           ldpfcd
     C                   move      'D'           lddsfl
      *
     C                   z-add     d1cono        ldcono
     C                   z-add     d1wemdy       ldwemdy
     C                   z-add     hdwedt        ldwedt
      *
     C                   move      d1plcd        ldplcd
      *
     C                   move      d1pgcd        ldpgcd
     C     d1pgcd        chain     pdllrel1                           92
     C                   if        *in92 = *off
     C                   move      llojna        ldpgds
     C                   else
     C                   move      *blank        ldpgds
     C                   endif
      *
     C                   z-add     d1itcd        lditcd
     C                   eval      lditds = d1itds
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Primal Group Code
     C                   select
     C                   when      fld = 'C1PGCD'
     C                   call      'RO505'
     C                   parm      *blank        xxpgcd
     C                   parm      *blank        xxpgds
     C                   seton                                        52
     C                   if        xxpgcd   <> *blank
     C                   move      xxpgcd        c1pgcd
     C                   endif
      *
     C                   when      fld = 'C1ITCD'
     C                   call      'RO504'
     C                   parm      0             xxitcd
     C                   parm      *blank        xxitds
     C                   seton                                        53
     C                   if        xxitcd <> 0
     C                   z-add     xxitcd        c1itcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'RO09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors on Screen 1
      *-------------------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     svcono        parm                    c1cono
     C     svwemdy       parm                    c1wemdy
     C                   parm                    wkwedt
     C                   parm                    rtncd
      *
      * Key lists
      *  none
     C                   move      '00'          rtncd
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldcono
     C                   z-add     0             ldwedt
     C                   z-add     0             ldwemdy
     C                   z-add     0             lditcd
     C                   out       lda
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     10            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(RO413CL))  JOB(        ) JOBQ(*JOBD)
