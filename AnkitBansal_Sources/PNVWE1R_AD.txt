// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNVWE1R
// ?Date: 14.08.2025 Time: 03:46:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv User Profile Info RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1785768;
PARAMETER(JOB.*USER);
PARAMETER(NLL.Description);
PARAMETER(NLL.System_Date_Format);
PARAMETER(NLL.Printer_Device_Str);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(NLL.Application_WHS_Restrict);
PARAMETER(NLL.Credit_Hold_Authority);
PARAMETER(NLL.Production_Hold_Authority);
PARAMETER(NLL.Allow_Multi_Warehouse);
PARAMETER(NLL.Entity_Number);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Enterprise_Code_1);
PARAMETER(NLL.Enterprise_Code_2);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


MOVE *ALL (To: KEY From: PAR);

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?USER: Initialize detail screen (existing record)

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?skip if no load id
CASE;

// IF DB1.Load ID is Blank
IF DB1.Load_ID = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?skip if no carrier
CASE;

// IF DB1.Load ID is GT Zero
IF DB1.Load_ID > *ZERO;

EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1486426;
PARAMETER(DB1.Load_ID);
PARAMETER(WRK.Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Carrier Code is not entered
IF WRK.Carrier_Code = *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV All Hdr flds b/ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1699784;
PARAMETER(DTL.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(DTL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(WRK.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?skip if not an export
CASE;

// IF WRK.Export Status is yes
IF WRK.Export_Status = 'Y';

//?skip if not an export
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

MOVE *ALL (To: DTL From: DB1);

//?RTV Shipping Line Name
CASE;

// IF DTL.Shipping Line is entered
IF DTL.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.USR_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?RTV Backhaul Carrier Name
CASE;

// IF DTL.Shipping Line is entered
IF DTL.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.OHE_Backhaul_Carrier_Code);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?USER: Validate detail screen fields

//?F4=Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Backhaul Truck Number.
CASE;

// IF PGM.*Cursor field <IS> DTL.OHE Backhaul Truck Number
IF PGM.*Cursor_field = DTL.LD_Stop_Drop;

// Call program Zzz by TD Last/First  SL.
CALL PROGRAM(Zzz by TD Last/First  SL) ('PNWLSRR');
PARAMETER(LCL.TD_Last_Name);
PARAMETER(LCL.TD_First_Name);
PARAMETER(DTL.LD_Stop_Drop);
PARAMETER(LCL.TD_Notes);

ENDIF;

//?Return To Company.
CASE;

// IF PGM.*Cursor field <IS> DTL.OHE Backhaul Return to Co
IF PGM.*Cursor_field = DTL.OHE_Backhaul_Return_to_Co;

//?07/23/19 DN R15161-Change to Select Plant Companies Only.
// LCL.Company Number = CVTVAR(DTL.OHE Backhaul Return to Co)
LCL.Company_Number = CVTVAR(DTL.OHE_Backhaul_Return_to_Co);

// Call program SEL Plant Company      SR.
CALL PROGRAM(SEL Plant Company      SR) ('PPFZSRR');
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Name);

CASE;

// IF LCL.Company Number is not equal to zero
IF LCL.Company_Number <> *ZERO;

// DTL.OHE Backhaul Return to Co = CVTVAR(LCL.Company Number)
DTL.OHE_Backhaul_Return_to_Co = CVTVAR(LCL.Company_Number);

ENDIF;

ENDIF;

//?Backhaul Carrier-07/23/19 DN R15161.
CASE;

// IF PGM.*Cursor field <IS> DTL.OHE Backhaul Carrier Code
IF PGM.*Cursor_field = DTL.OHE_Backhaul_Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.OHE_Backhaul_Carrier_Code);

ENDIF;

ENDIF;

//?Validations - 07/23/19 DN R15161
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Return To Company.
CASE;

// IF DTL.OHE Backhaul Return to Co is not equal to zero
IF DTL.OHE_Backhaul_Return_to_Co <> *ZERO;

// LCL.Company Number = CVTVAR(DTL.OHE Backhaul Return to Co)
LCL.Company_Number = CVTVAR(DTL.OHE_Backhaul_Return_to_Co);

EXECUTE FUNCTION(Val Company Exist     RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC2143767;
PARAMETER(LCL.Company_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(LCL.Company_Number);

ENDIF;

ENDIF;

//?Backhaul Carrier.
CASE;

// IF NOT DTL.OHE Backhaul Carrier Code is Blank
IF ! DTL.OHE_Backhaul_Carrier_Code = *BLANK;

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(DTL.OHE_Backhaul_Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Carrier Info not found.'
ERROR(USR1180);
MSGPARM(DTL.OHE_Backhaul_Carrier_Code);

ENDIF;

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Order Header Exten CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC1814352;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(DTL.OHE_Vessel_Airline);
PARAMETER(DTL.OHE_Voyage_Flight);
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(DTL.OHE_Discharge_Port_Airprt);
PARAMETER(DTL.OHE_Sail_Flight_Date);
PARAMETER(DTL.OHE_Port_Cut_Date);
PARAMETER(DTL.OHE_Arrival_Date);
PARAMETER(DTL.OHE_Late_Delivery_Code);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(DTL.OHE_Comment_1);
PARAMETER(DTL.OHE_Comment_2);
PARAMETER(DTL.OHE_Unused_Number_1_11_0);
PARAMETER(DTL.OHE_Unused_Number_2_11_0);
PARAMETER(DTL.OHE_Unused_Number_3_11_0);
PARAMETER(DTL.OHE_Unused_Number_4_11_0);
PARAMETER(DTL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(DTL.OHE_HPB_RIN_Price);
PARAMETER(DTL.Transload_Terminal_Fees);
PARAMETER(DTL.OHE_Est_Arrv_at_Dest_Date);
PARAMETER(DTL.OHE_Backhaul_ETA_RtrnDate);
PARAMETER(DTL.OHE_Port_Pier_Paid_Date);
PARAMETER(DTL.OHE_Actual_Ship_Date);
PARAMETER(DTL.OHE_Carrier_SCAC_Code);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(DTL.OHE_PO_ACK_Flag);
PARAMETER(DTL.OHE_Override_Type_Code);
PARAMETER(DTL.OHE_Backhaul_Status);
PARAMETER(DTL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(DTL.OHE_Load_Haul_Type);
PARAMETER(DTL.OHE_Backhaul_Carrier_Code);
PARAMETER(DTL.OHE_Bookings_Confirmed);
PARAMETER(DTL.OHE_EDI_Error_Reasons);
PARAMETER(DTL.OHE_EDI_Error_Reasons_2);
PARAMETER(DTL.HPB_COA_Batch_Number);
PARAMETER(DTL.Delivery_P_O_Number);
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(DTL.OHE_EDI_943_Action);
PARAMETER(DTL.OHE_EDI_944_Action);
PARAMETER(DTL.OHE_EDI_940_Action);
PARAMETER(DTL.OHE_EDI_945_Action);
PARAMETER(DTL.OHE_EDI_856_Action);
PARAMETER(DTL.OHE_EDI_824_Action);
PARAMETER(DTL.OHE_Transload_Seal_Nbr);
PARAMETER(DTL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Backhaul_Container#);
PARAMETER(DTL.OHE_Backhaul_Chassis_#);
PARAMETER(DTL.OHE_Transload_Container#);
PARAMETER(DTL.OHE_Pier_Pass_Invoice);
PARAMETER(DTL.OHE_Carrier_Nm);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
PARAMETER(DTL.OHE_Backhaul_Comment);
PARAMETER(DTL.Letter_of_Credit_Number);
PARAMETER(DTL.OHE_Backhaul_Return_to_Co);
PARAMETER(DTL.LD_Stop_Drop);
PARAMETER(DTL.OHE_Unused_Number_3_0);
PARAMETER(DTL.OHE_Pier_Pass_Fee_Amount);
PARAMETER(DTL.OHE_Port_Check_Fee_Amount);
PARAMETER(DTL.OHE_Port_Cut_Time);
PARAMETER(DTL.OHE_Backhaul_Truck_Number);
PARAMETER(DTL.OHE_Load_Sched_Seq_Num);
PARAMETER(DTL.Original_Appointment_Date);
PARAMETER(DTL.Original_Appointment_Time);
PARAMETER(DTL.OHE_PowerPro_Load#_Outbnd);
PARAMETER(DTL.OHE_PowerPro_Load#_Bckhl);
PARAMETER(DTL.OHE_Unused_Numeric_9_0_3);
PARAMETER(DTL.OHE_Orig_ABS_Freight_Rate);
PARAMETER(DTL.OHE_Genset_Number);
PARAMETER(DTL.OHE_Email_BOL_Sent);
PARAMETER(DTL.OHE_EDI_Order_Automated);
PARAMETER(DTL.OHE_EDI_601_Action);
PARAMETER(DTL.OHE_Unused_Status_4);
PARAMETER(DTL.OHE_Unused_Text_1);
PARAMETER(DTL.OHE_Unused_Text_2);
PARAMETER(DTL.OHE_Customer_Vendor_f_PO);
PARAMETER(DTL.OHE_EDI_824_AES_ITN_#);
PARAMETER(DTL.OHE_Unused_Text_5);
PARAMETER(DTL.OHE_Unused_Date_1);
PARAMETER(DTL.OHE_Unused_Date_2);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Port_Delv_Terminal);
 PARAMETER(PAR.OHE_City);
 PARAMETER(PAR.OHE_Vessel_Airline);
 PARAMETER(PAR.OHE_Voyage_Flight);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(PAR.OHE_Discharge_Port_Airprt);
 PARAMETER(PAR.OHE_Sail_Flight_Date);
 PARAMETER(PAR.OHE_Port_Cut_Date);
 PARAMETER(PAR.OHE_Arrival_Date);
 PARAMETER(PAR.OHE_Late_Delivery_Code);
 PARAMETER(PAR.OHE_Ship_Status);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(PAR.OHE_Comment_1);
 PARAMETER(PAR.OHE_Comment_2);
 PARAMETER(PAR.OHE_Unused_Number_1_11_0);
 PARAMETER(PAR.OHE_Unused_Number_2_11_0);
 PARAMETER(PAR.OHE_Unused_Number_3_11_0);
 PARAMETER(PAR.OHE_Unused_Number_4_11_0);
 PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
 PARAMETER(PAR.OHE_HPB_RIN_Price);
 PARAMETER(PAR.Transload_Terminal_Fees);
 PARAMETER(PAR.OHE_Est_Arrv_at_Dest_Date);
 PARAMETER(PAR.OHE_Backhaul_ETA_RtrnDate);
 PARAMETER(PAR.OHE_Port_Pier_Paid_Date);
 PARAMETER(PAR.OHE_Actual_Ship_Date);
 PARAMETER(PAR.OHE_Carrier_SCAC_Code);
 PARAMETER(PAR.OHE_Spot_Buy);
 PARAMETER(PAR.OHE_PO_ACK_Flag);
 PARAMETER(PAR.OHE_Override_Type_Code);
 PARAMETER(PAR.OHE_Backhaul_Status);
 PARAMETER(PAR.OHE_Backhaul_ETA_AM_PM);
 PARAMETER(PAR.OHE_Load_Haul_Type);
 PARAMETER(PAR.OHE_Backhaul_Carrier_Code);
 PARAMETER(PAR.OHE_Bookings_Confirmed);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER(PAR.OHE_EDI_Error_Reasons_2);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(PAR.Delivery_P_O_Number);
 PARAMETER(PAR.OHE_Intended_for_ExportCC);
 PARAMETER(PAR.OHE_EDI_943_Action);
 PARAMETER(PAR.OHE_EDI_944_Action);
 PARAMETER(PAR.OHE_EDI_940_Action);
 PARAMETER(PAR.OHE_EDI_945_Action);
 PARAMETER(PAR.OHE_EDI_856_Action);
 PARAMETER(PAR.OHE_EDI_824_Action);
 PARAMETER(PAR.OHE_Transload_Seal_Nbr);
 PARAMETER(PAR.OHE_Abs_Rate_Override_Rsn);
 PARAMETER(PAR.OHE_Appt_Confirmation_#);
 PARAMETER(PAR.OHE_Backhaul_Container#);
 PARAMETER(PAR.OHE_Backhaul_Chassis_#);
 PARAMETER(PAR.OHE_Transload_Container#);
 PARAMETER(PAR.OHE_Pier_Pass_Invoice);
 PARAMETER(PAR.OHE_Carrier_Nm);
 PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
 PARAMETER(PAR.OHE_Backhaul_Comment);
 PARAMETER(PAR.Letter_of_Credit_Number);
 PARAMETER(PAR.OHE_Backhaul_Return_to_Co);
 PARAMETER(PAR.LD_Stop_Drop);
 PARAMETER(PAR.OHE_Unused_Number_3_0);
 PARAMETER(PAR.OHE_Pier_Pass_Fee_Amount);
 PARAMETER(PAR.OHE_Port_Check_Fee_Amount);
 PARAMETER(PAR.OHE_Port_Cut_Time);
 PARAMETER(PAR.OHE_Backhaul_Truck_Number);
 PARAMETER(PAR.OHE_Load_Sched_Seq_Num);
 PARAMETER(PAR.Original_Appointment_Date);
 PARAMETER(PAR.Original_Appointment_Time);
 PARAMETER(PAR.OHE_PowerPro_Load#_Outbnd);
 PARAMETER(PAR.OHE_PowerPro_Load#_Bckhl);
 PARAMETER(PAR.OHE_Unused_Numeric_9_0_3);
 PARAMETER(PAR.OHE_Orig_ABS_Freight_Rate);
 PARAMETER(PAR.OHE_Genset_Number);
 PARAMETER(PAR.OHE_Email_BOL_Sent);
 PARAMETER(PAR.OHE_EDI_Order_Automated);
 PARAMETER(PAR.OHE_EDI_601_Action);
 PARAMETER(PAR.OHE_Unused_Status_4);
 PARAMETER(PAR.OHE_Unused_Text_1);
 PARAMETER(PAR.OHE_Unused_Text_2);
 PARAMETER(PAR.OHE_Customer_Vendor_f_PO);
 PARAMETER(PAR.OHE_EDI_824_AES_ITN_#);
 PARAMETER(PAR.OHE_Unused_Text_5);
 PARAMETER(PAR.OHE_Unused_Date_1);
 PARAMETER(PAR.OHE_Unused_Date_2);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

}


