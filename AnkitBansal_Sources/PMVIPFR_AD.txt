// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMVIPFR
// ?Date: 14.08.2025 Time: 12:05:48
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

//?***** change log and comments
//?R8827 JJH 01/18/17 - Correct Load Freight Allocation Calculation
//?- Get MG Created Load from Load Header
//?- Modify calculation of Incremental Miles.  If Mercury Gate created
//?  use Miles to next stop from Load Detail, otherwise Increment miles.
//?E000322 LJB 12/17/2009  Write selected records to a new work
//?   file to be downloaded to an excel spreadsheet if requested
//?W262 LJB 11/24/2009  Change Exclude Carrier Paid to Incl/Excl/All
//?   Exclude paid if E, Include Paid Only if I, print all if blanks
//?E00156 RMC 7/11/08 use fuel surcharge amt 11.2
//?E00156 RMC 6/09/08
//?New report for Frt Comparision for Transfers -> Summary version
//?   Summarize to customer level
//?04/21/04 PKD Using Carrier Paid Status instead of Amount.
//?USER: Record selection processing

//?Sel Company
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// OR DB1.Company Number EQ PAR.Company Number
OR DB1.Company_Number = PAR.Company_Number;

//?Sel Company
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?load header - get select fields
EXECUTE FUNCTION(RTV Load Header All    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1451097;
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(LCL.Seal_1);
PARAMETER(LCL.Seal_2);
PARAMETER(LCL.Seal_3);
PARAMETER(LCL.Total_Load_Order_Weight);
PARAMETER(LCL.Flat_Amount);
PARAMETER(LCL.Allocate_Pounds_Miles);
PARAMETER(LCL.Total_Stops);
PARAMETER(LCL.Trailer_Id);
PARAMETER(LCL.Transloader_Carrier_Code);
PARAMETER(LCL.BOL_Time);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Truck_Size);
PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.Ship_Status);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Number_Pallets_Received);
PARAMETER(LCL.Number_Pallets_Loaded);
PARAMETER(LCL.Load_Carrier_Pay_Amt);
PARAMETER(LCL.Estimated_Arrival_Time);
PARAMETER(LCL.Actual_Arrival_Date);
PARAMETER(LCL.Actual_Arrival_Time);
PARAMETER(LCL.Trailer_IN_Weight);
PARAMETER(LCL.Trailer_OUT_Weight);
PARAMETER(LCL.Actual_Departure_Date);
PARAMETER(LCL.Departure_Time);
PARAMETER(LCL.Schedule_Sequence_Number);
PARAMETER(LCL.Product_Temperature);
PARAMETER(LCL.Number_Spacers_Loaded);
PARAMETER(LCL.Car_Veh_Initials);
PARAMETER(LCL.Total_Load_Miles);
PARAMETER(LCL.Recorder_ID);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Gross_Weight);
PARAMETER(LCL.Carrier_Broker);
PARAMETER(PAR.Export_Status);
PARAMETER(LCL.Actual_Ship_Date);
PARAMETER(LCL.On_Time_Y_N);
PARAMETER(LCL.Truck_Ready_Date);
PARAMETER(LCL.Truck_Ready_Time);
PARAMETER(LCL.Spotted_Date);
PARAMETER(LCL.Spotted_Time);
PARAMETER(LCL.Load_Finished_Date);
PARAMETER(LCL.Load_Finished_Time);
PARAMETER(LCL.BOL_Complete_Date);
PARAMETER(LCL.BOL_Complete_Time);
PARAMETER(LCL.BOL_Received_Date);
PARAMETER(LCL.BOL_Received_Time);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
PARAMETER(LCL.Adjusted_Departure_Date);
PARAMETER(LCL.Adjusted_Departure_Time);
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.Port_Delv_Terminal);
PARAMETER(LCL.Vessel_Name);
PARAMETER(LCL.Voyage);
PARAMETER(LCL.Sail_Date);
PARAMETER(LCL.Booking_Number);
PARAMETER(LCL.Discharge_Port);
PARAMETER(LCL.Arrival_Date);
PARAMETER(LCL.Container_Number);
PARAMETER(LCL.Date_In);
PARAMETER(LCL.Time_In);
PARAMETER(LCL.Date_Out);
PARAMETER(LCL.Time_Out);
PARAMETER(LCL.Load_Total_Freight);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(LCL.LH_Unused_Sts);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Carrier pay sts   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1886389;
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.Load_Actual_Freight);
PARAMETER(NLL.Fax_Sent_to_SSI_Carrier);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Change to retrieve the lh carrier payment status
EXECUTE FUNCTION(RTV Ship Meth/Carr Pay RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1642160;
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.Load_Carrier_Pay_Amt);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.LH_Carrier_Payment_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Actual Freight Amount = 0
CASE;

// IF PAR.USR Confirm Status (Y/N) is Yes
IF PAR.USR_Confirm_Status_Y_N = 'Y';

// AND LCL.Load Actual Freight is Zero
AND LCL.Load_Actual_Freight = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?04/21/04 PKD Using Carrier Paid Status instead of Amount.
//?Include/Exclude Carrier Payment if parm passed in     W262
CASE;

// IF PAR.Type Inc/Exc Sts is Exclude
IF PAR.Type_Inc_Exc_Sts = 'E';

CASE;

// IF LCL.LH Carrier Payment Sts is Paid
IF LCL.LH_Carrier_Payment_Sts = 'P';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Include/Exclude Carrier Payment if parm passed in     W262
// IF PAR.Type Inc/Exc Sts is Include
IF PAR.Type_Inc_Exc_Sts = 'I';

CASE;

// IF LCL.LH Carrier Payment Sts is Not Paid
IF LCL.LH_Carrier_Payment_Sts = *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?PK0412 2/11/02  Exclude Carrier truck
CASE;

// IF PAR.Exclude Shp Mth is CT STS is Yes
IF PAR.Exclude_Shp_Mth_is_CT_STS = 'Y';

CASE;

// IF DB1.Shipping Method is Collect Truck
IF DB1.Shipping_Method = 'CT';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

CASE;

// IF TOP.Company Number is greater than zero
IF TOP_Company_Number > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Name = CON.*ALL
TOP_Name = *ALL;

ENDIF;

// TOP.From Date             USR = PAR.USR From Date
TOP_From_Date_USR = PAR.USR_From_Date;

// TOP.To Date               USR = PAR.USR To Date
TOP_To_Date_USR = PAR.USR_To_Date;

// TOP.USR Confirm Status (Y/N) = PAR.USR Confirm Status (Y/N)
TOP_USR_Confirm_Status_Y_N = PAR.USR_Confirm_Status_Y_N;

// TOP.Detail/Summary Report Usr = CND.Summary
TOP_Detail_Summary_Report_Usr = 'S';

//?** Change Exclude Carrier paid to Include paid only, Exclude
//?** paid, or all                                       W262
// TOP.Exclude if Carr Paid STS = PAR.Type Inc/Exc Sts
TOP_Exclude_if_Carr_Paid_STS = PAR.Type_Inc_Exc_Sts;

CASE;

// IF PAR.Type Inc/Exc Sts is Exclude
IF PAR.Type_Inc_Exc_Sts = 'E';

// TOP.Condition Desc. 2  USR = CON.Exclude Paid Carriers
TOP_Condition_Desc_2_USR = 'Exclude Paid Carriers';

// IF PAR.Type Inc/Exc Sts is Include
IF PAR.Type_Inc_Exc_Sts = 'I';

// TOP.Condition Desc. 2  USR = CON.Include Only Paid Carrier
TOP_Condition_Desc_2_USR = 'Include Only Paid Carrier';

// IF PAR.Type Inc/Exc Sts is All
IF PAR.Type_Inc_Exc_Sts = *BLANK;

// TOP.Condition Desc. 2  USR = CON.*All Paid & Unpaid
TOP_Condition_Desc_2_USR = *All Paid & Unpaid;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Ship To Name header format

// SUPPRESSED PRINT Ship To Customer header format

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Load ID header format

// SUPPRESSED PRINT Order Number header format

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.USR_Carrier_Name_4);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// CUR.Load Actual Freight = LCL.Load Actual Freight
CUR.Load_Actual_Freight = LCL.Load_Actual_Freight;

// CUR.USR Weight   9.1 = DB1.Order Weight Total
CUR.USR_Weight_9_1 = DB1.Order_Weight_Total;

// Compute: Abs Freight Amt
CUR.Absorbed_Freight_Amount = ( CUR.Absorbed_Freight_Rate_CWT / 100 ) * CUR.USR_Weight_9_1;

//?Calculate Freight Rates
CASE;

// IF CUR.USR Weight   9.1 is Greater than Zero
IF CUR.USR_Weight_9_1 > *ZERO;

// WRK.USR Work Percent 7/6 = LCL.Load Actual Freight / LCL.Total Load Order Weight *
WRK.USR_Work_Percent_7_6 = LCL.Load_Actual_Freight / LCL.Total_Load_Order_Weight;

// CUR.USR Freight Cost = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Freight_Cost = WRK.USR_Work_Percent_7_6 * 100 'H';

// CUR.Load Actual Freight = WRK.USR Work Percent 7/6 * CUR.USR Weight   9.1 *
CUR.Load_Actual_Freight = WRK.USR_Work_Percent_7_6 * CUR.USR_Weight_9_1;

// WRK.USR Work Percent 7/6 = CUR.Rated Freight / CUR.USR Weight   9.1 *
WRK.USR_Work_Percent_7_6 = CUR.Rated_Freight / CUR.USR_Weight_9_1;

// CUR.Freight Cost Work = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.Freight_Cost_Work = WRK.USR_Work_Percent_7_6 * 100 'H';

ENDIF;

// WRK.USR Weight = WRK.USR Weight + DB1.Order Weight Total
WRK.USR_Weight = WRK.USR_Weight + DB1.Order_Weight_Total;

// WRK.USR Billing Dtl Net Dol 2 = WRK.USR Billing Dtl Net Dol 2 + CUR.Absorbed Freight Amount
WRK.USR_Billing_Dtl_Net_Dol_2 = WRK.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.Absorbed_Freight_Amount;

// WRK.USR Billing Dtl Net Dol 3 = WRK.USR Billing Dtl Net Dol 3 + CUR.Load Actual Freight
WRK.USR_Billing_Dtl_Net_Dol_3 = WRK.USR_Billing_Dtl_Net_Dol_3 + CUR.Load_Actual_Freight;

// WRK.USR Billing Dtl Net Dol 5 = WRK.USR Billing Dtl Net Dol 5 + DB1.Rated Freight
WRK.USR_Billing_Dtl_Net_Dol_5 = WRK.USR_Billing_Dtl_Net_Dol_5 + DB1.Rated_Freight;

CASE;

// IF CUR.Load ID NE LCL.Load ID USR
IF CUR.Load_ID <> LCL.Load_ID_USR;

// LCL.Load ID USR = CUR.Load ID
LCL.Load_ID_USR = CUR.Load_ID;

// WRK.Count USR = WRK.Count USR + CON.1
WRK.Count_USR = WRK.Count_USR + 1;

ENDIF;

//?** E000322 Process for work file that will be emailed
// WRK.Carrier Code = DB1.Carrier Code
WRK.Carrier_Code = DB1.Carrier_Code;

//?** E000322 Create work file that will be emailed if requested
EXECUTE FUNCTION(CRT WF Frt Comparison  CO) TYPE(CRTOBJ) FILE(PNFWCPP)          AC1965885;
PARAMETER(CUR.Actual_Shipped_Date);
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.Ship_To_Name);
PARAMETER(CUR.Ship_To_City);
PARAMETER(CUR.Ship_To_State_Code);
PARAMETER(WRK.Carrier_Code);
PARAMETER(CUR.Order_Weight_Total);
PARAMETER(CUR.Rated_Freight);
PARAMETER(CUR.Freight_Cost_Work);
PARAMETER(*ZERO);
PARAMETER(CUR.Absorbed_Freight_Amount);
PARAMETER(CUR.Absorbed_Freight_Rate_CWT);
PARAMETER(CUR.Load_Actual_Freight);
PARAMETER(CUR.USR_Freight_Cost);
PARAMETER(CUR.USR_Billing_Dtl_Net_Dol_4);
PARAMETER(LCL.LH_Carrier_Payment_Sts);
PARAMETER(LCL.LH_Carrier_Paid_Dte);
PARAMETER(WRK.Parent_Customer);
PARAMETER(WRK.AR_Customer_Number);

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Print required level totals

CASE;

IF NEW Order_Number;
// CUR.Weight 11.1 USR = WRK.USR Weight
CUR.Weight_11_1_USR = WRK.USR_Weight;

// CUR.USR Billing Dtl Net Dol 2 = WRK.USR Billing Dtl Net Dol 2
CUR.USR_Billing_Dtl_Net_Dol_2 = WRK.USR_Billing_Dtl_Net_Dol_2;

// CUR.USR Billing Dtl Net Dol 3 = WRK.USR Billing Dtl Net Dol 3
CUR.USR_Billing_Dtl_Net_Dol_3 = WRK.USR_Billing_Dtl_Net_Dol_3;

// CUR.USR Billing Dtl Net Dol 4 = CUR.USR Billing Dtl Net Dol 2 - CUR.USR Billing
CUR.USR_Billing_Dtl_Net_Dol_4 = CUR.USR_Billing_Dtl_Net_Dol_2                                      +
- CUR.USR_Billing_Dtl_Net_Dol_3;

// CUR.USR Billing Dtl Net Dol 5 = WRK.USR Billing Dtl Net Dol 5
CUR.USR_Billing_Dtl_Net_Dol_5 = WRK.USR_Billing_Dtl_Net_Dol_5;

// CUR.Count USR = WRK.Count USR
CUR.Count_USR = WRK.Count_USR;

//?E00156 RMC  5/22/08 Print Fuel Surcharge when we have it in sales hist
//?   for now --  calc per order alloc% routine
// CUR.Fuel Surcharge Amt 11.2 = CON.*ZERO
CUR.Fuel_Surcharge_Amt_11_2 = 0;

EXECUTE FUNCTION(Rtv Charge Amount     RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1659529;
PARAMETER(CUR.Load_ID);
PARAMETER('FUEL');
PARAMETER(LCL.LFC_Amount);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.LFC Amount is Entered
IF LCL.LFC_Amount <> *ZERO;

EXECUTE FUNCTION(CLC Order Alloc %     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1884021;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Order_Number);
PARAMETER(LCL.Order_Allocation_USR);
PARAMETER(LCL.LFC_Amount);
PARAMETER(CUR.Fuel_Surcharge_Amt_11_2);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?R8827 JJH 01/18/17 - Correct Load Freight Allocation Calculation
 //?- Get MG Created Load from Load Header
 //?- Modify calculation of Incremental Miles.  If Mercury Gate created
 //?  use Miles to next stop from Load Detail, otherwise Increment miles.
 //?** 3/10/08 LJB FP1271
 //?** If incremental miles is zeros, default to 1.
 //?** Calculations to get the order allocation % to use to
 //?** calculate the Allocated Freight Amount
 //?** 1. Retrieve the order weight from the order header
 //?** 2. If stop/drop is different, add Miles to Next to Incremental
 //?**    Miles
 //?** 3. If incremental miles is zeros, default to 1
 //?** 4. Multiply Order Weight by Incremental Miles to get Lbs-Miles
 //?** 5. Divide the Lbs-Miles by the Total Lbs-Miles to get the
 //?**    Order Allocation %
 ENDDO;

 //?This will calculate the % of any freight amt that needs to be alloc
 //?to the input order. (copied from CLC UPD Order Alloc% RT -  5/23/08
 // PAR.Order Allocation % USR = CON.*ZERO
 PAR.Order_Allocation_USR = *ZERO;

 // PAR.Incremental Miles USR = CON.*ZERO
 PAR.Incremental_Miles_USR = *ZERO;

 //?** Calculate Total Pound Miles for this load
 EXECUTE FUNCTION(CLC Total Lbs-Miles    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1787755;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Lbs_Miles_USR);
 PARAMETER(PAR.Total_Lbs_Miles_USR);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?R8827 JJH 01/18/17 - Correct Load Freight Allocation Calculation
  //?- Get MG Created Load from Load Header
  //?- Modify calculation of Incremental Miles.  If Mercury Gate created
  //?  use Miles to next stop from Load Detail, otherwise Increment miles.
  //?** Calculations to get the total pound miles used in next calc
  //?** 1. Retrieve the order weight from the order header
  //?** 2. If stop/drop is different, add Miles to Next to Incremental
  //?**    Miles
  //?**    (this will be zeros if there was no Miles Between Cities rec)
  //?** 3. Default Incremental Miles to 1 if it is zeros
  //?** 4. Multiply Order Weight by Incremental Miles to get pound-miles
  //?** 5. Add Lbs-Miles to total pound-miles (Total Lbs-Miles)
  //?** 6. Return Total Lbs-Miles for next part of calculations
  //?** 03/10/2008 LJB FP1271
  //?** After db calcs, if incremental miles is zeros, default to 1.
  ENDDO;

  // PAR.Lbs-Miles USR = CON.*ZERO
  PAR.Lbs_Miles_USR = *ZERO;

  // PAR.Total Lbs-Miles USR = CON.*ZERO
  PAR.Total_Lbs_Miles_USR = *ZERO;

  //?R8827 JJH 01/18/17 - Get MG Created Load from Load Header
  EXECUTE FUNCTION(RTV MG Created Load   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2124762;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.MG_Created_Load);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Order Weight       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292006;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Order_Weight_Total);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?R8827 JJH 01/18/17 - Modify calculation of Incremental Miles USR
  //?** Accumulate Incremental Miles when Stop/Drop changes
  CASE;

  // IF DB1.Stop/Drop NE PAR.Stop/Drop
  IF DB1.Stop_Drop <> PAR.Stop_Drop;

  CASE;

  // IF LCL.MG Created Load is Yes
  IF LCL.MG_Created_Load = 'Y';

  // PAR.Incremental Miles USR = DB1.Miles to next stop
  PAR.Incremental_Miles_USR = DB1.Miles_to_next_stop;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Incremental Miles USR = DB1.Miles to next stop + PAR.Incremental Miles USR
  PAR.Incremental_Miles_USR = DB1.Miles_to_next_stop + PAR.Incremental_Miles_USR;

  ENDIF;

  ENDIF;

  //?** Default Incremental Miles to 1 if it is zeros   3/10/08 FP1271
  CASE;

  // IF PAR.Incremental Miles USR is Zeros
  IF PAR.Incremental_Miles_USR = 0;

  // PAR.Incremental Miles USR = CON.1
  PAR.Incremental_Miles_USR = 1;

  ENDIF;

  // PAR.Lbs-Miles USR = PAR.Incremental Miles USR * PAR.Order Weight Total *Rounded
  PAR.Lbs_Miles_USR = PAR.Incremental_Miles_USR * PAR.Order_Weight_Total 'H';

  // PAR.Total Lbs-Miles USR = PAR.Lbs-Miles USR + PAR.Total Lbs-Miles USR
  PAR.Total_Lbs_Miles_USR = PAR.Lbs_Miles_USR + PAR.Total_Lbs_Miles_USR;

  ENDIF;

  // PAR.Stop/Drop = DB1.Stop/Drop
  PAR.Stop_Drop = DB1.Stop_Drop;

 }

 //?R8827 JJH 01/18/17 - Get MG Created Load from Load Header
 EXECUTE FUNCTION(RTV MG Created Load   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2124762;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.MG_Created_Load);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order Weight       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292006;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Order_Weight_Total);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?R8827 JJH 01/18/17 - Modify calculation of Incremental Miles USR
 //?** Accumulate Incremental Miles
 CASE;

 // IF DB1.Stop/Drop NE PAR.Stop/Drop
 IF DB1.Stop_Drop <> PAR.Stop_Drop;

 CASE;

 // IF LCL.MG Created Load is Yes
 IF LCL.MG_Created_Load = 'Y';

 // PAR.Incremental Miles USR = DB1.Miles to next stop
 PAR.Incremental_Miles_USR = DB1.Miles_to_next_stop;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Incremental Miles USR = DB1.Miles to next stop + PAR.Incremental Miles USR
 PAR.Incremental_Miles_USR = DB1.Miles_to_next_stop + PAR.Incremental_Miles_USR;

 ENDIF;

 ENDIF;

 //?** If incremental miles is zeros, default to 1.   3/10/08 FP1271
 CASE;

 // IF PAR.Incremental Miles USR is Zeros
 IF PAR.Incremental_Miles_USR = 0;

 // PAR.Incremental Miles USR = CON.1
 PAR.Incremental_Miles_USR = 1;

 ENDIF;

 // PAR.Lbs-Miles USR = PAR.Incremental Miles USR * PAR.Order Weight Total *Rounded
 PAR.Lbs_Miles_USR = PAR.Incremental_Miles_USR * PAR.Order_Weight_Total 'H';

 //?If order  =  input order, then calc alloc % of input amt
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 //?** Calc Ord Alloc%. If Tot Lbs-Miles=0, Set to 100%
 CASE;

 // IF PAR.Total Lbs-Miles USR is GT Zero
 IF PAR.Total_Lbs_Miles_USR > *ZERO;

 // PAR.Order Allocation % USR = PAR.Lbs-Miles USR / PAR.Total Lbs-Miles USR *Rounded
 PAR.Order_Allocation_USR = PAR.Lbs_Miles_USR / PAR.Total_Lbs_Miles_USR 'H';

 //?** Calc Ord Alloc%. If Tot Lbs-Miles=0, Set to 100%
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Order Allocation % USR = CND.One
 PAR.Order_Allocation_USR = 1;

 ENDIF;

 // PAR.Freight Amount = PAR.Bal Act Freight Amt USR * PAR.Order Allocation % USR *Rounded
 PAR.Freight_Amount = PAR.Bal_Act_Freight_Amt_USR * PAR.Order_Allocation_USR 'H';

 ENDIF;

 ENDIF;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 //?USER: Exit processing

 //?** Subtract the accumulated allocated freight from the balance
 //?** of the freight after air freight has been removed. Add this to
 //?** the last order.
}


ENDIF;

//?Calculate Freight Rates
CASE;

// IF CUR.Weight 11.1 USR is Greater than Zero
IF CUR.Weight_11_1_USR > *ZERO;

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 2 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_2 / CUR.Weight_11_1_USR;

// CUR.USR Work Percent 5.2 = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Work_Percent_5_2 = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 3 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_3 / CUR.Weight_11_1_USR;

// CUR.USR Freight Cost = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Freight_Cost = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 5 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_5 / CUR.Weight_11_1_USR;

// CUR.Freight Cost Work = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.Freight_Cost_Work = WRK.USR_Work_Percent_7_6 * 100 'H';

ENDIF;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// Print Order Number totals format
PRINT Order Number totals format;

// NXT.Weight 11.1 USR = NXT.Weight 11.1 USR + CUR.Weight 11.1 USR
NXT.Weight_11_1_USR = NXT.Weight_11_1_USR + CUR.Weight_11_1_USR;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing Dtl Net Dol 2
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Billing Dtl Net Dol 3 = NXT.USR Billing Dtl Net Dol 3 + CUR.USR Billing Dtl Net Dol 3
NXT.USR_Billing_Dtl_Net_Dol_3 = NXT.USR_Billing_Dtl_Net_Dol_3                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_3;

// NXT.USR Billing Dtl Net Dol 4 = NXT.USR Billing Dtl Net Dol 4 + CUR.USR Billing Dtl Net Dol 4
NXT.USR_Billing_Dtl_Net_Dol_4 = NXT.USR_Billing_Dtl_Net_Dol_4                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_4;

// NXT.USR Billing Dtl Net Dol 5 = NXT.USR Billing Dtl Net Dol 5 + CUR.USR Billing Dtl Net Dol 5
NXT.USR_Billing_Dtl_Net_Dol_5 = NXT.USR_Billing_Dtl_Net_Dol_5                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_5;

// NXT.Fuel Surcharge Amt 11.2 = NXT.Fuel Surcharge Amt 11.2 + CUR.Fuel Surcharge Amt 11.2
NXT.Fuel_Surcharge_Amt_11_2 = NXT.Fuel_Surcharge_Amt_11_2 + CUR.Fuel_Surcharge_Amt_11_2;

// NXT.Count USR = NXT.Count USR + CUR.Count USR
NXT.Count_USR = NXT.Count_USR + CUR.Count_USR;

// WRK.USR Weight = CON.*ZERO
WRK.USR_Weight = *ZERO;

// WRK.Count USR = CON.*ZERO
WRK.Count_USR = *ZERO;

// WRK.USR Billing Dtl Net Dol 2 = CON.*ZERO
WRK.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// WRK.USR Billing Dtl Net Dol 3 = CON.*ZERO
WRK.USR_Billing_Dtl_Net_Dol_3 = *ZERO;

// WRK.USR Billing Dtl Net Dol 5 = CON.*ZERO
WRK.USR_Billing_Dtl_Net_Dol_5 = *ZERO;

ENDIF;

// SUPPRESSED PRINT Load ID totals format

CASE;

IF NEW Company_Number;
//?Calculate Freight Rates
CASE;

// IF CUR.Weight 11.1 USR is Greater than Zero
IF CUR.Weight_11_1_USR > *ZERO;

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 2 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_2 / CUR.Weight_11_1_USR;

// CUR.USR Work Percent 5.2 = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Work_Percent_5_2 = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 3 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_3 / CUR.Weight_11_1_USR;

// CUR.USR Freight Cost = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Freight_Cost = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 5 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_5 / CUR.Weight_11_1_USR;

// CUR.Freight Cost Work = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.Freight_Cost_Work = WRK.USR_Work_Percent_7_6 * 100 'H';

ENDIF;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// Print Company Number totals format
PRINT Company Number totals format;

// NXT.Weight 11.1 USR = NXT.Weight 11.1 USR + CUR.Weight 11.1 USR
NXT.Weight_11_1_USR = NXT.Weight_11_1_USR + CUR.Weight_11_1_USR;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing Dtl Net Dol 2
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Billing Dtl Net Dol 3 = NXT.USR Billing Dtl Net Dol 3 + CUR.USR Billing Dtl Net Dol 3
NXT.USR_Billing_Dtl_Net_Dol_3 = NXT.USR_Billing_Dtl_Net_Dol_3                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_3;

// NXT.USR Billing Dtl Net Dol 4 = NXT.USR Billing Dtl Net Dol 4 + CUR.USR Billing Dtl Net Dol 4
NXT.USR_Billing_Dtl_Net_Dol_4 = NXT.USR_Billing_Dtl_Net_Dol_4                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_4;

// NXT.USR Billing Dtl Net Dol 5 = NXT.USR Billing Dtl Net Dol 5 + CUR.USR Billing Dtl Net Dol 5
NXT.USR_Billing_Dtl_Net_Dol_5 = NXT.USR_Billing_Dtl_Net_Dol_5                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_5;

// NXT.Fuel Surcharge Amt 11.2 = NXT.Fuel Surcharge Amt 11.2 + CUR.Fuel Surcharge Amt 11.2
NXT.Fuel_Surcharge_Amt_11_2 = NXT.Fuel_Surcharge_Amt_11_2 + CUR.Fuel_Surcharge_Amt_11_2;

// NXT.Count USR = NXT.Count USR + CUR.Count USR
NXT.Count_USR = NXT.Count_USR + CUR.Count_USR;

ENDIF;

CASE;

IF NEW Ship_To_Customer;
//?Calculate Freight Rates
CASE;

// IF CUR.Weight 11.1 USR is Greater than Zero
IF CUR.Weight_11_1_USR > *ZERO;

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 2 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_2 / CUR.Weight_11_1_USR;

// CUR.USR Work Percent 5.2 = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Work_Percent_5_2 = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 3 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_3 / CUR.Weight_11_1_USR;

// CUR.USR Freight Cost = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Freight_Cost = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 5 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_5 / CUR.Weight_11_1_USR;

// CUR.Freight Cost Work = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.Freight_Cost_Work = WRK.USR_Work_Percent_7_6 * 100 'H';

ENDIF;

// Print Ship To Customer totals format
PRINT Ship To Customer totals format;

// NXT.Weight 11.1 USR = NXT.Weight 11.1 USR + CUR.Weight 11.1 USR
NXT.Weight_11_1_USR = NXT.Weight_11_1_USR + CUR.Weight_11_1_USR;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing Dtl Net Dol 2
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Billing Dtl Net Dol 3 = NXT.USR Billing Dtl Net Dol 3 + CUR.USR Billing Dtl Net Dol 3
NXT.USR_Billing_Dtl_Net_Dol_3 = NXT.USR_Billing_Dtl_Net_Dol_3                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_3;

// NXT.USR Billing Dtl Net Dol 4 = NXT.USR Billing Dtl Net Dol 4 + CUR.USR Billing Dtl Net Dol 4
NXT.USR_Billing_Dtl_Net_Dol_4 = NXT.USR_Billing_Dtl_Net_Dol_4                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_4;

// NXT.USR Billing Dtl Net Dol 5 = NXT.USR Billing Dtl Net Dol 5 + CUR.USR Billing Dtl Net Dol 5
NXT.USR_Billing_Dtl_Net_Dol_5 = NXT.USR_Billing_Dtl_Net_Dol_5                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_5;

// NXT.Fuel Surcharge Amt 11.2 = NXT.Fuel Surcharge Amt 11.2 + CUR.Fuel Surcharge Amt 11.2
NXT.Fuel_Surcharge_Amt_11_2 = NXT.Fuel_Surcharge_Amt_11_2 + CUR.Fuel_Surcharge_Amt_11_2;

// NXT.Count USR = NXT.Count USR + CUR.Count USR
NXT.Count_USR = NXT.Count_USR + CUR.Count_USR;

ENDIF;

CASE;

IF NEW Ship_To_Name;
//?Calculate Freight Rates
CASE;

// IF CUR.Weight 11.1 USR is Greater than Zero
IF CUR.Weight_11_1_USR > *ZERO;

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 2 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_2 / CUR.Weight_11_1_USR;

// CUR.USR Work Percent 5.2 = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Work_Percent_5_2 = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 3 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_3 / CUR.Weight_11_1_USR;

// CUR.USR Freight Cost = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Freight_Cost = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 5 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_5 / CUR.Weight_11_1_USR;

// CUR.Freight Cost Work = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.Freight_Cost_Work = WRK.USR_Work_Percent_7_6 * 100 'H';

ENDIF;

// Print Ship To Name totals format
PRINT Ship To Name totals format;

// NXT.Weight 11.1 USR = NXT.Weight 11.1 USR + CUR.Weight 11.1 USR
NXT.Weight_11_1_USR = NXT.Weight_11_1_USR + CUR.Weight_11_1_USR;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing Dtl Net Dol 2
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Billing Dtl Net Dol 3 = NXT.USR Billing Dtl Net Dol 3 + CUR.USR Billing Dtl Net Dol 3
NXT.USR_Billing_Dtl_Net_Dol_3 = NXT.USR_Billing_Dtl_Net_Dol_3                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_3;

// NXT.USR Billing Dtl Net Dol 4 = NXT.USR Billing Dtl Net Dol 4 + CUR.USR Billing Dtl Net Dol 4
NXT.USR_Billing_Dtl_Net_Dol_4 = NXT.USR_Billing_Dtl_Net_Dol_4                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_4;

// NXT.USR Billing Dtl Net Dol 5 = NXT.USR Billing Dtl Net Dol 5 + CUR.USR Billing Dtl Net Dol 5
NXT.USR_Billing_Dtl_Net_Dol_5 = NXT.USR_Billing_Dtl_Net_Dol_5                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_5;

// NXT.Fuel Surcharge Amt 11.2 = NXT.Fuel Surcharge Amt 11.2 + CUR.Fuel Surcharge Amt 11.2
NXT.Fuel_Surcharge_Amt_11_2 = NXT.Fuel_Surcharge_Amt_11_2 + CUR.Fuel_Surcharge_Amt_11_2;

// NXT.Count USR = NXT.Count USR + CUR.Count USR
NXT.Count_USR = NXT.Count_USR + CUR.Count_USR;

ENDIF;

//?USER: On print of final totals format

//?Calculate Freight Rates
CASE;

// IF CUR.Weight 11.1 USR is Greater than Zero
IF CUR.Weight_11_1_USR > *ZERO;

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 2 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_2 / CUR.Weight_11_1_USR;

// CUR.USR Work Percent 5.2 = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Work_Percent_5_2 = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 3 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_3 / CUR.Weight_11_1_USR;

// CUR.USR Freight Cost = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Freight_Cost = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 5 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_5 / CUR.Weight_11_1_USR;

// CUR.Freight Cost Work = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.Freight_Cost_Work = WRK.USR_Work_Percent_7_6 * 100 'H';

ENDIF;

