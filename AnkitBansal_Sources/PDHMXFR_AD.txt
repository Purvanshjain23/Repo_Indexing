// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDHMXFR
// ?Date: 14.08.2025 Time: 03:34:37
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// LCL.Date From             USR = PAR.Production Date RGF
LCL.Date_From_USR = PAR.Production_Date_RGF;

EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Allocation_Method);
PARAMETER(PAR.Order_Number);
{
 //?USER: Initialize routine

 //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
 //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Scheduled_Ship_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Allocation Method is Standard or Blank
 IF DB1.Allocation_Method = *BLANK/'S';

 EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
 PARAMETER(DB1.Company_Number);
 PARAMETER(JOB.*Job_date);
 PARAMETER(3);
 PARAMETER(LCL.Date_USR);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*DATE = DB1.Post to G/L Date
  PAR.*DATE = DB1.Post_to_G_L_Date;

  QUIT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

 }

 CASE;

 // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
 IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

 // PAR.Allocation Method = CND.Forward - ASAP
 PAR.Allocation_Method = 'F';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Allocation Method = CND.Backwards - JIT
 PAR.Allocation_Method = 'B';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Allocation Method = DB1.Allocation Method
 PAR.Allocation_Method = DB1.Allocation_Method;

 ENDIF;

}


//?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
//? - dont allocate current day prod to a block order UNLESS Sched Override!
CASE;

// IF PAR.PSAA Program Name is Sched as ordered-Override
IF PAR.PSAA_Program_Name = 'SCHASORD';

// LCL.Block Order Flag = CND.*Blank
LCL.Block_Order_Flag = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Block_Order_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?R13899 RMC 10/11/18-If OD is price type= DST/TNK force to suspended sts
EXECUTE FUNCTION(Rtv Price Type        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1890565;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.OD_Price_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?DST TNK    -> force to allocation method I
CASE;

// IF LCL.OD Price Type is Distressed
IF LCL.OD_Price_Type = 'DST';

// OR LCL.OD Price Type is Tanked
OR LCL.OD_Price_Type = 'TNK';

// LCL.Allocation Method = CND.Suspended-Inventory Only
LCL.Allocation_Method = 'I';

ENDIF;

//?R11918 DN 10/19/17-Do Not Process Allocation if 'I=Suspended Inventory'.
CASE;

// IF NOT LCL.Allocation Method is Suspended-Inventory Only
IF ! LCL.Allocation_Method = 'I';

//?Starting Production Date    - with JIT/ASAP for fresh 7/13
CASE;

// IF PAR.Production Date RGF LE JOB.*Job date
IF PAR.Production_Date_RGF <= JOB.*Job_date;

//?Fresh or  Frozen is new for FP1054
CASE;

// IF PAR.Warehouse Type is Fresh
IF PAR.Warehouse_Type = 'FR';

CASE;

// IF LCL.Allocation Method is Forward - ASAP
IF LCL.Allocation_Method = 'F';

// PAR.Production Date = JOB.*Job date
PAR.Production_Date = JOB.*Job_date;

CASE;

// IF LCL.Block Order Flag is Block Order
IF LCL.Block_Order_Flag = 'B';

// PAR.Production Date = PAR.Production Date + CON.1 *DAYS
PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?default Backward - JIT
// LCL.Date From             USR = JOB.*Job date
LCL.Date_From_USR = JOB.*Job_date;

// PAR.Production Date = PAR.Production Date RGT
PAR.Production_Date = PAR.Production_Date_RGT;

ENDIF;

CASE;

// IF LCL.Block Order Flag is Block Order
IF LCL.Block_Order_Flag = 'B';

// LCL.Date From             USR = LCL.Date From             USR + CON.1 *DAYS
LCL.Date_From_USR = DATEINCR(LCL.Date_From_USR 1 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

//?Fresh or  Frozen is new for FP1054
// IF PAR.Warehouse Type is Frozen
IF PAR.Warehouse_Type = 'FZ';

// LCL.Date From             USR = JOB.*Job date
LCL.Date_From_USR = JOB.*Job_date;

// PAR.Production Date = PAR.Production Date RGT
PAR.Production_Date = PAR.Production_Date_RGT;

CASE;

// IF LCL.Block Order Flag is Block Order
IF LCL.Block_Order_Flag = 'B';

// LCL.Date From             USR = LCL.Date From             USR + CON.1 *DAYS
LCL.Date_From_USR = DATEINCR(LCL.Date_From_USR 1 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

ENDIF;

//?Starting Production Date    - with JIT/ASAP for fresh 7/13
// IF *OTHERWISE
IF *OTHERWISE;

//?Fresh or Frozen is new for FP1054
CASE;

// IF PAR.Warehouse Type is Fresh
IF PAR.Warehouse_Type = 'FR';

CASE;

// IF LCL.Allocation Method is Forward - ASAP
IF LCL.Allocation_Method = 'F';

// PAR.Production Date = PAR.Production Date RGF
PAR.Production_Date = PAR.Production_Date_RGF;

// IF *OTHERWISE
IF *OTHERWISE;

//?default Backward - JIT
// PAR.Production Date = PAR.Production Date RGT
PAR.Production_Date = PAR.Production_Date_RGT;

ENDIF;

//?Fresh or Frozen is new for FP1054
// IF PAR.Warehouse Type is Frozen
IF PAR.Warehouse_Type = 'FZ';

// PAR.Production Date = PAR.Production Date RGT
PAR.Production_Date = PAR.Production_Date_RGT;

ENDIF;

ENDIF;

EXECUTE FUNCTION(UPD Allocate Std      IF) TYPE(EXCINTFUN)                      AC1477774;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Date_From_USR);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Order_From_Warehouse);
PARAMETER(LCL.Allocation_Method);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('FRZTRMPROD');
 PARAMETER(WRK.System_Value_Alpha);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Base Frozen    USR = WRK.System Value Alpha
 PAR.Base_Frozen_USR = WRK.System_Value_Alpha;

 //?FP1054 do forward or backwards per comp item ext sts for FRESH
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 CASE;

 // IF PAR.Allocation Method is Forward - ASAP
 IF PAR.Allocation_Method = 'F';

 //?ITR:  Allocate Availability of Standard Mix
 // DOW PAR.Production Date LE PAR.Production Date RGT
 DOW PAR.Production_Date <= PAR.Production_Date_RGT;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Base & Production for Item On Order
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 EXECUTE FUNCTION(Rtv Item Prod Limit   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1648488;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Qty_Limit_USR);
 PARAMETER(PAR.CIE_Capacity_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv CIE Capacity Qty  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC2079750;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.CIE_Capacity_Code);
  PARAMETER(LCL.PS_Max_Qty_per_Day);
  {
   //?USER: Initialize routine

   //?E2885 RMC 12/9/13 new capacity field in CIE, get qty from PS Prod Cap file
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.CIE Capacity Code is Entered
   IF DB1.CIE_Capacity_Code <> *BLANK;

   EXECUTE FUNCTION(RTV PS Prod Cap Max   RT) TYPE(RTVOBJ) FILE(PBBFREP)           AC2079751;
   PARAMETER(DB1.CIE_Capacity_Code);
   PARAMETER(PAR.PS_Max_Qty_per_Day);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.CIE Capacity Code = DB1.CIE Capacity Code
   PAR.CIE_Capacity_Code = DB1.CIE_Capacity_Code;

   ENDIF;

  }

  CASE;

  // IF PAR.CIE Capacity Code is Entered
  IF PAR.CIE_Capacity_Code <> *BLANK;

  // PAR.Production Qty Limit USR = LCL.PS Max Qty per Day
  PAR.Production_Qty_Limit_USR = LCL.PS_Max_Qty_per_Day;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Production Qty Limit USR = DB1.Production Qty /Shift
  PAR.Production_Qty_Limit_USR = DB1.Production_Qty_Per_Shift;

  ENDIF;

 }

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Adjust Need based on Item Limit
 CASE;

 // IF LCL.Production Qty Limit USR is GT Zero
 IF LCL.Production_Qty_Limit_USR > *ZERO;

 CASE;

 // IF PAR.CIE Capacity Code is Not Entered
 IF PAR.CIE_Capacity_Code = *BLANK;

 // LCL.Weight Production USR = CON.*ZERO
 LCL.Weight_Production_USR = *ZERO;

 // LCL.Pieces Production USR = CON.*ZERO
 LCL.Pieces_Production_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Production-AllWhs RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC2050625;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Weight_Production_USR);
 PARAMETER(LCL.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 PARAMETER(LCL.Production_Qty);
 {
  //?USER: Initialize routine

  //?accumulate for items in a capacity code - so dont zero out
  //?USER: Processing if Data record not found

  // PAR.Weight Production USR = PAR.Weight Production USR + CON.*ZERO
  PAR.Weight_Production_USR = PAR.Weight_Production_USR + 0;

  // PAR.Pieces Production USR = PAR.Pieces Production USR + CON.*ZERO
  PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + 0;

  //?USER: Process Data record

  // Weight Production
  WRK.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  CASE;

  // IF DB1.PS Piece Count Item is Not Yes
  IF DB1.PS_Piece_Count_Item = *BLANK/'N';

  CASE;

  // IF DB1.PS Unit Weight is Greater than zero
  IF DB1.PS_Unit_Weight > *ZERO;

  // WRK.Production Qty = WRK.Weight Production USR / DB1.PS Unit Weight *Rounded
  WRK.Production_Qty = WRK.Weight_Production_USR / DB1.PS_Unit_Weight 'H';

  // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
  PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

  ENDIF;

  ENDIF;

  // PAR.Weight Production USR = PAR.Weight Production USR + WRK.Weight Production USR
  PAR.Weight_Production_USR = PAR.Weight_Production_USR + WRK.Weight_Production_USR;

  // Pieces Production
  WRK.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  CASE;

  // IF DB1.PS Piece Count Item is yes
  IF DB1.PS_Piece_Count_Item = 'Y';

  EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unt,umRT) TYPE(RTVOBJ) FILE(CABZREP)          AC1606251;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(NLL.UOM_Primary);
  PARAMETER(NLL.Unit_Weight);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Production Quantity
  WRK.Production_Qty = WRK.Pieces_Production_USR / ( WRK.Pieces_Per_Bag
  * WRK.Bags_Per_Unit 'H' );

  // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
  PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

  // PAR.Pieces Production USR = PAR.Pieces Production USR + WRK.Pieces Production USR
  PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + WRK.Pieces_Production_USR;

  ENDIF;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Prod f/Capcty Cde RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC2079756;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.CIE_Capacity_Code);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Weight_Production_USR);
 PARAMETER(LCL.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 PARAMETER(LCL.Production_Qty);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Production-AllWhs RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC2050625;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Weight_Production_USR);
  PARAMETER(PAR.Pieces_Production_USR);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.Production_Qty);
  {
   //?USER: Initialize routine

   //?accumulate for items in a capacity code - so dont zero out
   //?USER: Processing if Data record not found

   // PAR.Weight Production USR = PAR.Weight Production USR + CON.*ZERO
   PAR.Weight_Production_USR = PAR.Weight_Production_USR + 0;

   // PAR.Pieces Production USR = PAR.Pieces Production USR + CON.*ZERO
   PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + 0;

   //?USER: Process Data record

   // Weight Production
   WRK.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
   - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

   CASE;

   // IF DB1.PS Piece Count Item is Not Yes
   IF DB1.PS_Piece_Count_Item = *BLANK/'N';

   CASE;

   // IF DB1.PS Unit Weight is Greater than zero
   IF DB1.PS_Unit_Weight > *ZERO;

   // WRK.Production Qty = WRK.Weight Production USR / DB1.PS Unit Weight *Rounded
   WRK.Production_Qty = WRK.Weight_Production_USR / DB1.PS_Unit_Weight 'H';

   // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
   PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

   ENDIF;

   ENDIF;

   // PAR.Weight Production USR = PAR.Weight Production USR + WRK.Weight Production USR
   PAR.Weight_Production_USR = PAR.Weight_Production_USR + WRK.Weight_Production_USR;

   // Pieces Production
   WRK.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
   - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

   CASE;

   // IF DB1.PS Piece Count Item is yes
   IF DB1.PS_Piece_Count_Item = 'Y';

   EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unt,umRT) TYPE(RTVOBJ) FILE(CABZREP)          AC1606251;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(NLL.Description_Line_One);
   PARAMETER(NLL.UOM_Primary);
   PARAMETER(NLL.Unit_Weight);
   PARAMETER(WRK.Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Production Quantity
   WRK.Production_Qty = WRK.Pieces_Production_USR / ( WRK.Pieces_Per_Bag
   * WRK.Bags_Per_Unit 'H' );

   // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
   PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

   // PAR.Pieces Production USR = PAR.Pieces Production USR + WRK.Pieces Production USR
   PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + WRK.Pieces_Production_USR;

   ENDIF;

   // PAR.PS Shift/Priority = DB1.PS Shift/Priority
   PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

  }

 }

 ENDIF;

 //?Available Production
 CASE;

 // IF LCL.Production Qty LT LCL.Production Qty Limit USR
 IF LCL.Production_Qty < LCL.Production_Qty_Limit_USR;

 // Available Production
 LCL.Available_Production = LCL.Production_Qty_Limit_USR - LCL.Production_Qty;

 //?Available Production
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Available Production = CON.*ZERO
 LCL.Available_Production = *ZERO;

 ENDIF;

 //?Need exceeds Production Capacity Available for the Item.
 CASE;

 // IF PAR.ATS Quantity Need USR GE LCL.Available Production
 IF PAR.ATS_Quantity_Need_USR >= LCL.Available_Production;

 // PAR.ATS Quantity Need USR = LCL.Available Production
 PAR.ATS_Quantity_Need_USR = LCL.Available_Production;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 ENDIF;

 ENDIF;

 //?Convert Standard Mix Production for the Item on the Order.
 CASE;

 // IF PAR.ATS Quantity Need USR is Greater than zero
 IF PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Item Prd Yld SWYG RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1930659;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Yield);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Production Yield = PAR.Production Yield + DB1.Production Yield
  PAR.Production_Yield = PAR.Production_Yield + DB1.Production_Yield;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Allocate Base
 CASE;

 // IF PAR.Production Yield is Greater than zero
 IF PAR.Production_Yield > *ZERO;

 //?control rounding 6/11/09
 // Standard Mix Weight Need
 WRK.Copies_15_5_USR = PAR.ATS_Weight_Need_USR / ( PAR.Production_Yield / 100 'H' );

 // PAR.SM Weight Need USR = WRK.Copies 15.5           USR * CON.1 *Rounded
 PAR.SM_Weight_Need_USR = WRK.Copies_15_5_USR * 1 'H';

 //?Pieces Needed
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // SM Pieces Need USR
 PAR.SM_Pieces_Need_USR = ( PAR.ATS_Quantity_Need_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 //?Pieces Needed
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.SM Pieces Need USR = CON.*ZERO
 PAR.SM_Pieces_Need_USR = *ZERO;

 ENDIF;

 //?FP1054 RMC 2/27/09 Adjust need per consumed items avail if not sched as or
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program BLD BPS Consumed Itm  XF.
 CALL PROGRAM(BLD BPS Consumed Itm  XF) ('PMFQXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.SM_Weight_Need_USR);
 PARAMETER(PAR.SM_Pieces_Need_USR);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(LCL.Percent_Available_for_ord);

 ENDIF;

 //?** 06/24/2014 JJH E3160 - Logic changed in this function to
 //?** only process Item Bill of Material records with Upd Standard
 //?** Production = Blank(Yes).
 EXECUTE FUNCTION(Upd Allocate Std      RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1477778;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.ATS_Adj_Type_USR_2);
 PARAMETER(PAR.SM_Pieces_Need_USR);
 PARAMETER(PAR.SM_Weight_Need_USR);
 {
  //?USER: Initialize routine

  // PAR.100 % Already Used  USR = CND.no
  PAR.X100_Already_Used_USR = 'N';

  // PAR.Pieces Consumed USR = CON.*ZERO
  PAR.Pieces_Consumed_USR = *ZERO;

  // PAR.Weight Consumed USR = CON.*ZERO
  PAR.Weight_Consumed_USR = *ZERO;

  // PAR.RM Weight Need USR = PAR.SM Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.SM_Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.SM Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.SM_Pieces_Need_USR;

  // PAR.RM Weight Alloc USR = PAR.SM Weight Need USR
  PAR.RM_Weight_Alloc_USR = PAR.SM_Weight_Need_USR;

  // PAR.RM Pieces Alloc USR = PAR.SM Pieces Need USR
  PAR.RM_Pieces_Alloc_USR = PAR.SM_Pieces_Need_USR;

  //?FP1054 01/20/09 use production warehouse when alloc consumed items
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?02/15/10 PKD C000527 Retrieve Adjust Credit Pieces from Company
  //?             Item Ext.  This will be used for the Produced Items.
  EXECUTE FUNCTION(Rtv Adj Credit Pieces RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1973401;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Adjust_Credit_Pieces);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?USER: Process Data record

  //?Consumed Items
  CASE;

  // IF DB1.BOM Type is Consumed - Meat
  IF DB1.BOM_Type = 'C';

  // AND DB1.Consume Priority % is Greater than zero
  AND DB1.Consume_Priority_Percent > *ZERO;

  //?FP1054  use lcl.production warehouse, acctng co
  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(WRK.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item_USR);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(WRK.Export_Domestic);
  PARAMETER(WRK.Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(WRK.Primal_Group_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(WRK.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(WRK.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?Chilling Time
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  // PAR.Chilling Time USR = WRK.Warehouse Chill Time
  PAR.Chilling_Time_USR = WRK.Warehouse_Chill_Time;

  //?Chilling Time
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Chilling Time USR = WRK.Fresh Chilling Time
  PAR.Chilling_Time_USR = WRK.Fresh_Chilling_Time;

  ENDIF;

  //?FP1054 use lcl.production warehouse, acctng comp for  avail prod
  EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
  PARAMETER(LCL.Accounting_Company);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.RM_Weight_Avail_USR);
  PARAMETER(PAR.RM_Pieces_Avail_USR);
  PARAMETER(PAR.Chilling_Time_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
   //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
   //? instead of:
   //?Production = Standard + Prod Adj - Converted
   //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
   CASE;

   // IF DB1.PS Lock Status is NOT LOCKED
   IF DB1.PS_Lock_Status = 'N';

   //?Ship Cut Adjust
   CASE;

   // IF PAR.Chilling Time USR is GT Zero
   IF PAR.Chilling_Time_USR > *ZERO;

   // AND DB1.Production Date EQ JOB.*Job date
   AND DB1.Production_Date = JOB.*Job_date;

   EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
   PARAMETER(DB1.Company_Number);
   PARAMETER('P');
   PARAMETER(DB1.PS_Available_Ship_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
   // Weight Production
   PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
   + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

   // Pieces Production
   PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
   + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

   // Weight Available
   PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
   + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
   - DB1.PS_Weight_Prod_Allocated;

   // Pieces Available
   PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
   + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
   - DB1.PS_Pieces_Prod_Allocated;

   //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
   CASE;

   // IF PAR.ATS Weight Available USR is Less than zero
   IF PAR.ATS_Weight_Available_USR < *ZERO;

   CASE;

   // IF PAR.ATS Pieces Available USR is LE Zero
   IF PAR.ATS_Pieces_Available_USR <= *ZERO;

   // PAR.ATS Weight Available USR = CON.*ZERO
   PAR.ATS_Weight_Available_USR = *ZERO;

   // PAR.ATS Pieces Available USR = CON.*ZERO
   PAR.ATS_Pieces_Available_USR = *ZERO;

   ENDIF;

   ENDIF;

   // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
   PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

   ENDIF;

  }

  //?Schedule As Ordered
  CASE;

  // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
  IF PAR.ATS_Adj_Type_USR_2 = 'AO';

  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  CASE;

  // IF PAR.RM Pieces Need USR GT PAR.RM Pieces Avail USR
  IF PAR.RM_Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

  // PAR.RM Pieces Avail USR = PAR.RM Pieces Need USR
  PAR.RM_Pieces_Avail_USR = PAR.RM_Pieces_Need_USR;

  // PAR.RM Weight Avail USR = PAR.RM Weight Need USR
  PAR.RM_Weight_Avail_USR = PAR.RM_Weight_Need_USR;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.RM Weight Need USR GT PAR.RM Weight Avail USR
  IF PAR.RM_Weight_Need_USR > PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Avail USR = PAR.RM Pieces Need USR
  PAR.RM_Pieces_Avail_USR = PAR.RM_Pieces_Need_USR;

  // PAR.RM Weight Avail USR = PAR.RM Weight Need USR
  PAR.RM_Weight_Avail_USR = PAR.RM_Weight_Need_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Allocate consumed items or Deallocate consumed items.
  CASE;

  // IF PAR.ATS Adj Type USR 2 is Order Allocate
  IF PAR.ATS_Adj_Type_USR_2 = 'OA';

  // OR PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
  OR PAR.ATS_Adj_Type_USR_2 = 'AO';

  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  // PAR.Weight Scheduled USR = CON.*ZERO
  PAR.Weight_Scheduled_USR = *ZERO;

  //?Changed to process the Consumption based on Pieces Per Head of
  //?the Component Item Code.  Mark Arensberg  9/11/97
  //?Process by Pieces Per Head from Component Item
  CASE;

  // IF PAR.Pieces Per Head is GT Zero
  IF PAR.Pieces_Per_Head > *ZERO;

  // OR PAR.Piece Count Item USR is yes
  OR PAR.Piece_Count_Item_USR = 'Y';

  CASE;

  // IF PAR.RM Pieces Need USR is GT Zero
  IF PAR.RM_Pieces_Need_USR > *ZERO;

  //?Process by Consume Priority % using Pieces
  CASE;

  // IF DB1.Consume Priority % is Equal to 100 Pct
  IF DB1.Consume_Priority_Percent = 100;

  // PAR.Pieces Need USR = PAR.RM Pieces Need USR
  PAR.Pieces_Need_USR = PAR.RM_Pieces_Need_USR;

  // Weight Need
  PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Need USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Need_USR;

  ENDIF;

  //?Process by Consume Priority % using Pieces
  // IF DB1.Consume Priority % is Not Equal to 100 PCt
  IF DB1.Consume_Priority_Percent <> 100;

  // Pieces Need
  PAR.Pieces_Need_USR = PAR.RM_Pieces_Alloc_USR * ( DB1.Consume_Priority_Percent / 100 'H' );

  // Weight Need
  PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Process by Pieces Per Head from Component Item
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.RM Weight Need USR is Greater than zero
  IF PAR.RM_Weight_Need_USR > *ZERO;

  //?Process by Consume Priority % using Weight
  CASE;

  // IF DB1.Consume Priority % is Equal to 100 Pct
  IF DB1.Consume_Priority_Percent = 100;

  // PAR.Weight Need USR = PAR.RM Weight Need USR
  PAR.Weight_Need_USR = PAR.RM_Weight_Need_USR;

  //?Pieces Need
  CASE;

  // IF PAR.PS Avg Piece Wgt is GT Zero
  IF PAR.PS_Avg_Piece_Wgt > *ZERO;

  // Pieces Need USR
  PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt;

  ENDIF;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Weight Need USR GT PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR > PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Weight Need USR LE PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR <= PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Need USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Need_USR;

  ENDIF;

  //?Process by Consume Priority % using Weight
  // IF DB1.Consume Priority % is Not Equal to 100 PCt
  IF DB1.Consume_Priority_Percent <> 100;

  // Weight Need
  PAR.Weight_Need_USR = PAR.RM_Weight_Alloc_USR * ( DB1.Consume_Priority_Percent / 100 'H' );

  //?Pieces Need
  CASE;

  // IF PAR.PS Avg Piece Wgt is GT Zero
  IF PAR.PS_Avg_Piece_Wgt > *ZERO;

  // Pieces Need
  PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt;

  ENDIF;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Weight Need USR GT PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR > PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Weight Need USR LE PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR <= PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  // PAR.Pieces Consumed USR = PAR.Pieces Consumed USR + PAR.Pieces Scheduled USR
  PAR.Pieces_Consumed_USR = PAR.Pieces_Consumed_USR + PAR.Pieces_Scheduled_USR;

  // PAR.Weight Consumed USR = PAR.Weight Consumed USR + PAR.Weight Scheduled USR
  PAR.Weight_Consumed_USR = PAR.Weight_Consumed_USR + PAR.Weight_Scheduled_USR;

  //?**UPDATE**
  //?FP1054  use lcl.production warehouse
  EXECUTE FUNCTION(BPS Upd Pcs/Wgt Conv  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476182;
  PARAMETER(LCL.Accounting_Company);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(PAR.Pieces_Scheduled_USR);
  PARAMETER(PAR.Weight_Scheduled_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  {
   //?USER: Process Data record

   // PAR.PS Pieces Converted = DB1.PS Pieces Converted + PAR.Pieces Scheduled
   PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted + PAR.Pieces_Scheduled;

   // PAR.PS Weight Converted = DB1.PS Weight Converted + PAR.Weight Scheduled
   PAR.PS_Weight_Converted = DB1.PS_Weight_Converted + PAR.Weight_Scheduled;

   //?If weight OR pieces converted is LT 0 then make zero
   CASE;

   // IF PAR.PS Weight Converted is LT Zero
   IF PAR.PS_Weight_Converted < *ZERO;

   // OR PAR.PS Pieces Converted is LT Zeros
   OR PAR.PS_Pieces_Converted < *ZERO;

   // PAR.PS Weight Converted = CON.*ZERO
   PAR.PS_Weight_Converted = *ZERO;

   // PAR.PS Pieces Converted = CON.*ZERO
   PAR.PS_Pieces_Converted = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Conv  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476183;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?FP1054 create consumed records   -- 10/05/2020 WITH SHIPP CO ON ORDER
   //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
   CASE;

   // IF PAR.Order Number is Greater then zero
   IF PAR.Order_Number > *ZERO;

   //?WAS UPD WITH PAR.COMPANY NUMBER WHICH IS THE ACCTNG CO 10-05-2020
   EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = 0;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   }

   CASE;

   // IF LCL.ODS Sequence Number is zero
   IF LCL.ODS_Sequence_Number = *ZERO;

   EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = *ZERO;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

    //?USER: Exit processing

    // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
    PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

   }

   ENDIF;

   EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   PARAMETER(PAR.Pieces_Scheduled);
   PARAMETER(PAR.Weight_Scheduled);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing if Data record not found

    CASE;

    // IF PAR.OD Pieces Scheduled is Greater than zero
    IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

    // OR PAR.OD Weight Scheduled is Greater than zero
    OR PAR.OD_Weight_Scheduled > *ZERO;

    EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.OD_Production_Date);
    PARAMETER(PAR.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(PAR.OD_Weight_Scheduled);
    PARAMETER(PAR.ODS_Quantity_Short);
    PARAMETER(PAR.ODS_Weight_Short);
    PARAMETER(PAR.Deadline_Depart_Date_LH);
    PARAMETER(PAR.Deadline_Depart_Time_LH);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?USER: Process Data record

    // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
    LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

    // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
    LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
    + PAR.OD_Qty_Cnsmd_Pieces_Sched;

    CASE;

    // IF LCL.OD Pieces Scheduled is Less than or equal zero
    IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

    // AND LCL.OD Weight Scheduled is Less than or equal zero
    AND LCL.OD_Weight_Scheduled <= *ZERO;

    EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(LCL.OD_Weight_Scheduled);
    PARAMETER(DB1.ODS_Quantity_Short);
    PARAMETER(DB1.ODS_Weight_Short);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

   ENDIF;

  }

  //?Allocate consumed items or Deallocate consumed items.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Deallocate here:
  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  // PAR.Weight Scheduled USR = CON.*ZERO
  PAR.Weight_Scheduled_USR = *ZERO;

  EXECUTE FUNCTION(Rtv Order cnsmd wgt,pc RT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1928106;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(LCL.OD_Weight_Scheduled);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Weight Scheduled USR = CON.*ZERO - LCL.OD Weight Scheduled
  PAR.Weight_Scheduled_USR = *ZERO - LCL.OD_Weight_Scheduled;

  // PAR.Pieces Scheduled USR = CON.*ZERO - LCL.OD Pieces Scheduled
  PAR.Pieces_Scheduled_USR = *ZERO - LCL.OD_Qty_Cnsmd_Pieces_Sched;

  // PAR.Pieces Consumed USR = PAR.Pieces Consumed USR + PAR.Pieces Scheduled USR
  PAR.Pieces_Consumed_USR = PAR.Pieces_Consumed_USR + PAR.Pieces_Scheduled_USR;

  // PAR.Weight Consumed USR = PAR.Weight Consumed USR + PAR.Weight Scheduled USR
  PAR.Weight_Consumed_USR = PAR.Weight_Consumed_USR + PAR.Weight_Scheduled_USR;

  //?**UPDATE**
  //?FP1054  use lcl.production warehouse, acctng co
  EXECUTE FUNCTION(BPS Upd Pcs/Wgt Conv  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476182;
  PARAMETER(LCL.Accounting_Company);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(PAR.Pieces_Scheduled_USR);
  PARAMETER(PAR.Weight_Scheduled_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  {
   //?USER: Process Data record

   // PAR.PS Pieces Converted = DB1.PS Pieces Converted + PAR.Pieces Scheduled
   PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted + PAR.Pieces_Scheduled;

   // PAR.PS Weight Converted = DB1.PS Weight Converted + PAR.Weight Scheduled
   PAR.PS_Weight_Converted = DB1.PS_Weight_Converted + PAR.Weight_Scheduled;

   //?If weight OR pieces converted is LT 0 then make zero
   CASE;

   // IF PAR.PS Weight Converted is LT Zero
   IF PAR.PS_Weight_Converted < *ZERO;

   // OR PAR.PS Pieces Converted is LT Zeros
   OR PAR.PS_Pieces_Converted < *ZERO;

   // PAR.PS Weight Converted = CON.*ZERO
   PAR.PS_Weight_Converted = *ZERO;

   // PAR.PS Pieces Converted = CON.*ZERO
   PAR.PS_Pieces_Converted = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Conv  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476183;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?FP1054 create consumed records   -- 10/05/2020 WITH SHIPP CO ON ORDER
   //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
   CASE;

   // IF PAR.Order Number is Greater then zero
   IF PAR.Order_Number > *ZERO;

   //?WAS UPD WITH PAR.COMPANY NUMBER WHICH IS THE ACCTNG CO 10-05-2020
   EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = 0;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   }

   CASE;

   // IF LCL.ODS Sequence Number is zero
   IF LCL.ODS_Sequence_Number = *ZERO;

   EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = *ZERO;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

    //?USER: Exit processing

    // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
    PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

   }

   ENDIF;

   EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   PARAMETER(PAR.Pieces_Scheduled);
   PARAMETER(PAR.Weight_Scheduled);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing if Data record not found

    CASE;

    // IF PAR.OD Pieces Scheduled is Greater than zero
    IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

    // OR PAR.OD Weight Scheduled is Greater than zero
    OR PAR.OD_Weight_Scheduled > *ZERO;

    EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.OD_Production_Date);
    PARAMETER(PAR.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(PAR.OD_Weight_Scheduled);
    PARAMETER(PAR.ODS_Quantity_Short);
    PARAMETER(PAR.ODS_Weight_Short);
    PARAMETER(PAR.Deadline_Depart_Date_LH);
    PARAMETER(PAR.Deadline_Depart_Time_LH);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?USER: Process Data record

    // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
    LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

    // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
    LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
    + PAR.OD_Qty_Cnsmd_Pieces_Sched;

    CASE;

    // IF LCL.OD Pieces Scheduled is Less than or equal zero
    IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

    // AND LCL.OD Weight Scheduled is Less than or equal zero
    AND LCL.OD_Weight_Scheduled <= *ZERO;

    EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(LCL.OD_Weight_Scheduled);
    PARAMETER(DB1.ODS_Quantity_Short);
    PARAMETER(DB1.ODS_Weight_Short);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

  //?** 06/24/2014 JJH E3160
  //?** Changed the definition of the "Average if WPA" field to "Upd
  //?** Standard Production".  Include Item Bill of Material records
  //?** with Upd Standard Production = Blank(yes).
  //?Produced Item
  CASE;

  // IF DB1.BOM Type is Produced - Meat
  IF DB1.BOM_Type = 'P';

  // AND DB1.Production Yield is not equal to zeros
  AND DB1.Production_Yield <> *ZERO;

  // AND DB1.Upd Standard Production is blank
  AND DB1.Upd_Standard_Production = *BLANK;

  //?FP1054 RMC 5/14/09 Chg above CASE to ne 0 , it was GT 0
  CASE;

  // IF DB1.Component Item Code NE DB1.Item Code
  IF DB1.Component_Item_Code <> DB1.Item_Code;

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(NLL.Unit_Weight);
  PARAMETER(NLL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(NLL.Pieces_Per_Bag);
  PARAMETER(NLL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Piece Count Item = PAR.Piece Count Item
  LCL.Piece_Count_Item = PAR.Piece_Count_Item;

  ENDIF;

  // Weight Scheduled
  WRK.Copies_15_5_USR = PAR.Weight_Consumed_USR * ( DB1.Production_Yield / 100 'H' ) 'H';

  //?9/28/11 dont control rounding with +.005
  //?6/03/09   control rounding.. needed in case a number is like nnnn.9935
  //?  because we want it to round up
  // PAR.Weight Scheduled USR = WRK.Copies 15.5           USR * CON.1 *Rounded
  PAR.Weight_Scheduled_USR = WRK.Copies_15_5_USR * 1 'H';

  //?The number of Pieces Scheduled for a Produced Item is based
  //?on the Piece Count Item sts of the Component Item Code.
  //?Pieces Scheduled
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  //?CHANGE LOG
  DO;

  //?S00965 PKD 10/14/09 Pieces scheduled needs to be reduced if
  //?                    the yield is negative.
  //?C000527 PKD 02/12/09 When we have a negative yield, only the weight
  //?                     needs to be adjusted and not the pieces.
  //?C000527 PKD 02/12/09 The Pieces should not be adjusted at all.
  //?                     Added Adjust Credit Pieces logig.
  //?                     * Business Rule *
  //?                     If an Item is converted from a Base Boneless
  //?                     Loin, then do not adjust the Pieces of the
  //?                     Credit Items.  Only the Weight needs to be
  //?                     adjusted.  The Pieces of the Tenderloins and
  //?                     Sirloins, for example, were already produced
  //?                     when the Base Boneless Loin was produced in
  //?                     the Standard Mix.
  ENDDO;

  //?02/15/2010 PKD C000527 Added Adjust Credit Pieces logic.
  CASE;

  // IF LCL.Adjust Credit Pieces is No
  IF LCL.Adjust_Credit_Pieces = 'N';

  CASE;

  // IF DB1.Item Code EQ DB1.Component Item Code
  IF DB1.Item_Code = DB1.Component_Item_Code;

  //?* Converted Finished Goods *
  // PAR.Pieces Scheduled USR = PAR.Pieces Consumed USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Consumed_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* Credit Items *
  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  ENDIF;

  //?02/15/2010 PKD C000527 Added Adjust Credit Pieces logic.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* Base Finished Goods *
  // PAR.Pieces Scheduled USR = PAR.Pieces Consumed USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Consumed_USR;

  ENDIF;

  //?Pieces Scheduled
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  ENDIF;

  //?**UPDATE**
  EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Pieces_Scheduled_USR);
  PARAMETER(PAR.Weight_Scheduled_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
   PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

  ENDIF;

 }

 //?The following will be called even if there is not BOM
 ENDIF;

 //?* Allocate Production for Item on the Order. *
 // LCL.Production Date = PAR.Production Date
 LCL.Production_Date = PAR.Production_Date;

 // LCL.Production Date RGF = PAR.Production Date
 LCL.Production_Date_RGF = PAR.Production_Date;

 // LCL.Production Date RGT = PAR.Production Date
 LCL.Production_Date_RGT = PAR.Production_Date;

 // Call program UPD Allocate Prd      XF.
 CALL PROGRAM(UPD Allocate Prd      XF) ('POQKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Production_Date_RGF);
 PARAMETER(LCL.Production_Date_RGT);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.ATS_Quantity_Need_USR);
 PARAMETER(PAR.ATS_Weight_Need_USR);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.ATS_Adj_Type_USR_2);
 PARAMETER(PAR.PSAA_Program_Name);
 PARAMETER(PAR.Base_Conv_Loss_Item);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Default is Backwards-JIT
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 //?ITR:  Allocate Availability of Standard Mix
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Base & Production for Item On Order
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 EXECUTE FUNCTION(Rtv Item Prod Limit   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1648488;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Qty_Limit_USR);
 PARAMETER(PAR.CIE_Capacity_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv CIE Capacity Qty  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC2079750;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.CIE_Capacity_Code);
  PARAMETER(LCL.PS_Max_Qty_per_Day);
  {
   //?USER: Initialize routine

   //?E2885 RMC 12/9/13 new capacity field in CIE, get qty from PS Prod Cap file
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.CIE Capacity Code is Entered
   IF DB1.CIE_Capacity_Code <> *BLANK;

   EXECUTE FUNCTION(RTV PS Prod Cap Max   RT) TYPE(RTVOBJ) FILE(PBBFREP)           AC2079751;
   PARAMETER(DB1.CIE_Capacity_Code);
   PARAMETER(PAR.PS_Max_Qty_per_Day);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.CIE Capacity Code = DB1.CIE Capacity Code
   PAR.CIE_Capacity_Code = DB1.CIE_Capacity_Code;

   ENDIF;

  }

  CASE;

  // IF PAR.CIE Capacity Code is Entered
  IF PAR.CIE_Capacity_Code <> *BLANK;

  // PAR.Production Qty Limit USR = LCL.PS Max Qty per Day
  PAR.Production_Qty_Limit_USR = LCL.PS_Max_Qty_per_Day;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Production Qty Limit USR = DB1.Production Qty /Shift
  PAR.Production_Qty_Limit_USR = DB1.Production_Qty_Per_Shift;

  ENDIF;

 }

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Adjust Need based on Item Limit
 CASE;

 // IF LCL.Production Qty Limit USR is GT Zero
 IF LCL.Production_Qty_Limit_USR > *ZERO;

 //?FP1054 ?? needs to combine prod sched for item on order all whses
 CASE;

 // IF PAR.CIE Capacity Code is Not Entered
 IF PAR.CIE_Capacity_Code = *BLANK;

 // LCL.Weight Production USR = CON.*ZERO
 LCL.Weight_Production_USR = *ZERO;

 // LCL.Pieces Production USR = CON.*ZERO
 LCL.Pieces_Production_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Production-AllWhs RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC2050625;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Weight_Production_USR);
 PARAMETER(LCL.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 PARAMETER(LCL.Production_Qty);
 {
  //?USER: Initialize routine

  //?accumulate for items in a capacity code - so dont zero out
  //?USER: Processing if Data record not found

  // PAR.Weight Production USR = PAR.Weight Production USR + CON.*ZERO
  PAR.Weight_Production_USR = PAR.Weight_Production_USR + 0;

  // PAR.Pieces Production USR = PAR.Pieces Production USR + CON.*ZERO
  PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + 0;

  //?USER: Process Data record

  // Weight Production
  WRK.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  CASE;

  // IF DB1.PS Piece Count Item is Not Yes
  IF DB1.PS_Piece_Count_Item = *BLANK/'N';

  CASE;

  // IF DB1.PS Unit Weight is Greater than zero
  IF DB1.PS_Unit_Weight > *ZERO;

  // WRK.Production Qty = WRK.Weight Production USR / DB1.PS Unit Weight *Rounded
  WRK.Production_Qty = WRK.Weight_Production_USR / DB1.PS_Unit_Weight 'H';

  // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
  PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

  ENDIF;

  ENDIF;

  // PAR.Weight Production USR = PAR.Weight Production USR + WRK.Weight Production USR
  PAR.Weight_Production_USR = PAR.Weight_Production_USR + WRK.Weight_Production_USR;

  // Pieces Production
  WRK.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  CASE;

  // IF DB1.PS Piece Count Item is yes
  IF DB1.PS_Piece_Count_Item = 'Y';

  EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unt,umRT) TYPE(RTVOBJ) FILE(CABZREP)          AC1606251;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(NLL.UOM_Primary);
  PARAMETER(NLL.Unit_Weight);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Production Quantity
  WRK.Production_Qty = WRK.Pieces_Production_USR / ( WRK.Pieces_Per_Bag
  * WRK.Bags_Per_Unit 'H' );

  // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
  PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

  // PAR.Pieces Production USR = PAR.Pieces Production USR + WRK.Pieces Production USR
  PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + WRK.Pieces_Production_USR;

  ENDIF;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Prod f/Capcty Cde RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC2079756;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.CIE_Capacity_Code);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Weight_Production_USR);
 PARAMETER(LCL.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 PARAMETER(LCL.Production_Qty);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Production-AllWhs RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC2050625;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Weight_Production_USR);
  PARAMETER(PAR.Pieces_Production_USR);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.Production_Qty);
  {
   //?USER: Initialize routine

   //?accumulate for items in a capacity code - so dont zero out
   //?USER: Processing if Data record not found

   // PAR.Weight Production USR = PAR.Weight Production USR + CON.*ZERO
   PAR.Weight_Production_USR = PAR.Weight_Production_USR + 0;

   // PAR.Pieces Production USR = PAR.Pieces Production USR + CON.*ZERO
   PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + 0;

   //?USER: Process Data record

   // Weight Production
   WRK.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
   - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

   CASE;

   // IF DB1.PS Piece Count Item is Not Yes
   IF DB1.PS_Piece_Count_Item = *BLANK/'N';

   CASE;

   // IF DB1.PS Unit Weight is Greater than zero
   IF DB1.PS_Unit_Weight > *ZERO;

   // WRK.Production Qty = WRK.Weight Production USR / DB1.PS Unit Weight *Rounded
   WRK.Production_Qty = WRK.Weight_Production_USR / DB1.PS_Unit_Weight 'H';

   // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
   PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

   ENDIF;

   ENDIF;

   // PAR.Weight Production USR = PAR.Weight Production USR + WRK.Weight Production USR
   PAR.Weight_Production_USR = PAR.Weight_Production_USR + WRK.Weight_Production_USR;

   // Pieces Production
   WRK.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
   - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

   CASE;

   // IF DB1.PS Piece Count Item is yes
   IF DB1.PS_Piece_Count_Item = 'Y';

   EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unt,umRT) TYPE(RTVOBJ) FILE(CABZREP)          AC1606251;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(NLL.Description_Line_One);
   PARAMETER(NLL.UOM_Primary);
   PARAMETER(NLL.Unit_Weight);
   PARAMETER(WRK.Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Production Quantity
   WRK.Production_Qty = WRK.Pieces_Production_USR / ( WRK.Pieces_Per_Bag
   * WRK.Bags_Per_Unit 'H' );

   // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
   PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

   // PAR.Pieces Production USR = PAR.Pieces Production USR + WRK.Pieces Production USR
   PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + WRK.Pieces_Production_USR;

   ENDIF;

   // PAR.PS Shift/Priority = DB1.PS Shift/Priority
   PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

  }

 }

 ENDIF;

 //?Available Production
 CASE;

 // IF LCL.Production Qty LT LCL.Production Qty Limit USR
 IF LCL.Production_Qty < LCL.Production_Qty_Limit_USR;

 // Available Production
 LCL.Available_Production = LCL.Production_Qty_Limit_USR - LCL.Production_Qty;

 //?Available Production
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Available Production = CON.*ZERO
 LCL.Available_Production = *ZERO;

 ENDIF;

 //?Need exceeds Production Capacity Available for the Item.
 CASE;

 // IF PAR.ATS Quantity Need USR GE LCL.Available Production
 IF PAR.ATS_Quantity_Need_USR >= LCL.Available_Production;

 // PAR.ATS Quantity Need USR = LCL.Available Production
 PAR.ATS_Quantity_Need_USR = LCL.Available_Production;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 ENDIF;

 ENDIF;

 //?Convert Standard Mix Production for the Item on the Order.
 CASE;

 // IF PAR.ATS Quantity Need USR is Greater than zero
 IF PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Item Prd Yld SWYG RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1930659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Yield);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Production Yield = PAR.Production Yield + DB1.Production Yield
  PAR.Production_Yield = PAR.Production_Yield + DB1.Production_Yield;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Allocate Base
 CASE;

 // IF PAR.Production Yield is Greater than zero
 IF PAR.Production_Yield > *ZERO;

 //?control rounding 6/11
 // Standard Mix Weight Need
 WRK.Copies_15_5_USR = PAR.ATS_Weight_Need_USR / ( PAR.Production_Yield / 100 'H' );

 // PAR.SM Weight Need USR = WRK.Copies 15.5           USR * CON.1 *Rounded
 PAR.SM_Weight_Need_USR = WRK.Copies_15_5_USR * 1 'H';

 //?Pieces Needed
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // SM Pieces Need USR
 PAR.SM_Pieces_Need_USR = ( PAR.ATS_Quantity_Need_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 //?Pieces Needed
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.SM Pieces Need USR = CON.*ZERO
 PAR.SM_Pieces_Need_USR = *ZERO;

 ENDIF;

 //?FP1054 RMC 2/27/09 Adjust need per consumed items avail
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program BLD BPS Consumed Itm  XF.
 CALL PROGRAM(BLD BPS Consumed Itm  XF) ('PMFQXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.SM_Weight_Need_USR);
 PARAMETER(PAR.SM_Pieces_Need_USR);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(LCL.Percent_Available_for_ord);

 ENDIF;

 CASE;

 // IF PAR.SM Weight Need USR is Greater than zero
 IF PAR.SM_Weight_Need_USR > *ZERO;

 EXECUTE FUNCTION(Upd Allocate Std      RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1477778;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.ATS_Adj_Type_USR_2);
 PARAMETER(PAR.SM_Pieces_Need_USR);
 PARAMETER(PAR.SM_Weight_Need_USR);
 {
  //?USER: Initialize routine

  // PAR.100 % Already Used  USR = CND.no
  PAR.X100_Already_Used_USR = 'N';

  // PAR.Pieces Consumed USR = CON.*ZERO
  PAR.Pieces_Consumed_USR = *ZERO;

  // PAR.Weight Consumed USR = CON.*ZERO
  PAR.Weight_Consumed_USR = *ZERO;

  // PAR.RM Weight Need USR = PAR.SM Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.SM_Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.SM Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.SM_Pieces_Need_USR;

  // PAR.RM Weight Alloc USR = PAR.SM Weight Need USR
  PAR.RM_Weight_Alloc_USR = PAR.SM_Weight_Need_USR;

  // PAR.RM Pieces Alloc USR = PAR.SM Pieces Need USR
  PAR.RM_Pieces_Alloc_USR = PAR.SM_Pieces_Need_USR;

  //?FP1054 01/20/09 use production warehouse when alloc consumed items
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?02/15/10 PKD C000527 Retrieve Adjust Credit Pieces from Company
  //?             Item Ext.  This will be used for the Produced Items.
  EXECUTE FUNCTION(Rtv Adj Credit Pieces RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1973401;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Adjust_Credit_Pieces);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?USER: Process Data record

  //?Consumed Items
  CASE;

  // IF DB1.BOM Type is Consumed - Meat
  IF DB1.BOM_Type = 'C';

  // AND DB1.Consume Priority % is Greater than zero
  AND DB1.Consume_Priority_Percent > *ZERO;

  //?FP1054  use lcl.production warehouse, acctng co
  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(WRK.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item_USR);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(WRK.Export_Domestic);
  PARAMETER(WRK.Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(WRK.Primal_Group_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(WRK.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(WRK.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?Chilling Time
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  // PAR.Chilling Time USR = WRK.Warehouse Chill Time
  PAR.Chilling_Time_USR = WRK.Warehouse_Chill_Time;

  //?Chilling Time
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Chilling Time USR = WRK.Fresh Chilling Time
  PAR.Chilling_Time_USR = WRK.Fresh_Chilling_Time;

  ENDIF;

  //?FP1054 use lcl.production warehouse, acctng comp for  avail prod
  EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
  PARAMETER(LCL.Accounting_Company);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.RM_Weight_Avail_USR);
  PARAMETER(PAR.RM_Pieces_Avail_USR);
  PARAMETER(PAR.Chilling_Time_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
   //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
   //? instead of:
   //?Production = Standard + Prod Adj - Converted
   //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
   CASE;

   // IF DB1.PS Lock Status is NOT LOCKED
   IF DB1.PS_Lock_Status = 'N';

   //?Ship Cut Adjust
   CASE;

   // IF PAR.Chilling Time USR is GT Zero
   IF PAR.Chilling_Time_USR > *ZERO;

   // AND DB1.Production Date EQ JOB.*Job date
   AND DB1.Production_Date = JOB.*Job_date;

   EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
   PARAMETER(DB1.Company_Number);
   PARAMETER('P');
   PARAMETER(DB1.PS_Available_Ship_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
   // Weight Production
   PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
   + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

   // Pieces Production
   PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
   + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

   // Weight Available
   PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
   + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
   - DB1.PS_Weight_Prod_Allocated;

   // Pieces Available
   PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
   + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
   - DB1.PS_Pieces_Prod_Allocated;

   //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
   CASE;

   // IF PAR.ATS Weight Available USR is Less than zero
   IF PAR.ATS_Weight_Available_USR < *ZERO;

   CASE;

   // IF PAR.ATS Pieces Available USR is LE Zero
   IF PAR.ATS_Pieces_Available_USR <= *ZERO;

   // PAR.ATS Weight Available USR = CON.*ZERO
   PAR.ATS_Weight_Available_USR = *ZERO;

   // PAR.ATS Pieces Available USR = CON.*ZERO
   PAR.ATS_Pieces_Available_USR = *ZERO;

   ENDIF;

   ENDIF;

   // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
   PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

   ENDIF;

  }

  //?Schedule As Ordered
  CASE;

  // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
  IF PAR.ATS_Adj_Type_USR_2 = 'AO';

  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  CASE;

  // IF PAR.RM Pieces Need USR GT PAR.RM Pieces Avail USR
  IF PAR.RM_Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

  // PAR.RM Pieces Avail USR = PAR.RM Pieces Need USR
  PAR.RM_Pieces_Avail_USR = PAR.RM_Pieces_Need_USR;

  // PAR.RM Weight Avail USR = PAR.RM Weight Need USR
  PAR.RM_Weight_Avail_USR = PAR.RM_Weight_Need_USR;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.RM Weight Need USR GT PAR.RM Weight Avail USR
  IF PAR.RM_Weight_Need_USR > PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Avail USR = PAR.RM Pieces Need USR
  PAR.RM_Pieces_Avail_USR = PAR.RM_Pieces_Need_USR;

  // PAR.RM Weight Avail USR = PAR.RM Weight Need USR
  PAR.RM_Weight_Avail_USR = PAR.RM_Weight_Need_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Allocate consumed items or Deallocate consumed items.
  CASE;

  // IF PAR.ATS Adj Type USR 2 is Order Allocate
  IF PAR.ATS_Adj_Type_USR_2 = 'OA';

  // OR PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
  OR PAR.ATS_Adj_Type_USR_2 = 'AO';

  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  // PAR.Weight Scheduled USR = CON.*ZERO
  PAR.Weight_Scheduled_USR = *ZERO;

  //?Changed to process the Consumption based on Pieces Per Head of
  //?the Component Item Code.  Mark Arensberg  9/11/97
  //?Process by Pieces Per Head from Component Item
  CASE;

  // IF PAR.Pieces Per Head is GT Zero
  IF PAR.Pieces_Per_Head > *ZERO;

  // OR PAR.Piece Count Item USR is yes
  OR PAR.Piece_Count_Item_USR = 'Y';

  CASE;

  // IF PAR.RM Pieces Need USR is GT Zero
  IF PAR.RM_Pieces_Need_USR > *ZERO;

  //?Process by Consume Priority % using Pieces
  CASE;

  // IF DB1.Consume Priority % is Equal to 100 Pct
  IF DB1.Consume_Priority_Percent = 100;

  // PAR.Pieces Need USR = PAR.RM Pieces Need USR
  PAR.Pieces_Need_USR = PAR.RM_Pieces_Need_USR;

  // Weight Need
  PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Need USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Need_USR;

  ENDIF;

  //?Process by Consume Priority % using Pieces
  // IF DB1.Consume Priority % is Not Equal to 100 PCt
  IF DB1.Consume_Priority_Percent <> 100;

  // Pieces Need
  PAR.Pieces_Need_USR = PAR.RM_Pieces_Alloc_USR * ( DB1.Consume_Priority_Percent / 100 'H' );

  // Weight Need
  PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Process by Pieces Per Head from Component Item
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.RM Weight Need USR is Greater than zero
  IF PAR.RM_Weight_Need_USR > *ZERO;

  //?Process by Consume Priority % using Weight
  CASE;

  // IF DB1.Consume Priority % is Equal to 100 Pct
  IF DB1.Consume_Priority_Percent = 100;

  // PAR.Weight Need USR = PAR.RM Weight Need USR
  PAR.Weight_Need_USR = PAR.RM_Weight_Need_USR;

  //?Pieces Need
  CASE;

  // IF PAR.PS Avg Piece Wgt is GT Zero
  IF PAR.PS_Avg_Piece_Wgt > *ZERO;

  // Pieces Need USR
  PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt;

  ENDIF;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Weight Need USR GT PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR > PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Weight Need USR LE PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR <= PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Need USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Need_USR;

  ENDIF;

  //?Process by Consume Priority % using Weight
  // IF DB1.Consume Priority % is Not Equal to 100 PCt
  IF DB1.Consume_Priority_Percent <> 100;

  // Weight Need
  PAR.Weight_Need_USR = PAR.RM_Weight_Alloc_USR * ( DB1.Consume_Priority_Percent / 100 'H' );

  //?Pieces Need
  CASE;

  // IF PAR.PS Avg Piece Wgt is GT Zero
  IF PAR.PS_Avg_Piece_Wgt > *ZERO;

  // Pieces Need
  PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt;

  ENDIF;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Weight Need USR GT PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR > PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Weight Need USR LE PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR <= PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  // PAR.Pieces Consumed USR = PAR.Pieces Consumed USR + PAR.Pieces Scheduled USR
  PAR.Pieces_Consumed_USR = PAR.Pieces_Consumed_USR + PAR.Pieces_Scheduled_USR;

  // PAR.Weight Consumed USR = PAR.Weight Consumed USR + PAR.Weight Scheduled USR
  PAR.Weight_Consumed_USR = PAR.Weight_Consumed_USR + PAR.Weight_Scheduled_USR;

  //?**UPDATE**
  //?FP1054  use lcl.production warehouse
  EXECUTE FUNCTION(BPS Upd Pcs/Wgt Conv  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476182;
  PARAMETER(LCL.Accounting_Company);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(PAR.Pieces_Scheduled_USR);
  PARAMETER(PAR.Weight_Scheduled_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  {
   //?USER: Process Data record

   // PAR.PS Pieces Converted = DB1.PS Pieces Converted + PAR.Pieces Scheduled
   PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted + PAR.Pieces_Scheduled;

   // PAR.PS Weight Converted = DB1.PS Weight Converted + PAR.Weight Scheduled
   PAR.PS_Weight_Converted = DB1.PS_Weight_Converted + PAR.Weight_Scheduled;

   //?If weight OR pieces converted is LT 0 then make zero
   CASE;

   // IF PAR.PS Weight Converted is LT Zero
   IF PAR.PS_Weight_Converted < *ZERO;

   // OR PAR.PS Pieces Converted is LT Zeros
   OR PAR.PS_Pieces_Converted < *ZERO;

   // PAR.PS Weight Converted = CON.*ZERO
   PAR.PS_Weight_Converted = *ZERO;

   // PAR.PS Pieces Converted = CON.*ZERO
   PAR.PS_Pieces_Converted = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Conv  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476183;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?FP1054 create consumed records   -- 10/05/2020 WITH SHIPP CO ON ORDER
   //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
   CASE;

   // IF PAR.Order Number is Greater then zero
   IF PAR.Order_Number > *ZERO;

   //?WAS UPD WITH PAR.COMPANY NUMBER WHICH IS THE ACCTNG CO 10-05-2020
   EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = 0;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   }

   CASE;

   // IF LCL.ODS Sequence Number is zero
   IF LCL.ODS_Sequence_Number = *ZERO;

   EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = *ZERO;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

    //?USER: Exit processing

    // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
    PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

   }

   ENDIF;

   EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   PARAMETER(PAR.Pieces_Scheduled);
   PARAMETER(PAR.Weight_Scheduled);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing if Data record not found

    CASE;

    // IF PAR.OD Pieces Scheduled is Greater than zero
    IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

    // OR PAR.OD Weight Scheduled is Greater than zero
    OR PAR.OD_Weight_Scheduled > *ZERO;

    EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.OD_Production_Date);
    PARAMETER(PAR.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(PAR.OD_Weight_Scheduled);
    PARAMETER(PAR.ODS_Quantity_Short);
    PARAMETER(PAR.ODS_Weight_Short);
    PARAMETER(PAR.Deadline_Depart_Date_LH);
    PARAMETER(PAR.Deadline_Depart_Time_LH);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?USER: Process Data record

    // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
    LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

    // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
    LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
    + PAR.OD_Qty_Cnsmd_Pieces_Sched;

    CASE;

    // IF LCL.OD Pieces Scheduled is Less than or equal zero
    IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

    // AND LCL.OD Weight Scheduled is Less than or equal zero
    AND LCL.OD_Weight_Scheduled <= *ZERO;

    EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(LCL.OD_Weight_Scheduled);
    PARAMETER(DB1.ODS_Quantity_Short);
    PARAMETER(DB1.ODS_Weight_Short);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

   ENDIF;

  }

  //?Allocate consumed items or Deallocate consumed items.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Deallocate here:
  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  // PAR.Weight Scheduled USR = CON.*ZERO
  PAR.Weight_Scheduled_USR = *ZERO;

  EXECUTE FUNCTION(Rtv Order cnsmd wgt,pc RT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1928106;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(LCL.OD_Weight_Scheduled);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Weight Scheduled USR = CON.*ZERO - LCL.OD Weight Scheduled
  PAR.Weight_Scheduled_USR = *ZERO - LCL.OD_Weight_Scheduled;

  // PAR.Pieces Scheduled USR = CON.*ZERO - LCL.OD Pieces Scheduled
  PAR.Pieces_Scheduled_USR = *ZERO - LCL.OD_Qty_Cnsmd_Pieces_Sched;

  // PAR.Pieces Consumed USR = PAR.Pieces Consumed USR + PAR.Pieces Scheduled USR
  PAR.Pieces_Consumed_USR = PAR.Pieces_Consumed_USR + PAR.Pieces_Scheduled_USR;

  // PAR.Weight Consumed USR = PAR.Weight Consumed USR + PAR.Weight Scheduled USR
  PAR.Weight_Consumed_USR = PAR.Weight_Consumed_USR + PAR.Weight_Scheduled_USR;

  //?**UPDATE**
  //?FP1054  use lcl.production warehouse, acctng co
  EXECUTE FUNCTION(BPS Upd Pcs/Wgt Conv  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476182;
  PARAMETER(LCL.Accounting_Company);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(PAR.Pieces_Scheduled_USR);
  PARAMETER(PAR.Weight_Scheduled_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  {
   //?USER: Process Data record

   // PAR.PS Pieces Converted = DB1.PS Pieces Converted + PAR.Pieces Scheduled
   PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted + PAR.Pieces_Scheduled;

   // PAR.PS Weight Converted = DB1.PS Weight Converted + PAR.Weight Scheduled
   PAR.PS_Weight_Converted = DB1.PS_Weight_Converted + PAR.Weight_Scheduled;

   //?If weight OR pieces converted is LT 0 then make zero
   CASE;

   // IF PAR.PS Weight Converted is LT Zero
   IF PAR.PS_Weight_Converted < *ZERO;

   // OR PAR.PS Pieces Converted is LT Zeros
   OR PAR.PS_Pieces_Converted < *ZERO;

   // PAR.PS Weight Converted = CON.*ZERO
   PAR.PS_Weight_Converted = *ZERO;

   // PAR.PS Pieces Converted = CON.*ZERO
   PAR.PS_Pieces_Converted = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Conv  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476183;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?FP1054 create consumed records   -- 10/05/2020 WITH SHIPP CO ON ORDER
   //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
   CASE;

   // IF PAR.Order Number is Greater then zero
   IF PAR.Order_Number > *ZERO;

   //?WAS UPD WITH PAR.COMPANY NUMBER WHICH IS THE ACCTNG CO 10-05-2020
   EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = 0;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   }

   CASE;

   // IF LCL.ODS Sequence Number is zero
   IF LCL.ODS_Sequence_Number = *ZERO;

   EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = *ZERO;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

    //?USER: Exit processing

    // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
    PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

   }

   ENDIF;

   EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   PARAMETER(PAR.Pieces_Scheduled);
   PARAMETER(PAR.Weight_Scheduled);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing if Data record not found

    CASE;

    // IF PAR.OD Pieces Scheduled is Greater than zero
    IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

    // OR PAR.OD Weight Scheduled is Greater than zero
    OR PAR.OD_Weight_Scheduled > *ZERO;

    EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.OD_Production_Date);
    PARAMETER(PAR.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(PAR.OD_Weight_Scheduled);
    PARAMETER(PAR.ODS_Quantity_Short);
    PARAMETER(PAR.ODS_Weight_Short);
    PARAMETER(PAR.Deadline_Depart_Date_LH);
    PARAMETER(PAR.Deadline_Depart_Time_LH);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?USER: Process Data record

    // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
    LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

    // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
    LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
    + PAR.OD_Qty_Cnsmd_Pieces_Sched;

    CASE;

    // IF LCL.OD Pieces Scheduled is Less than or equal zero
    IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

    // AND LCL.OD Weight Scheduled is Less than or equal zero
    AND LCL.OD_Weight_Scheduled <= *ZERO;

    EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(LCL.OD_Weight_Scheduled);
    PARAMETER(DB1.ODS_Quantity_Short);
    PARAMETER(DB1.ODS_Weight_Short);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

  //?** 06/24/2014 JJH E3160
  //?** Changed the definition of the "Average if WPA" field to "Upd
  //?** Standard Production".  Include Item Bill of Material records
  //?** with Upd Standard Production = Blank(yes).
  //?Produced Item
  CASE;

  // IF DB1.BOM Type is Produced - Meat
  IF DB1.BOM_Type = 'P';

  // AND DB1.Production Yield is not equal to zeros
  AND DB1.Production_Yield <> *ZERO;

  // AND DB1.Upd Standard Production is blank
  AND DB1.Upd_Standard_Production = *BLANK;

  //?FP1054 RMC 5/14/09 Chg above CASE to ne 0 , it was GT 0
  CASE;

  // IF DB1.Component Item Code NE DB1.Item Code
  IF DB1.Component_Item_Code <> DB1.Item_Code;

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(NLL.Unit_Weight);
  PARAMETER(NLL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(NLL.Pieces_Per_Bag);
  PARAMETER(NLL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Piece Count Item = PAR.Piece Count Item
  LCL.Piece_Count_Item = PAR.Piece_Count_Item;

  ENDIF;

  // Weight Scheduled
  WRK.Copies_15_5_USR = PAR.Weight_Consumed_USR * ( DB1.Production_Yield / 100 'H' ) 'H';

  //?9/28/11 dont control rounding with +.005
  //?6/03/09   control rounding.. needed in case a number is like nnnn.9935
  //?  because we want it to round up
  // PAR.Weight Scheduled USR = WRK.Copies 15.5           USR * CON.1 *Rounded
  PAR.Weight_Scheduled_USR = WRK.Copies_15_5_USR * 1 'H';

  //?The number of Pieces Scheduled for a Produced Item is based
  //?on the Piece Count Item sts of the Component Item Code.
  //?Pieces Scheduled
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  //?CHANGE LOG
  DO;

  //?S00965 PKD 10/14/09 Pieces scheduled needs to be reduced if
  //?                    the yield is negative.
  //?C000527 PKD 02/12/09 When we have a negative yield, only the weight
  //?                     needs to be adjusted and not the pieces.
  //?C000527 PKD 02/12/09 The Pieces should not be adjusted at all.
  //?                     Added Adjust Credit Pieces logig.
  //?                     * Business Rule *
  //?                     If an Item is converted from a Base Boneless
  //?                     Loin, then do not adjust the Pieces of the
  //?                     Credit Items.  Only the Weight needs to be
  //?                     adjusted.  The Pieces of the Tenderloins and
  //?                     Sirloins, for example, were already produced
  //?                     when the Base Boneless Loin was produced in
  //?                     the Standard Mix.
  ENDDO;

  //?02/15/2010 PKD C000527 Added Adjust Credit Pieces logic.
  CASE;

  // IF LCL.Adjust Credit Pieces is No
  IF LCL.Adjust_Credit_Pieces = 'N';

  CASE;

  // IF DB1.Item Code EQ DB1.Component Item Code
  IF DB1.Item_Code = DB1.Component_Item_Code;

  //?* Converted Finished Goods *
  // PAR.Pieces Scheduled USR = PAR.Pieces Consumed USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Consumed_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* Credit Items *
  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  ENDIF;

  //?02/15/2010 PKD C000527 Added Adjust Credit Pieces logic.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* Base Finished Goods *
  // PAR.Pieces Scheduled USR = PAR.Pieces Consumed USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Consumed_USR;

  ENDIF;

  //?Pieces Scheduled
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  ENDIF;

  //?**UPDATE**
  EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Pieces_Scheduled_USR);
  PARAMETER(PAR.Weight_Scheduled_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
   PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

  ENDIF;

 }

 ENDIF;

 //?The following will be called even if there is not BOM
 ENDIF;

 //?* Allocate Production for Item on the Order. *
 // LCL.Production Date = PAR.Production Date
 LCL.Production_Date = PAR.Production_Date;

 // Call program UPD Allocate Prd      XF.
 CALL PROGRAM(UPD Allocate Prd      XF) ('POQKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Production_Date);
 PARAMETER(LCL.Production_Date);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.ATS_Quantity_Need_USR);
 PARAMETER(PAR.ATS_Weight_Need_USR);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.ATS_Adj_Type_USR_2);
 PARAMETER(PAR.PSAA_Program_Name);
 PARAMETER(PAR.Base_Conv_Loss_Item);

 ENDIF;

 ENDIF;

 //?FP1054 Subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 ENDIF;

 //?FP1054 do backwards for Frozen
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 //?08/27/10 PKD/SLM Per Damon, do not skip current date.
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 //?ITR:  Allocate Availability of Standard Mix
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Base & Production for Item On Order
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 EXECUTE FUNCTION(Rtv Item Prod Limit   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1648488;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Qty_Limit_USR);
 PARAMETER(PAR.CIE_Capacity_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv CIE Capacity Qty  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC2079750;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.CIE_Capacity_Code);
  PARAMETER(LCL.PS_Max_Qty_per_Day);
  {
   //?USER: Initialize routine

   //?E2885 RMC 12/9/13 new capacity field in CIE, get qty from PS Prod Cap file
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.CIE Capacity Code is Entered
   IF DB1.CIE_Capacity_Code <> *BLANK;

   EXECUTE FUNCTION(RTV PS Prod Cap Max   RT) TYPE(RTVOBJ) FILE(PBBFREP)           AC2079751;
   PARAMETER(DB1.CIE_Capacity_Code);
   PARAMETER(PAR.PS_Max_Qty_per_Day);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.CIE Capacity Code = DB1.CIE Capacity Code
   PAR.CIE_Capacity_Code = DB1.CIE_Capacity_Code;

   ENDIF;

  }

  CASE;

  // IF PAR.CIE Capacity Code is Entered
  IF PAR.CIE_Capacity_Code <> *BLANK;

  // PAR.Production Qty Limit USR = LCL.PS Max Qty per Day
  PAR.Production_Qty_Limit_USR = LCL.PS_Max_Qty_per_Day;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Production Qty Limit USR = DB1.Production Qty /Shift
  PAR.Production_Qty_Limit_USR = DB1.Production_Qty_Per_Shift;

  ENDIF;

 }

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Adjust Need based on Item Limit
 CASE;

 // IF LCL.Production Qty Limit USR is GT Zero
 IF LCL.Production_Qty_Limit_USR > *ZERO;

 //?FP1054 ?? needs to combine prod sched for item on order all whses
 CASE;

 // IF PAR.CIE Capacity Code is Not Entered
 IF PAR.CIE_Capacity_Code = *BLANK;

 // LCL.Weight Production USR = CON.*ZERO
 LCL.Weight_Production_USR = *ZERO;

 // LCL.Pieces Production USR = CON.*ZERO
 LCL.Pieces_Production_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Production-AllWhs RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC2050625;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Weight_Production_USR);
 PARAMETER(LCL.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 PARAMETER(LCL.Production_Qty);
 {
  //?USER: Initialize routine

  //?accumulate for items in a capacity code - so dont zero out
  //?USER: Processing if Data record not found

  // PAR.Weight Production USR = PAR.Weight Production USR + CON.*ZERO
  PAR.Weight_Production_USR = PAR.Weight_Production_USR + 0;

  // PAR.Pieces Production USR = PAR.Pieces Production USR + CON.*ZERO
  PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + 0;

  //?USER: Process Data record

  // Weight Production
  WRK.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  CASE;

  // IF DB1.PS Piece Count Item is Not Yes
  IF DB1.PS_Piece_Count_Item = *BLANK/'N';

  CASE;

  // IF DB1.PS Unit Weight is Greater than zero
  IF DB1.PS_Unit_Weight > *ZERO;

  // WRK.Production Qty = WRK.Weight Production USR / DB1.PS Unit Weight *Rounded
  WRK.Production_Qty = WRK.Weight_Production_USR / DB1.PS_Unit_Weight 'H';

  // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
  PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

  ENDIF;

  ENDIF;

  // PAR.Weight Production USR = PAR.Weight Production USR + WRK.Weight Production USR
  PAR.Weight_Production_USR = PAR.Weight_Production_USR + WRK.Weight_Production_USR;

  // Pieces Production
  WRK.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  CASE;

  // IF DB1.PS Piece Count Item is yes
  IF DB1.PS_Piece_Count_Item = 'Y';

  EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unt,umRT) TYPE(RTVOBJ) FILE(CABZREP)          AC1606251;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(NLL.UOM_Primary);
  PARAMETER(NLL.Unit_Weight);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Production Quantity
  WRK.Production_Qty = WRK.Pieces_Production_USR / ( WRK.Pieces_Per_Bag
  * WRK.Bags_Per_Unit 'H' );

  // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
  PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

  // PAR.Pieces Production USR = PAR.Pieces Production USR + WRK.Pieces Production USR
  PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + WRK.Pieces_Production_USR;

  ENDIF;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Prod f/Capcty Cde RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC2079756;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.CIE_Capacity_Code);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Weight_Production_USR);
 PARAMETER(LCL.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 PARAMETER(LCL.Production_Qty);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Production-AllWhs RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC2050625;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Weight_Production_USR);
  PARAMETER(PAR.Pieces_Production_USR);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.Production_Qty);
  {
   //?USER: Initialize routine

   //?accumulate for items in a capacity code - so dont zero out
   //?USER: Processing if Data record not found

   // PAR.Weight Production USR = PAR.Weight Production USR + CON.*ZERO
   PAR.Weight_Production_USR = PAR.Weight_Production_USR + 0;

   // PAR.Pieces Production USR = PAR.Pieces Production USR + CON.*ZERO
   PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + 0;

   //?USER: Process Data record

   // Weight Production
   WRK.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
   - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

   CASE;

   // IF DB1.PS Piece Count Item is Not Yes
   IF DB1.PS_Piece_Count_Item = *BLANK/'N';

   CASE;

   // IF DB1.PS Unit Weight is Greater than zero
   IF DB1.PS_Unit_Weight > *ZERO;

   // WRK.Production Qty = WRK.Weight Production USR / DB1.PS Unit Weight *Rounded
   WRK.Production_Qty = WRK.Weight_Production_USR / DB1.PS_Unit_Weight 'H';

   // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
   PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

   ENDIF;

   ENDIF;

   // PAR.Weight Production USR = PAR.Weight Production USR + WRK.Weight Production USR
   PAR.Weight_Production_USR = PAR.Weight_Production_USR + WRK.Weight_Production_USR;

   // Pieces Production
   WRK.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
   - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

   CASE;

   // IF DB1.PS Piece Count Item is yes
   IF DB1.PS_Piece_Count_Item = 'Y';

   EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unt,umRT) TYPE(RTVOBJ) FILE(CABZREP)          AC1606251;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(NLL.Description_Line_One);
   PARAMETER(NLL.UOM_Primary);
   PARAMETER(NLL.Unit_Weight);
   PARAMETER(WRK.Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Production Quantity
   WRK.Production_Qty = WRK.Pieces_Production_USR / ( WRK.Pieces_Per_Bag
   * WRK.Bags_Per_Unit 'H' );

   // PAR.Production Qty = PAR.Production Qty + WRK.Production Qty
   PAR.Production_Qty = PAR.Production_Qty + WRK.Production_Qty;

   // PAR.Pieces Production USR = PAR.Pieces Production USR + WRK.Pieces Production USR
   PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + WRK.Pieces_Production_USR;

   ENDIF;

   // PAR.PS Shift/Priority = DB1.PS Shift/Priority
   PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

  }

 }

 ENDIF;

 //?Available Production
 CASE;

 // IF LCL.Production Qty LT LCL.Production Qty Limit USR
 IF LCL.Production_Qty < LCL.Production_Qty_Limit_USR;

 // Available Production
 LCL.Available_Production = LCL.Production_Qty_Limit_USR - LCL.Production_Qty;

 //?Available Production
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Available Production = CON.*ZERO
 LCL.Available_Production = *ZERO;

 ENDIF;

 //?Need exceeds Production Capacity Available for the Item.
 CASE;

 // IF PAR.ATS Quantity Need USR GE LCL.Available Production
 IF PAR.ATS_Quantity_Need_USR >= LCL.Available_Production;

 // PAR.ATS Quantity Need USR = LCL.Available Production
 PAR.ATS_Quantity_Need_USR = LCL.Available_Production;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 ENDIF;

 ENDIF;

 //?Convert Standard Mix Production for the Item on the Order.
 CASE;

 // IF PAR.ATS Quantity Need USR is Greater than zero
 IF PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Item Prd Yld SWYG RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1930659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Yield);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Production Yield = PAR.Production Yield + DB1.Production Yield
  PAR.Production_Yield = PAR.Production_Yield + DB1.Production_Yield;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Allocate Base
 CASE;

 // IF PAR.Production Yield is Greater than zero
 IF PAR.Production_Yield > *ZERO;

 //?control rounding 6/11
 // Standard Mix Weight Need
 WRK.Copies_15_5_USR = PAR.ATS_Weight_Need_USR / ( PAR.Production_Yield / 100 'H' );

 // PAR.SM Weight Need USR = WRK.Copies 15.5           USR * CON.1 *Rounded
 PAR.SM_Weight_Need_USR = WRK.Copies_15_5_USR * 1 'H';

 //?Pieces Needed
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // SM Pieces Need USR
 PAR.SM_Pieces_Need_USR = ( PAR.ATS_Quantity_Need_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 //?Pieces Needed
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.SM Pieces Need USR = CON.*ZERO
 PAR.SM_Pieces_Need_USR = *ZERO;

 ENDIF;

 //?FP1054 RMC 2/27/09 Adjust need per consumed items avail
 // Call program BLD BPS Consumed Itm  XF.
 CALL PROGRAM(BLD BPS Consumed Itm  XF) ('PMFQXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.SM_Weight_Need_USR);
 PARAMETER(PAR.SM_Pieces_Need_USR);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(LCL.Percent_Available_for_ord);

 CASE;

 // IF PAR.SM Weight Need USR is Greater than zero
 IF PAR.SM_Weight_Need_USR > *ZERO;

 EXECUTE FUNCTION(Upd Allocate Std      RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1477778;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.ATS_Adj_Type_USR_2);
 PARAMETER(PAR.SM_Pieces_Need_USR);
 PARAMETER(PAR.SM_Weight_Need_USR);
 {
  //?USER: Initialize routine

  // PAR.100 % Already Used  USR = CND.no
  PAR.X100_Already_Used_USR = 'N';

  // PAR.Pieces Consumed USR = CON.*ZERO
  PAR.Pieces_Consumed_USR = *ZERO;

  // PAR.Weight Consumed USR = CON.*ZERO
  PAR.Weight_Consumed_USR = *ZERO;

  // PAR.RM Weight Need USR = PAR.SM Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.SM_Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.SM Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.SM_Pieces_Need_USR;

  // PAR.RM Weight Alloc USR = PAR.SM Weight Need USR
  PAR.RM_Weight_Alloc_USR = PAR.SM_Weight_Need_USR;

  // PAR.RM Pieces Alloc USR = PAR.SM Pieces Need USR
  PAR.RM_Pieces_Alloc_USR = PAR.SM_Pieces_Need_USR;

  //?FP1054 01/20/09 use production warehouse when alloc consumed items
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?02/15/10 PKD C000527 Retrieve Adjust Credit Pieces from Company
  //?             Item Ext.  This will be used for the Produced Items.
  EXECUTE FUNCTION(Rtv Adj Credit Pieces RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1973401;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Adjust_Credit_Pieces);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?USER: Process Data record

  //?Consumed Items
  CASE;

  // IF DB1.BOM Type is Consumed - Meat
  IF DB1.BOM_Type = 'C';

  // AND DB1.Consume Priority % is Greater than zero
  AND DB1.Consume_Priority_Percent > *ZERO;

  //?FP1054  use lcl.production warehouse, acctng co
  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(WRK.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item_USR);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(WRK.Export_Domestic);
  PARAMETER(WRK.Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(WRK.Primal_Group_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(WRK.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(WRK.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?Chilling Time
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  // PAR.Chilling Time USR = WRK.Warehouse Chill Time
  PAR.Chilling_Time_USR = WRK.Warehouse_Chill_Time;

  //?Chilling Time
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Chilling Time USR = WRK.Fresh Chilling Time
  PAR.Chilling_Time_USR = WRK.Fresh_Chilling_Time;

  ENDIF;

  //?FP1054 use lcl.production warehouse, acctng comp for  avail prod
  EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
  PARAMETER(LCL.Accounting_Company);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.RM_Weight_Avail_USR);
  PARAMETER(PAR.RM_Pieces_Avail_USR);
  PARAMETER(PAR.Chilling_Time_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
   //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
   //? instead of:
   //?Production = Standard + Prod Adj - Converted
   //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
   CASE;

   // IF DB1.PS Lock Status is NOT LOCKED
   IF DB1.PS_Lock_Status = 'N';

   //?Ship Cut Adjust
   CASE;

   // IF PAR.Chilling Time USR is GT Zero
   IF PAR.Chilling_Time_USR > *ZERO;

   // AND DB1.Production Date EQ JOB.*Job date
   AND DB1.Production_Date = JOB.*Job_date;

   EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
   PARAMETER(DB1.Company_Number);
   PARAMETER('P');
   PARAMETER(DB1.PS_Available_Ship_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
   // Weight Production
   PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
   + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

   // Pieces Production
   PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
   + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

   // Weight Available
   PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
   + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
   - DB1.PS_Weight_Prod_Allocated;

   // Pieces Available
   PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
   + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
   - DB1.PS_Pieces_Prod_Allocated;

   //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
   CASE;

   // IF PAR.ATS Weight Available USR is Less than zero
   IF PAR.ATS_Weight_Available_USR < *ZERO;

   CASE;

   // IF PAR.ATS Pieces Available USR is LE Zero
   IF PAR.ATS_Pieces_Available_USR <= *ZERO;

   // PAR.ATS Weight Available USR = CON.*ZERO
   PAR.ATS_Weight_Available_USR = *ZERO;

   // PAR.ATS Pieces Available USR = CON.*ZERO
   PAR.ATS_Pieces_Available_USR = *ZERO;

   ENDIF;

   ENDIF;

   // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
   PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

   ENDIF;

  }

  //?Schedule As Ordered
  CASE;

  // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
  IF PAR.ATS_Adj_Type_USR_2 = 'AO';

  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  CASE;

  // IF PAR.RM Pieces Need USR GT PAR.RM Pieces Avail USR
  IF PAR.RM_Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

  // PAR.RM Pieces Avail USR = PAR.RM Pieces Need USR
  PAR.RM_Pieces_Avail_USR = PAR.RM_Pieces_Need_USR;

  // PAR.RM Weight Avail USR = PAR.RM Weight Need USR
  PAR.RM_Weight_Avail_USR = PAR.RM_Weight_Need_USR;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.RM Weight Need USR GT PAR.RM Weight Avail USR
  IF PAR.RM_Weight_Need_USR > PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Avail USR = PAR.RM Pieces Need USR
  PAR.RM_Pieces_Avail_USR = PAR.RM_Pieces_Need_USR;

  // PAR.RM Weight Avail USR = PAR.RM Weight Need USR
  PAR.RM_Weight_Avail_USR = PAR.RM_Weight_Need_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Allocate consumed items or Deallocate consumed items.
  CASE;

  // IF PAR.ATS Adj Type USR 2 is Order Allocate
  IF PAR.ATS_Adj_Type_USR_2 = 'OA';

  // OR PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
  OR PAR.ATS_Adj_Type_USR_2 = 'AO';

  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  // PAR.Weight Scheduled USR = CON.*ZERO
  PAR.Weight_Scheduled_USR = *ZERO;

  //?Changed to process the Consumption based on Pieces Per Head of
  //?the Component Item Code.  Mark Arensberg  9/11/97
  //?Process by Pieces Per Head from Component Item
  CASE;

  // IF PAR.Pieces Per Head is GT Zero
  IF PAR.Pieces_Per_Head > *ZERO;

  // OR PAR.Piece Count Item USR is yes
  OR PAR.Piece_Count_Item_USR = 'Y';

  CASE;

  // IF PAR.RM Pieces Need USR is GT Zero
  IF PAR.RM_Pieces_Need_USR > *ZERO;

  //?Process by Consume Priority % using Pieces
  CASE;

  // IF DB1.Consume Priority % is Equal to 100 Pct
  IF DB1.Consume_Priority_Percent = 100;

  // PAR.Pieces Need USR = PAR.RM Pieces Need USR
  PAR.Pieces_Need_USR = PAR.RM_Pieces_Need_USR;

  // Weight Need
  PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Need USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Need_USR;

  ENDIF;

  //?Process by Consume Priority % using Pieces
  // IF DB1.Consume Priority % is Not Equal to 100 PCt
  IF DB1.Consume_Priority_Percent <> 100;

  // Pieces Need
  PAR.Pieces_Need_USR = PAR.RM_Pieces_Alloc_USR * ( DB1.Consume_Priority_Percent / 100 'H' );

  // Weight Need
  PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
  IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Process by Pieces Per Head from Component Item
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.RM Weight Need USR is Greater than zero
  IF PAR.RM_Weight_Need_USR > *ZERO;

  //?Process by Consume Priority % using Weight
  CASE;

  // IF DB1.Consume Priority % is Equal to 100 Pct
  IF DB1.Consume_Priority_Percent = 100;

  // PAR.Weight Need USR = PAR.RM Weight Need USR
  PAR.Weight_Need_USR = PAR.RM_Weight_Need_USR;

  //?Pieces Need
  CASE;

  // IF PAR.PS Avg Piece Wgt is GT Zero
  IF PAR.PS_Avg_Piece_Wgt > *ZERO;

  // Pieces Need USR
  PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt;

  ENDIF;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Weight Need USR GT PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR > PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Weight Need USR LE PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR <= PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Need USR
  PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Need_USR;

  ENDIF;

  //?Process by Consume Priority % using Weight
  // IF DB1.Consume Priority % is Not Equal to 100 PCt
  IF DB1.Consume_Priority_Percent <> 100;

  // Weight Need
  PAR.Weight_Need_USR = PAR.RM_Weight_Alloc_USR * ( DB1.Consume_Priority_Percent / 100 'H' );

  //?Pieces Need
  CASE;

  // IF PAR.PS Avg Piece Wgt is GT Zero
  IF PAR.PS_Avg_Piece_Wgt > *ZERO;

  // Pieces Need
  PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt;

  ENDIF;

  //?Pieces/Weight Scheduled
  CASE;

  // IF PAR.Weight Need USR GT PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR > PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
  PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

  // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
  PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

  //?Pieces/Weight Scheduled
  // IF PAR.Weight Need USR LE PAR.RM Weight Avail USR
  IF PAR.Weight_Need_USR <= PAR.RM_Weight_Avail_USR;

  // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

  // PAR.Weight Scheduled USR = PAR.Weight Need USR
  PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

  // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
  PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

  // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
  PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  // PAR.Pieces Consumed USR = PAR.Pieces Consumed USR + PAR.Pieces Scheduled USR
  PAR.Pieces_Consumed_USR = PAR.Pieces_Consumed_USR + PAR.Pieces_Scheduled_USR;

  // PAR.Weight Consumed USR = PAR.Weight Consumed USR + PAR.Weight Scheduled USR
  PAR.Weight_Consumed_USR = PAR.Weight_Consumed_USR + PAR.Weight_Scheduled_USR;

  //?**UPDATE**
  //?FP1054  use lcl.production warehouse
  EXECUTE FUNCTION(BPS Upd Pcs/Wgt Conv  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476182;
  PARAMETER(LCL.Accounting_Company);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(PAR.Pieces_Scheduled_USR);
  PARAMETER(PAR.Weight_Scheduled_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  {
   //?USER: Process Data record

   // PAR.PS Pieces Converted = DB1.PS Pieces Converted + PAR.Pieces Scheduled
   PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted + PAR.Pieces_Scheduled;

   // PAR.PS Weight Converted = DB1.PS Weight Converted + PAR.Weight Scheduled
   PAR.PS_Weight_Converted = DB1.PS_Weight_Converted + PAR.Weight_Scheduled;

   //?If weight OR pieces converted is LT 0 then make zero
   CASE;

   // IF PAR.PS Weight Converted is LT Zero
   IF PAR.PS_Weight_Converted < *ZERO;

   // OR PAR.PS Pieces Converted is LT Zeros
   OR PAR.PS_Pieces_Converted < *ZERO;

   // PAR.PS Weight Converted = CON.*ZERO
   PAR.PS_Weight_Converted = *ZERO;

   // PAR.PS Pieces Converted = CON.*ZERO
   PAR.PS_Pieces_Converted = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Conv  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476183;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?FP1054 create consumed records   -- 10/05/2020 WITH SHIPP CO ON ORDER
   //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
   CASE;

   // IF PAR.Order Number is Greater then zero
   IF PAR.Order_Number > *ZERO;

   //?WAS UPD WITH PAR.COMPANY NUMBER WHICH IS THE ACCTNG CO 10-05-2020
   EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = 0;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   }

   CASE;

   // IF LCL.ODS Sequence Number is zero
   IF LCL.ODS_Sequence_Number = *ZERO;

   EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = *ZERO;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

    //?USER: Exit processing

    // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
    PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

   }

   ENDIF;

   EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   PARAMETER(PAR.Pieces_Scheduled);
   PARAMETER(PAR.Weight_Scheduled);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing if Data record not found

    CASE;

    // IF PAR.OD Pieces Scheduled is Greater than zero
    IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

    // OR PAR.OD Weight Scheduled is Greater than zero
    OR PAR.OD_Weight_Scheduled > *ZERO;

    EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.OD_Production_Date);
    PARAMETER(PAR.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(PAR.OD_Weight_Scheduled);
    PARAMETER(PAR.ODS_Quantity_Short);
    PARAMETER(PAR.ODS_Weight_Short);
    PARAMETER(PAR.Deadline_Depart_Date_LH);
    PARAMETER(PAR.Deadline_Depart_Time_LH);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?USER: Process Data record

    // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
    LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

    // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
    LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
    + PAR.OD_Qty_Cnsmd_Pieces_Sched;

    CASE;

    // IF LCL.OD Pieces Scheduled is Less than or equal zero
    IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

    // AND LCL.OD Weight Scheduled is Less than or equal zero
    AND LCL.OD_Weight_Scheduled <= *ZERO;

    EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(LCL.OD_Weight_Scheduled);
    PARAMETER(DB1.ODS_Quantity_Short);
    PARAMETER(DB1.ODS_Weight_Short);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

   ENDIF;

  }

  //?Allocate consumed items or Deallocate consumed items.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Deallocate here:
  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  // PAR.Weight Scheduled USR = CON.*ZERO
  PAR.Weight_Scheduled_USR = *ZERO;

  EXECUTE FUNCTION(Rtv Order cnsmd wgt,pc RT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1928106;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(LCL.OD_Weight_Scheduled);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Weight Scheduled USR = CON.*ZERO - LCL.OD Weight Scheduled
  PAR.Weight_Scheduled_USR = *ZERO - LCL.OD_Weight_Scheduled;

  // PAR.Pieces Scheduled USR = CON.*ZERO - LCL.OD Pieces Scheduled
  PAR.Pieces_Scheduled_USR = *ZERO - LCL.OD_Qty_Cnsmd_Pieces_Sched;

  // PAR.Pieces Consumed USR = PAR.Pieces Consumed USR + PAR.Pieces Scheduled USR
  PAR.Pieces_Consumed_USR = PAR.Pieces_Consumed_USR + PAR.Pieces_Scheduled_USR;

  // PAR.Weight Consumed USR = PAR.Weight Consumed USR + PAR.Weight Scheduled USR
  PAR.Weight_Consumed_USR = PAR.Weight_Consumed_USR + PAR.Weight_Scheduled_USR;

  //?**UPDATE**
  //?FP1054  use lcl.production warehouse, acctng co
  EXECUTE FUNCTION(BPS Upd Pcs/Wgt Conv  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476182;
  PARAMETER(LCL.Accounting_Company);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(PAR.Pieces_Scheduled_USR);
  PARAMETER(PAR.Weight_Scheduled_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  {
   //?USER: Process Data record

   // PAR.PS Pieces Converted = DB1.PS Pieces Converted + PAR.Pieces Scheduled
   PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted + PAR.Pieces_Scheduled;

   // PAR.PS Weight Converted = DB1.PS Weight Converted + PAR.Weight Scheduled
   PAR.PS_Weight_Converted = DB1.PS_Weight_Converted + PAR.Weight_Scheduled;

   //?If weight OR pieces converted is LT 0 then make zero
   CASE;

   // IF PAR.PS Weight Converted is LT Zero
   IF PAR.PS_Weight_Converted < *ZERO;

   // OR PAR.PS Pieces Converted is LT Zeros
   OR PAR.PS_Pieces_Converted < *ZERO;

   // PAR.PS Weight Converted = CON.*ZERO
   PAR.PS_Weight_Converted = *ZERO;

   // PAR.PS Pieces Converted = CON.*ZERO
   PAR.PS_Pieces_Converted = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Conv  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476183;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?FP1054 create consumed records   -- 10/05/2020 WITH SHIPP CO ON ORDER
   //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
   CASE;

   // IF PAR.Order Number is Greater then zero
   IF PAR.Order_Number > *ZERO;

   //?WAS UPD WITH PAR.COMPANY NUMBER WHICH IS THE ACCTNG CO 10-05-2020
   EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = 0;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   }

   CASE;

   // IF LCL.ODS Sequence Number is zero
   IF LCL.ODS_Sequence_Number = *ZERO;

   EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   {
    //?USER: Initialize routine

    // PAR.ODS Sequence Number = CON.*ZERO
    PAR.ODS_Sequence_Number = *ZERO;

    //?USER: Process Data record

    // PAR.ODS Sequence Number = DB1.ODS Sequence Number
    PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

    //?USER: Exit processing

    // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
    PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

   }

   ENDIF;

   EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.ODS_Sequence_Number);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   PARAMETER(PAR.Pieces_Scheduled);
   PARAMETER(PAR.Weight_Scheduled);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing if Data record not found

    CASE;

    // IF PAR.OD Pieces Scheduled is Greater than zero
    IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

    // OR PAR.OD Weight Scheduled is Greater than zero
    OR PAR.OD_Weight_Scheduled > *ZERO;

    EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.OD_Production_Date);
    PARAMETER(PAR.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(PAR.OD_Weight_Scheduled);
    PARAMETER(PAR.ODS_Quantity_Short);
    PARAMETER(PAR.ODS_Weight_Short);
    PARAMETER(PAR.Deadline_Depart_Date_LH);
    PARAMETER(PAR.Deadline_Depart_Time_LH);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?USER: Process Data record

    // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
    LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

    // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
    LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
    + PAR.OD_Qty_Cnsmd_Pieces_Sched;

    CASE;

    // IF LCL.OD Pieces Scheduled is Less than or equal zero
    IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

    // AND LCL.OD Weight Scheduled is Less than or equal zero
    AND LCL.OD_Weight_Scheduled <= *ZERO;

    EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(DB1.ODS_Sequence_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Consumed_Item_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(LCL.OD_Weight_Scheduled);
    PARAMETER(DB1.ODS_Quantity_Short);
    PARAMETER(DB1.ODS_Weight_Short);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

  //?** 06/24/2014 JJH E3160
  //?** Changed the definition of the "Average if WPA" field to "Upd
  //?** Standard Production".  Include Item Bill of Material records
  //?** with Upd Standard Production = Blank(yes).
  //?Produced Item
  CASE;

  // IF DB1.BOM Type is Produced - Meat
  IF DB1.BOM_Type = 'P';

  // AND DB1.Production Yield is not equal to zeros
  AND DB1.Production_Yield <> *ZERO;

  // AND DB1.Upd Standard Production is blank
  AND DB1.Upd_Standard_Production = *BLANK;

  //?FP1054 RMC 5/14/09 Chg above CASE to ne 0 , it was GT 0
  CASE;

  // IF DB1.Component Item Code NE DB1.Item Code
  IF DB1.Component_Item_Code <> DB1.Item_Code;

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(NLL.Unit_Weight);
  PARAMETER(NLL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(NLL.Pieces_Per_Bag);
  PARAMETER(NLL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Piece Count Item = PAR.Piece Count Item
  LCL.Piece_Count_Item = PAR.Piece_Count_Item;

  ENDIF;

  // Weight Scheduled
  WRK.Copies_15_5_USR = PAR.Weight_Consumed_USR * ( DB1.Production_Yield / 100 'H' ) 'H';

  //?9/28/11 dont control rounding with +.005
  //?6/03/09   control rounding.. needed in case a number is like nnnn.9935
  //?  because we want it to round up
  // PAR.Weight Scheduled USR = WRK.Copies 15.5           USR * CON.1 *Rounded
  PAR.Weight_Scheduled_USR = WRK.Copies_15_5_USR * 1 'H';

  //?The number of Pieces Scheduled for a Produced Item is based
  //?on the Piece Count Item sts of the Component Item Code.
  //?Pieces Scheduled
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  //?CHANGE LOG
  DO;

  //?S00965 PKD 10/14/09 Pieces scheduled needs to be reduced if
  //?                    the yield is negative.
  //?C000527 PKD 02/12/09 When we have a negative yield, only the weight
  //?                     needs to be adjusted and not the pieces.
  //?C000527 PKD 02/12/09 The Pieces should not be adjusted at all.
  //?                     Added Adjust Credit Pieces logig.
  //?                     * Business Rule *
  //?                     If an Item is converted from a Base Boneless
  //?                     Loin, then do not adjust the Pieces of the
  //?                     Credit Items.  Only the Weight needs to be
  //?                     adjusted.  The Pieces of the Tenderloins and
  //?                     Sirloins, for example, were already produced
  //?                     when the Base Boneless Loin was produced in
  //?                     the Standard Mix.
  ENDDO;

  //?02/15/2010 PKD C000527 Added Adjust Credit Pieces logic.
  CASE;

  // IF LCL.Adjust Credit Pieces is No
  IF LCL.Adjust_Credit_Pieces = 'N';

  CASE;

  // IF DB1.Item Code EQ DB1.Component Item Code
  IF DB1.Item_Code = DB1.Component_Item_Code;

  //?* Converted Finished Goods *
  // PAR.Pieces Scheduled USR = PAR.Pieces Consumed USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Consumed_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* Credit Items *
  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  ENDIF;

  //?02/15/2010 PKD C000527 Added Adjust Credit Pieces logic.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* Base Finished Goods *
  // PAR.Pieces Scheduled USR = PAR.Pieces Consumed USR
  PAR.Pieces_Scheduled_USR = PAR.Pieces_Consumed_USR;

  ENDIF;

  //?Pieces Scheduled
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pieces Scheduled USR = CON.*ZERO
  PAR.Pieces_Scheduled_USR = *ZERO;

  ENDIF;

  //?**UPDATE**
  EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Pieces_Scheduled_USR);
  PARAMETER(PAR.Weight_Scheduled_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
   PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

  ENDIF;

 }

 ENDIF;

 //?The following will be called even if there is not BOM
 ENDIF;

 //?* Allocate Production for Item on the Order. *
 // LCL.Production Date = PAR.Production Date
 LCL.Production_Date = PAR.Production_Date;

 // Call program UPD Allocate Prd      XF.
 CALL PROGRAM(UPD Allocate Prd      XF) ('POQKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Production_Date);
 PARAMETER(LCL.Production_Date);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.ATS_Quantity_Need_USR);
 PARAMETER(PAR.ATS_Weight_Need_USR);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.ATS_Adj_Type_USR_2);
 PARAMETER(PAR.PSAA_Program_Name);
 PARAMETER(PAR.Base_Conv_Loss_Item);

 ENDIF;

 ENDIF;

 //?FP1054 Subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

}


ENDIF;

