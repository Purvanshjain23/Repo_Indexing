// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMESXFR
// ?Date: 14.08.2025 Time: 03:42:51
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Accum loads sequenced per zone for the sched ship date.
EXECUTE FUNCTION(RTV Load Count Sched  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1811765;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Scheduled_Ship_Date);
{
 //?USER: Initialize routine

 // Call program Rtv Company Ctl Vals  XF.
 CALL PROGRAM(Rtv Company Ctl Vals  XF) ('PNOQXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 PARAMETER(LCL.Partial_Load_Max_Lbs_USR);

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?**************  Exclusions from Auto sequencing process *****************
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?************** Get Day of Week from Calendar  *******************
 EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(WRK.Accounting_Period_Code);
 PARAMETER(PAR.Day_of_Week);
 PARAMETER(WRK.Week_Number);
 {
  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?**************  Accum nbr loads scheduled per zone *******
 CASE;

 // IF DB1.Schedule Sequence Number is GT 09
 IF DB1.Schedule_Sequence_Number > 09;

 //?**** Determine if load is BOX or COMBO ****
 // LCL.LSSA Load Slot Type = WRK.BLANK 1               USR
 LCL.LSSA_Load_Slot_Type = WRK.BLANK_1_USR;

 // LCL.LSSA Partial Load Sts = CND.blank
 LCL.LSSA_Partial_Load_Sts = *BLANK;

 //?Priority - CB,EX,BX
 CASE;

 // IF DB1.Shipping Method is Not Rail
 IF DB1.Shipping_Method = 'CT'/'PT';

 // AND DB1.Load Type is Regular
 AND DB1.Load_Type = 'R';

 EXECUTE FUNCTION(RTV Warehouse Slot Typ RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1619241;
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(LCL.WHS_Slotting_Limit_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1625242;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.U_M_Ordered);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
  // PAR.USR Unit of Measure = CON.*BLANK
  PAR.USR_Unit_of_Measure = *BLANK;

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(1);
  PARAMETER(PAR.USR_Unit_of_Measure);
  PARAMETER(PAR.Boxes_Total_Quantity);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
   //?  to reference LCL Context instead of DB1.
   //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.U/M - Ordered = DB1.U/M - Ordered
   LCL.U_M_Ordered = DB1.U_M_Ordered;

   CASE;

   // IF LCL.U/M - Ordered is Cases
   IF LCL.U_M_Ordered = 'CS';

   // LCL.U/M - Ordered = CND.EQ Boxes
   LCL.U_M_Ordered = 'BX';

   ENDIF;

   ENDIF;

   //?Accumulate the Box Quantity for slotting consideration  6/12/01
   CASE;

   // IF LCL.U/M - Ordered is EQ Boxes
   IF LCL.U_M_Ordered = 'BX';

   // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
   PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

   ENDIF;

   CASE;

   // IF PAR.USR Unit of Measure is *Blank
   IF PAR.USR_Unit_of_Measure = *BLANK;

   // PAR.USR Unit of Measure = LCL.U/M - Ordered
   PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
   IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Unit of Measure = CND.Mixed
   PAR.USR_Unit_of_Measure = 'MX';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?USER: Exit processing

  //?RMC E2709 added here so it wont need to be in every calling pgm
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 // LCL.LSSA Partial Load Sts = CND.blank
 LCL.LSSA_Partial_Load_Sts = *BLANK;

 //?Slot for Loads if Warehouse slot type is Load
 CASE;

 // IF LCL.WHS Slotting Limit Type is By Load
 IF LCL.WHS_Slotting_Limit_Type = 'L';

 //?RMC 09/24/07 dont chk this min. force the sequencing anyways
 // LCL.Partial Load Max Lbs USR = CON.*ZERO
 LCL.Partial_Load_Max_Lbs_USR = *ZERO;

 //?Slot the load if load wt gt partial load lbs
 CASE;

 // IF DB1.Total Load Order Weight GT LCL.Partial Load Max Lbs USR
 IF DB1.Total_Load_Order_Weight > LCL.Partial_Load_Max_Lbs_USR;

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // LCL.LSSA Load Slot Type = CND.Combo
 LCL.LSSA_Load_Slot_Type = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?set exports to box
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 // LCL.LSSA Load Slot Type = CND.Box
 LCL.LSSA_Load_Slot_Type = 'BX';

 //?set exports to box
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LSSA Load Slot Type = CND.Box
 LCL.LSSA_Load_Slot_Type = 'BX';

 ENDIF;

 ENDIF;

 //?Slot the load if load wt gt partial load lbs
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LSSA Partial Load Sts = CND.yes
 LCL.LSSA_Partial_Load_Sts = 'Y';

 ENDIF;

 ENDIF;

 //?Slot for Weights if Warehouse Slot Type is Weight
 CASE;

 // IF LCL.WHS Slotting Limit Type is By Weight
 IF LCL.WHS_Slotting_Limit_Type = 'W';

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // LCL.LSSA Load Slot Type = CND.Combo
 LCL.LSSA_Load_Slot_Type = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 // LCL.LSSA Load Slot Type = CND.Box
 LCL.LSSA_Load_Slot_Type = 'BX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LSSA Load Slot Type = CND.Box
 LCL.LSSA_Load_Slot_Type = 'BX';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.LSSA Load Slot Type is *ALL values
 IF LCL.LSSA_Load_Slot_Type = 'EX'/'CB'/'BX'/'MX';

 EXECUTE FUNCTION(Rtv/Chg Act Load CountRT) TYPE(RTVOBJ) FILE(PMAJREP)           AC1811768;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Day_of_Week);
 PARAMETER(DB1.Schedule_Sequence_Number);
 PARAMETER(LCL.LSSA_Load_Slot_Type);
 {
  //?USER: Processing if Data record not found

  //?dont accum if sequence isnt in the zone file
  //?S16991 DN 11/03/20-Set Values to Create PMAJREP Record.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.LSSA Load Slot Type is Box
  IF PAR.LSSA_Load_Slot_Type = 'BX';

  // LCL.LSZ Box Actual Loads = CON.1
  LCL.LSZ_Box_Actual_Loads = 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.LSZ Box Actual Loads = CON.*ZERO
  LCL.LSZ_Box_Actual_Loads = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.LSSA Load Slot Type is Combo
  IF PAR.LSSA_Load_Slot_Type = 'CB';

  // LCL.LSZ Combo Actual Loads = CON.1
  LCL.LSZ_Combo_Actual_Loads = 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.LSZ Combo Actual Loads = CON.*ZERO
  LCL.LSZ_Combo_Actual_Loads = *ZERO;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(Crt Load Seq Zones    CR) TYPE(CRTOBJ) FILE(PMAJREP)           AC1811342;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.LSZ_Day_of_Week);
  PARAMETER(PAR.LSZ_Zone_Sched_Seq_Nbr);
  PARAMETER(*ZERO);
  PARAMETER(LCL.LSZ_Box_Actual_Loads);
  PARAMETER(*ZERO);
  PARAMETER(LCL.LSZ_Combo_Actual_Loads);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('A');
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  CASE;

  // IF PAR.LSSA Load Slot Type is Box
  IF PAR.LSSA_Load_Slot_Type = 'BX';

  // WRK.LSZ Box Actual Loads = DB1.LSZ Box Actual Loads + CON.1
  WRK.LSZ_Box_Actual_Loads = DB1.LSZ_Box_Actual_Loads + 1;

  // WRK.LSZ Combo Actual Loads = DB1.LSZ Combo Actual Loads
  WRK.LSZ_Combo_Actual_Loads = DB1.LSZ_Combo_Actual_Loads;

  // IF PAR.LSSA Load Slot Type is Combo
  IF PAR.LSSA_Load_Slot_Type = 'CB';

  // WRK.LSZ Combo Actual Loads = DB1.LSZ Combo Actual Loads + CON.1
  WRK.LSZ_Combo_Actual_Loads = DB1.LSZ_Combo_Actual_Loads + 1;

  // WRK.LSZ Box Actual Loads = DB1.LSZ Box Actual Loads
  WRK.LSZ_Box_Actual_Loads = DB1.LSZ_Box_Actual_Loads;

  ENDIF;

  EXECUTE FUNCTION(Chg Load Seq Zones    CH) TYPE(CHGOBJ) FILE(PMAJREP)           AC1811343;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.LSZ_Day_of_Week);
  PARAMETER(DB1.LSZ_Zone_Sched_Seq_Nbr);
  PARAMETER(DB1.LSZ_Box_Limit_per_Zone);
  PARAMETER(WRK.LSZ_Box_Actual_Loads);
  PARAMETER(DB1.LSZ_Combo_Load_Limit);
  PARAMETER(WRK.LSZ_Combo_Actual_Loads);
  PARAMETER(DB1.LSZ_Dft_for_Buyers_Truck);
  PARAMETER(DB1.LSZ_Unused_Limit);
  PARAMETER(DB1.LSZ_Unused_Actual_Loads);
  PARAMETER(DB1.LSZ_Unused_Sts);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

}


