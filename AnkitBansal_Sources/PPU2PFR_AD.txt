// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPU2PFR
// ?Date: 14.08.2025 Time: 12:06:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// PAR.Yes/No Selection      USR = CND.No
PAR.Yes_No_Selection_USR = 'N';

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?******  Maintenance Log  ******
//?10/27/04 PKD Added Adjustment Transactions as an input parameter.
//?             Added selection for Adjustment Transactions.
//?*****
//?** 03/28/2006 LJB T060  Do not print the order total detail lines
//?*****
//?040706 SLM Report selection update for standards missing fields
//?USER: Record selection processing

//?SEL:  User ID
CASE;

// IF PAR.User Id is equal to blank
IF PAR.User_Id = *BLANK;

//?SEL:  User ID
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.User Id NE PAR.User Id
IF DB1.User_Id <> PAR.User_Id;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?10/27/04 PKD Added selection for Adjustment Transactions.
//?SEL:  Adjustment Transactions
CASE;

// IF PAR.Dtl/Sum/Ttl/Typ Sts   USR is Adjustment Transactions
IF PAR.Dtl_Sum_Ttl_Typ_Sts_USR = 'A';

CASE;

// IF DB1.LLT Trans Type is Receipt/Shipment
IF DB1.LLT_Transaction_Type = 'R'/'S';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(X1PG_Item_Desc_DRV);
PARAMETER(X1PG_Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF PAR.Item Code is Not Entered
IF PAR.Item_Code = *ZERO;

// 1PG.Item Desc DRV = CON.*ALL
X1PG_Item_Desc_DRV = *ALL;

ENDIF;

CASE;

// IF 1PG.Dtl/Sum/Ttl/Typ Sts   USR is *ALL values
IF X1PG_Dtl_Sum_Ttl_Typ_Sts_USR = 'D'/'S'/'T'/'G'/'A';

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Dtl/Sum/Ttl/Typ Sts   USR
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Dtl_Sum_Ttl_Typ_Sts_USR);

// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 1  USR = CON.*ALL
X1PG_Condition_Desc_1_USR = *ALL;

ENDIF;

// 1PG.Transaction Control Desc = Condition name of 1PG.LLT Trans Type
X1PG_Transaction_Control_Desc = RTVCND(X1PG_LLT_Transaction_Type);

CASE;

// IF 1PG.LLT Trans Type is *ALL values
IF X1PG_LLT_Transaction_Type = 'R'/'A'/'T'/'RT'/'S'/'AP'/'C';

// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Transaction Control Desc = CON.*ALL
X1PG_Transaction_Control_Desc = *ALL;

ENDIF;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(X1PG_Warehouse_Desc_DRV);
PARAMETER(X1PG_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


// 1PG.Description 21a 1 Usr = Condition name of 1PG.No Activity Report Usr
X1PG_Description_21a_1_Usr = RTVCND(X1PG_No_Activity_Report_Usr);

// 1PG.Description 21a 2 Usr = Condition name of 1PG.Detail/Summary Report Usr
X1PG_Description_21a_2_Usr = RTVCND(X1PG_Detail_Summary_Report_Usr);

//?USER: Null report processing

// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Warehouse Code header format

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT LLT Trans Type header format

CASE;

IF NEW LLT_Transaction_Date;
// SUPPRESSED PRINT LLT Trans Date header format

ENDIF;

// SUPPRESSED PRINT LLT Production Date header format

// SUPPRESSED PRINT Location Code header format

// SUPPRESSED PRINT Order Number header format

//?USER: Process before print of detail format

// PAR.Yes/No Selection      USR = CND.No
PAR.Yes_No_Selection_USR = 'N';

//?USER: On print of detail format

//?** Do not print the detail lines                     03/28/2006 LJB
// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Process after print of detail format

NXT.Quantity_Loc_Trans_SUM = SUM(CUR.LLT_Transaction_Qty);

//?USER: Print required level totals

CASE;

IF NEW Order_Number;
EXECUTE FUNCTION(Item Description DRV) TYPE(DRVFLD)                             AC1633414;
PARAMETER(CUR.Item_Description_DRV);
PARAMETER(CUR.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF CUR.Quantity Loc Trans SUM is Equal to Zero
IF CUR.Quantity_Loc_Trans_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// SUPPRESSED PRINT Order Number totals format

NXT.Quantity_Loc_Trans_SUM = SUM(CUR.Quantity_Loc_Trans_SUM);

ENDIF;

CASE;

IF NEW Location_Code;
// SUPPRESSED PRINT Location Code totals format

NXT.Quantity_Loc_Trans_SUM = SUM(CUR.Quantity_Loc_Trans_SUM);

ENDIF;

// SUPPRESSED PRINT LLT Production Date totals format

CASE;

IF NEW LLT_Transaction_Date;
// PAR.Yes/No Selection      USR = CND.Yes
PAR.Yes_No_Selection_USR = 'Y';

CASE;

// IF CUR.Quantity Loc Trans SUM is Equal to Zero
IF CUR.Quantity_Loc_Trans_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print LLT Trans Date totals format
PRINT LLT Trans Date totals format;

NXT.Quantity_Loc_Trans_SUM = SUM(CUR.Quantity_Loc_Trans_SUM);

ENDIF;

CASE;

IF NEW LLT_Transaction_Type;
// PAR.Yes/No Selection      USR = CND.Yes
PAR.Yes_No_Selection_USR = 'Y';

// CUR.Transaction Control Desc = Condition name of CUR.LLT Trans Type
CUR.Transaction_Control_Desc = RTVCND(CUR.LLT_Transaction_Type);

CASE;

// IF CUR.Quantity Loc Trans SUM is Equal to Zero
IF CUR.Quantity_Loc_Trans_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print LLT Trans Type totals format
PRINT LLT Trans Type totals format;

NXT.Quantity_Loc_Trans_SUM = SUM(CUR.Quantity_Loc_Trans_SUM);

ENDIF;

CASE;

IF NEW Item_Code;
// PAR.Yes/No Selection      USR = CND.Yes
PAR.Yes_No_Selection_USR = 'Y';

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CUR.Item_Desc_DRV);
PARAMETER(CUR.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Weight Display 1 = CUR.Quantity Loc Trans SUM * PAR.Unit Weight *
CUR.Weight_Display_1 = CUR.Quantity_Loc_Trans_SUM * PAR.Unit_Weight;

CASE;

// IF CUR.Quantity Loc Trans SUM is Equal to Zero
IF CUR.Quantity_Loc_Trans_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Item Code totals format
PRINT Item Code totals format;

NXT.Quantity_Loc_Trans_SUM = SUM(CUR.Quantity_Loc_Trans_SUM);

NXT.Transaction_Wgt_Ttl_SUM = SUM(CUR.Weight_Display_1);

ENDIF;

// SUPPRESSED PRINT Warehouse Code totals format

CASE;

IF NEW Company_Number;
// PAR.Yes/No Selection      USR = CND.Yes
PAR.Yes_No_Selection_USR = 'Y';

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CUR.Company_Name_DRV);
PARAMETER(CUR.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// Print Company Number totals format
PRINT Company Number totals format;

NXT.Quantity_Loc_Trans_SUM = SUM(CUR.Quantity_Loc_Trans_SUM);

NXT.Transaction_Wgt_Ttl_SUM = SUM(CUR.Transaction_Wgt_Ttl_SUM);

ENDIF;

