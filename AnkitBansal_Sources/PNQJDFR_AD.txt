// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNQJDFR
// ?Date: 14.08.2025 Time: 03:46:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.CIP Price Date = JOB.*Job date
CTL.CIP_Price_Date = JOB.*Job_date;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

// LCL.Ship To Customer = CTL.Ship To Customer
LCL.Ship_To_Customer = CTL.Ship_To_Customer;

// LCL.Ship To State Code = CTL.Ship To State Code
LCL.Ship_To_State_Code = CTL.Ship_To_State_Code;

// LCL.Order Form Print Sts = CTL.Order Form Print Sts
LCL.Order_Form_Print_Sts = CTL.Order_Form_Print_Sts;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(RTV All fields         RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1478652;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(NLL.County_Code);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Telephone_Number_FF);
PARAMETER(NLL.Fax_Number_FF);
PARAMETER(NLL.Alpha_Search);
PARAMETER(NLL.Federal_Tax_Id);
PARAMETER(NLL.New_Customer_Status);
PARAMETER(NLL.SIC_Number);
PARAMETER(NLL.D_B_Number);
PARAMETER(NLL.D_B_Rating);
PARAMETER(NLL.Date_of_D_B_Rating);
PARAMETER(NLL.Credit_Line_Expire_Date);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Parent_Customer);
PARAMETER(NLL.Credit_Check_AR_Customer);
PARAMETER(NLL.Credit_Check_Parent_Cust);
PARAMETER(NLL.Country_Code);
PARAMETER(NLL.EDI_Invoice_Sts);
PARAMETER(NLL.Order_Entry_Hold);
PARAMETER(NLL.Parent_Credit_Limit);
PARAMETER(NLL.AR_Credit_Limit);
PARAMETER(NLL.Order_Entry_Hold_Date);
PARAMETER(NLL.Ship_To_Customer_Flag);
PARAMETER(NLL.Field_vs_In_House_flag);
PARAMETER(NLL.Email_When_Order_Shipped);
PARAMETER(NLL.Print_Invoice_Sts);
PARAMETER(NLL.Item_Reference_Status);
PARAMETER(NLL.Statement_Print_Frequency);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.CIP Item Price Override is Not Zeros
IF RCD.CIP_Item_Price_Override <> *ZERO;

// RCD.CIP Item Price = RCD.CIP Item Price Override
RCD.CIP_Item_Price = RCD.CIP_Item_Price_Override;

ENDIF;

//?SEL: Ship To Customer
CASE;

// IF CTL.Ship To Customer is not equal to zero
IF CTL.Ship_To_Customer <> *ZERO;

CASE;

// IF RCD.Ship To Customer NE CTL.Ship To Customer
IF RCD.Ship_To_Customer <> CTL.Ship_To_Customer;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Ship To State Code
CASE;

// IF CTL.Ship To State Code is State code not Blanks
IF CTL.Ship_To_State_Code <> *BLANK;

CASE;

// IF RCD.Ship To State Code NE CTL.Ship To State Code
IF RCD.Ship_To_State_Code <> CTL.Ship_To_State_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Order Form Print Sts
CASE;

// IF CTL.Order Form Print Sts is *ALL values
IF CTL.Order_Form_Print_Sts = 'Y'/*BLANK;

CASE;

// IF RCD.Order Form Print Sts NE CTL.Order Form Print Sts
IF RCD.Order_Form_Print_Sts <> CTL.Order_Form_Print_Sts;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?RECORD SELECTED
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Item Defaults      RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1371761;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(NLL.UOM_Primary_Dft);
PARAMETER(NLL.Conversion_Factor_1);
PARAMETER(NLL.Operation_Factor_1);
PARAMETER(NLL.UOM_Second_Dft);
PARAMETER(NLL.Conversion_Factor_2);
PARAMETER(NLL.Operation_Factor_2);
PARAMETER(NLL.UOM_Third_Dft);
PARAMETER(RCD.UOM_Pricing);
PARAMETER(NLL.Unit_Weight);
PARAMETER(NLL.Catch_Weight_Status);
PARAMETER(NLL.Item_Structure_Class_Code);
PARAMETER(NLL.Item_Structure_Group_Code);
PARAMETER(NLL.Item_Structure_Type_Code);
PARAMETER(NLL.Item_Type_Code);
PARAMETER(NLL.Package_Type_Code);
PARAMETER(NLL.Base_Conv_Loss_Item);
PARAMETER(NLL.Variety_Rendered_Cut);
PARAMETER(NLL.Frozen_Make_to_Order_Sts);
PARAMETER(NLL.Credit_Item_Status);
PARAMETER(NLL.Seconds_Item);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv CustItem Prc Dtls RT) TYPE(RTVOBJ) FILE(PNF3REP)           AC1987948;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER(NLL.Price_Sheet_Item_Sts);
PARAMETER(RCD.Order_Form_Print_Sts);
PARAMETER(NLL.OE_Dft_Commodity_Market);
PARAMETER(NLL.OE_Dft_Price_Method_Code);
PARAMETER(NLL.OE_Dft_Market_Date_Method);
PARAMETER(NLL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?CHG: Ship To Cust, State Code                RELOAD SUBFILE
CASE;

// IF LCL.Ship To Customer NE CTL.Ship To Customer
IF LCL.Ship_To_Customer <> CTL.Ship_To_Customer;

// OR LCL.Ship To State Code NE CTL.Ship To State Code
OR LCL.Ship_To_State_Code <> CTL.Ship_To_State_Code;

// OR LCL.Order Form Print Sts NE CTL.Order Form Print Sts
OR LCL.Order_Form_Print_Sts <> CTL.Order_Form_Print_Sts;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Customer
CASE;

// IF PGM.*Cursor field <IS> CTL.Ship To Customer
IF PGM.*Cursor_field = CTL.Ship_To_Customer;

// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?Item
CASE;

// IF PGM.*Cursor field <IS> CTL.Item Code
IF PGM.*Cursor_field = CTL.Item_Code;

// Call program SEL Item Default FG    SR.
CALL PROGRAM(SEL Item Default FG    SR) ('POMYSRR');
PARAMETER(CTL.Item_Code);

ENDIF;

ENDIF;

//?F06/F21/F22: Print/Distribute
CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

// OR CTL.*CMD key is CF21
OR CTL.*CMD_key = '21';

// OR CTL.*CMD key is CF22
OR CTL.*CMD_key = '22';

//?REQ: Ship To Customer
CASE;

// IF CTL.Ship To Customer is equal to zero
IF CTL.Ship_To_Customer = *ZERO;

// Send error message - 'Ship To Customer Required'
ERROR(USR4306);
MSGPARM(CTL.Ship_To_Customer);

QUIT;

ENDIF;

//?REQ: Price Date
CASE;

// IF CTL.CIP Price Date is Not Entered
IF CTL.CIP_Price_Date = *ZERO;

// Send error message - 'Market Price Date required.'
ERROR(USR1749);
MSGPARM(CTL.CIP_Price_Date);

QUIT;

ENDIF;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Order Form/Price Sheet');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

//?PRT: Price Sheet
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTPRCSHT');
PARAMETER(*JOBD);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = CVTVAR(PAR.PRT Number of Copies)
LCL.Copies_NBR_USR = CVTVAR(PAR.PRT_Number_of_Copies);

// Call program Zzz Price Sheet       CL.
SBMJOB;
CALL PROGRAM(Zzz Price Sheet       CL) ('PNRMUPR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.CIP_Price_Date);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
PARAMETER('PNRLPFR');
PARAMETER('PNRLPFR$');
SBMJOBEND;

ENDIF;

//?DST: Price Sheet
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('DSTPRCSHT');
PARAMETER(*JOBD);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = CVTVAR(PAR.PRT Number of Copies)
LCL.Copies_NBR_USR = CVTVAR(PAR.PRT_Number_of_Copies);

// Call program Zzz Price Sheet       CL.
SBMJOB;
CALL PROGRAM(Zzz Price Sheet       CL) ('PNRMUPR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.CIP_Price_Date);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
SBMJOBEND;

ENDIF;

ENDIF;

ENDIF;

//?CALC: Customer Price
CASE;

// IF CTL.Ship To Customer is not equal to zero
IF CTL.Ship_To_Customer <> *ZERO;

// AND CTL.Item Code is Entered
AND CTL.Item_Code <> *ZERO;

EXECUTE FUNCTION(Val Item Exists       RT) TYPE(RTVOBJ) FILE(PNF3REP)           AC2016663;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?1=Select
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

CASE;

// IF RCD.Order Form Print Sts is Yes
IF RCD.Order_Form_Print_Sts = 'Y';

EXECUTE FUNCTION(Chg Order Form Sts    RT) TYPE(RTVOBJ) FILE(PNF3REP)           AC1987955;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER(*BLANK);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Order Form Sts    CH) TYPE(CHGOBJ) FILE(PNF3REP)           AC1987956;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Order_Form_Print_Sts);
}


// IF RCD.Order Form Print Sts is No
IF RCD.Order_Form_Print_Sts = *BLANK;

EXECUTE FUNCTION(Chg Order Form Sts    RT) TYPE(RTVOBJ) FILE(PNF3REP)           AC1987955;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER('Y');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Order Form Sts    CH) TYPE(CHGOBJ) FILE(PNF3REP)           AC1987956;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Order_Form_Print_Sts);
}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?2=Edit
CASE;

// IF RCD.*SFLSEL is Option 2
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF RCD.CIP Price Date NE JOB.*Job date
IF RCD.CIP_Price_Date <> JOB.*Job_date;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Item Override Prc ER.
CALL PROGRAM(Zzz Item Override Prc ER) ('PNR9E1R');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.CIP_Price_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program Zzz Cust Item Prc Dtl DR.
CALL PROGRAM(Zzz Cust Item Prc Dtl DR) ('PNVOD1R');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.CIP_Price_Date);

ENDIF;

