// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDDPPVR
// ?Date: 14.08.2025 Time: 03:31:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?** Change warehouse and company # to wrk context
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?***** Change Log
DO;

//?** 03/30/2006 L060329C LJB
//?** 1. Change the validate security routine to put the warehouse
//?** and company numbers into work context fields.
//?** 2. If no co# or whse# passed in, leave blank and let users fill in.
//?** 3. Add retrieval index keys as input/output parameters.
//?** 4. If any keys come in with values, populate the screen with them.
//?*****
//?** 12/07/2006 TRF015 RMC  allow copy from
//?one Company, Region, Warehouse, Carrier TO  ALL Active warehouses in
//? in the TO company - leaving all other TO fields blank
ENDDO;

//?USER: Load screen

//?First time processing
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

//?** Put all par value fields onto the screen.          03/30/2006 LJB
MOVE *ALL (To: DTL From: PAR);

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Validate fields

//?Select company (from)
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Company Number
AND PGM.*Cursor_field = DTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

ENDIF;

//?Select region (from)
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Region Code
AND PGM.*Cursor_field = DTL.Region_Code;

// Call program SEL Active Region      SR.
CALL PROGRAM(SEL Active Region      SR) ('PDDOSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Region_Code);

ENDIF;

//?Select company (to)
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Company Number
AND PGM.*Cursor_field = DTL.USR_Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.USR_Company_Number);

ENDIF;

//?Select region (to)
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.@Region Code
AND PGM.*Cursor_field = DTL.@Region_Code;

// Call program SEL Active Region      SR.
CALL PROGRAM(SEL Active Region      SR) ('PDDOSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.@Region_Code);

ENDIF;

//?Select warehouse (to)
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Warehouse Code
AND PGM.*Cursor_field = DTL.USR_Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_Warehouse_Code);

ENDIF;

//?Select carrier (to)
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Carrier Code
AND PGM.*Cursor_field = DTL.USR_Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.USR_Carrier_Code);

ENDIF;

//?Company (from) required
CASE;

// IF DTL.Company Number EQ WRK.ZERO
IF DTL.Company_Number = WRK.ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(DTL.Company_Number);

ENDIF;

//?Validate from/to company
DO;

//?From company
CASE;

// IF DTL.Company Number NE WRK.ZERO
IF DTL.Company_Number <> WRK.ZERO;

EXECUTE FUNCTION(Val Company Number    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC1343408;
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Error if not found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(DTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Val company whse combo  12/7/6
CASE;

// IF DTL.Warehouse Code is Warehouse Code not Blank
IF DTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

ENDIF;

//?To company
CASE;

// IF DTL.USR Company Number NE WRK.ZERO
IF DTL.USR_Company_Number <> WRK.ZERO;

EXECUTE FUNCTION(Val Company Number    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC1343408;
PARAMETER(DTL.USR_Company_Number);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Error if not found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(DTL.USR_Company_Number);

ENDIF;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.USR_Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Val company whse combo  12/7/6
CASE;

// IF DTL.USR Warehouse Code is Warehouse Code not Blank
IF DTL.USR_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Shipping Company NE DTL.USR Company Number
IF WRK.Shipping_Company <> DTL.USR_Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_Warehouse_Code);
MSGPARM(DTL.USR_Company_Number);

ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?Validate from/to region
DO;

//?From region
CASE;

// IF DTL.Region Code NE WRK.BLANK
IF DTL.Region_Code <> WRK.BLANK;

EXECUTE FUNCTION(VAL Region Exists      RT) TYPE(RTVOBJ) FILE(PDKFREP)          AC1381023;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Region_Code);

EXECUTE FUNCTION(RTV Active Region Desc RT) TYPE(RTVOBJ) FILE(PDKFREP)          AC1379082;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Region_Code);
PARAMETER(DTL.Region_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error if not found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if not found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'PD Region not found'
ERROR(USR2225);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Region_Code);

ENDIF;

ENDIF;

//?To region
CASE;

// IF DTL.@Region Code NE WRK.BLANK
IF DTL.@Region_Code <> WRK.BLANK;

EXECUTE FUNCTION(VAL Region Exists      RT) TYPE(RTVOBJ) FILE(PDKFREP)          AC1381023;
PARAMETER(DTL.USR_Company_Number);
PARAMETER(DTL.@Region_Code);

EXECUTE FUNCTION(RTV Active Region Desc RT) TYPE(RTVOBJ) FILE(PDKFREP)          AC1379082;
PARAMETER(DTL.USR_Company_Number);
PARAMETER(DTL.@Region_Code);
PARAMETER(DTL.USR_Region_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error if not found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if not found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'PD Region not found'
ERROR(USR2225);
MSGPARM(DTL.USR_Company_Number);
MSGPARM(DTL.@Region_Code);

ENDIF;

ENDIF;

ENDDO;

//?Validate from/to warehouse
DO;

//?From warehouse
CASE;

// IF DTL.Warehouse Code NE WRK.BLANK
IF DTL.Warehouse_Code <> WRK.BLANK;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?Error if not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

//?To warehouse
CASE;

// IF DTL.USR Warehouse Code NE WRK.BLANK
IF DTL.USR_Warehouse_Code <> WRK.BLANK;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.USR_Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(DTL.USR_Warehouse_description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?Error if not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.USR_Warehouse_Code);

ENDIF;

ENDIF;

ENDDO;

//?Validate from/to carrier
DO;

//?From carrier
CASE;

// IF DTL.Carrier Code NE WRK.BLANK
IF DTL.Carrier_Code <> WRK.BLANK;

EXECUTE FUNCTION(Val Carrier           RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC1197583;
PARAMETER(DTL.Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Error if not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code);

ENDIF;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?To carrier
CASE;

// IF DTL.USR Carrier Code NE WRK.BLANK
IF DTL.USR_Carrier_Code <> WRK.BLANK;

EXECUTE FUNCTION(Val Carrier           RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC1197583;
PARAMETER(DTL.USR_Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Error if not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.USR_Carrier_Code);

ENDIF;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.USR_Carrier_Code);
PARAMETER(DTL.Description);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

ENDDO;

//?USER: Validate relations

//?Copy to same company *ALL
CASE;

// IF DTL.Company Number EQ DTL.USR Company Number
IF DTL.Company_Number = DTL.USR_Company_Number;

// AND DTL.Region Code EQ WRK.BLANK
AND DTL.Region_Code = WRK.BLANK;

// AND DTL.Warehouse Code EQ WRK.BLANK
AND DTL.Warehouse_Code = WRK.BLANK;

// AND DTL.Carrier Code EQ WRK.BLANK
AND DTL.Carrier_Code = WRK.BLANK;

// AND DTL.Starting Miles EQ WRK.ZERO
AND DTL.Starting_Miles = WRK.ZERO;

// Send error message - 'Cannot Copy to same carrier rate(s).'
ERROR(USR2220);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Region_Code);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Carrier_Code);
MSGPARM(DTL.Starting_Miles);
MSGPARM(DTL.USR_Company_Number);
MSGPARM(DTL.@Region_Code);
MSGPARM(DTL.USR_Warehouse_Code);
MSGPARM(DTL.USR_Carrier_Code);
MSGPARM(DTL.Unused_Mile_Range_1);

//?Copy to same company *ALL
// IF DTL.Company Number EQ DTL.USR Company Number
IF DTL.Company_Number = DTL.USR_Company_Number;

// AND DTL.Region Code EQ WRK.BLANK
AND ( DTL.Region_Code = WRK.BLANK;

// OR DTL.Region Code EQ DTL.@Region Code
OR DTL.Region_Code = DTL.@Region_Code );

// AND DTL.Warehouse Code EQ WRK.BLANK
AND ( DTL.Warehouse_Code = WRK.BLANK;

// OR DTL.Warehouse Code EQ DTL.USR Warehouse Code
OR DTL.Warehouse_Code = DTL.USR_Warehouse_Code );

// AND DTL.Carrier Code EQ WRK.BLANK
AND ( DTL.Carrier_Code = WRK.BLANK;

// OR DTL.Carrier Code EQ DTL.USR Carrier Code
OR DTL.Carrier_Code = DTL.USR_Carrier_Code );

// AND DTL.Starting Miles EQ WRK.ZERO
AND ( DTL.Starting_Miles = WRK.ZERO;

// OR DTL.Starting Miles EQ DTL.Mile Range 1
OR DTL.Starting_Miles = DTL.Unused_Mile_Range_1 );

// Send error message - 'Cannot Copy to same carrier rate(s).'
ERROR(USR2220);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Region_Code);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Carrier_Code);
MSGPARM(DTL.Starting_Miles);
MSGPARM(DTL.USR_Company_Number);
MSGPARM(DTL.@Region_Code);
MSGPARM(DTL.USR_Warehouse_Code);
MSGPARM(DTL.USR_Carrier_Code);
MSGPARM(DTL.Unused_Mile_Range_1);

ENDIF;

//?** RMC 12/7/06   New to allow copy to Company's all active warehouses
// WRK.Status - Y or N = CND.no
WRK.Status_Y_or_N = 'N';

//?RMC Set flag if Copy to all active whses selected
CASE;

// IF DTL.Company Number is greater than zero
IF DTL.Company_Number > *ZERO;

// AND DTL.Warehouse Code is Warehouse Code not Blank
AND DTL.Warehouse_Code <> *BLANK;

// AND DTL.Region Code is Entered
AND DTL.Region_Code <> *BLANK;

// AND DTL.Carrier Code is entered
AND DTL.Carrier_Code <> *BLANK;

CASE;

// IF DTL.USR Company Number is not equal to zero
IF DTL.USR_Company_Number <> *ZERO;

// AND DTL.USR Warehouse Code is Warehouse Code Blank
AND DTL.USR_Warehouse_Code = *BLANK;

// AND DTL.@Region Code is Not Entered
AND DTL.@Region_Code = *BLANK;

// AND DTL.USR Carrier Code is Not Entered
AND DTL.USR_Carrier_Code = *BLANK;

// AND DTL.Mile Range 1 is Not Entered
AND DTL.Unused_Mile_Range_1 = *ZERO;

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.USR Company Number is not equal to zero
IF DTL.USR_Company_Number <> *ZERO;

// AND DTL.USR Carrier Code is Entered
AND DTL.USR_Carrier_Code <> *BLANK;

// AND DTL.@Region Code is Entered
AND DTL.@Region_Code <> *BLANK;

// AND DTL.USR Warehouse Code is Warehouse Code Blank
AND DTL.USR_Warehouse_Code = *BLANK;

// AND DTL.Mile Range 1 is Not Entered
AND DTL.Unused_Mile_Range_1 = *ZERO;

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?******************
CASE;

// IF WRK.Status - Y or N is no
IF WRK.Status_Y_or_N = 'N';

//?Both region codes must be entered, or neither
CASE;

// IF DTL.Region Code NE WRK.BLANK
IF DTL.Region_Code <> WRK.BLANK;

// AND DTL.@Region Code EQ WRK.BLANK
AND DTL.@Region_Code = WRK.BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.@Region_Code);

//?Both region codes must be entered, or neither
// IF DTL.Region Code EQ WRK.BLANK
IF DTL.Region_Code = WRK.BLANK;

// AND DTL.@Region Code NE WRK.BLANK
AND DTL.@Region_Code <> WRK.BLANK;

// Send error message - 'Value not allowed'
ERROR(USR2208);
MSGPARM(DTL.@Region_Code);

ENDIF;

//?Both warehouse codes must be entered, or neither
CASE;

// IF DTL.Warehouse Code NE WRK.BLANK
IF DTL.Warehouse_Code <> WRK.BLANK;

// AND DTL.USR Warehouse Code EQ WRK.BLANK
AND DTL.USR_Warehouse_Code = WRK.BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.USR_Warehouse_Code);

//?Both warehouse codes must be entered, or neither
// IF DTL.Warehouse Code EQ WRK.BLANK
IF DTL.Warehouse_Code = WRK.BLANK;

// AND DTL.USR Warehouse Code NE WRK.BLANK
AND DTL.USR_Warehouse_Code <> WRK.BLANK;

// Send error message - 'Value not allowed'
ERROR(USR2208);
MSGPARM(DTL.USR_Warehouse_Code);

ENDIF;

//?Both carrier codes must be entered, or neither
CASE;

// IF DTL.Carrier Code NE WRK.BLANK
IF DTL.Carrier_Code <> WRK.BLANK;

// AND DTL.USR Carrier Code EQ WRK.BLANK
AND DTL.USR_Carrier_Code = WRK.BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.USR_Carrier_Code);

//?Both carrier codes must be entered, or neither
// IF DTL.Carrier Code EQ WRK.BLANK
IF DTL.Carrier_Code = WRK.BLANK;

// AND DTL.USR Carrier Code NE WRK.BLANK
AND DTL.USR_Carrier_Code <> WRK.BLANK;

// Send error message - 'Value not allowed'
ERROR(USR2208);
MSGPARM(DTL.USR_Carrier_Code);

ENDIF;

//?Both starting miles must be entered, or neither
CASE;

// IF DTL.Starting Miles NE WRK.ZERO
IF DTL.Starting_Miles <> WRK.ZERO;

// AND DTL.Mile Range 1 EQ WRK.ZERO
AND DTL.Unused_Mile_Range_1 = WRK.ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(DTL.Unused_Mile_Range_1);

//?Both starting miles must be entered, or neither
// IF DTL.Starting Miles EQ WRK.ZERO
IF DTL.Starting_Miles = WRK.ZERO;

// AND DTL.Mile Range 1 NE WRK.ZERO
AND DTL.Unused_Mile_Range_1 <> WRK.ZERO;

// Send error message - 'Value not allowed'
ERROR(USR2209);
MSGPARM(DTL.Unused_Mile_Range_1);

ENDIF;

ENDIF;

//?USER: User defined action

//?Do this if copy to all whses NOT selected      12/7/06
CASE;

// IF WRK.Status - Y or N is no
IF WRK.Status_Y_or_N = 'N';

//?Fill in To Region
CASE;

// IF DTL.@Region Code EQ WRK.BLANK
IF DTL.@Region_Code = WRK.BLANK;

// DTL.@Region Code = DTL.Region Code
DTL.@Region_Code = DTL.Region_Code;

ENDIF;

//?Fill in To Warehouse
CASE;

// IF DTL.USR Warehouse Code EQ WRK.BLANK
IF DTL.USR_Warehouse_Code = WRK.BLANK;

// DTL.USR Warehouse Code = DTL.Warehouse Code
DTL.USR_Warehouse_Code = DTL.Warehouse_Code;

ENDIF;

//?Fill in To Carrier
CASE;

// IF DTL.USR Carrier Code EQ WRK.BLANK
IF DTL.USR_Carrier_Code = WRK.BLANK;

// DTL.USR Carrier Code = DTL.Carrier Code
DTL.USR_Carrier_Code = DTL.Carrier_Code;

ENDIF;

//?Fill in To Miles
CASE;

// IF DTL.Mile Range 1 EQ WRK.ZERO
IF DTL.Unused_Mile_Range_1 = WRK.ZERO;

// DTL.Mile Range 1 = DTL.Starting Miles
DTL.Unused_Mile_Range_1 = DTL.Starting_Miles;

ENDIF;

ENDIF;

// Call program Zzz Copy Carrier Rates XF.
CALL PROGRAM(Zzz Copy Carrier Rates XF) ('PDD4XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Region_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Starting_Miles);
PARAMETER(DTL.USR_Company_Number);
PARAMETER(DTL.@Region_Code);
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(DTL.USR_Carrier_Code);
PARAMETER(DTL.Unused_Mile_Range_1);
PARAMETER(WRK.Status_Y_or_N);

// DTL.@Region Code = CON.*BLANK
DTL.@Region_Code = *BLANK;

// DTL.USR Warehouse Code = CON.*BLANK
DTL.USR_Warehouse_Code = *BLANK;

// DTL.USR Carrier Code = CON.*BLANK
DTL.USR_Carrier_Code = *BLANK;

// DTL.Mile Range 1 = CON.*ZERO
DTL.Unused_Mile_Range_1 = *ZERO;

