// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTPPVR
// ?Date: 14.08.2025 Time: 03:36:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Allow Multi-Whs   RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1512192;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Allow_Multi_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?** FP1127 Don't fill in the passed co# here.
// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

//?***** Change Log and Comments
DO;

//?** 05/08/2008 LJB FP1127
//?** Changed the program to use Company Number CDE instead of Company Number
//?** DTL.Company Number is being passed to the reports but
//?** DTL.Company Number CDE is the screen field. This causes the
//?** wrong company number to be sent to the submitted report.
//?040606 slm Multi Co with warehouse was not working correctly
ENDDO;

//?USER: Load screen

CASE;

// IF LCL.First Time Flag is NO
IF LCL.First_Time_Flag = 'N';

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

// DTL.Warehouse Code = PAR.Warehouse Code
DTL.Warehouse_Code = PAR.Warehouse_Code;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?** Use the screen field to retrieve the company name
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

ENDIF;

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Allow Multi Warehouse is yes
IF PAR.Allow_Multi_Warehouse = 'Y';

// DTL.Text 1 Length USR = CON.+
DTL.Text_1_Length_USR = '+';

ENDIF;

CASE;

// IF DTL.LLT Trans Type is *ALL values
IF DTL.LLT_Transaction_Type = 'R'/'A'/'T'/'RT'/'S'/'AP'/'C';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Transaction Detail = CON.*BLANK
DTL.Transaction_Detail = *BLANK;

ENDIF;

// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

//?No Activity Report
CASE;

// IF DTL.Status - Y or N is no
IF DTL.Status_Y_or_N = 'N';

// DTL.Condition Name USR = CON.Transaction Journal
DTL.Condition_Name_USR = 'Transaction Journal';

//?No Activity Report
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Name USR = CON.No Activity
DTL.Condition_Name_USR = 'No Activity';

ENDIF;

// DTL.Report Type USR = CND.Summary
DTL.Report_Type_USR = 'S';

//?USER: Validate fields

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Company Warehouse
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse Code
IF PGM.*Cursor_field = DTL.Warehouse_Code;

CASE;

// IF PAR.Allow Multi Warehouse is yes
IF PAR.Allow_Multi_Warehouse = 'Y';

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Company_Number_CDE);

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Item Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Item Code
IF PGM.*Cursor_field = DTL.Item_Code;

// Call program SEL Company Item       SR.
CALL PROGRAM(SEL Company Item       SR) ('CAP1SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?CALC: Screen function fields

//?Validate company if entered - use screen field
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

//?Validate WAREHOUSE IF entered
CASE;

// IF DTL.Warehouse Code is Warehouse Code not Blank
IF DTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(VAL Shipp/Co Whs      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1779386;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

CASE;

// IF DTL.USR From Date is not entered
IF DTL.USR_From_Date = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?Date Edits
CASE;

// IF DTL.USR Through Date LT DTL.USR From Date
IF DTL.USR_Through_Date < DTL.USR_From_Date;

// AND DTL.USR Through Date is Entered
AND DTL.USR_Through_Date <> *ZERO;

// Send error message - 'Through date cannot occur before the from date'
ERROR(USR2251);
MSGPARM(DTL.USR_Through_Date);

ENDIF;

CASE;

// IF DTL.USR From Date is GT Zero
IF DTL.USR_From_Date > *ZERO;

CASE;

// IF DTL.USR Through Date is not entered
IF DTL.USR_Through_Date = *ZERO;

// DTL.USR Through Date = DTL.USR From Date
DTL.USR_Through_Date = DTL.USR_From_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(DTL.Item_Desc_DRV);
PARAMETER(DTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF DTL.LLT Trans Type is *ALL values
IF DTL.LLT_Transaction_Type = 'R'/'A'/'T'/'RT'/'S'/'AP'/'C';

EXECUTE FUNCTION(Transaction Detail) TYPE(DRVFLD)                               AC1549675;
PARAMETER(DTL.Transaction_Detail);
PARAMETER(DTL.LLT_Transaction_Type);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Transaction Detail = CON.*BLANK
DTL.Transaction_Detail = *BLANK;

ENDIF;

//?No Activity Report
CASE;

// IF DTL.Status - Y or N is no
IF DTL.Status_Y_or_N = 'N';

// DTL.Condition Name USR = CON.Transaction Journal
DTL.Condition_Name_USR = 'Transaction Journal';

//?No Activity Report
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Name USR = CON.No Activity
DTL.Condition_Name_USR = 'No Activity';

ENDIF;

CASE;

// IF DTL.Report Type USR EQ WRK.Blank for 4           USR
IF DTL.Report_Type_USR = WRK.Blank_for_4_USR;

// DTL.Report Type USR = CND.Summary
DTL.Report_Type_USR = 'S';

ENDIF;

//?USER: Validate relations

CASE;

// IF DTL.Item Code is Not Entered
IF DTL.Item_Code = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(DTL.Item_Desc_DRV);
PARAMETER(DTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF DTL.USR From Date is GT Zero
IF DTL.USR_From_Date > *ZERO;

CASE;

// IF DTL.USR Through Date is not entered
IF DTL.USR_Through_Date = *ZERO;

// DTL.USR Through Date = DTL.USR From Date
DTL.USR_Through_Date = DTL.USR_From_Date;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: User defined action

// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.From Date Pass        USR = DTL.USR From Date
PAR.From_Date_Pass_USR = DTL.USR_From_Date;

// PAR.Thru Date Pass        USR = DTL.USR Through Date
PAR.Thru_Date_Pass_USR = DTL.USR_Through_Date;

// LCL.No Activity Report Usr = DTL.Status - Y or N
LCL.No_Activity_Report_Usr = DTL.Status_Y_or_N;

// LCL.Detail/Summary Report Usr = DTL.Report Type USR
LCL.Detail_Summary_Report_Usr = DTL.Report_Type_USR;

// PAR.PRT Description = CON.Transaction History Rpt
PAR.PRT_Description = 'Transaction History Rpt';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Date 1          PASS  USR = DTL.USR From Date
PAR.Date_1_PASS_USR = DTL.USR_From_Date;

// PAR.Date 2          PASS  USR = DTL.USR Through Date
PAR.Date_2_PASS_USR = DTL.USR_Through_Date;

//?Transaction Type Report
CASE;

// IF DTL.Status - Y or N is no
IF DTL.Status_Y_or_N = 'N';

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('INVTRNJRN');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// Call program PRT Lot/Location Trans XF.
SBMJOB;
CALL PROGRAM(PRT Lot/Location Trans XF) ('PDTQXFR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.LLT_Transaction_Type);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Dtl_Sum_Ttl_Typ_Sts_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(DTL.Report_Type_USR);
PARAMETER(LCL.No_Activity_Report_Usr);
PARAMETER(LCL.Detail_Summary_Report_Usr);
SBMJOBOVR JOB(INVTRNJRN);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?No Activity Report
CASE;

// IF DTL.Status - Y or N is yes
IF DTL.Status_Y_or_N = 'Y';

// LCL.Item Code PASS        USR = DTL.Item Code
LCL.Item_Code_PASS_USR = DTL.Item_Code;

//?** Put Co# from the screen into the passed field    FP1127
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// Call program Zzz Lot No Actvty Rpt UP.
SBMJOB;
CALL PROGRAM(Zzz Lot No Actvty Rpt UP) ('POGRUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(LCL.Item_Code_PASS_USR);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.No_Activity_Report_Usr);
PARAMETER(LCL.Detail_Summary_Report_Usr);
SBMJOBEND;

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

