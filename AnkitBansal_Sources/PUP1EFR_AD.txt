// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUP1EFR
// ?Date: 14.08.2025 Time: 03:51:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// Call program VAL Set Inter. Access  XF.
CALL PROGRAM(VAL Set Inter. Access  XF) ('PDSKXFR');
PARAMETER('OMS');
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?Check User Profile Exist to Edit Original Ordered Qty.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.User Code Model is equal to blank
IF LCL.User_Code_Model = *BLANK;

EXECUTE FUNCTION(RTV for Existence     RT) TYPE(RTVOBJ) FILE(CADTREP)           AC2171404;
PARAMETER(JOB.*USER);
PARAMETER('ORDUPD');

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV for Existence     RT) TYPE(RTVOBJ) FILE(CADTREP)           AC2171404;
PARAMETER(LCL.User_Code_Model);
PARAMETER('ORDUPD');

ENDIF;

//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// LCL.User Appl Profile Exist U = CND.Yes
LCL.User_Appl_Profile_Exist_U = 'Y';

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.User Appl Profile Exist U = CND.No
LCL.User_Appl_Profile_Exist_U = 'N';

// LCL.Generic Message 80 USR = CONCAT(CON.User Profile not authoriz,CON.ed for edit.,CON.*ZERO)
LCL.Generic_Message_80_USR = 'User Profile not authoriz' + 'ed for edit.' (0);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

ENDIF;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

//?Display Message If User Not Authorized.
CASE;

// IF LCL.User Appl Profile Exist U is No
IF LCL.User_Appl_Profile_Exist_U = 'N';

// CTL.Text USR 40 = LCL.Generic Message 80 USR
CTL.Text_USR_40 = LCL.Generic_Message_80_USR;

ENDIF;

//?USER: Initialize subfile record (existing record)

//?Select No Records If Company or Order is 0.
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// OR CTL.Order Number is Equal to zeros
OR CTL.Order_Number = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

QUIT;

ENDIF;

//?Select By Company If Entered.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// AND CTL.Company Number is not equal to zero
AND CTL.Company_Number <> *ZERO;

// AND CTL.Company Number NE RCD.Company Number
AND CTL.Company_Number <> RCD.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Order If Entered.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// AND CTL.Order Number is Not equal to zeros
AND CTL.Order_Number <> *ZERO;

// AND CTL.Order Number NE RCD.Order Number
AND CTL.Order_Number <> RCD.Order_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selection.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// RCD.Quantity Ordered 1 USR = RCD.Quantity Ordered
RCD.Quantity_Ordered_1_USR = RCD.Quantity_Ordered;

// RCD.OD Original Ordered Qty U = RCD.OD Original Ordered Qty
RCD.OD_Original_Ordered_Qty_U = RCD.OD_Original_Ordered_Qty;

//?Set Cursor.
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

SET CURSOR;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

ENDIF;

//?USER: Validate subfile control

//?Both Company & Order Must Be Entered.
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// OR CTL.Order Number is Equal to zeros
OR CTL.Order_Number = *ZERO;

// LCL.Generic Message 80 USR = CONCAT(CON.Both Company and Order mu,CON.st be entered.,CON.*ZERO)
LCL.Generic_Message_80_USR = 'Both Company and Order mu' + 'st be entered.' (0);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

QUIT;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Orig Ordered Qty   CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC2182433;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.OD_Original_Ordered_Qty_U);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

//?Update Orig Ordered Qty in Sales History Ext if Exist.
EXECUTE FUNCTION(Upd Orig Ordered Qty  RT) TYPE(RTVOBJ) FILE(PMD0CPP)           AC2182559;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.OD_Original_Ordered_Qty_U);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Orig Ordered Qty  CH) TYPE(CHGOBJ) FILE(PMD0CPP)           AC2182558;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.SH_Original_Ordered_Qty);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


//?Update DM Proc Sts='N' in Sales History for Entire Order if Exist.
EXECUTE FUNCTION(Upd Data Mart Proc Sts RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC2182554;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Data Mart Proc Sts CH) TYPE(CHGOBJ) FILE(OMHSTPP)          AC2182555;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('N');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

