// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POGMPFR
// ?Date: 14.08.2025 Time: 12:06:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

EXECUTE FUNCTION(Sel Load by Whs       IF) TYPE(EXCINTFUN)                      AC1512394;
PARAMETER(PGM.*Record_selected);
PARAMETER(DB1.Load_ID);
PARAMETER(DB1.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Whs_Ord_Ship_Sts_USR);
PARAMETER(WRK.Plant_Controlled_Sts);
{
 //?Execute internal function

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 EXECUTE FUNCTION(Sel Order by Whs      RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1512395;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.*Record_selected);
 PARAMETER(PAR.Whs_Ord_Ship_Sts_USR);
 PARAMETER(PAR.Plant_Controlled_Sts);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.Whs Ord Ship Sts USR = CND.Not Shipped
  PAR.Whs_Ord_Ship_Sts_USR = *BLANK;

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  // PAR.Count 2 USR = CON.*ZERO
  PAR.Count_2_USR = *ZERO;

  // PAR.Plant Controlled Sts = CND.no
  PAR.Plant_Controlled_Sts = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Sel Order by Whs      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1512396;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.*Record_selected);
  PARAMETER(PAR.Whs_Ord_Found_STS);
  {
   //?USER: Initialize routine

   // PAR.Whs Ord Found STS = CND.no
   PAR.Whs_Ord_Found_STS = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   CASE;

   // IF PAR.Warehouse Code EQ DB1.Warehouse Code
   IF PAR.Warehouse_Code = DB1.Warehouse_Code;

   // PAR.*Record selected = CND.*YES
   PAR.*Record_selected = 'Y';

   // PAR.Whs Ord Found STS = CND.yes
   PAR.Whs_Ord_Found_STS = 'Y';

   QUIT;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF DB1.Trans Contol AS400/Plant is Plant
  IF DB1.Trans_Contol_AS400_Plant = 'P';

  // PAR.Plant Controlled Sts = CND.yes
  PAR.Plant_Controlled_Sts = 'Y';

  ENDIF;

  CASE;

  // IF PAR.Whs Ord Found STS is yes
  IF PAR.Whs_Ord_Found_STS = 'Y';

  CASE;

  // IF DB1.Header Status is Confirmed & Complete
  IF DB1.Header_Status = 'C'/'R';

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Count 2 USR = PAR.Count 2 USR + CON.1
  PAR.Count_2_USR = PAR.Count_2_USR + 1;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.Count USR is GT 0
  IF PAR.Count_USR > *ZERO;

  CASE;

  // IF PAR.Count 2 USR is Greater than zero
  IF PAR.Count_2_USR > *ZERO;

  // PAR.Whs Ord Ship Sts USR = CND.Partial
  PAR.Whs_Ord_Ship_Sts_USR = 'P';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Whs Ord Ship Sts USR = CND.All
  PAR.Whs_Ord_Ship_Sts_USR = 'A';

  ENDIF;

  ENDIF;

 }

}


//?SEL:  Company Number
CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

CASE;

// IF DB1.Company Number NE PAR.Company Number
IF DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Scheduled Ship Date
CASE;

// IF PAR.Scheduled Ship Date EQ JOB.*Job date
IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

CASE;

// IF DB1.Scheduled Ship Date GT PAR.Scheduled Ship Date
IF DB1.Scheduled_Ship_Date > PAR.Scheduled_Ship_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Scheduled Ship Date
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Scheduled Ship Date NE PAR.Scheduled Ship Date
IF DB1.Scheduled_Ship_Date <> PAR.Scheduled_Ship_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL/OMT:  Load Status
CASE;

// IF PAR.Include/Exclude Option is Include
IF PAR.Include_Exclude_Option = 'INC';

CASE;

// IF PAR.Load Status NE DB1.Load Status
IF PAR.Load_Status <> DB1.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL/OMT:  Load Status
// IF PAR.Include/Exclude Option is Exclude
IF PAR.Include_Exclude_Option = 'EXC';

CASE;

// IF PAR.Load Status EQ DB1.Load Status
IF PAR.Load_Status = DB1.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

CASE;

// IF 1PG.Company Number is greater than zero
IF X1PG_Company_Number > *ZERO;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Company Name DRV = CON.*ALL
X1PG_Company_Name_DRV = *ALL;

ENDIF;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(X1PG_Warehouse_Desc_DRV);
PARAMETER(X1PG_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


// 1PG.USR Text 7            USR = Condition name of PAR.Include/Exclude Option
X1PG_USR_Text_7_USR = RTVCND(PAR.Include_Exclude_Option);

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Load Status
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Load_Status);

//?USER: Print required level headings

// SUPPRESSED PRINT Scheduled Ship Date header format

// SUPPRESSED PRINT Load Door 1 header format

// SUPPRESSED PRINT Deadline Departure Date header format

// SUPPRESSED PRINT Deadline Departure Time header format

// SUPPRESSED PRINT Load ID header format

//?USER: Process before print of detail format

CASE;

// IF CUR.Export Status is yes
IF CUR.Export_Status = 'Y';

CASE;

// IF CUR.Export Load USDA-OK is No
IF CUR.Export_Load_USDA_OK = 'N';

// OR CUR.Export Load USDA-OK is Not Entered
OR CUR.Export_Load_USDA_OK = *BLANK;

// CUR.Export Load USDA-OK = CND.Not Entered
CUR.Export_Load_USDA_OK = *BLANK;

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Export Load USDA-OK = CND.Not Entered
CUR.Export_Load_USDA_OK = *BLANK;

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

//?USER: On print of detail format

// CUR.Shipping Temp Code C/F = DB1.Shipping Temp C/F txt
CUR.Shipping_Temp_Code_C_F = DB1.Shipping_Temp_C_F_txt;

EXECUTE FUNCTION(RTV Last Stop Info    RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1604222;
PARAMETER(CUR.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(CUR.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(CUR.Ship_To_City);
PARAMETER(CUR.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
PARAMETER(CUR.Salesperson_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Last Stop Info     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1604224;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(LCL.Sales_Route_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(LCL.Sales_Route_Code);
 PARAMETER(LCL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


// CUR.Load Door 1 USR = CUR.Load Door 1
CUR.Load_Door_1_USR = CUR.Load_Door_1;

// CUR.Load Door 2 USR = CUR.Load Door 2
CUR.Load_Door_2_USR = CUR.Load_Door_2;

//?Export Status
CASE;

// IF DB1.Export Status is yes
IF DB1.Export_Status = 'Y';

// CUR.Text 2 Length USR = CON.EX
CUR.Text_2_Length_USR = 'EX';

//?Export Status
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text 2 Length USR = CON.*BLANK
CUR.Text_2_Length_USR = *BLANK;

// CUR.Export Load USDA-OK = CND.Not Entered
CUR.Export_Load_USDA_OK = *BLANK;

ENDIF;

//?Delivery Check
CASE;

// IF DB1.On Time - (Y/N) is Y/N Values
IF DB1.On_Time_Y_N = 'N'/'Y';

// CUR.Status - Y or N = CND.yes
CUR.Status_Y_or_N = 'Y';

//?Delivery Check
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Status - Y or N = CND.no
CUR.Status_Y_or_N = 'N';

ENDIF;

EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(CUR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(CUR.Gross_Weight);
PARAMETER(CUR.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


EXECUTE FUNCTION(RTV UM/Whs Code        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1541555;
PARAMETER(*ZERO);
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.USR_Unit_of_Measure);
{
 //?USER: Initialize routine

 // PAR.USR Unit of Measure = CON.*BLANK
 PAR.USR_Unit_of_Measure = *BLANK;

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(PAR.USR_Unit_of_Measure);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Accumulate the Box Quantity for slotting consideration  6/12/01
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
  PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Mixed
  PAR.USR_Unit_of_Measure = 'MX';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?If doing for one Order, because it isnt tied to a load yet
 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

 QUIT;

 ENDIF;

 //?orig code
 //?USER: Exit processing

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


//?** Use override miles, if entered            E00207
CASE;

// IF DB1.Override Total Load Miles is Entered
IF DB1.Override_Total_Load_Miles <> *ZERO;

// CUR.Total Load Miles = DB1.Override Total Load Miles
CUR.Total_Load_Miles = DB1.Override_Total_Load_Miles;

//?** Use override miles, if entered            E00207
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Total Load Miles = DB1.Total Load Miles
CUR.Total_Load_Miles = DB1.Total_Load_Miles;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Shiping Comment   PO
EXECUTE FUNCTION(Prt Load Comment      PO) TYPE(PRTOBJ);
PARAMETER(CUR.Load_ID);
PARAMETER('S');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level totals

// SUPPRESSED PRINT Load ID totals format

// SUPPRESSED PRINT Deadline Departure Time totals format

// SUPPRESSED PRINT Deadline Departure Date totals format

// SUPPRESSED PRINT Load Door 1 totals format

// SUPPRESSED PRINT Scheduled Ship Date totals format

