// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBMPPFR
// ?Date: 14.08.2025 Time: 12:03:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?Modification History
//?** 09/06/2012 slm e2202 Move build of spread sheet to the new
//?** Generic Primal Report  which will be used to feed Carlisle
//?**
//?** 06/27/2012 RMC E2073 print -0- qty for base items, with exceptions
//?** 04/19/2012 PKD E2142 * after Base Items
//?**
//?** 02/23/2012 SLM E001891
//?** Allow what is printed on the report to be placed in a spread
//?** sheet
//?** If this report is changed for the printing -- Yes then
//?** review the file layout that is being sent via spread sheet.
//?**
//?** 03/26/2009 SLM S00726
//?** Production Reports with Divide by Zero on Calculations
//?** will be installed with PA project FP1054
// WRK.PSP Report ID = JOB.*PROGRAM
WRK.PSP_Report_ID = JOB.*PROGRAM;

// WRK.PSP Report Date = JOB.*Job date
WRK.PSP_Report_Date = JOB.*Job_date;

// WRK.PSP Report Time = JOB.*Job time
WRK.PSP_Report_Time = JOB.*Job_time;

// WRK.PSP Report Sequence = CON.*ZERO
WRK.PSP_Report_Sequence = *ZERO;

//?USER: Record selection processing

//?Select warehouse (Production warehouse)
CASE;

// IF PAR.PS Production Warehouse is Entered
IF PAR.PS_Production_Warehouse <> *BLANK;

CASE;

// IF PAR.PS Production Warehouse NE DB1.PS Production Warehouse
IF PAR.PS_Production_Warehouse <> DB1.PS_Production_Warehouse;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Prd Sch InfoRevBoxRT) TYPE(RTVOBJ) FILE(CABZREP)           AC2088504;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.Description_Line_One);
PARAMETER(WRK.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(PAR.Item_Primal_Sched_Report);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Print On Schedule is yes
IF PAR.Print_On_Schedule = 'Y';

// OR PAR.Item Primal Sched Report is Entered
OR PAR.Item_Primal_Sched_Report > *BLANK;

//?if on either the regular schedule or the primal report then
//?this will be used on the Packaging schedule
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF WRK.Base/Conv/Loss Item is Base
IF WRK.Base_Conv_Loss_Item = 'B';

// WRK.Weight Sched Prod USR = DB1.PS Weight Prod Allocated
WRK.Weight_Sched_Prod_USR = DB1.PS_Weight_Prod_Allocated;

// WRK.Pieces Scheduled = DB1.PS Pieces Prod Allocated
WRK.Pieces_Scheduled = DB1.PS_Pieces_Prod_Allocated;

// IF *OTHERWISE
IF *OTHERWISE;

//?Weight Schedule production
// Weight Scheduled
WRK.Weight_Sched_Prod_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )                  +
- DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

//?Pieces Scheduled
// Pieces Scheduled
WRK.Pieces_Scheduled = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )                       +
- DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

ENDIF;

//?correction on divide by zero
// WRK.Item Piece Count Flag Chg = CND.blank
WRK.Item_Piece_Count_Flag_Chg = *BLANK;

//?Quantity Production
CASE;

// IF DB1.PS Piece Count Item is yes
IF DB1.PS_Piece_Count_Item = 'Y';

CASE;

// IF PAR.Pieces Per Bag is EQ Zero
IF PAR.Pieces_Per_Bag = *ZERO;

// OR PAR.Bags Per Unit is EQ Zero
OR PAR.Bags_Per_Unit = *ZERO;

// WRK.Quantity Production USR = CON.*ZERO
WRK.Quantity_Production_USR = *ZERO;

// WRK.Item Piece Count Flag Chg = CND.yes
WRK.Item_Piece_Count_Flag_Chg = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Quantity Production
WRK.Quantity_Production_USR = WRK.Pieces_Scheduled / ( PAR.Pieces_Per_Bag                          +
* PAR.Bags_Per_Unit );

ENDIF;

//?Quantity Production
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Unit Weight is Equal to zero
IF PAR.Unit_Weight = *ZERO;

// WRK.Quantity Production USR = CON.*ZERO
WRK.Quantity_Production_USR = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Quantity Production
WRK.Quantity_Production_USR = WRK.Weight_Sched_Prod_USR / PAR.Unit_Weight;

ENDIF;

ENDIF;

//?Dont print -0- qty, do print 0 for Base items, except some
CASE;

// IF WRK.Quantity Production USR is Less than/equal to Zero
IF WRK.Quantity_Production_USR <= *ZERO;

// AND WRK.Weight Production USR is Not Entered
AND WRK.Weight_Production_USR = *ZERO;

CASE;

// IF WRK.Base/Conv/Loss Item is Not Base
IF WRK.Base_Conv_Loss_Item = *BLANK/'C'/'F'/'L';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?E2073 6/25/12 RMC Dont print -0- qty for base items with:
CASE;

// IF WRK.Item Structure Type Code is Sausage
IF WRK.Item_Structure_Type_Code = 400;

// OR WRK.Item Structure Type Code is Trim
OR WRK.Item_Structure_Type_Code = 720;

// OR WRK.Item Structure Type Code is eq 740
OR WRK.Item_Structure_Type_Code = 740;

// OR WRK.Item Structure Group Code is eq 707
OR WRK.Item_Structure_Group_Code = 707;

// OR WRK.Item Structure Class Code is eq 551
OR WRK.Item_Structure_Class_Code = 551;

// OR WRK.Export/Domestic is Export
OR WRK.Export_Domestic = 'E';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

// WRK.Quantity Production USR = CON.*ZERO
WRK.Quantity_Production_USR = *ZERO;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

// TOP.Warehouse Code = PAR.PS Production Warehouse
TOP_Warehouse_Code = PAR.PS_Production_Warehouse;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(TOP_Warehouse_Code);
PARAMETER(TOP_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// TOP.Condition Desc. 1  USR = Condition name of PAR.Production Type
TOP_Condition_Desc_1_USR = RTVCND(PAR.Production_Type);

// TOP.Condition Desc. 2  USR = Condition name of PAR.Status - Y or N
TOP_Condition_Desc_2_USR = RTVCND(PAR.Status_Y_or_N);

// TOP.Condition Desc. 3  USR = Condition name of PAR.Report Type Schedule  USR
TOP_Condition_Desc_3_USR = RTVCND(PAR.Report_Type_Schedule_USR);

EXECUTE FUNCTION(Rtv Hog Volume         RT) TYPE(RTVOBJ) FILE(PDJCCPP)          AC1373728;
PARAMETER(TOP_Company_Number);
PARAMETER(DB1.Production_Type);
PARAMETER(TOP_Production_Date);
PARAMETER(TOP_Hog_Volume);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Hog Volume  2 HPE XF.
CALL PROGRAM(Rtv Hog Volume  2 HPE XF) ('PKQIXFR');
PARAMETER(TOP_Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(TOP_Hog_Volume_USR);

//?USER: Print required level headings

// SUPPRESSED PRINT Accounting Company Number header format

// SUPPRESSED PRINT Production Type header format

// SUPPRESSED PRINT Production Date header format

CASE;

IF NEW Department_Code;
EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Department_Code);
PARAMETER(CUR.Department_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.PSP Department Code = CUR.Department Code
WRK.PSP_Department_Code = CUR.Department_Code;

// WRK.PSP Department Dscrptn = CUR.Department Description
WRK.PSP_Department_Desc = CUR.Department_Description;

// Print Department Code header format
PRINT Department Code header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT PS Production Warehouse header format

//?USER: Process before print of detail format

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Report type = Variance Schedule
CASE;

// IF PAR.Report Type Schedule  USR is Variance Schedule
IF PAR.Report_Type_Schedule_USR = 'V';

//?ACTUAL PRODUCTION
EXECUTE FUNCTION(Rtv Actual Production RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1377968;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DB1.Warehouse_Code);
PARAMETER(DB1.Production_Date);
PARAMETER(WRK.Production_Weight_USR);
PARAMETER(WRK.Production_Quantity_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Production Weight USR = PAR.Production Weight USR + DB1.Transaction Weight
 PAR.Production_Weight_USR = PAR.Production_Weight_USR + DB1.Transaction_Weight;

 // PAR.Production Quantity USR = PAR.Production Quantity USR + DB1.Transaction Quantity
 PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + DB1.Transaction_Quantity;

}


// WRK.Quantity Production USR = WRK.Quantity Production USR - WRK.Production Quantity USR
WRK.Quantity_Production_USR = WRK.Quantity_Production_USR - WRK.Production_Quantity_USR;

// WRK.Weight Sched Prod USR = WRK.Weight Sched Prod USR - WRK.Production Weight USR
WRK.Weight_Sched_Prod_USR = WRK.Weight_Sched_Prod_USR - WRK.Production_Weight_USR;

//?If quantity is zero, then complete,
CASE;

// IF WRK.Quantity Production USR is Less than/equal to Zero
IF WRK.Quantity_Production_USR <= *ZERO;

// WRK.Quantity Production USR = CON.*ZERO
WRK.Quantity_Production_USR = *ZERO;

// WRK.Weight Sched Prod USR = CON.*ZERO
WRK.Weight_Sched_Prod_USR = *ZERO;

ENDIF;

ENDIF;

ENDIF;

//?USER: On print of detail format

// WRK.Qty Production Total Usr = WRK.Qty Production Total Usr + WRK.Quantity Production USR
WRK.Qty_Production_Total_Usr = WRK.Qty_Production_Total_Usr                                        +
+ WRK.Quantity_Production_USR;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Print required level totals

// SUPPRESSED PRINT PS Production Warehouse totals format

CASE;

IF NEW Item_Code;
EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(CUR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(CUR.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Base/Conv/Loss Item = CUR.Base/Conv/Loss Item
LCL.Base_Conv_Loss_Item = CUR.Base_Conv_Loss_Item;

CASE;

// IF CUR.Base/Conv/Loss Item is Base
IF CUR.Base_Conv_Loss_Item = 'B';

// CUR.Text 1 Length USR = CON.*
CUR.Text_1_Length_USR = *;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text 1 Length USR = CON.*BLANK
CUR.Text_1_Length_USR = *BLANK;

ENDIF;

// WRK.PSP Item Description = CUR.Description Line One
WRK.PSO_Item_Description = CUR.Description_Line_One;

EXECUTE FUNCTION(RTV BOX ID FOR ITEM    RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1396535;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Component_Item_Code);
PARAMETER(NLL.Unit_Weight);
PARAMETER(CUR.Box_Description);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // WRK.Unit Weight = CON.*ZERO
 WRK.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Item Type & PckCD  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1396536;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.Unit_Weight);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(WRK.Pallet_Tare_Weight);
 PARAMETER(WRK.Misc_Tare_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Package Type Code is Box
 IF PAR.Package_Type_Code = 'B';

 // PAR.Box Description = WRK.Description Line One
 PAR.Box_Description = WRK.Description_Line_One;

 // PAR.Unit Weight = WRK.Unit Weight
 PAR.Unit_Weight = WRK.Unit_Weight;

 // PAR.Box iD = DB1.Component Item Code * CON.1 *
 PAR.Box_iD = DB1.Component_Item_Code * 1;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Comment line 1    RT) TYPE(RTVOBJ) FILE(PDJDCPP)           AC1790947;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Production_Type);
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.PS_Production_Warehouse);
PARAMETER(1);
PARAMETER(CUR.Comment_Line_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Itm Bag Code      RT) TYPE(RTVOBJ) FILE(POAZCPP)           AC1790992;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Packaging_Item_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Packaging Item    RT) TYPE(RTVOBJ) FILE(POARREP)           AC1602514;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Packaging_Item_Code);
PARAMETER(CUR.Pckg_Item_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Qty Production Total Usr = WRK.Qty Production Total Usr
CUR.Qty_Production_Total_Usr = WRK.Qty_Production_Total_Usr;

CASE;

// IF CUR.Qty Production Total Usr is Less or Equal to zero
IF CUR.Qty_Production_Total_Usr <= *ZERO;

// AND CUR.Base/Conv/Loss Item is Not Base
AND CUR.Base_Conv_Loss_Item = *BLANK/'C'/'F'/'L';

//?RMC E2073 for base, print -0- line
// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text USR 40 = CON.*BLANK
CUR.Text_USR_40 = *BLANK;

//?correction on divide by zero
CASE;

// IF WRK.Item Piece Count Flag Chg is yes
IF WRK.Item_Piece_Count_Flag_Chg = 'Y';

// CUR.Text USR 40 = CON.Warning: Piece Count Item
CUR.Text_USR_40 = 'Warning: Piece Count Item';

// CUR.Text USR 40 = CONCAT(CUR.Text USR 40,CON.Flag Modified,CON.1)
CUR.Text_USR_40 = CUR.Text_USR_40 + 'Flag Modified' (1);

ENDIF;

ENDIF;

// WRK.Item Piece Count Flag Chg = CND.blank
WRK.Item_Piece_Count_Flag_Chg = *BLANK;

// WRK.Qty Production Total Usr = CON.*ZERO
WRK.Qty_Production_Total_Usr = *ZERO;

// Print Item Code totals format
PRINT Item Code totals format;

//?Embedded PRTOBJ : Prt Item Comments     PO
EXECUTE FUNCTION(Prt Item Comments     PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Production_Type);
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.PS_Production_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// SUPPRESSED PRINT Department Code totals format

// SUPPRESSED PRINT Production Date totals format

// SUPPRESSED PRINT Production Type totals format

// SUPPRESSED PRINT Accounting Company Number totals format

