// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDMEEFR
// ?Date: 14.08.2025 Time: 03:32:22
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Call C0001744 - S. Schertz - 10/07/96
//?Created new access path over Load Header to pick up invoiced Loads
//?Created new Select record over new access path and created a Val
//?function against the History record to assure that the load exists
//?before an attempt is made to update the Actual Freight Amount
//?Added a clear of WRK.Actual Freight Amount to the History update function
//?5/14/2004 RMC PKTR01 - removed company from ctl format
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Shipping_Method);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Shipping Method is Buyers Truck
IF RCD.Shipping_Method = 'CR'/'CT';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

//?USER: Validate subfile control

//?Prompt on Load Id control record
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Load ID
AND PGM.*Cursor_field = CTL.Load_ID;

// Call program Zzz Load ID-Invoiced   SR.
CALL PROGRAM(Zzz Load ID-Invoiced   SR) ('PDRBSRR');
PARAMETER(CTL.Load_ID);

ENDIF;

//?USER: Validate subfile record fields

//?Prompt on Load Id subfile record
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Load ID
AND PGM.*Cursor_field = RCD.Load_ID;

// Call program Zzz Load ID-Invoiced   SR.
CALL PROGRAM(Zzz Load ID-Invoiced   SR) ('PDRBSRR');
PARAMETER(CTL.Load_ID);

ENDIF;

//?Validate Load Id
CASE;

// IF RCD.Load ID is NE Blank
IF RCD.Load_ID <> *ZERO;

// AND PGM.*Program mode is *ADD
AND PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(VAL Load ID in History RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1432319;
PARAMETER(RCD.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?Load not in History
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Load is not in History yet.'
ERROR(USR2383);
MSGPARM(RCD.Load_ID);

ENDIF;

ENDIF;

//?Cannot enter freight for a buyer's truck shipping method
EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Shipping_Method);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Shipping Method is Buyers Truck
IF RCD.Shipping_Method = 'CR'/'CT';

// Send error message - 'Cannot enter freight for a Buyer's Truck load.'
ERROR(USR2888);
MSGPARM(RCD.Load_ID);

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT OM Actual Freight  CR) TYPE(CRTOBJ) FILE(PDKYCPP)          AC1414094;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Actual_Freight_Amount);
PARAMETER(JOB.*Job_date);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER('A');
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing after Data update

 //?Retrieve total weight shipped on load
 // PAR.USR Weight Billed = CON.*ZERO
 PAR.USR_Weight_Billed = *ZERO;

 EXECUTE FUNCTION(RTV Bld Load Weight    RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1414557;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Weight_Billed);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Weight Billed
  CASE;

  // IF WRK.Billing Activity Type is Invoice
  IF WRK.Billing_Activity_Type = '1';

  // PAR.USR Weight Billed = PAR.USR Weight Billed + DB1.Weight Billed
  PAR.USR_Weight_Billed = PAR.USR_Weight_Billed + DB1.Weight_Billed;

  ENDIF;

 }

 EXECUTE FUNCTION(UPD Actual Freight Amt RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1414556;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Actual_Freight_Amount);
 PARAMETER(PAR.USR_Weight_Billed);
 {
  //?USER: Initialize routine

  // WRK.USR amount 1  11.2 = CON.*ZERO
  WRK.USR_amount_1_11_2 = *ZERO;

  // WRK.Actual Freight Amount = CON.*ZERO
  WRK.Actual_Freight_Amount = *ZERO;

  //?USER: Process Data record

  //?Calculate Actual Freight 'Rate' to get Freight Amount by line item
  CASE;

  // IF PAR.USR Weight Billed EQ DB1.Weight Billed
  IF PAR.USR_Weight_Billed = DB1.Weight_Billed;

  // WRK.Actual Freight Amount = PAR.Actual Freight Amount
  WRK.Actual_Freight_Amount = PAR.Actual_Freight_Amount;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* USR Work Percent 7/6 will hold the Freight Rate
  //?* USR Weight Billed is the calculated total Load weight
  // PAR.USR Work Percent 7/6 = PAR.Actual Freight Amount / PAR.USR Weight Billed *
  PAR.USR_Work_Percent_7_6 = PAR.Actual_Freight_Amount / PAR.USR_Weight_Billed;

  //?* WRK.Actual Freight amount is the Actual Freight calculated for
  //?* the line item in relation to the total Load freight amount
  // WRK.Actual Freight Amount = PAR.USR Work Percent 7/6 * DB1.Weight Billed *Rounde
  WRK.Actual_Freight_Amount = PAR.USR_Work_Percent_7_6 * DB1.Weight_Billed 'H';

  ENDIF;

  EXECUTE FUNCTION(CHG Actual Freight Amt CH) TYPE(CHGOBJ) FILE(OMHSTPP)          AC1414555;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Actual_Freight_Amount);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Commodity_Market_Price);
  PARAMETER(DB1.Market_Value);
  PARAMETER(DB1.Default_Cmdty_Mkt_Price);
  PARAMETER(DB1.Raw_Material_Cost_LB);
  PARAMETER(DB1.Sales_Expense_Process_Sts);
  PARAMETER(DB1.Sales_Expense_Total);
  PARAMETER(DB1.LH_Load_Type);
  PARAMETER(DB1.Order_TF_Exempt_Code);
  PARAMETER(DB1.LD_Sail_Date);
  PARAMETER(DB1.NonLedgrd_TrdFnd_Acrl_Amt);
  PARAMETER(DB1.HST_Item_Target_Price);
  {
   //?USER: Processing after Data read

   // DB1.Data Mart Process Sts = CND.no
   DB1.Data_Mart_Process_Sts = 'N';

  }

  //?Accumulate freight updated for the load
  // WRK.USR amount 1  11.2 = WRK.USR amount 1  11.2 + WRK.Actual Freight Amount
  WRK.USR_amount_1_11_2 = WRK.USR_amount_1_11_2 + WRK.Actual_Freight_Amount;

  //?USER: Exit processing

  //?Update last record with any remaining freight
  // PAR.USR Remaining Balance = PAR.Actual Freight Amount - WRK.USR amount 1  11.2
  PAR.USR_Remaining_Balance = PAR.Actual_Freight_Amount - WRK.USR_amount_1_11_2;

  // WRK.Actual Freight Amount = WRK.Actual Freight Amount + PAR.USR Remaining Balanc
  WRK.Actual_Freight_Amount = WRK.Actual_Freight_Amount + PAR.USR_Remaining_Balance;

  EXECUTE FUNCTION(RTV Upd Actual Freight RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1414796;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Actual_Freight_Amount);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Actual Freight Amt CH) TYPE(CHGOBJ) FILE(OMHSTPP)          AC1414555;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Actual_Freight_Amount);
   {
    //?USER: Processing after Data read

    // DB1.Data Mart Process Sts = CND.no
    DB1.Data_Mart_Process_Sts = 'N';

   }

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG OM Actual Freight  CH) TYPE(CHGOBJ) FILE(PDKYCPP)          AC1414095;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Actual_Freight_Amount);
PARAMETER(RCD.Entry_Date);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing after Data update

 //?Retrieve total weight shipped on load
 // PAR.USR Weight Billed = CON.*ZERO
 PAR.USR_Weight_Billed = *ZERO;

 EXECUTE FUNCTION(RTV Bld Load Weight    RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1414557;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Weight_Billed);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Weight Billed
  CASE;

  // IF WRK.Billing Activity Type is Invoice
  IF WRK.Billing_Activity_Type = '1';

  // PAR.USR Weight Billed = PAR.USR Weight Billed + DB1.Weight Billed
  PAR.USR_Weight_Billed = PAR.USR_Weight_Billed + DB1.Weight_Billed;

  ENDIF;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(UPD Actual Freight Amt RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1414556;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Actual_Freight_Amount);
 PARAMETER(PAR.USR_Weight_Billed);
 {
  //?USER: Initialize routine

  // WRK.USR amount 1  11.2 = CON.*ZERO
  WRK.USR_amount_1_11_2 = *ZERO;

  // WRK.Actual Freight Amount = CON.*ZERO
  WRK.Actual_Freight_Amount = *ZERO;

  //?USER: Process Data record

  //?Calculate Actual Freight 'Rate' to get Freight Amount by line item
  CASE;

  // IF PAR.USR Weight Billed EQ DB1.Weight Billed
  IF PAR.USR_Weight_Billed = DB1.Weight_Billed;

  // WRK.Actual Freight Amount = PAR.Actual Freight Amount
  WRK.Actual_Freight_Amount = PAR.Actual_Freight_Amount;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* USR Work Percent 7/6 will hold the Freight Rate
  //?* USR Weight Billed is the calculated total Load weight
  // PAR.USR Work Percent 7/6 = PAR.Actual Freight Amount / PAR.USR Weight Billed *
  PAR.USR_Work_Percent_7_6 = PAR.Actual_Freight_Amount / PAR.USR_Weight_Billed;

  //?* WRK.Actual Freight amount is the Actual Freight calculated for
  //?* the line item in relation to the total Load freight amount
  // WRK.Actual Freight Amount = PAR.USR Work Percent 7/6 * DB1.Weight Billed *Rounde
  WRK.Actual_Freight_Amount = PAR.USR_Work_Percent_7_6 * DB1.Weight_Billed 'H';

  ENDIF;

  EXECUTE FUNCTION(CHG Actual Freight Amt CH) TYPE(CHGOBJ) FILE(OMHSTPP)          AC1414555;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Actual_Freight_Amount);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Commodity_Market_Price);
  PARAMETER(DB1.Market_Value);
  PARAMETER(DB1.Default_Cmdty_Mkt_Price);
  PARAMETER(DB1.Raw_Material_Cost_LB);
  PARAMETER(DB1.Sales_Expense_Process_Sts);
  PARAMETER(DB1.Sales_Expense_Total);
  PARAMETER(DB1.LH_Load_Type);
  PARAMETER(DB1.Order_TF_Exempt_Code);
  PARAMETER(DB1.LD_Sail_Date);
  PARAMETER(DB1.NonLedgrd_TrdFnd_Acrl_Amt);
  PARAMETER(DB1.HST_Item_Target_Price);
  {
   //?USER: Processing after Data read

   // DB1.Data Mart Process Sts = CND.no
   DB1.Data_Mart_Process_Sts = 'N';

  }

  //?Accumulate freight updated for the load
  // WRK.USR amount 1  11.2 = WRK.USR amount 1  11.2 + WRK.Actual Freight Amount
  WRK.USR_amount_1_11_2 = WRK.USR_amount_1_11_2 + WRK.Actual_Freight_Amount;

  //?USER: Exit processing

  //?Update last record with any remaining freight
  // PAR.USR Remaining Balance = PAR.Actual Freight Amount - WRK.USR amount 1  11.2
  PAR.USR_Remaining_Balance = PAR.Actual_Freight_Amount - WRK.USR_amount_1_11_2;

  // WRK.Actual Freight Amount = WRK.Actual Freight Amount + PAR.USR Remaining Balanc
  WRK.Actual_Freight_Amount = WRK.Actual_Freight_Amount + PAR.USR_Remaining_Balance;

  EXECUTE FUNCTION(RTV Upd Actual Freight RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1414796;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Actual_Freight_Amount);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Actual Freight Amt CH) TYPE(CHGOBJ) FILE(OMHSTPP)          AC1414555;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Actual_Freight_Amount);
   {
    //?USER: Processing after Data read

    // DB1.Data Mart Process Sts = CND.no
    DB1.Data_Mart_Process_Sts = 'N';

   }

  }

 }

 ENDIF;

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

