// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMFVXFR
// ?Date: 14.08.2025 Time: 03:44:58
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?RMC 9/08/17
//?S11522 chg hog vol calcs- -10% was wrong, and used wrong context on case
//?***
//?FP1054 Copied from pdrqxfr to and modified to just build the 1st
//?       level cut for each company as sent thru the par.company
//?FP1054 chg duration from 25 to 40 days -- lcl,*duration (factor)
//?FP1054 pgm is input as MENU or JOBSCHED to control inventory capture
//?in: BPS Conv/Fab/Crd Dept RT - Calendar  *
//?--------------------------------------------------------------------
//?Doc:  Delete Sched/Plan
DO;

//?Delete Schedule/Plan For Calendar Change
//?If a Kill Plan or a Cut Schedule was built and needs to be
//?deleted.
ENDDO;

EXECUTE FUNCTION(UPS Del Kill/Cut Plan RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1437798;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Post to G/L Date GT PAR.Production Date RGT
 IF DB1.Post_to_G_L_Date > PAR.Production_Date_RGT;

 QUIT;

 ENDIF;

 //?SetUp Production Type
 CASE;

 // IF DB1.Post to G/L Date EQ JOB.*Job date
 IF DB1.Post_to_G_L_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 //?SetUp Production Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF PAR.Record Found USR is Record Found
 IF PAR.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(UPS Del Sched/Plan    RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1301456;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  //?Delete the Production Header record
  EXECUTE FUNCTION(DLT Production Hdr     DL) TYPE(DLTOBJ) FILE(PDJCCPP)          AC1265993;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
 }

 ENDIF;

}


//?Retrive the default Cutout Matrix for building the Plan.
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('PPSDFTMTX');
PARAMETER(LCL.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Cutout Matrix Code = SUBSTRING(LCL.System Value Alpha,CON.1,CON.6)
PAR.Cutout_Matrix_Code = SUBSTRING(LCL.System_Value_Alpha:1:6);

// LCL.Text USR 4 = SUBSTRING(LCL.System Value Alpha,CON.7,CON.4)
LCL.Text_USR_4 = SUBSTRING(LCL.System_Value_Alpha:7:4);

// PAR.Effective Month/Day = CVTVAR(LCL.Text USR 4)
PAR.Effective_Month_Day = CVTVAR(LCL.Text_USR_4);

//?Process the Calendar for building Schedule for the next
//?production date and the plan for approximately 3 weeks out.
EXECUTE FUNCTION(UPS Bld Cut Sch/Pln 2 RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1511027;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Cutout_Matrix_Code);
PARAMETER(PAR.Effective_Month_Day);
PARAMETER(PAR.First_Lvl_Prod_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Prior Prod Hog Vol USR = CON.*ZERO
 PAR.Prior_Prod_Hog_Vol_USR = *ZERO;

 // PAR.Prior Prod Date USR = CON.*ZERO
 PAR.Prior_Prod_Date_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Matrix Type       RT) TYPE(RTVOBJ) FILE(PDI0REP)           AC1353391;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(LCL.Cutout_Matrix_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 //?RMC 10/12/05 Ovrdbf HPE file PKAOCPP to correct library
 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(DB1.Company_Number);
 PARAMETER('HPELIB');
 PARAMETER(PAR.Library);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Plant Date of Last Order GT PAR.Production Date RGT
 IF DB1.Post_to_G_L_Date > PAR.Production_Date_RGT;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?* Retrieve the Prior Kill Date for creating the Hog Population
 EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(PAR.Kill_Date);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Process Data record

  CASE;

  // IF WRK.First Time Flag is Yes
  IF WRK.First_Time_Flag = 'Y';

  // WRK.First Time Flag = CND.NO
  WRK.First_Time_Flag = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Kill Day Status is yes
  IF DB1.Kill_Day_Status = 'Y';

  // PAR.Kill Date = DB1.Plant Date of Last Order
  PAR.Kill_Date = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

 }

 //?*Retrieve the Hog Volume for Kill Schedule for date being processed.
 //?*NOTE:  Zero Kill Plan and Cut Plan are now allowed in the
 //?*       Kill/Cut File in HPE.
 //?*       The Retrieve below is needed for Hog Population Only.
 // Call program Rtv Hog Volume  2 HPE XF.
 CALL PROGRAM(Rtv Hog Volume  2 HPE XF) ('PKQIXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(PAR.Hog_Volume);

 //?*Retrieve the Cut Est. for Cut Schedule for date being processed.
 // Call program Rtv Cut Estimate 2HPE XF.
 CALL PROGRAM(Rtv Cut Estimate 2HPE XF) ('PKY6XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(LCL.Cut_Estimate_USR);

 //?CAS: Build Production Schedule/Plan
 CASE;

 // IF DB1.Post to G/L Date EQ PAR.Post to G/L Date
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 //?The population will not be calculated if Hog Volume for the
 //?Date being processed is zero.
 //?Calculate Hog Population % in the Cutout Matrix.
 CASE;

 // IF PAR.First Lvl Prod Sts USR is yes
 IF PAR.First_Lvl_Prod_Sts_USR = 'Y';

 // Hog Volume + 10%
 PAR.Hog_Volume_+_10_USR = + PAR.Hog_Volume ( PAR.Hog_Volume * .10 );

 // Hog Volume - 10%
 PAR.Hog_Volume_10_USR = PAR.Hog_Volume + ( PAR.Hog_Volume * -.10 );

 //?Retrieve the Number of Carcass Uploaded.
 // Call program Rtv # Head Killed HPE XF.
 CALL PROGRAM(Rtv # Head Killed HPE XF) ('PKMSXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Kill_Date);
 PARAMETER(PAR.Count_USR);

 CASE;

 // IF PAR.Count USR is GT 0
 IF PAR.Count_USR > *ZERO;

 //?Create Hog Population
 CASE;

 // IF PAR.Count USR LE PAR.Hog Volume + 10% USR
 IF PAR.Count_USR <= PAR.Hog_Volume_+_10_USR;

 // AND PAR.Count USR GE PAR.Hog Volume - 10% USR
 AND PAR.Count_USR >= PAR.Hog_Volume_10_USR;

 EXECUTE FUNCTION(Rtv Init Pop Head     RT) TYPE(RTVOBJ) FILE(PDIZREP)           AC1651821;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Pop Head & %     CH) TYPE(CHGOBJ) FILE(PDIZREP)            AC1653864;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Cutout_Matrix_Code);
  PARAMETER(DB1.Effective_Month_Day);
  PARAMETER(DB1.Min_Carcass_Weight);
  PARAMETER(DB1.Max_Carcass_Weight);
  PARAMETER(DB1.Lean_Percent);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
 }

 // Call program Upd Pop Head     2HPE PF.
 CALL PROGRAM(Upd Pop Head     2HPE PF) ('PKY2PFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Kill_Date);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(LCL.Head_Killed_USR);
 PARAMETER(LCL.Cutout_Matrix_Type);

 EXECUTE FUNCTION(Clc Population %      RT) TYPE(RTVOBJ) FILE(PDIZREP)           AC1651833;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(LCL.Head_Killed_USR);
 {
  //?USER: Process Data record

  // LCL.Population Percent =       *
  LCL.Population_Percent = ( DB1.Population_Head / PAR.Head_Killed_USR 'H' ) * 100;

  EXECUTE FUNCTION(Chg Population %      CH) TYPE(CHGOBJ) FILE(PDIZREP)           AC1651839;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Cutout_Matrix_Code);
  PARAMETER(DB1.Effective_Month_Day);
  PARAMETER(DB1.Min_Carcass_Weight);
  PARAMETER(DB1.Max_Carcass_Weight);
  PARAMETER(DB1.Lean_Percent);
  PARAMETER(LCL.Population_Percent);
 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Build Schedule w/Cutout Matrix
 CASE;

 // IF PAR.First Lvl Prod Sts USR is no
 IF PAR.First_Lvl_Prod_Sts_USR = 'N';

 EXECUTE FUNCTION(UPS Set Cnv/Fab to 0  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1409403;
 PARAMETER(DB1.Company_Number);
 PARAMETER('S');
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(UPS Chg Cnv/Fab to 0  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1409404;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
 }

 EXECUTE FUNCTION(UPS Del FG = *All     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1409408;
 PARAMETER(DB1.Company_Number);
 PARAMETER('S');
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT Production Dtl     DL) TYPE(DLTOBJ) FILE(PDI8CPP)          AC1261198;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
 }

 //?Build Schedule w/Cutout Matrix
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(UPS Del Sched/Plan    RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1301456;
 PARAMETER(DB1.Company_Number);
 PARAMETER('S');
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  //?Delete the Production Header record
  EXECUTE FUNCTION(DLT Production Hdr     DL) TYPE(DLTOBJ) FILE(PDJCCPP)          AC1265993;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
 }

 EXECUTE FUNCTION(UPS Delete Dept Sch   RT) TYPE(RTVOBJ) FILE(PDLMCPP)           AC1646357;
 PARAMETER(DB1.Company_Number);
 PARAMETER('S');
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Delete PS Prod Dept Sched) TYPE(DLTOBJ) FILE(PDLMCPP)          AC1475026;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Department_Code);
 }

 EXECUTE FUNCTION(UPS Del Schd/Plan Dtl RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1301459;
 PARAMETER(DB1.Company_Number);
 PARAMETER('S');
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT Production Dtl     DL) TYPE(DLTOBJ) FILE(PDI8CPP)          AC1261198;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  CASE;

  // IF PGM.*Return code is *Data update error
  IF PGM.*Return_code = 'Y2U0004';

  // Retrieve message - 'Delete Error:  Key &1, &2, &3, &4, &5'
  WRK.Office_Message_USR = RTVMSG(USR2305);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);

  // Call program SND Pager Msg (MPLUS) UP.
  CALL PROGRAM(SND Pager Msg (MPLUS) UP) ('POMSUPC');
  PARAMETER('PRKDEV');
  PARAMETER(WRK.Office_Message_USR);

  ENDIF;

 }

 CASE;

 // IF LCL.Cut Estimate USR is Greater than zero
 IF LCL.Cut_Estimate_USR > *ZERO;

 // Call program U1LP Upd 1st Lvl Plan PF.
 CALL PROGRAM(U1LP Upd 1st Lvl Plan PF) ('PDJZPFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(PAR.Kill_Date);
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(LCL.Cut_Estimate_USR);
 PARAMETER('S');

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Create the Raw Material Production with Zero
 // Call program Cpy Plan to Sched     XF.
 CALL PROGRAM(Cpy Plan to Sched     XF) ('PNJ2XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER('P');
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER('S');
 PARAMETER(DB1.Post_to_G_L_Date);

 ENDIF;

 ENDIF;

 //?CAS: Build Production Schedule/Plan
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Build Plan w/Cutout Matrix  (NEW)
 CASE;

 // IF PAR.First Lvl Prod Sts USR is no
 IF PAR.First_Lvl_Prod_Sts_USR = 'N';

 EXECUTE FUNCTION(UPS Set Cnv/Fab to 0  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1409403;
 PARAMETER(DB1.Company_Number);
 PARAMETER('P');
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(UPS Chg Cnv/Fab to 0  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1409404;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
 }

 EXECUTE FUNCTION(UPS Del FG = *All     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1409408;
 PARAMETER(DB1.Company_Number);
 PARAMETER('P');
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT Production Dtl     DL) TYPE(DLTOBJ) FILE(PDI8CPP)          AC1261198;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
 }

 //?Build Plan w/Cutout Matrix  (NEW)
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Delete the Production Header/Detail/Department
 EXECUTE FUNCTION(UPS Del Sched/Plan    RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1301456;
 PARAMETER(DB1.Company_Number);
 PARAMETER('P');
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  //?Delete the Production Header record
  EXECUTE FUNCTION(DLT Production Hdr     DL) TYPE(DLTOBJ) FILE(PDJCCPP)          AC1265993;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
 }

 EXECUTE FUNCTION(UPS Delete Dept Sch   RT) TYPE(RTVOBJ) FILE(PDLMCPP)           AC1646357;
 PARAMETER(DB1.Company_Number);
 PARAMETER('P');
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Delete PS Prod Dept Sched) TYPE(DLTOBJ) FILE(PDLMCPP)          AC1475026;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Department_Code);
 }

 EXECUTE FUNCTION(UPS Del Schd/Plan Dtl RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1301459;
 PARAMETER(DB1.Company_Number);
 PARAMETER('P');
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT Production Dtl     DL) TYPE(DLTOBJ) FILE(PDI8CPP)          AC1261198;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  CASE;

  // IF PGM.*Return code is *Data update error
  IF PGM.*Return_code = 'Y2U0004';

  // Retrieve message - 'Delete Error:  Key &1, &2, &3, &4, &5'
  WRK.Office_Message_USR = RTVMSG(USR2305);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);

  // Call program SND Pager Msg (MPLUS) UP.
  CALL PROGRAM(SND Pager Msg (MPLUS) UP) ('POMSUPC');
  PARAMETER('PRKDEV');
  PARAMETER(WRK.Office_Message_USR);

  ENDIF;

 }

 CASE;

 // IF LCL.Cut Estimate USR is Greater than zero
 IF LCL.Cut_Estimate_USR > *ZERO;

 CASE;

 // IF LCL.Cut Estimate USR EQ PAR.Prior Prod Hog Vol USR
 IF LCL.Cut_Estimate_USR = PAR.Prior_Prod_Hog_Vol_USR;

 //?* If the Hog Volume did not change from the Prior Day, then the
 //?* Copies below will save time by not having to go through the
 //?* Cutout Items and build the Raw Material Production.
 EXECUTE FUNCTION(UPS Cpy Prior Prd HDR RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1653748;
 PARAMETER(DB1.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.Prior_Prod_Date_USR);
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(U1LP Crt Prd Plan Hdr CR) TYPE(CRTOBJ) FILE(PDJCCPP)           AC1294988;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(PAR.Date_To_USR);
  PARAMETER(DB1.Hog_Volume);
  PARAMETER(DB1.Average_Live_Weight);
  PARAMETER(DB1.Average_Hot_Weight);
  PARAMETER(DB1.Cooler_Shrink_Percent);
  PARAMETER(DB1.Average_Cold_Weight);
  PARAMETER(DB1.Average_Lean_Percent);
  PARAMETER(DB1.Average_Backfat_Inches);
  PARAMETER(DB1.Average_Loin_Eye_Depth);
  PARAMETER(DB1.Hot_Weight_Total);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(RTV Cooler Shrink %    RT) TYPE(RTVOBJ) FILE(CAAQREP)          AC1255852;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Cooler_Shrink_Percent);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Cold Weight
   DB1.Average_Cold_Weight = DB1.Average_Hot_Weight - ( DB1.Average_Hot_Weight * (
   DB1.Cooler_Shrink_Percent / 100 'H' ) 'H' );

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(UPS Cpy Prior Prd DPT RT) TYPE(RTVOBJ) FILE(PDLMCPP)           AC1653755;
 PARAMETER(DB1.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.Prior_Prod_Date_USR);
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Create PS Prod Dept Sched) TYPE(CRTOBJ) FILE(PDLMCPP)          AC1475024;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(PAR.Date_To_USR);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.CDS_RM_Pieces_Available);
  PARAMETER(DB1.CDS_RM_Weight_Available);
  PARAMETER(DB1.CDS_Average_Piece_Weight);
  PARAMETER(DB1.CDS_CV_Pieces_Available);
  PARAMETER(DB1.CDS_CV_Weight_Available);
  PARAMETER(DB1.CDS_Pieces_Unused_1);
  PARAMETER(DB1.CDS_Weight_Unused_1);
  PARAMETER(DB1.CDS_Pieces_Unused_2);
  PARAMETER(DB1.CDS_Weight_Unused_2);
  PARAMETER(DB1.CDS_Pieces_Unused_3);
  PARAMETER(DB1.CDS_Weight_Unused_3);
  PARAMETER(DB1.CDS_Pieces_Unused_4);
  PARAMETER(DB1.CDS_Weight_Unused_4);
  PARAMETER(DB1.CDS_Pieces_Unused_5);
  PARAMETER(DB1.CDS_Weight_Unused_5);
  PARAMETER(DB1.CDS_Department_Type);
  PARAMETER(DB1.CDS_Unused_Sts_1);
  PARAMETER(DB1.CDS_Unused_Sts_2);
  PARAMETER(DB1.CDS_Unused_Sts_3);
  PARAMETER(DB1.CDS_Unused_Sts_4);
  PARAMETER(DB1.CDS_Unused_Sts_5);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(UPS Cpy Prior Prd ITM RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1653757;
 PARAMETER(DB1.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.Prior_Prod_Date_USR);
 PARAMETER(DB1.Post_to_G_L_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(U1LP Crt Prd Plan Dtl CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1294980;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(PAR.Date_To_USR);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.PS_Weight_Planned_Prod);
  PARAMETER(DB1.PS_Pieces_Planned_Prod);
  PARAMETER(DB1.PS_Pct_of_Carcass_Yield);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(DB1.PS_Weight_Inv_On_Hand);
  PARAMETER(DB1.PS_Pieces_Inv_On_Hand);
  PARAMETER(DB1.PS_Weight_Standard);
  PARAMETER(DB1.PS_Pieces_Standard);
  PARAMETER(DB1.PS_Weight_Converted);
  PARAMETER(DB1.PS_Pieces_Converted);
  PARAMETER(DB1.PS_Weight_Shipping_Adj);
  PARAMETER(DB1.PS_Pieces_Shipping_Adj);
  PARAMETER(DB1.PS_Weight_Prod_Adj);
  PARAMETER(DB1.PS_Pieces_Prod_Adj);
  PARAMETER(DB1.PS_Weight_Inv_Adj);
  PARAMETER(DB1.PS_Pieces_Inv_Adj);
  PARAMETER(DB1.PS_Weight_Ship_Cut_Adj);
  PARAMETER(DB1.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(DB1.PS_Weight_Prod_Allocated);
  PARAMETER(DB1.PS_Pieces_Prod_Allocated);
  PARAMETER(DB1.PS_Weight_Inv_Allocated);
  PARAMETER(DB1.PS_Pieces_Inv_Allocated);
  PARAMETER(DB1.PS_Unit_Weight);
  PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(DB1.PS_Pieces_Unused_2);
  PARAMETER(DB1.PS_Weight_Unused_3);
  PARAMETER(DB1.PS_Pieces_Unused_3);
  PARAMETER(DB1.PS_Weight_Unused_4);
  PARAMETER(DB1.PS_Pieces_Unused_4);
  PARAMETER(DB1.PS_Weight_Unused_5);
  PARAMETER(DB1.PS_Pieces_Unused_5);
  PARAMETER(DB1.PS_Weight_Unused_6);
  PARAMETER(DB1.PS_Pieces_Unused_6);
  PARAMETER(DB1.PS_Item_Id);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(DB1.PS_Lock_Status);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(DB1.PS_Unused_Sts_1);
  PARAMETER(DB1.PS_Unused_Sts_2);
  PARAMETER(DB1.PS_Unused_Sts_3);
  PARAMETER(DB1.PS_Unused_Sts_4);
  PARAMETER(DB1.PS_Item_Sched_Need_Sts);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(DB1.PS_Weight_Ordered);
  PARAMETER(DB1.PS_Pieces_Ordered);
  PARAMETER(DB1.PS_Weight_FC_Adjusted);
  PARAMETER(DB1.PS_Pieces_FC_Adjusted);
  PARAMETER(DB1.PS_Weight_FX_Adjusted);
  PARAMETER(DB1.PS_Pieces_FX_Adjusted);
  PARAMETER(DB1.PS_Weight_Sched_Shipment);
  PARAMETER(DB1.PS_Pieces_Sched_Shipment);
  PARAMETER(DB1.PS_Weight_Available_Prod);
  PARAMETER(DB1.PS_Pieces_Available_Prod);
  PARAMETER(DB1.PS_Weight_Production_Need);
  PARAMETER(DB1.PS_Pieces_Production_Need);
  PARAMETER(DB1.PS_Weight_Fab_Needs);
  PARAMETER(DB1.PS_Pieces_Fab_Needs);
  PARAMETER(DB1.PS_Weight_Sched_Prod);
  PARAMETER(DB1.PS_Pieces_Sched_Prod);
  PARAMETER(DB1.PS_Weight_Sched_Need);
  PARAMETER(DB1.PS_Pieces_Sched_Need);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?* The Hog Volume changed from the Prior Day, so the Raw
 //?* Material Production needs to be recalculated.
 // Call program U1LP Upd 1st Lvl Plan PF.
 CALL PROGRAM(U1LP Upd 1st Lvl Plan PF) ('PDJZPFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(PAR.Kill_Date);
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(LCL.Cut_Estimate_USR);
 PARAMETER('P');

 //?* Save the Cut Estimate for the date being processed.
 //?* It will be checked for the next date being processed.
 // PAR.Prior Prod Hog Vol USR = LCL.Cut Estimate USR
 PAR.Prior_Prod_Hog_Vol_USR = LCL.Cut_Estimate_USR;

 // PAR.Prior Prod Date USR = DB1.Post to G/L Date
 PAR.Prior_Prod_Date_USR = DB1.Post_to_G_L_Date;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Create the Raw Material Production with Zero using Schedule records.
 // Call program Cpy Plan to Sched     XF.
 CALL PROGRAM(Cpy Plan to Sched     XF) ('PNJ2XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER('S');
 PARAMETER(JOB.*Job_date);
 PARAMETER('P');
 PARAMETER(DB1.Post_to_G_L_Date);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(UPS Bld Kill Sch/Pln  RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1336555;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Kill_Date_RGF);
PARAMETER(PAR.Kill_Date_RGF);
PARAMETER(PAR.Kill_Date_RGT);
PARAMETER(PAR.PSAA_Program_Name);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Post to G/L Date GT PAR.Kill Date RGT
 IF DB1.Post_to_G_L_Date > PAR.Kill_Date_RGT;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Rtv Hog Volume  2 HPE XF.
 CALL PROGRAM(Rtv Hog Volume  2 HPE XF) ('PKQIXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(PAR.Hog_Volume);

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Post to G/L Date EQ PAR.Post to G/L Date
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 EXECUTE FUNCTION(UPS Bld Kill Sch/Pln  RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1336575;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Hog_Volume);
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER('S');
 {
  //?USER: Process Data record

  //?E0178 3/18/2010 RMC Upd std mix per day of week, instead of eff date
  EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.Day_of_Week);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(UPS Bld Kill Sch/Pln  RT) TYPE(RTVOBJ) FILE(PDI6CPP)           AC1336572;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(PAR.Hog_Volume);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Type);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Process Data record

   //?E0178 3/22/10/ RMC  update every rcd with day of week = prod day of week
   EXECUTE FUNCTION(Rtv Kill Sch/Pln Info RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1336596;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?08/26/09 PKD S00912 Use Production Warehouse instead of Default WHS
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.PS Weight Planned Prod = PAR.Hog Volume * PAR.Std Weight/Head (Var/Ren) *Rou
   PAR.PS_Weight_Planned_Prod = PAR.Hog_Volume * PAR.Std_Weight_Head_Var_Ren 'H';

   // PAR.PS Pieces Planned Prod = PAR.Hog Volume * PAR.Pieces Per Head *Rounded
   PAR.PS_Pieces_Planned_Prod = PAR.Hog_Volume * PAR.Pieces_Per_Head 'H';

   EXECUTE FUNCTION(UPS Upd Kill Sch/Pln  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1336611;
   PARAMETER(PAR.Accounting_Company);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(PAR.Production_Date);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.PS_Available_Ship_Date);
    PARAMETER(PAR.PS_Weight_Planned_Prod);
    PARAMETER(PAR.PS_Pieces_Planned_Prod);
    PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
    PARAMETER(PAR.PS_Avg_Piece_Wgt);
    PARAMETER(PAR.PS_Weight_Inv_On_Hand);
    PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
    PARAMETER(PAR.PS_Weight_Standard);
    PARAMETER(PAR.PS_Pieces_Standard);
    PARAMETER(PAR.PS_Weight_Converted);
    PARAMETER(PAR.PS_Pieces_Converted);
    PARAMETER(PAR.PS_Weight_Shipping_Adj);
    PARAMETER(PAR.PS_Pieces_Shipping_Adj);
    PARAMETER(PAR.PS_Weight_Prod_Adj);
    PARAMETER(PAR.PS_Pieces_Prod_Adj);
    PARAMETER(PAR.PS_Weight_Inv_Adj);
    PARAMETER(PAR.PS_Pieces_Inv_Adj);
    PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
    PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
    PARAMETER(PAR.PS_Weight_Prod_Allocated);
    PARAMETER(PAR.PS_Pieces_Prod_Allocated);
    PARAMETER(PAR.PS_Weight_Inv_Allocated);
    PARAMETER(PAR.PS_Pieces_Inv_Allocated);
    PARAMETER(PAR.PS_Unit_Weight);
    PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.PS_Pieces_Unused_2);
    PARAMETER(PAR.PS_Weight_Unused_3);
    PARAMETER(PAR.PS_Pieces_Unused_3);
    PARAMETER(PAR.PS_Weight_Unused_4);
    PARAMETER(PAR.PS_Pieces_Unused_4);
    PARAMETER(PAR.PS_Weight_Unused_5);
    PARAMETER(PAR.PS_Pieces_Unused_5);
    PARAMETER(PAR.PS_Weight_Unused_6);
    PARAMETER(PAR.PS_Pieces_Unused_6);
    PARAMETER(PAR.PS_Item_Id);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.PS_Lock_Status);
    PARAMETER(PAR.PS_Export_Domestic);
    PARAMETER(PAR.PS_Print_On_Schedule);
    PARAMETER(PAR.PS_Piece_Count_Item);
    PARAMETER(PAR.PS_Unused_Sts_1);
    PARAMETER(PAR.PS_Unused_Sts_2);
    PARAMETER(PAR.PS_Unused_Sts_3);
    PARAMETER(PAR.PS_Unused_Sts_4);
    PARAMETER(PAR.PS_Item_Sched_Need_Sts);
    PARAMETER(PAR.PS_Production_Warehouse);
    PARAMETER(PAR.PS_Weight_Ordered);
    PARAMETER(PAR.PS_Pieces_Ordered);
    PARAMETER(PAR.PS_Weight_FC_Adjusted);
    PARAMETER(PAR.PS_Pieces_FC_Adjusted);
    PARAMETER(PAR.PS_Weight_FX_Adjusted);
    PARAMETER(PAR.PS_Pieces_FX_Adjusted);
    PARAMETER(PAR.PS_Weight_Sched_Shipment);
    PARAMETER(PAR.PS_Pieces_Sched_Shipment);
    PARAMETER(PAR.PS_Weight_Available_Prod);
    PARAMETER(PAR.PS_Pieces_Available_Prod);
    PARAMETER(PAR.PS_Weight_Production_Need);
    PARAMETER(PAR.PS_Pieces_Production_Need);
    PARAMETER(PAR.PS_Weight_Fab_Needs);
    PARAMETER(PAR.PS_Pieces_Fab_Needs);
    PARAMETER(PAR.PS_Weight_Sched_Prod);
    PARAMETER(PAR.PS_Pieces_Sched_Prod);
    PARAMETER(PAR.PS_Weight_Sched_Need);
    PARAMETER(PAR.PS_Pieces_Sched_Need);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Item_Code);
     PARAMETER(WRK.Description_Line_One);
     PARAMETER(WRK.UOM_Primary);
     PARAMETER(WRK.Unit_Weight);
     PARAMETER(DB1.Item_Structure_Class_Code);
     PARAMETER(DB1.Item_Structure_Group_Code);
     PARAMETER(DB1.Item_Structure_Type_Code);
     PARAMETER(WRK.Item_Type_Code);
     PARAMETER(WRK.Default_Warehouse);
     PARAMETER(WRK.Fresh_Chilling_Time);
     PARAMETER(WRK.Base_Conv_Loss_Item);
     PARAMETER(WRK.Variety_Rendered_Cut);
     PARAMETER(WRK.Credit_Item_Status);
     PARAMETER(WRK.Std_Weight_Head_Var_Ren);
     PARAMETER(WRK.Pieces_Per_Head);
     PARAMETER(DB1.Department_Code);
     PARAMETER(WRK.Group_for_Packaging);
     PARAMETER(WRK.Seconds_Item);
     PARAMETER(DB1.PS_Piece_Count_Item);
     PARAMETER(WRK.Pieces_Per_Bag);
     PARAMETER(WRK.Bags_Per_Unit);
     PARAMETER(DB1.PS_Export_Domestic);
     PARAMETER(DB1.PS_Print_On_Schedule);
     PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
     PARAMETER(WRK.Fresh_Sched_As_Ordered);
     PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
     PARAMETER(DB1.Primal_Group_Code);
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(DB1.Warehouse_Type);
     PARAMETER(WRK.Trans_Contol_AS400_Plant);
     PARAMETER(WRK.Warehouse_Location);
     PARAMETER(WRK.Warehouse_Std_Chill_Time);
     PARAMETER(WRK.Warehouse_Chill_Time);
     PARAMETER(DB1.PS_Item_Id);
     {
      //?Execute internal function

      EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?Execute internal function

       EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
       PARAMETER(PAR.Company_Number);
       PARAMETER(PAR.Item_Code);
       PARAMETER(PAR.Description_Line_One);
       PARAMETER(PAR.UOM_Primary);
       PARAMETER(PAR.Unit_Weight);
       PARAMETER(PAR.Item_Structure_Class_Code);
       PARAMETER(PAR.Item_Structure_Group_Code);
       PARAMETER(PAR.Item_Structure_Type_Code);
       PARAMETER(PAR.Item_Type_Code);
       PARAMETER(PAR.Default_Warehouse);
       PARAMETER(PAR.Fresh_Chilling_Time);
       PARAMETER(PAR.Base_Conv_Loss_Item);
       PARAMETER(PAR.Variety_Rendered_Cut);
       PARAMETER(PAR.Credit_Item_Status);
       PARAMETER(PAR.Std_Weight_Head_Var_Ren);
       PARAMETER(PAR.Pieces_Per_Head);
       PARAMETER(PAR.Department_Code);
       PARAMETER(PAR.Group_for_Packaging);
       PARAMETER(PAR.Seconds_Item);
       PARAMETER(PAR.Piece_Count_Item);
       PARAMETER(PAR.Pieces_Per_Bag);
       PARAMETER(PAR.Bags_Per_Unit);
       PARAMETER(PAR.Export_Domestic);
       PARAMETER(PAR.Print_On_Schedule);
       PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
       PARAMETER(PAR.Fresh_Sched_As_Ordered);
       PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
       PARAMETER(PAR.Primal_Group_Code);
       {
        //?USER: Processing if Data record not found

        MOVE *ALL (To: PAR From: CON);

        //?USER: Process Data record

        MOVE *ALL (To: PAR From: DB1);

       }

       EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
       PARAMETER(PAR.Warehouse_Code);
       PARAMETER(PAR.Warehouse_Type);
       PARAMETER(PAR.Trans_Contol_AS400_Plant);
       PARAMETER(PAR.Warehouse_Location);
       PARAMETER(PAR.Warehouse_Std_Chill_Time);
       PARAMETER(PAR.Warehouse_Chill_Time);
       {
        //?USER: Processing if Data record not found

        MOVE *ALL (To: PAR From: CON);

        //?USER: Process Data record

        MOVE *ALL (To: PAR From: DB1);

       }

      }

      EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.PS_Item_Id);
      {
       //?Execute internal function

       CASE;

       // IF PAR.Item Type Code is Raw Materials
       IF PAR.Item_Type_Code = 'RM';

       // PAR.PS Item Identification = CND.RM Base
       PAR.PS_Item_Id = 'RMB';

       // IF *OTHERWISE
       IF *OTHERWISE;

       CASE;

       // IF PAR.Seconds Item is Yes
       IF PAR.Seconds_Item = 'Y';

       // PAR.PS Item Identification = CND.FG Seconds
       PAR.PS_Item_Id = 'FSC';

       // IF *OTHERWISE
       IF *OTHERWISE;

       CASE;

       // IF PAR.Variety/Rendered/Cut is Variety
       IF PAR.Variety_Rendered_Cut = 'V';

       // PAR.PS Item Identification = CND.FG Variety
       PAR.PS_Item_Id = 'FVR';

       // IF PAR.Variety/Rendered/Cut is Rendered
       IF PAR.Variety_Rendered_Cut = 'R';

       // PAR.PS Item Identification = CND.FG Rendered
       PAR.PS_Item_Id = 'FRD';

       // IF PAR.Variety/Rendered/Cut is Cut
       IF PAR.Variety_Rendered_Cut = 'C';

       //?Base/Converted/Fabricated
       CASE;

       // IF PAR.Credit Item Status is yes
       IF PAR.Credit_Item_Status = 'Y';

       //?Setup Base/Converted/Fabricated Credit
       CASE;

       // IF PAR.Converted/Base Item is Base
       IF PAR.Base_Conv_Loss_Item = 'B';

       // PAR.PS Item Identification = CND.FG Base Credit
       PAR.PS_Item_Id = 'FBC';

       //?Setup Base/Converted/Fabricated Credit
       // IF PAR.Converted/Base Item is Converted
       IF PAR.Base_Conv_Loss_Item = 'C';

       // PAR.PS Item Identification = CND.FG Converted Credit
       PAR.PS_Item_Id = 'FCC';

       //?Setup Base/Converted/Fabricated Credit
       // IF PAR.Converted/Base Item is Fabricated
       IF PAR.Base_Conv_Loss_Item = 'F';

       // PAR.PS Item Identification = CND.FG Fabricated Credit
       PAR.PS_Item_Id = 'FFC';

       //?Setup Base/Converted/Fabricated Credit
       // IF PAR.Converted/Base Item is Loss
       IF PAR.Base_Conv_Loss_Item = 'L';

       // PAR.PS Item Identification = CND.FG Loss Credit
       PAR.PS_Item_Id = 'FLC';

       ENDIF;

       //?Base/Converted/Fabricated
       // IF *OTHERWISE
       IF *OTHERWISE;

       //?Setup Base/Converted/Fabricated
       CASE;

       // IF PAR.Converted/Base Item is Base
       IF PAR.Base_Conv_Loss_Item = 'B';

       // PAR.PS Item Identification = CND.FG Base
       PAR.PS_Item_Id = 'FGB';

       //?Setup Base/Converted/Fabricated
       // IF PAR.Converted/Base Item is Converted
       IF PAR.Base_Conv_Loss_Item = 'C';

       // PAR.PS Item Identification = CND.FG Converted
       PAR.PS_Item_Id = 'FCV';

       //?Setup Base/Converted/Fabricated
       // IF PAR.Converted/Base Item is Fabricated
       IF PAR.Base_Conv_Loss_Item = 'F';

       // PAR.PS Item Identification = CND.FG Fabricated
       PAR.PS_Item_Id = 'FFB';

       //?Setup Base/Converted/Fabricated
       // IF PAR.Converted/Base Item is Loss
       IF PAR.Base_Conv_Loss_Item = 'L';

       // PAR.PS Item Identification = CND.FG Loss
       PAR.PS_Item_Id = 'FLS';

       ENDIF;

       ENDIF;

       ENDIF;

       ENDIF;

       ENDIF;

      }

     }

     //?FP1054 Output PS Prod Warehouse
     EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(DB1.PS_Production_Warehouse);
     PARAMETER(LCL.Accounting_Company);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     //?Available Ship Date
     CASE;

     // IF WRK.Warehouse Std Chill Time is yes
     IF WRK.Warehouse_Std_Chill_Time = 'Y';

     EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
     PARAMETER(DB1.Company_Number);
     PARAMETER(PAR.Production_Date);
     PARAMETER(WRK.Warehouse_Chill_Time);
     PARAMETER(DB1.PS_Available_Ship_Date);
     {
      //?USER: Initialize routine

      // WRK.Count USR = CON.*ZERO
      WRK.Count_USR = *ZERO;

      //?USER: Process Data record

      CASE;

      // IF WRK.Count USR EQ PAR.Chilling Time
      IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

      // PAR.PS Available Ship Date = DB1.Post to G/L Date
      PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

      QUIT;

      ENDIF;

      //?Skip Saturday
      CASE;

      // IF DB1.Day of Week is Saturday
      IF DB1.Day_of_Week = '7';

      //?Skip Saturday
      // IF *OTHERWISE
      IF *OTHERWISE;

      // WRK.Count USR = WRK.Count USR + CON.1
      WRK.Count_USR = WRK.Count_USR + 1;

      ENDIF;

     }

     //?Available Ship Date
     // IF *OTHERWISE
     IF *OTHERWISE;

     EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
     PARAMETER(DB1.Company_Number);
     PARAMETER(PAR.Production_Date);
     PARAMETER(WRK.Fresh_Chilling_Time);
     PARAMETER(DB1.PS_Available_Ship_Date);
     {
      //?USER: Initialize routine

      // WRK.Count USR = CON.*ZERO
      WRK.Count_USR = *ZERO;

      //?USER: Process Data record

      CASE;

      // IF WRK.Count USR EQ PAR.Chilling Time
      IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

      // PAR.PS Available Ship Date = DB1.Post to G/L Date
      PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

      QUIT;

      ENDIF;

      //?Skip Saturday
      CASE;

      // IF DB1.Day of Week is Saturday
      IF DB1.Day_of_Week = '7';

      //?Skip Saturday
      // IF *OTHERWISE
      IF *OTHERWISE;

      // WRK.Count USR = WRK.Count USR + CON.1
      WRK.Count_USR = WRK.Count_USR + 1;

      ENDIF;

     }

     ENDIF;

     //?Average Piece Weight
     CASE;

     // IF PAR.PS Pieces Planned Prod is GT Zero
     IF PAR.PS_Pieces_Planned_Prod > *ZERO;

     // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
     DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

     ENDIF;

     EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // DB1.PS Lock Status = CND.NOT LOCKED
     DB1.PS_Lock_Status = 'N';

    }

    //?USER: Process Data record

    // WRK.PS Pieces Planned Prod = PAR.PS Pieces Planned Prod + DB1.PS Pieces Planned
    WRK.PS_Pieces_Planned_Prod = PAR.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Planned_Prod;

    // WRK.PS Weight Planned Prod = PAR.PS Weight Planned Prod + DB1.PS Weight Planned
    WRK.PS_Weight_Planned_Prod = PAR.PS_Weight_Planned_Prod + DB1.PS_Weight_Planned_Prod;

    EXECUTE FUNCTION(UPS Chg Kill Wgt/Pcs  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1336630;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(WRK.PS_Weight_Planned_Prod);
    PARAMETER(WRK.PS_Pieces_Planned_Prod);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // DB1.Job Name = JOB.*PROGRAM
     DB1.Job_Name = JOB.*PROGRAM;

    }

   }

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(UPS Bld Kill Sch/Pln  RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1336575;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Hog_Volume);
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER('P');
 {
  //?USER: Process Data record

  //?E0178 3/18/2010 RMC Upd std mix per day of week, instead of eff date
  EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.Day_of_Week);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(UPS Bld Kill Sch/Pln  RT) TYPE(RTVOBJ) FILE(PDI6CPP)           AC1336572;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(PAR.Hog_Volume);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Type);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Process Data record

   //?E0178 3/22/10/ RMC  update every rcd with day of week = prod day of week
   EXECUTE FUNCTION(Rtv Kill Sch/Pln Info RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1336596;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?08/26/09 PKD S00912 Use Production Warehouse instead of Default WHS
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.PS Weight Planned Prod = PAR.Hog Volume * PAR.Std Weight/Head (Var/Ren) *Rou
   PAR.PS_Weight_Planned_Prod = PAR.Hog_Volume * PAR.Std_Weight_Head_Var_Ren 'H';

   // PAR.PS Pieces Planned Prod = PAR.Hog Volume * PAR.Pieces Per Head *Rounded
   PAR.PS_Pieces_Planned_Prod = PAR.Hog_Volume * PAR.Pieces_Per_Head 'H';

   EXECUTE FUNCTION(UPS Upd Kill Sch/Pln  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1336611;
   PARAMETER(PAR.Accounting_Company);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.Production_Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Production_Type);
    PARAMETER(PAR.Production_Date);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.PS_Available_Ship_Date);
    PARAMETER(PAR.PS_Weight_Planned_Prod);
    PARAMETER(PAR.PS_Pieces_Planned_Prod);
    PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
    PARAMETER(PAR.PS_Avg_Piece_Wgt);
    PARAMETER(PAR.PS_Weight_Inv_On_Hand);
    PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
    PARAMETER(PAR.PS_Weight_Standard);
    PARAMETER(PAR.PS_Pieces_Standard);
    PARAMETER(PAR.PS_Weight_Converted);
    PARAMETER(PAR.PS_Pieces_Converted);
    PARAMETER(PAR.PS_Weight_Shipping_Adj);
    PARAMETER(PAR.PS_Pieces_Shipping_Adj);
    PARAMETER(PAR.PS_Weight_Prod_Adj);
    PARAMETER(PAR.PS_Pieces_Prod_Adj);
    PARAMETER(PAR.PS_Weight_Inv_Adj);
    PARAMETER(PAR.PS_Pieces_Inv_Adj);
    PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
    PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
    PARAMETER(PAR.PS_Weight_Prod_Allocated);
    PARAMETER(PAR.PS_Pieces_Prod_Allocated);
    PARAMETER(PAR.PS_Weight_Inv_Allocated);
    PARAMETER(PAR.PS_Pieces_Inv_Allocated);
    PARAMETER(PAR.PS_Unit_Weight);
    PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
    PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
    PARAMETER(PAR.PS_Pieces_Unused_2);
    PARAMETER(PAR.PS_Weight_Unused_3);
    PARAMETER(PAR.PS_Pieces_Unused_3);
    PARAMETER(PAR.PS_Weight_Unused_4);
    PARAMETER(PAR.PS_Pieces_Unused_4);
    PARAMETER(PAR.PS_Weight_Unused_5);
    PARAMETER(PAR.PS_Pieces_Unused_5);
    PARAMETER(PAR.PS_Weight_Unused_6);
    PARAMETER(PAR.PS_Pieces_Unused_6);
    PARAMETER(PAR.PS_Item_Id);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.PS_Lock_Status);
    PARAMETER(PAR.PS_Export_Domestic);
    PARAMETER(PAR.PS_Print_On_Schedule);
    PARAMETER(PAR.PS_Piece_Count_Item);
    PARAMETER(PAR.PS_Unused_Sts_1);
    PARAMETER(PAR.PS_Unused_Sts_2);
    PARAMETER(PAR.PS_Unused_Sts_3);
    PARAMETER(PAR.PS_Unused_Sts_4);
    PARAMETER(PAR.PS_Item_Sched_Need_Sts);
    PARAMETER(PAR.PS_Production_Warehouse);
    PARAMETER(PAR.PS_Weight_Ordered);
    PARAMETER(PAR.PS_Pieces_Ordered);
    PARAMETER(PAR.PS_Weight_FC_Adjusted);
    PARAMETER(PAR.PS_Pieces_FC_Adjusted);
    PARAMETER(PAR.PS_Weight_FX_Adjusted);
    PARAMETER(PAR.PS_Pieces_FX_Adjusted);
    PARAMETER(PAR.PS_Weight_Sched_Shipment);
    PARAMETER(PAR.PS_Pieces_Sched_Shipment);
    PARAMETER(PAR.PS_Weight_Available_Prod);
    PARAMETER(PAR.PS_Pieces_Available_Prod);
    PARAMETER(PAR.PS_Weight_Production_Need);
    PARAMETER(PAR.PS_Pieces_Production_Need);
    PARAMETER(PAR.PS_Weight_Fab_Needs);
    PARAMETER(PAR.PS_Pieces_Fab_Needs);
    PARAMETER(PAR.PS_Weight_Sched_Prod);
    PARAMETER(PAR.PS_Pieces_Sched_Prod);
    PARAMETER(PAR.PS_Weight_Sched_Need);
    PARAMETER(PAR.PS_Pieces_Sched_Need);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Item_Code);
     PARAMETER(WRK.Description_Line_One);
     PARAMETER(WRK.UOM_Primary);
     PARAMETER(WRK.Unit_Weight);
     PARAMETER(DB1.Item_Structure_Class_Code);
     PARAMETER(DB1.Item_Structure_Group_Code);
     PARAMETER(DB1.Item_Structure_Type_Code);
     PARAMETER(WRK.Item_Type_Code);
     PARAMETER(WRK.Default_Warehouse);
     PARAMETER(WRK.Fresh_Chilling_Time);
     PARAMETER(WRK.Base_Conv_Loss_Item);
     PARAMETER(WRK.Variety_Rendered_Cut);
     PARAMETER(WRK.Credit_Item_Status);
     PARAMETER(WRK.Std_Weight_Head_Var_Ren);
     PARAMETER(WRK.Pieces_Per_Head);
     PARAMETER(DB1.Department_Code);
     PARAMETER(WRK.Group_for_Packaging);
     PARAMETER(WRK.Seconds_Item);
     PARAMETER(DB1.PS_Piece_Count_Item);
     PARAMETER(WRK.Pieces_Per_Bag);
     PARAMETER(WRK.Bags_Per_Unit);
     PARAMETER(DB1.PS_Export_Domestic);
     PARAMETER(DB1.PS_Print_On_Schedule);
     PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
     PARAMETER(WRK.Fresh_Sched_As_Ordered);
     PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
     PARAMETER(DB1.Primal_Group_Code);
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(DB1.Warehouse_Type);
     PARAMETER(WRK.Trans_Contol_AS400_Plant);
     PARAMETER(WRK.Warehouse_Location);
     PARAMETER(WRK.Warehouse_Std_Chill_Time);
     PARAMETER(WRK.Warehouse_Chill_Time);
     PARAMETER(DB1.PS_Item_Id);
     {
      //?Execute internal function

      EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?Execute internal function

       EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
       PARAMETER(PAR.Company_Number);
       PARAMETER(PAR.Item_Code);
       PARAMETER(PAR.Description_Line_One);
       PARAMETER(PAR.UOM_Primary);
       PARAMETER(PAR.Unit_Weight);
       PARAMETER(PAR.Item_Structure_Class_Code);
       PARAMETER(PAR.Item_Structure_Group_Code);
       PARAMETER(PAR.Item_Structure_Type_Code);
       PARAMETER(PAR.Item_Type_Code);
       PARAMETER(PAR.Default_Warehouse);
       PARAMETER(PAR.Fresh_Chilling_Time);
       PARAMETER(PAR.Base_Conv_Loss_Item);
       PARAMETER(PAR.Variety_Rendered_Cut);
       PARAMETER(PAR.Credit_Item_Status);
       PARAMETER(PAR.Std_Weight_Head_Var_Ren);
       PARAMETER(PAR.Pieces_Per_Head);
       PARAMETER(PAR.Department_Code);
       PARAMETER(PAR.Group_for_Packaging);
       PARAMETER(PAR.Seconds_Item);
       PARAMETER(PAR.Piece_Count_Item);
       PARAMETER(PAR.Pieces_Per_Bag);
       PARAMETER(PAR.Bags_Per_Unit);
       PARAMETER(PAR.Export_Domestic);
       PARAMETER(PAR.Print_On_Schedule);
       PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
       PARAMETER(PAR.Fresh_Sched_As_Ordered);
       PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
       PARAMETER(PAR.Primal_Group_Code);
       {
        //?USER: Processing if Data record not found

        MOVE *ALL (To: PAR From: CON);

        //?USER: Process Data record

        MOVE *ALL (To: PAR From: DB1);

       }

       EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
       PARAMETER(PAR.Warehouse_Code);
       PARAMETER(PAR.Warehouse_Type);
       PARAMETER(PAR.Trans_Contol_AS400_Plant);
       PARAMETER(PAR.Warehouse_Location);
       PARAMETER(PAR.Warehouse_Std_Chill_Time);
       PARAMETER(PAR.Warehouse_Chill_Time);
       {
        //?USER: Processing if Data record not found

        MOVE *ALL (To: PAR From: CON);

        //?USER: Process Data record

        MOVE *ALL (To: PAR From: DB1);

       }

      }

      EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.PS_Item_Id);
      {
       //?Execute internal function

       CASE;

       // IF PAR.Item Type Code is Raw Materials
       IF PAR.Item_Type_Code = 'RM';

       // PAR.PS Item Identification = CND.RM Base
       PAR.PS_Item_Id = 'RMB';

       // IF *OTHERWISE
       IF *OTHERWISE;

       CASE;

       // IF PAR.Seconds Item is Yes
       IF PAR.Seconds_Item = 'Y';

       // PAR.PS Item Identification = CND.FG Seconds
       PAR.PS_Item_Id = 'FSC';

       // IF *OTHERWISE
       IF *OTHERWISE;

       CASE;

       // IF PAR.Variety/Rendered/Cut is Variety
       IF PAR.Variety_Rendered_Cut = 'V';

       // PAR.PS Item Identification = CND.FG Variety
       PAR.PS_Item_Id = 'FVR';

       // IF PAR.Variety/Rendered/Cut is Rendered
       IF PAR.Variety_Rendered_Cut = 'R';

       // PAR.PS Item Identification = CND.FG Rendered
       PAR.PS_Item_Id = 'FRD';

       // IF PAR.Variety/Rendered/Cut is Cut
       IF PAR.Variety_Rendered_Cut = 'C';

       //?Base/Converted/Fabricated
       CASE;

       // IF PAR.Credit Item Status is yes
       IF PAR.Credit_Item_Status = 'Y';

       //?Setup Base/Converted/Fabricated Credit
       CASE;

       // IF PAR.Converted/Base Item is Base
       IF PAR.Base_Conv_Loss_Item = 'B';

       // PAR.PS Item Identification = CND.FG Base Credit
       PAR.PS_Item_Id = 'FBC';

       //?Setup Base/Converted/Fabricated Credit
       // IF PAR.Converted/Base Item is Converted
       IF PAR.Base_Conv_Loss_Item = 'C';

       // PAR.PS Item Identification = CND.FG Converted Credit
       PAR.PS_Item_Id = 'FCC';

       //?Setup Base/Converted/Fabricated Credit
       // IF PAR.Converted/Base Item is Fabricated
       IF PAR.Base_Conv_Loss_Item = 'F';

       // PAR.PS Item Identification = CND.FG Fabricated Credit
       PAR.PS_Item_Id = 'FFC';

       //?Setup Base/Converted/Fabricated Credit
       // IF PAR.Converted/Base Item is Loss
       IF PAR.Base_Conv_Loss_Item = 'L';

       // PAR.PS Item Identification = CND.FG Loss Credit
       PAR.PS_Item_Id = 'FLC';

       ENDIF;

       //?Base/Converted/Fabricated
       // IF *OTHERWISE
       IF *OTHERWISE;

       //?Setup Base/Converted/Fabricated
       CASE;

       // IF PAR.Converted/Base Item is Base
       IF PAR.Base_Conv_Loss_Item = 'B';

       // PAR.PS Item Identification = CND.FG Base
       PAR.PS_Item_Id = 'FGB';

       //?Setup Base/Converted/Fabricated
       // IF PAR.Converted/Base Item is Converted
       IF PAR.Base_Conv_Loss_Item = 'C';

       // PAR.PS Item Identification = CND.FG Converted
       PAR.PS_Item_Id = 'FCV';

       //?Setup Base/Converted/Fabricated
       // IF PAR.Converted/Base Item is Fabricated
       IF PAR.Base_Conv_Loss_Item = 'F';

       // PAR.PS Item Identification = CND.FG Fabricated
       PAR.PS_Item_Id = 'FFB';

       //?Setup Base/Converted/Fabricated
       // IF PAR.Converted/Base Item is Loss
       IF PAR.Base_Conv_Loss_Item = 'L';

       // PAR.PS Item Identification = CND.FG Loss
       PAR.PS_Item_Id = 'FLS';

       ENDIF;

       ENDIF;

       ENDIF;

       ENDIF;

       ENDIF;

      }

     }

     //?FP1054 Output PS Prod Warehouse
     EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(DB1.PS_Production_Warehouse);
     PARAMETER(LCL.Accounting_Company);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     //?Available Ship Date
     CASE;

     // IF WRK.Warehouse Std Chill Time is yes
     IF WRK.Warehouse_Std_Chill_Time = 'Y';

     EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
     PARAMETER(DB1.Company_Number);
     PARAMETER(PAR.Production_Date);
     PARAMETER(WRK.Warehouse_Chill_Time);
     PARAMETER(DB1.PS_Available_Ship_Date);
     {
      //?USER: Initialize routine

      // WRK.Count USR = CON.*ZERO
      WRK.Count_USR = *ZERO;

      //?USER: Process Data record

      CASE;

      // IF WRK.Count USR EQ PAR.Chilling Time
      IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

      // PAR.PS Available Ship Date = DB1.Post to G/L Date
      PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

      QUIT;

      ENDIF;

      //?Skip Saturday
      CASE;

      // IF DB1.Day of Week is Saturday
      IF DB1.Day_of_Week = '7';

      //?Skip Saturday
      // IF *OTHERWISE
      IF *OTHERWISE;

      // WRK.Count USR = WRK.Count USR + CON.1
      WRK.Count_USR = WRK.Count_USR + 1;

      ENDIF;

     }

     //?Available Ship Date
     // IF *OTHERWISE
     IF *OTHERWISE;

     EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
     PARAMETER(DB1.Company_Number);
     PARAMETER(PAR.Production_Date);
     PARAMETER(WRK.Fresh_Chilling_Time);
     PARAMETER(DB1.PS_Available_Ship_Date);
     {
      //?USER: Initialize routine

      // WRK.Count USR = CON.*ZERO
      WRK.Count_USR = *ZERO;

      //?USER: Process Data record

      CASE;

      // IF WRK.Count USR EQ PAR.Chilling Time
      IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

      // PAR.PS Available Ship Date = DB1.Post to G/L Date
      PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

      QUIT;

      ENDIF;

      //?Skip Saturday
      CASE;

      // IF DB1.Day of Week is Saturday
      IF DB1.Day_of_Week = '7';

      //?Skip Saturday
      // IF *OTHERWISE
      IF *OTHERWISE;

      // WRK.Count USR = WRK.Count USR + CON.1
      WRK.Count_USR = WRK.Count_USR + 1;

      ENDIF;

     }

     ENDIF;

     //?Average Piece Weight
     CASE;

     // IF PAR.PS Pieces Planned Prod is GT Zero
     IF PAR.PS_Pieces_Planned_Prod > *ZERO;

     // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
     DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

     ENDIF;

     EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // DB1.PS Lock Status = CND.NOT LOCKED
     DB1.PS_Lock_Status = 'N';

    }

    //?USER: Process Data record

    // WRK.PS Pieces Planned Prod = PAR.PS Pieces Planned Prod + DB1.PS Pieces Planned
    WRK.PS_Pieces_Planned_Prod = PAR.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Planned_Prod;

    // WRK.PS Weight Planned Prod = PAR.PS Weight Planned Prod + DB1.PS Weight Planned
    WRK.PS_Weight_Planned_Prod = PAR.PS_Weight_Planned_Prod + DB1.PS_Weight_Planned_Prod;

    EXECUTE FUNCTION(UPS Chg Kill Wgt/Pcs  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1336630;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Production_Type);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(WRK.PS_Weight_Planned_Prod);
    PARAMETER(WRK.PS_Pieces_Planned_Prod);
    PARAMETER(DB1.PS_Weight_Standard);
    PARAMETER(DB1.PS_Pieces_Standard);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // DB1.Job Name = JOB.*PROGRAM
     DB1.Job_Name = JOB.*PROGRAM;

    }

   }

  }

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(BPS Conv/Fab/Crd Dept RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1478490;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.PSAA_Program_Name);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Post to G/L Date GT PAR.Production Date RGT
 IF DB1.Post_to_G_L_Date > PAR.Production_Date_RGT;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(DB1.Company_Number);
 PARAMETER('S');
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Production Type
 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 //?Production Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Create the Finished Goods in the Item Schedule (PDI8CPP)
 // Call program UPS Bld FG Items      XF.
 CALL PROGRAM(UPS Bld FG Items      XF) ('PDQ7XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);

 //?Capture Inventory
 CASE;

 // IF PAR.PSAA Program Name is JOB SCHEDULER
 IF PAR.PSAA_Program_Name = 'JOBSCHED';

 //?ONLY DO THIS IF CALLED FROM THE JOB SCHED IN THE MORNING 6/08/09
 //?E4122 -06/17/2014 Move the capture of inventory in PMD1XFR
 //?Capture Inventory
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Update PDI8CPP Inventory On-Hand with POCWCPP.
 CASE;

 // IF DB1.Post to G/L Date EQ JOB.*Job date
 IF DB1.Post_to_G_L_Date = JOB.*Job_date;

 // Call program Upd Item Prod Sched   XF.
 CALL PROGRAM(Upd Item Prod Sched   XF) ('PNJRXFR');
 PARAMETER(DB1.Company_Number);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(BPS Conv Dept RMA/SMP RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1478491;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Val Std Mix Existance RT) TYPE(RTVOBJ) FILE(PDI6CPP)           AC1478564;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

  }

  CASE;

  // IF WRK.Record Found USR is Record Found
  IF WRK.Record_Found_USR = 'Y';

  // Call program BPS Dept RMA          PF.
  CALL PROGRAM(BPS Dept RMA          PF) ('PDAEPFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Department_Type);
  PARAMETER('CV');

  // Call program BPS Cnv/Fab/Crd SMP   PF.
  CALL PROGRAM(BPS Cnv/Fab/Crd SMP   PF) ('PDZ9PFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Department_Code);
  PARAMETER('CV');

  ENDIF;

 }

 EXECUTE FUNCTION(BPS Fab Dept SMP      RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1478498;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Val Std Mix Existance RT) TYPE(RTVOBJ) FILE(PDI6CPP)           AC1478564;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

  }

  CASE;

  // IF WRK.Record Found USR is Record Found
  IF WRK.Record_Found_USR = 'Y';

  // Call program BPS Dept RMA          PF.
  CALL PROGRAM(BPS Dept RMA          PF) ('PDAEPFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Department_Type);
  PARAMETER('FB');

  // Call program BPS Cnv/Fab/Crd SMP   PF.
  CALL PROGRAM(BPS Cnv/Fab/Crd SMP   PF) ('PDZ9PFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Department_Code);
  PARAMETER('FB');

  ENDIF;

 }

 EXECUTE FUNCTION(BPS Credit Dept SMP   RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1478501;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Val Std Mix Existance RT) TYPE(RTVOBJ) FILE(PDI6CPP)           AC1478564;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

  }

  CASE;

  // IF WRK.Record Found USR is Record Found
  IF WRK.Record_Found_USR = 'Y';

  // Call program BPS Dept RMA          PF.
  CALL PROGRAM(BPS Dept RMA          PF) ('PDAEPFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Department_Type);
  PARAMETER('CR');

  // Call program BPS Cnv/Fab/Crd SMP   PF.
  CALL PROGRAM(BPS Cnv/Fab/Crd SMP   PF) ('PDZ9PFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Department_Code);
  PARAMETER('CR');

  ENDIF;

 }

 ENDIF;

 ENDIF;

}


//?FP1054 Apply production Schedule Override adjustments
// Call program UPS Apply OV Adj      PF.
CALL PROGRAM(UPS Apply OV Adj      PF) ('PMEFPFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);

