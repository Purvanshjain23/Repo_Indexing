// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPBPE3R
// ?Date: 14.08.2025 Time: 03:39:52
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');

//?Force program into add mode if no item present
CASE;

// IF PAR.Item Code is Not Entered
IF PAR.Item_Code = *ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize key screen

// KEY.Accounting Company Number = PAR.Accounting Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Item Code = PAR.Item Code
KEY.Item_Code = PAR.Item_Code;

//?USER: Validate key screen

EXECUTE FUNCTION(Val Item Exists        RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1305841;
PARAMETER(KEY.Item_Code);

//?USER: Initialize detail screen (new record)

//?   Get System defaults for add
//?   Get item defaults for add
EXECUTE FUNCTION(Rtv Item Defaults      RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1371761;
PARAMETER(KEY.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(DTL.Package_Type_Code);
PARAMETER(DTL.Base_Conv_Loss_Item);
PARAMETER(DTL.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(DTL.Seconds_Item);

//?If item default was not found, default values
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// DTL.Production Date Control = CND.yes
DTL.Production_Date_Control = 'Y';

// DTL.Catch Weight Status = CND.yes
DTL.Catch_Weight_Status = 'Y';

// DTL.Credit Item Status = CND.no
DTL.Credit_Item_Status = 'N';

// DTL.Case Ready Status = CND.no
DTL.Frozen_Make_to_Order_Sts = 'N';

// 2ND.Print on Realization Rpt = CND.No
2ND.Print_on_Realization_Rpt = 'N';

// 3RD.Base/Conv/Loss Item = CND.Base
3RD.Base_Conv_Loss_Item = 'B';

// 3RD.Record Status = CND.Active
3RD.Record_Status = 'A';

// DTL.Print On Schedule = CND.no
DTL.Print_On_Schedule = 'N';

//?PK0519 Defaults - Removed from screen
// DTL.U/M - Primary = CND.EQ Boxes
DTL.UOM_Primary = 'BX';

// DTL.U/M - Pricing = CND.Pounds
DTL.UOM_Pricing = 'LB';

// DTL.U/M - Second = CND.Pounds
DTL.UOM_Second = 'LB';

// DTL.U/M - Third = CND.Hundred Weight
DTL.UOM_Third = 'CW';

// DTL.Conversion Factor 2 = CON.100
DTL.Conversion_Factor_2 = 100;

// DTL.Operation Factor 1 = CND.Multiply
DTL.Operation_Factor_1 = 'M';

// DTL.Operation Factor 2 = CND.Divide
DTL.Operation_Factor_2 = 'D';

// DTL.Price Method Default = CND.Blank
DTL.Price_Method_Default = *BLANK;

// DTL.Minimum Audit Value = CND.equal to zero
DTL.Minimum_Audit_Value = *ZERO;

// DTL.Maximum Audit Value = CND.equal to zero
DTL.Maximum_Audit_Value = *ZERO;

// DTL.Item Pricing Operation = CND.Blank
DTL.Item_Pricing_Operation = *BLANK;

// DTL.Item Pricing Constant = CON.*ZERO
DTL.Item_Pricing_Constant = *ZERO;

// DTL.Partial Item Code = CND.Not Entered
DTL.Partial_Item_Code = *ZERO;

// DTL.WIP Item Code = CON.*ZERO
DTL.WIP_Item_Code = *ZERO;

// 2ND.Item Type Code = CND.Finished Goods
2ND.Item_Type_Code = 'FG';

// 2ND.Package Type Code = WRK.Blank for 4           USR
2ND.Package_Type_Code = WRK.Blank_for_4_USR;

// 2ND.Quality Level = CND.Not entered
2ND.Quality_Level = *BLANK;

// 2ND.Seconds Item = CND.No
2ND.Seconds_Item = 'N';

// 2ND.Item Level = CND.Not Entered
2ND.Item_Level = *BLANK;

// 2ND.Variety/Rendered/Cut = CND.Cut
2ND.Variety_Rendered_Cut = 'C';

// 2ND.Export/Domestic = CND.Domestic
2ND.Export_Domestic = 'D';

// 3RD.Pieces Per Head = CON.*ZERO
3RD.Pieces_Per_Head = 0;

// 3RD.Vendor - Item Default = CON.*ZERO
3RD.Vendor_Item_Default = *ZERO;

// 3RD.Std Weight/Head (Var/Ren) = CON.*ZERO
3RD.Std_Weight_Head_Var_Ren = *ZERO;

// 3RD.Piece Count Item = CND.no
3RD.Piece_Count_Item = 'N';

// 3RD.Pieces Per Bag = CON.*ZERO
3RD.Pieces_Per_Bag = 0;

// 3RD.Bags Per Unit = CON.*ZERO
3RD.Bags_Per_Unit = 0;

// 3RD.Fresh Inv Allocation Seq = CND.First
3RD.Fresh_Inv_Allocation_Seq = 'F';

// 3RD.Frozen Sched As Ordered = CND.yes
3RD.Frozen_Inv_Allocation_Seq = 'Y';

// 3RD.Fresh Sched As Ordered = CND.yes
3RD.Fresh_Sched_As_Ordered = 'Y';

ENDIF;

// 2ND.Print on Realization Rpt = CND.No
2ND.Print_on_Realization_Rpt = 'N';

// 3RD.Record Status = CND.Active
3RD.Record_Status = 'A';

// 3RD.Status Description = Condition name of 3RD.Record Status
3RD.Status_Description = RTVCND(3RD.Record_Status);

// 2ND.Seconds Item = CND.No
2ND.Seconds_Item = 'N';

// 2ND.Scheduling Position Grade = CND.No
2ND.Scheduling_Position_Grade = 'N';

// 2ND.USR Prt on Realization Rp = 2ND.Print on Realization Rpt
2ND.USR_Prt_on_Realization_Rp = 2ND.Print_on_Realization_Rpt;

// DTL.CI Value Added Sts = CND.yes
DTL.Value_Added_Sts = 'Y';

// PAR.USR Formula Meth Type Sts = CND.no
PAR.USR_Formula_Meth_Type_Sts = 'N';

// PAR.USR Market Meth Type Sts = CND.no
PAR.USR_Market_Meth_Type_Sts = 'N';

// PAR.USR Manual Meth Type Sts = CND.no
PAR.USR_Manual_Meth_Type_Sts = 'N';

// PAR.USR Extend Meth Type Sts = CND.no
PAR.USR_Extend_Meth_Type_Sts = 'N';

// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

// DTL.Sold 100% Frozen = CND.no
DTL.Sold_100_Percent_Frozen = 'N';

//?USER: Initialize detail screen (existing record)

//?Default Print on Schedule
CASE;

// IF DB1.Print On Schedule is blank
IF DB1.Print_On_Schedule = *BLANK;

// 2ND.Print On Schedule = CND.yes
2ND.Print_On_Schedule = 'Y';

ENDIF;

//?Default Piece count item
CASE;

// IF DB1.Piece Count Item is blank
IF DB1.Piece_Count_Item = *BLANK;

// 3RD.Piece Count Item = CND.no
3RD.Piece_Count_Item = 'N';

ENDIF;

//?Defaults on Screen 3 if Item Type Code n= PS
CASE;

// IF 2ND.Item Type Code is Finished Good/Raw Matrl
IF 2ND.Item_Type_Code = 'FG'/'RM';

//?Default Inv Alloc
CASE;

// IF DB1.Fresh Inv Allocation Seq EQ WRK.BLANK 1               USR
IF DB1.Fresh_Inv_Allocation_Seq = WRK.BLANK_1_USR;

// 3RD.Fresh Inv Allocation Seq = CND.First
3RD.Fresh_Inv_Allocation_Seq = 'F';

ENDIF;

//?Default Fresh Sched as Ordered
CASE;

// IF DB1.Fresh Sched As Ordered EQ WRK.BLANK 1               USR
IF DB1.Fresh_Sched_As_Ordered = WRK.BLANK_1_USR;

// 3RD.Fresh Sched As Ordered = CND.yes
3RD.Fresh_Sched_As_Ordered = 'Y';

ENDIF;

//?Default Frozen Sched as Ordered
CASE;

// IF DB1.Frozen Sched As Ordered EQ WRK.BLANK 1               USR
IF DB1.Frozen_Inv_Allocation_Seq = WRK.BLANK_1_USR;

// 3RD.Frozen Sched As Ordered = CND.yes
3RD.Frozen_Inv_Allocation_Seq = 'Y';

ENDIF;

ENDIF;

//?Default Scheduling Grade Position
CASE;

// IF DB1.Scheduling Position Grade is *ALL values
IF DB1.Scheduling_Position_Grade = 'Y'/'N';

//?Default Scheduling Grade Position
// IF *OTHERWISE
IF *OTHERWISE;

// 2ND.Scheduling Position Grade = CND.No
2ND.Scheduling_Position_Grade = 'N';

ENDIF;

//?Determine whether to display catchweight status field
EXECUTE FUNCTION(RTV Enable Catch Wgt   RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1151356;
PARAMETER('ENBCWP');
PARAMETER(PAR.USR_Display_field);

//?If any qty on hand or allocated, don't allow change to operators
EXECUTE FUNCTION(RTV Chk Alloc/On Hand  RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1123487;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(PAR.Error_Status);

//?If any item balance detail exists for item, cannot change Prod Date Ctl
// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

EXECUTE FUNCTION(VAL Any Dtl Exists     RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1412547;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);

//?Set output only for prod date control if item bal detail found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

ENDIF;

// 2ND.USR Prt on Realization Rp = DB1.Print on Realization Rpt
2ND.USR_Prt_on_Realization_Rp = DB1.Print_on_Realization_Rpt;

//?  Save original U/M's  and catchweight status
// PAR.U/M - Primary = DB1.U/M - Primary
PAR.UOM_Primary = DB1.UOM_Primary;

// PAR.U/M - Second = DB1.U/M - Second
PAR.UOM_Second = DB1.UOM_Second;

// PAR.U/M - Third = DB1.U/M - Third
PAR.UOM_Third = DB1.UOM_Third;

// PAR.Conversion Factor 1 = DB1.Conversion Factor 1
PAR.Conversion_Factor_1 = DB1.Conversion_Factor_1;

// PAR.Conversion Factor 2 = DB1.Conversion Factor 2
PAR.Conversion_Factor_2 = DB1.Conversion_Factor_2;

// PAR.Catch Weight Status = DTL.Catch Weight Status
PAR.Catch_Weight_Status = DTL.Catch_Weight_Status;

// PAR.Item Structure Class Code = DB1.Item Structure Class Code
PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

//?Retrieve code names
EXECUTE FUNCTION(Rtv Quality Level Desc RT) TYPE(RTVOBJ) FILE(CAAIREP)          AC1124632;
PARAMETER(DB1.Quality_Level);
PARAMETER(2ND.USR_Description);

EXECUTE FUNCTION(RTV Item Level Descr   RT) TYPE(RTVOBJ) FILE(PDILREP)          AC1287285;
PARAMETER(DB1.Item_Level);
PARAMETER(2ND.USR_Description_New);

EXECUTE FUNCTION(RTV  Description       RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1219219;
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(2ND.Item_Structure_Type_Desc);

EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
PARAMETER(DB1.Item_Structure_Group_Code);
PARAMETER(2ND.Item_Structure_Group_Desc);

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(DB1.Item_Structure_Class_Code);
PARAMETER(2ND.Item_Structure_Class_Desc);

EXECUTE FUNCTION(Rtv Avl Dsp Grp Desc   RT) TYPE(RTVOBJ) FILE(PDJGREP)          AC1298156;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Group_for_Packaging);
PARAMETER(2ND.Group_decription);

EXECUTE FUNCTION(RTV Commod. Mkts Desc  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1277934;
PARAMETER(DB1.Default_Commod_Mark_basis);
PARAMETER(DTL.Commodity_Market_Desc);

EXECUTE FUNCTION(RTV Commod Group Desc  RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1277945;
PARAMETER(DB1.Commodity_Price_Group);
PARAMETER(DTL.Commodity_Price_Desc);

EXECUTE FUNCTION(Rtv Price Method Desc  RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1298165;
PARAMETER(DB1.Price_Method_Default);
PARAMETER(DTL.Price_Method_Description);

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DB1.Default_Warehouse);
PARAMETER(3RD.Warehouse_Description);

EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Department_Code);
PARAMETER(3RD.Department_Description);

EXECUTE FUNCTION(Rtv Vendor Name        RT) TYPE(RTVOBJ) FILE(CABJREP)          AC1111039;
PARAMETER(DB1.Vendor_Item_Default);
PARAMETER(3RD.Vendor_Name);

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(DB1.UOM_Primary);
PARAMETER(DTL.UOM_Description_1_USR);

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.UOM_Description_4_USR);

EXECUTE FUNCTION(Rtv Primal Grp Desc   RT) TYPE(RTVOBJ) FILE(PDLLREP)           AC1476186;
PARAMETER(DB1.Primal_Group_Code);
PARAMETER(2ND.Primal_Group_Desc);

//?Retrieve condition names
// 2ND.Condition Desc. 1  USR = Condition name of DB1.Item Type Code
2ND.Condition_Desc_1_USR = RTVCND(DB1.Item_Type_Code);

// 2ND.Condition Desc. 2  USR = Condition name of DB1.Package Type Code
2ND.Condition_Desc_2_USR = RTVCND(DB1.Package_Type_Code);

// 2ND.Condition Desc. 3  USR = Condition name of DB1.Converted/Base Item
2ND.Condition_Desc_3_USR = RTVCND(DB1.Base_Conv_Loss_Item);

// 2ND.Condition Desc. 4  USR = Condition name of DB1.Variety/Rendered/Cut
2ND.Condition_Desc_4_USR = RTVCND(DB1.Variety_Rendered_Cut);

// 2ND.Condition Name USR = Condition name of DB1.Seconds Item
2ND.Condition_Name_USR = RTVCND(DB1.Seconds_Item);

// DTL.Condition Desc. 10 USR = Condition name of DB1.Item Pricing Operation
DTL.Condition_Desc_10_USR = RTVCND(DB1.Item_Pricing_Operation);

// 3RD.Status Description = Condition name of DB1.Record Status
3RD.Status_Description = RTVCND(DB1.Record_Status);

// 2ND.Export/Domestic Desc  USR = Condition name of 2ND.Export/Domestic
2ND.Export_Domestic_Desc_USR = RTVCND(2ND.Export_Domestic);

// 3RD.Fresh Inv Alloc Desc  USR = Condition name of 3RD.Fresh Inv Allocation Seq
3RD.Fresh_Inv_Alloc_Desc_USR = RTVCND(3RD.Fresh_Inv_Allocation_Seq);

//?Save Price Audit field values
// PAR.USR Formula Meth Type Sts = CND.no
PAR.USR_Formula_Meth_Type_Sts = 'N';

// PAR.USR Market Meth Type Sts = CND.no
PAR.USR_Market_Meth_Type_Sts = 'N';

// PAR.USR Manual Meth Type Sts = CND.no
PAR.USR_Manual_Meth_Type_Sts = 'N';

// PAR.USR Extend Meth Type Sts = CND.no
PAR.USR_Extend_Meth_Type_Sts = 'N';

// PAR.U/M - Pricing = DB1.U/M - Pricing
PAR.UOM_Pricing = DB1.UOM_Pricing;

// PAR.Default Commod Mark basis = DB1.Default Commod Mark basis
PAR.Default_Commod_Mark_basis = DB1.Default_Commod_Mark_basis;

// PAR.Commodity Price Group = DB1.Commodity Price Group
PAR.Commodity_Price_Group = DB1.Commodity_Price_Group;

// PAR.Market Overage = DB1.Market Overage
PAR.Market_Overage = DB1.Market_Overage;

// PAR.Standard Overage/Underage = DB1.Standard Overage/Underage
PAR.Standard_Overage_Underage = DB1.Standard_Overage_Underage;

// PAR.Item Pricing Operation = DB1.Item Pricing Operation
PAR.Item_Pricing_Operation = DB1.Item_Pricing_Operation;

// PAR.Item Pricing Constant = DB1.Item Pricing Constant
PAR.Item_Pricing_Constant = DB1.Item_Pricing_Constant;

// PAR.Record Status = DB1.Record Status
PAR.Record_Status = DB1.Record_Status;

// PAR.Commodity Market Code = CON.*BLANK
PAR.Commodity_Market_Code = *BLANK;

//?Save Accu-Sort/Plant Floor values
// PAR.Description Line One = DB1.Description Line One
PAR.Description_Line_One = DB1.Description_Line_One;

// PAR.Item Label Line 1 = DB1.Item Label Line 1
PAR.Item_Label_Line_1 = DB1.Item_Label_Line_1;

// PAR.Item Label Line 2 = DB1.Item Label Line 2
PAR.Item_Label_Line_2 = DB1.Item_Label_Line_2;

// PAR.Item Label Line 3 = DB1.Item Label Line 3
PAR.Item_Label_Line_3 = DB1.Item_Label_Line_3;

// PAR.Unit Weight = DB1.Unit Weight
PAR.Unit_Weight = DB1.Unit_Weight;

// PAR.Minimum Weight Per Case = DB1.Minimum Weight Per Case
PAR.Minimum_Weight_Per_Case = DB1.Minimum_Weight_Per_Case;

// PAR.Maximum Weight Per Case = DB1.Maximum Weight Per Case
PAR.Maximum_Weight_Per_Case = DB1.Maximum_Weight_Per_Case;

// PAR.Number Cases On A Pallet = DB1.Number Cases On A Pallet
PAR.Number_Cases_On_A_Pallet = DB1.Number_Cases_On_A_Pallet;

// PAR.Misc Tare Weight = DB1.Misc Tare Weight
PAR.Misc_Tare_Weight = DB1.Misc_Tare_Weight;

// PAR.Chilling Time = DB1.Chilling Time
PAR.Fresh_Chilling_Time = DB1.Fresh_Chilling_Time;

// PAR.Default Warehouse = DB1.Default Warehouse
PAR.Default_Warehouse = DB1.Default_Warehouse;

EXECUTE FUNCTION(RTV Box Item code      RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1402262;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Box_iD);

// PAR.Box iD = DTL.Box iD
PAR.Box_iD = DTL.Box_iD;

//?USER: Validate detail screen fields

// DTL.Conversion Factor 1 = DTL.Unit Weight
DTL.Conversion_Factor_1 = DTL.Unit_Weight;

//?Validate Zero if Active Item
CASE;

// IF DTL.Unit Weight is Equal to zero
IF DTL.Unit_Weight = *ZERO;

CASE;

// IF 2ND.Record Status is Active
IF 2ND.Record_Status = 'A';

// Send error message - 'Weight entry required for this item.'
ERROR(USR0514);
MSGPARM(DTL.Unit_Weight);

ENDIF;

ENDIF;

//?Select Commodity market, Base Item, WIP Item
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Default Commod Mark basis
IF PGM.*Cursor_field = DTL.Default_Commod_Mark_basis;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(DTL.Default_Commod_Mark_basis);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Seaboard Equivalent Item
IF PGM.*Cursor_field = DTL.Seaboard_Equivalent_Item;

// Call program SEL Actv Item by Co    SR.
CALL PROGRAM(SEL Actv Item by Co    SR) ('PDL9SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Seaboard_Equivalent_Item);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Item Category Code 1
IF PGM.*Cursor_field = DTL.Made_to_Order_Code;

// WRK.Item Category Number = CON.1
WRK.Item_Category_Number = 1;

// Call program Zzz Make-To-Order     SL.
CALL PROGRAM(Zzz Make-To-Order     SL) ('POLVSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.Item_Category_Number);
PARAMETER(DTL.Made_to_Order_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Item Category Code 4
IF PGM.*Cursor_field = DTL.GL_Sub_Code;

// WRK.Item Category Number = CON.4
WRK.Item_Category_Number = 4;

// Call program Sel GL Sub Codes      SL.
CALL PROGRAM(Sel GL Sub Codes      SL) ('POV5SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.Item_Category_Number);
PARAMETER(DTL.GL_Sub_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?If U/M 2 entered then Conv. Factor 1 & operation 1 is required
CASE;

// IF DTL.U/M - Second is Entered
IF DTL.UOM_Second <> *BLANK;

CASE;

// IF DTL.Conversion Factor 1 is Not Entered
IF DTL.Conversion_Factor_1 = *ZERO;

// Send error message - 'Conversion Factor 1 is required'
ERROR(USR0364);
MSGPARM(DTL.Conversion_Factor_1);

ENDIF;

CASE;

// IF DTL.Operation Factor 1 is Not Entered
IF DTL.Operation_Factor_1 = *BLANK;

// Send error message - 'Operation Factor 1 is required'
ERROR(USR1011);
MSGPARM(DTL.Operation_Factor_1);

ENDIF;

ENDIF;

//?If U/M 3 entered then U/M 2, Conv. 2 & operation 2 required
CASE;

// IF DTL.U/M - Third is Entered
IF DTL.UOM_Third <> *BLANK;

CASE;

// IF DTL.U/M - Second is Not Entered
IF DTL.UOM_Second = *BLANK;

// Send error message - 'U/M - Second is required if U/M - Third is entered'
ERROR(USR0886);
MSGPARM(DTL.UOM_Second);
MSGPARM(DTL.Conversion_Factor_1);

ENDIF;

CASE;

// IF DTL.Conversion Factor 2 is Not Entered
IF DTL.Conversion_Factor_2 = *ZERO;

// Send error message - 'Conversion Factor 2 is required'
ERROR(USR0365);
MSGPARM(DTL.Conversion_Factor_2);

ENDIF;

CASE;

// IF DTL.Operation Factor 2 is Not Entered
IF DTL.Operation_Factor_2 = *BLANK;

// Send error message - 'Operation Factor 2 is required'
ERROR(USR1012);
MSGPARM(DTL.Operation_Factor_2);

ENDIF;

ENDIF;

//?Clear conversion/operation factor 1 if u/m 2 not entered
CASE;

// IF DTL.U/M - Second is Not Entered
IF DTL.UOM_Second = *BLANK;

// DTL.Conversion Factor 1 = CND.Not Entered
DTL.Conversion_Factor_1 = *ZERO;

// DTL.Operation Factor 1 = CND.Not Entered
DTL.Operation_Factor_1 = *BLANK;

ENDIF;

//?Clear conversion/operation 2 if u/m 3 not entered
CASE;

// IF DTL.U/M - Third is Not Entered
IF DTL.UOM_Third = *BLANK;

// DTL.Conversion Factor 2 = CND.Not Entered
DTL.Conversion_Factor_2 = *ZERO;

// DTL.Operation Factor 2 = CND.Not Entered
DTL.Operation_Factor_2 = *BLANK;

ENDIF;

//?Re- Add After Testing
//?Pricing UM must equal primary, second or third UOM
CASE;

// IF DTL.U/M - Pricing NE DTL.U/M - Primary
IF DTL.UOM_Pricing <> DTL.UOM_Primary;

// AND DTL.U/M - Pricing NE DTL.U/M - Second
AND DTL.UOM_Pricing <> DTL.UOM_Second;

// AND DTL.U/M - Pricing NE DTL.U/M - Third
AND DTL.UOM_Pricing <> DTL.UOM_Third;

// Send error message - 'Pricing U/M must be setup as primary, second or third UOM.'
ERROR(USR0543);
MSGPARM(DTL.UOM_Pricing);
MSGPARM(DTL.UOM_Primary);
MSGPARM(DTL.UOM_Second);
MSGPARM(DTL.UOM_Third);

ENDIF;

//?Edit Commodity Group U/M to EQ Pricing U/M
CASE;

// IF DTL.Commodity Price Group is Not Blank
IF DTL.Commodity_Price_Group <> *BLANK;

EXECUTE FUNCTION(RTV Commod U/M         RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1366761;
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(WRK.UOM_Pricing);

CASE;

// IF DTL.U/M - Pricing NE WRK.U/M - Pricing
IF DTL.UOM_Pricing <> WRK.UOM_Pricing;

// Send error message - 'Commodity Group's U/M must equal Pricing U/M.'
ERROR(USR2165);
MSGPARM(DTL.Commodity_Price_Group);

ENDIF;

ENDIF;

//?If item type is FG/RM then check for errors
CASE;

// IF 2ND.Item Type Code is Finished Good/Raw Matrl
IF 2ND.Item_Type_Code = 'FG'/'RM';

ENDIF;

//?If item type is FG/RM/WP then check for errors            PK0318
CASE;

// IF 2ND.Item Type Code is FG/RM/WP
IF 2ND.Item_Type_Code = 'FG'/'RM'/'WP';

//?Variety/Rendered/Cut must be entered
CASE;

// IF 2ND.Variety/Rendered/Cut is Not Entered
IF 2ND.Variety_Rendered_Cut = *BLANK;

// Send error message - 'Variety/Rendering/Cut must be entered for FG/RM Item Type.'
ERROR(USR1861);
MSGPARM(DTL.Variety_Rendered_Cut);

ENDIF;

//?Vendor cannot be entered for FG/RM Item
CASE;

// IF 3RD.Vendor - Item Default is Entered
IF 3RD.Vendor_Item_Default <> *ZERO;

// Send error message - 'Vendor can only be entered for PS item type.'
ERROR(USR1864);
MSGPARM(3RD.Vendor_Item_Default);

ENDIF;

//?Warehouse must be entered
CASE;

// IF DTL.Default Warehouse is Warehouse Code Blank
IF DTL.Default_Warehouse = *BLANK;

// Send error message - 'Warehouse must be entered for Finished Good/Raw Material/Work in Process.'
ERROR(USR1893);
MSGPARM(DTL.Default_Warehouse);

ENDIF;

ENDIF;

//?If item type is PS, check for errors
CASE;

// IF 2ND.Item Type Code is Packaging and Supplies
IF 2ND.Item_Type_Code = 'PS';

//?Package type must be entered for item type 'PS'
CASE;

// IF 2ND.Package Type Code is *ALL values
IF 2ND.Package_Type_Code = 'B'/'O'/'P';

//?Package type must be entered for item type 'PS'
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Package type code must be entered for item type 'PS'.'
ERROR(USR1906);
MSGPARM(DTL.Package_Type_Code);

ENDIF;

ENDIF;

//?If Item Type = FG & Var/Rnd/Cut = Cut, then Base/Conv/Fab required.
CASE;

// IF 2ND.Item Type Code is Finished Goods
IF 2ND.Item_Type_Code = 'FG';

CASE;

// IF 2ND.Variety/Rendered/Cut is Cut
IF 2ND.Variety_Rendered_Cut = 'C';

CASE;

// IF 2ND.Converted/Base Item is Blank
IF 2ND.Base_Conv_Loss_Item = *BLANK;

// Send error message - 'Base/Converted/Fabricated must be entered if Variety/Rendered/Cut is cut.'
ERROR(USR1865);
MSGPARM(2ND.Base_Conv_Loss_Item);

ENDIF;

ENDIF;

ENDIF;

//?If item type is raw material then item must be base
CASE;

// IF 2ND.Item Type Code is Raw Materials
IF 2ND.Item_Type_Code = 'RM';

CASE;

// IF 2ND.Converted/Base Item is Base
IF 2ND.Base_Conv_Loss_Item = 'B';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Raw material items must be a base.'
ERROR(USR2160);
MSGPARM(2ND.Item_Type_Code);
MSGPARM(2ND.Base_Conv_Loss_Item);

ENDIF;

ENDIF;

//?If cut item then check for errors
CASE;

// IF 2ND.Variety/Rendered/Cut is Cut
IF 2ND.Variety_Rendered_Cut = 'C';

//?Converted/Base/Fab must be entered
CASE;

// IF 2ND.Converted/Base Item is Blank
IF 2ND.Base_Conv_Loss_Item = *BLANK;

// Send error message - 'Base/Converted/Fabricated must be entered if Variety/Rendered/Cut is cut.'
ERROR(USR1865);
MSGPARM(DTL.Base_Conv_Loss_Item);

ENDIF;

ENDIF;

//?If Variety or rendered then std weight/head must be entered
CASE;

// IF 2ND.Variety/Rendered/Cut is Variety/Rendered
IF 2ND.Variety_Rendered_Cut = 'R'/'V';

CASE;

// IF 3RD.Std Weight/Head (Var/Ren) is Equal to zero
IF 3RD.Std_Weight_Head_Var_Ren = *ZERO;

// Send error message - 'Standard weight per head can't 0 if Variety/Rend/Cut is Variety or Rendered
ERROR(USR1866);
MSGPARM(DTL.Std_Weight_Head_Var_Ren);

ENDIF;

ENDIF;

//?Minimum Weight Per Case cannot be greater than Maximum Weight Per Case
CASE;

// IF DTL.Minimum Weight Per Case GT DTL.Maximum Weight Per Case
IF DTL.Minimum_Weight_Per_Case > DTL.Maximum_Weight_Per_Case;

// Send error message - 'Minimum Case Wgt cannot be greater than Maximum Case Wgt'
ERROR(USR2274);

ENDIF;

//?If not a finished good, print on realization rpt = N
CASE;

// IF 2ND.Item Type Code is Not Finished Good
IF 2ND.Item_Type_Code <> 'FG';

// 2ND.Print on Realization Rpt = CND.No
2ND.Print_on_Realization_Rpt = 'N';

// 2ND.USR Prt on Realization Rp = CND.no
2ND.USR_Prt_on_Realization_Rp = 'N';

// DTL.CI Value Added Sts = CND.no
DTL.Value_Added_Sts = 'N';

ENDIF;

CASE;

// IF DTL.Item Type Code is Finished Goods
IF DTL.Item_Type_Code = 'FG';

//?Validate Minimum Weight Per Case w/Unit Weight
CASE;

// IF 3RD.Minimum Weight Per Case GT DTL.Unit Weight
IF 3RD.Minimum_Weight_Per_Case > DTL.Unit_Weight;

// Send error message - 'Minimum Weight Per Case is greater than the Unit Weight.'
ERROR(USR2285);
MSGPARM(3RD.Minimum_Weight_Per_Case);

ENDIF;

//?Validate Maximum Weight Per Case w/Unit Weight
CASE;

// IF 3RD.Maximum Weight Per Case LT DTL.Unit Weight
IF 3RD.Maximum_Weight_Per_Case < DTL.Unit_Weight;

// Send error message - 'Maximum Weight Per Case is less than the Unit Weight.'
ERROR(USR2286);
MSGPARM(3RD.Maximum_Weight_Per_Case);

ENDIF;

//?Validate Category code 4 (GL Sub Code)    6/11/03
CASE;

// IF 2ND.Item Category Code 4 is Not Entered
IF 2ND.GL_Sub_Code = *BLANK;

// Send error message - 'GL Sub Code is required.'
ERROR(USR3251);
MSGPARM(2ND.GL_Sub_Code);

//?Validate Category code 4 (GL Sub Code)    6/11/03
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Item Category     RT) TYPE(RTVOBJ) FILE(PDJIREP)           AC1627162;
PARAMETER(DTL.Company_Number);
PARAMETER(04);
PARAMETER(2ND.GL_Sub_Code);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'GL Sub Code is invalid.'
ERROR(USR3252);
MSGPARM(2ND.GL_Sub_Code);

ENDIF;

ENDIF;

ENDIF;

//?Requirements for a Piece Count Item
CASE;

// IF 3RD.Piece Count Item is yes
IF 3RD.Piece_Count_Item = 'Y';

CASE;

// IF 3RD.Pieces Per Bag is EQ Zero
IF 3RD.Pieces_Per_Bag = *ZERO;

// Send error message - 'Pieces per Bag required for a Piece Count Item.'
ERROR(USR2517);
MSGPARM(3RD.Pieces_Per_Bag);

ENDIF;

CASE;

// IF 3RD.Bags Per Unit is EQ Zero
IF 3RD.Bags_Per_Unit = *ZERO;

// Send error message - 'Bags per Unit required for a Piece Count Item.'
ERROR(USR2518);
MSGPARM(3RD.Bags_Per_Unit);

ENDIF;

//?Requirements for a Piece Count Item
// IF *OTHERWISE
IF *OTHERWISE;

// 3RD.Pieces Per Bag = CON.*ZERO
3RD.Pieces_Per_Bag = *ZERO;

// 3RD.Bags Per Unit = CON.*ZERO
3RD.Bags_Per_Unit = *ZERO;

ENDIF;

//?Requirements if Item Type Code = FG/RM
CASE;

// IF 2ND.Item Type Code is Finished Good/Raw Matrl
IF 2ND.Item_Type_Code = 'FG'/'RM';

CASE;

// IF 2ND.Export/Domestic EQ WRK.BLANK 1               USR
IF 2ND.Export_Domestic = WRK.BLANK_1_USR;

// Send error message - 'Export/Domestic required for item type code.'
ERROR(USR2515);
MSGPARM(2ND.Export_Domestic);

ENDIF;

CASE;

// IF 3RD.Fresh Inv Allocation Seq EQ WRK.BLANK 1               USR
IF 3RD.Fresh_Inv_Allocation_Seq = WRK.BLANK_1_USR;

// Send error message - 'Fresh Inv Allocation Seq required for this Item Type Code.'
ERROR(USR2521);
MSGPARM(3RD.Fresh_Inv_Allocation_Seq);

ENDIF;

CASE;

// IF 3RD.Fresh Sched As Ordered EQ WRK.BLANK 1               USR
IF 3RD.Fresh_Sched_As_Ordered = WRK.BLANK_1_USR;

// Send error message - 'Fresh Sched As Ordered required for this Item Type Code.'
ERROR(USR2519);
MSGPARM(3RD.Fresh_Sched_As_Ordered);

ENDIF;

CASE;

// IF 3RD.Frozen Sched As Ordered EQ WRK.BLANK 1               USR
IF 3RD.Frozen_Inv_Allocation_Seq = WRK.BLANK_1_USR;

// Send error message - 'Frozen Inventory Allocation Seq required for this Item Type Code.'
ERROR(USR2520);
MSGPARM(3RD.Frozen_Inv_Allocation_Seq);

ENDIF;

ENDIF;

//?If change mode, Chk for Changes which should initiate Price Audit
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF 2ND.Item Type Code is Finished Good/Raw Matrl
IF 2ND.Item_Type_Code = 'FG'/'RM';

//?Record Status change
CASE;

// IF PAR.Record Status NE 2ND.Record Status
IF PAR.Record_Status <> 2ND.Record_Status;

// PAR.USR Formula Meth Type Sts = CND.yes
PAR.USR_Formula_Meth_Type_Sts = 'Y';

// PAR.USR Market Meth Type Sts = CND.yes
PAR.USR_Market_Meth_Type_Sts = 'Y';

// PAR.USR Manual Meth Type Sts = CND.yes
PAR.USR_Manual_Meth_Type_Sts = 'Y';

// PAR.USR Extend Meth Type Sts = CND.yes
PAR.USR_Extend_Meth_Type_Sts = 'Y';

ENDIF;

//?U/M - Pricing change
CASE;

// IF PAR.U/M - Pricing NE DTL.U/M - Pricing
IF PAR.UOM_Pricing <> DTL.UOM_Pricing;

// PAR.USR Formula Meth Type Sts = CND.yes
PAR.USR_Formula_Meth_Type_Sts = 'Y';

// PAR.USR Market Meth Type Sts = CND.yes
PAR.USR_Market_Meth_Type_Sts = 'Y';

// PAR.USR Manual Meth Type Sts = CND.yes
PAR.USR_Manual_Meth_Type_Sts = 'Y';

ENDIF;

//?Default Commod Mark Basis change
CASE;

// IF PAR.Default Commod Mark basis NE DTL.Default Commod Mark basis
IF PAR.Default_Commod_Mark_basis <> DTL.Default_Commod_Mark_basis;

// PAR.Commodity Market Code = PAR.Default Commod Mark basis
PAR.Commodity_Market_Code = PAR.Default_Commod_Mark_basis;

// PAR.USR Formula Meth Type Sts = CND.yes
PAR.USR_Formula_Meth_Type_Sts = 'Y';

ENDIF;

//?Commodity Price Group change
CASE;

// IF PAR.Commodity Price Group NE DTL.Commodity Price Group
IF PAR.Commodity_Price_Group <> DTL.Commodity_Price_Group;

// PAR.USR Formula Meth Type Sts = CND.yes
PAR.USR_Formula_Meth_Type_Sts = 'Y';

// PAR.USR Market Meth Type Sts = CND.yes
PAR.USR_Market_Meth_Type_Sts = 'Y';

ENDIF;

//?Market Overage change
CASE;

// IF PAR.Market Overage NE DTL.Market Overage
IF PAR.Market_Overage <> DTL.Market_Overage;

// PAR.USR Market Meth Type Sts = CND.yes
PAR.USR_Market_Meth_Type_Sts = 'Y';

ENDIF;

//?Standard Overage/underage change
CASE;

// IF PAR.Standard Overage/Underage NE DTL.Standard Overage/Underage
IF PAR.Standard_Overage_Underage <> DTL.Standard_Overage_Underage;

// PAR.USR Formula Meth Type Sts = CND.yes
PAR.USR_Formula_Meth_Type_Sts = 'Y';

ENDIF;

//?Item Pricing Operation change
CASE;

// IF PAR.Item Pricing Operation NE DTL.Item Pricing Operation
IF PAR.Item_Pricing_Operation <> DTL.Item_Pricing_Operation;

// PAR.USR Formula Meth Type Sts = CND.yes
PAR.USR_Formula_Meth_Type_Sts = 'Y';

ENDIF;

//?Item Pricing Constant change
CASE;

// IF PAR.Item Pricing Constant NE DTL.Item Pricing Constant
IF PAR.Item_Pricing_Constant <> DTL.Item_Pricing_Constant;

// PAR.USR Formula Meth Type Sts = CND.yes
PAR.USR_Formula_Meth_Type_Sts = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF DTL.Item Type Code is Finished Goods
IF DTL.Item_Type_Code = 'FG';

//?Convert Label 1 to Upper Case
CASE;

// IF DTL.Item Label Line 1 is Entered
IF DTL.Item_Label_Line_1 <> *BLANK;

// Execute function CVT to Upper w/SpclChr US.
EXECUTE FUNCTION(CVT to Upper w/SpclChr US) TYPE(EXCUSRSRC) ('POODUFR');
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_1);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?Retrieve code names
EXECUTE FUNCTION(Rtv Quality Level Desc RT) TYPE(RTVOBJ) FILE(CAAIREP)          AC1124632;
PARAMETER(2ND.Quality_Level);
PARAMETER(2ND.USR_Description);

EXECUTE FUNCTION(RTV Item Level Descr   RT) TYPE(RTVOBJ) FILE(PDILREP)          AC1287285;
PARAMETER(2ND.Item_Level);
PARAMETER(2ND.USR_Description_New);

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(2ND.Item_Structure_Class_Code);
PARAMETER(2ND.Item_Structure_Class_Desc);

EXECUTE FUNCTION(RTV Commod. Mkts Desc  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1277934;
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(DTL.Commodity_Market_Desc);

EXECUTE FUNCTION(RTV Commod Group Desc  RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1277945;
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(DTL.Commodity_Price_Desc);

//?Validate Market & Price Group combiniation.
DO;

CASE;

// IF PAR.Default Commod Mark basis NE DTL.Default Commod Mark basis
IF ( PAR.Default_Commod_Mark_basis <> DTL.Default_Commod_Mark_basis;

// OR PAR.Commodity Price Group NE DTL.Commodity Price Group
OR PAR.Commodity_Price_Group <> DTL.Commodity_Price_Group );

// AND 2ND.Item Type Code is Finished Good/Raw Matrl
AND 2ND.Item_Type_Code = 'FG'/'RM';

EXECUTE FUNCTION(RTV Last Market PrcDte RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1557214;
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(PAR.Market_Price_Date);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Format date for display in message.
DO;

// PAR.Date (Alpha) USR = CVTVAR(PAR.Market Price Date)
PAR.Date_Alpha_USR = CVTVAR(PAR.Market_Price_Date);

//?99/
// PAR.Date Component Alpha  USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
PAR.Date_Component_Alpha_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

// PAR.Dsp Date (99/99/99)   USR = CONCAT(PAR.Date Component Alpha  USR,CON./,CND.*
PAR.Dsp_Date_99_99_99_USR = PAR.Date_Component_Alpha_USR + '/' (*ZERO);

//?99/99/
// PAR.Date Component Alpha  USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
PAR.Date_Component_Alpha_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

// PAR.Dsp Date (99/99/99)   USR = CONCAT(PAR.Dsp Date (99/99/99)   USR,PAR.Date Co
PAR.Dsp_Date_99_99_99_USR = PAR.Dsp_Date_99_99_99_USR + PAR.Date_Component_Alpha_USR (*ZERO);

// PAR.Dsp Date (99/99/99)   USR = CONCAT(PAR.Dsp Date (99/99/99)   USR,CON./,CND.*
PAR.Dsp_Date_99_99_99_USR = PAR.Dsp_Date_99_99_99_USR + '/' (*ZERO);

//?99/99/99
// PAR.Date Component Alpha  USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
PAR.Date_Component_Alpha_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

// PAR.Dsp Date (99/99/99)   USR = CONCAT(PAR.Dsp Date (99/99/99)   USR,PAR.Date Co
PAR.Dsp_Date_99_99_99_USR = PAR.Dsp_Date_99_99_99_USR + PAR.Date_Component_Alpha_USR (*ZERO);

ENDDO;

// Send information message - 'Last price keyed &1.'
MESSAGE(USR2835 *INFO);
MSGPARM(PAR.Dsp_Date_99_99_99_USR);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prices for this group not available.'
ERROR(USR2836);
MSGPARM(DTL.Default_Commod_Mark_basis);
MSGPARM(DTL.Commodity_Price_Group);

ENDIF;

ENDIF;

ENDDO;

EXECUTE FUNCTION(Rtv Price Method Desc  RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1298165;
PARAMETER(DTL.Price_Method_Default);
PARAMETER(DTL.Price_Method_Description);

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(3RD.Default_Warehouse);
PARAMETER(3RD.Warehouse_Description);

EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
PARAMETER(3RD.Company_Number);
PARAMETER(3RD.Department_Code);
PARAMETER(3RD.Department_Description);

EXECUTE FUNCTION(Rtv Vendor Name        RT) TYPE(RTVOBJ) FILE(CABJREP)          AC1111039;
PARAMETER(3RD.Vendor_Item_Default);
PARAMETER(3RD.Vendor_Name);

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.UOM_Description_1_USR);

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.UOM_Description_2_USR);

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.UOM_Description_3_USR);

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.UOM_Description_4_USR);

//?Retrieve condition names
// 2ND.Condition Desc. 1  USR = Condition name of 2ND.Item Type Code
2ND.Condition_Desc_1_USR = RTVCND(2ND.Item_Type_Code);

// 2ND.Condition Desc. 2  USR = Condition name of 2ND.Package Type Code
2ND.Condition_Desc_2_USR = RTVCND(2ND.Package_Type_Code);

// 2ND.Condition Desc. 3  USR = Condition name of 2ND.Converted/Base Item
2ND.Condition_Desc_3_USR = RTVCND(2ND.Base_Conv_Loss_Item);

// 2ND.Condition Desc. 4  USR = Condition name of 2ND.Variety/Rendered/Cut
2ND.Condition_Desc_4_USR = RTVCND(2ND.Variety_Rendered_Cut);

// 2ND.Condition Name USR = Condition name of 2ND.Seconds Item
2ND.Condition_Name_USR = RTVCND(2ND.Seconds_Item);

// DTL.Condition Desc. 10 USR = Condition name of DTL.Item Pricing Operation
DTL.Condition_Desc_10_USR = RTVCND(DTL.Item_Pricing_Operation);

// 3RD.Status Description = Condition name of 2ND.Record Status
3RD.Status_Description = RTVCND(2ND.Record_Status);

//?4/30/03 dont change the group/type per the class
// DTL.Print on Realization Rpt = 2ND.USR Prt on Realization Rp
DTL.Print_on_Realization_Rpt = 2ND.USR_Prt_on_Realization_Rp;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Item/Add to AvlGrp CR) TYPE(CRTOBJ) FILE(CABZREP)          AC1120696;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_Item_Default);
PARAMETER(2ND.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(3RD.Transportation_Temp);
PARAMETER(2ND.Item_Type_Code);
PARAMETER(DTL.Package_Type_Code);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(3RD.Fresh_Chilling_Time);
PARAMETER(3RD.Base_Conv_Loss_Item);
PARAMETER(DTL.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(3RD.Std_Weight_Head_Var_Ren);
PARAMETER(DTL.Pieces_Per_Head);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(DTL.Item_Category_Number_2);
PARAMETER(DTL.Transportation_Equip_Type);
PARAMETER(DTL.Item_Category_Number_3);
PARAMETER(DTL.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DTL.Item_Category_Number_5);
PARAMETER(DTL.Item_Structure_Sub_Class);
PARAMETER(DTL.Item_Category_Number_6);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(DTL.Item_Category_Number_7);
PARAMETER(DTL.Item_Exc_Man_Prc_Excp);
PARAMETER(DTL.Item_Category_Number_8);
PARAMETER(DTL.Item_Prod_Sched_Send_PFS);
PARAMETER(DTL.Item_Category_Number_9);
PARAMETER(DTL.Item_Category_Code_9);
PARAMETER(DTL.Item_Category_Number_10);
PARAMETER(DTL.Item_Category_Code_10);
PARAMETER(DTL.Pallet_Tare_Weight);
PARAMETER(DTL.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(2ND.Packaging_Code);
PARAMETER(DTL.Item_Market_Code);
PARAMETER(DTL.TF_Co_Ownership_Sts);
PARAMETER(DTL.Agrimetrics_group);
PARAMETER(DTL.Agrimetrics_pack);
PARAMETER(DTL.Agrimetrics_grade);
PARAMETER(DTL.PA_Base_Avail_Rpt_Include);
PARAMETER(DTL.PM_Pounds_per_Hour);
PARAMETER(DTL.Item_Frt_Overage_Prc_UOM);
PARAMETER(DTL.Packages_per_case);
PARAMETER(DTL.Use_Freeze_Sell_By_Days);
PARAMETER(DTL.PM_Batch_Size);
PARAMETER(DTL.Package_Level_size);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Std_Costing_Unit_Weight);
PARAMETER(DTL.FP_Std_Green_Weight);
PARAMETER(DTL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(DTL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(DTL.PM_Formula_LBS_Per_Hour);
PARAMETER(DTL.PM_Finished_LBS_Per_Hour);
PARAMETER(DTL.SH_Unused_was_broker);
PARAMETER(DTL.PM_Raw_Material_Type_Code);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(DTL.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.Unit_Weight_Change_Sts);
PARAMETER(3RD.Piece_Count_Item);
PARAMETER(3RD.Pieces_Per_Bag);
PARAMETER(3RD.Bags_Per_Unit);
PARAMETER(2ND.Export_Domestic);
PARAMETER(2ND.Print_On_Schedule);
PARAMETER(3RD.Fresh_Inv_Allocation_Seq);
PARAMETER(3RD.Fresh_Sched_As_Ordered);
PARAMETER(3RD.Frozen_Inv_Allocation_Seq);
PARAMETER(2ND.Primal_Group_Code);
PARAMETER(DTL.Item_Meat_Cost_Group_Code);
PARAMETER(DTL.UPC_Code_2);
PARAMETER(DTL.Item_Target_Price);
PARAMETER(DTL.Minimum_Piece_Weight);
PARAMETER(DTL.Maximum_Piece_Weight);
PARAMETER(DTL.Seaboard_Equivalent_Item);
PARAMETER(3RD.Production_Qty_Per_Shift);
PARAMETER(2ND.Scheduling_Position_Grade);
PARAMETER(DTL.Sold_100_Percent_Frozen);
PARAMETER(3RD.Maximum_Shifts);
PARAMETER(DTL.Value_Added_Sts);
PARAMETER(DTL.Label_Type);
PARAMETER(DTL.Item_TF_Exempt_Code);
PARAMETER(DTL.Item_TF_Classification);
PARAMETER(DTL.Default_Workcenter);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(2ND.Record_Status);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Item/Item Default  CH) TYPE(CHGOBJ) FILE(CABZREP)          AC1385023;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_Item_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(3RD.Transportation_Temp);
PARAMETER(2ND.Item_Type_Code);
PARAMETER(DTL.Package_Type_Code);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(3RD.Fresh_Chilling_Time);
PARAMETER(3RD.Base_Conv_Loss_Item);
PARAMETER(DTL.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(3RD.Std_Weight_Head_Var_Ren);
PARAMETER(DTL.Pieces_Per_Head);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(DTL.Item_Category_Number_2);
PARAMETER(DTL.Transportation_Equip_Type);
PARAMETER(DTL.Item_Category_Number_3);
PARAMETER(DTL.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DTL.Item_Category_Number_5);
PARAMETER(DTL.Item_Structure_Sub_Class);
PARAMETER(DTL.Item_Category_Number_6);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(DTL.Item_Category_Number_7);
PARAMETER(DTL.Item_Exc_Man_Prc_Excp);
PARAMETER(DTL.Item_Category_Number_8);
PARAMETER(DTL.Item_Prod_Sched_Send_PFS);
PARAMETER(DTL.Item_Category_Number_9);
PARAMETER(DTL.Item_Category_Code_9);
PARAMETER(DTL.Item_Category_Number_10);
PARAMETER(DTL.Item_Category_Code_10);
PARAMETER(DTL.Pallet_Tare_Weight);
PARAMETER(DTL.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(2ND.Packaging_Code);
PARAMETER(DTL.Item_Market_Code);
PARAMETER(DTL.TF_Co_Ownership_Sts);
PARAMETER(DTL.Agrimetrics_group);
PARAMETER(DTL.Agrimetrics_pack);
PARAMETER(DTL.Agrimetrics_grade);
PARAMETER(DTL.PA_Base_Avail_Rpt_Include);
PARAMETER(DTL.PM_Pounds_per_Hour);
PARAMETER(DTL.Item_Frt_Overage_Prc_UOM);
PARAMETER(DTL.Packages_per_case);
PARAMETER(DTL.Use_Freeze_Sell_By_Days);
PARAMETER(DTL.PM_Batch_Size);
PARAMETER(DTL.Package_Level_size);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Std_Costing_Unit_Weight);
PARAMETER(DTL.FP_Std_Green_Weight);
PARAMETER(DTL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(DTL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(DTL.PM_Formula_LBS_Per_Hour);
PARAMETER(DTL.PM_Finished_LBS_Per_Hour);
PARAMETER(DTL.SH_Unused_was_broker);
PARAMETER(DTL.PM_Raw_Material_Type_Code);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(DTL.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.Unit_Weight_Change_Sts);
PARAMETER(3RD.Piece_Count_Item);
PARAMETER(3RD.Pieces_Per_Bag);
PARAMETER(3RD.Bags_Per_Unit);
PARAMETER(2ND.Export_Domestic);
PARAMETER(2ND.Print_On_Schedule);
PARAMETER(3RD.Fresh_Inv_Allocation_Seq);
PARAMETER(3RD.Fresh_Sched_As_Ordered);
PARAMETER(3RD.Frozen_Inv_Allocation_Seq);
PARAMETER(2ND.Primal_Group_Code);
PARAMETER(DTL.Item_Target_Price);
PARAMETER(DTL.Seaboard_Equivalent_Item);
PARAMETER(3RD.Production_Qty_Per_Shift);
PARAMETER(2ND.Scheduling_Position_Grade);
PARAMETER(DTL.Sold_100_Percent_Frozen);
PARAMETER(3RD.Maximum_Shifts);
PARAMETER(DTL.Value_Added_Sts);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);

//?USER: Process command keys

// WRK.Alpha Zeros = CON.00
WRK.Alpha_Zeros_2 = 00;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Change AS Product code if change status is yes = Accu-Sort
CASE;

// IF PAR.Change Plant Floor USR is Change Product Only
IF PAR.Change_Plant_Floor_USR = 'P';

//?If Item status is not Active then send Accusort Delete Code
CASE;

// IF DTL.Record Status is Active
IF DTL.Record_Status = 'A';

// PAR.AS Add/Change/Delete = CND.Add
PAR.AS_Add_Change_Delete = 'A';

//?If Item status is not Active then send Accusort Delete Code
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.AS Add/Change/Delete = CND.Delete
PAR.AS_Add_Change_Delete = 'D';

ENDIF;

// Call program PFS One Prod/Box Rec  XF.
CALL PROGRAM(PFS One Prod/Box Rec  XF) ('PDK1XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(3RD.Minimum_Weight_Per_Case);
PARAMETER(3RD.Maximum_Weight_Per_Case);
PARAMETER(3RD.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(DTL.Package_Type_Code);
PARAMETER(3RD.Default_Warehouse);
PARAMETER(3RD.Fresh_Chilling_Time);
PARAMETER(3RD.Misc_Tare_Weight);
PARAMETER(PAR.AS_Add_Change_Delete);

ENDIF;

//?Change item structure in inventory if item structure class changes
CASE;

// IF PAR.Item Structure Class Code NE DTL.Item Structure Class Code
IF PAR.Item_Structure_Class_Code <> DTL.Item_Structure_Class_Code;

EXECUTE FUNCTION(Chg Item Structure     RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1349788;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);

EXECUTE FUNCTION(Chg Item Structure     RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1349789;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);

EXECUTE FUNCTION(Chg Item Structure     RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1349796;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);

ENDIF;

CASE;

// IF PAR.USR Formula Meth Type Sts is yes
IF PAR.USR_Formula_Meth_Type_Sts = 'Y';

// OR PAR.USR Market Meth Type Sts is yes
OR PAR.USR_Market_Meth_Type_Sts = 'Y';

// OR PAR.USR Manual Meth Type Sts is yes
OR PAR.USR_Manual_Meth_Type_Sts = 'Y';

// OR PAR.USR Extend Meth Type Sts is yes
OR PAR.USR_Extend_Meth_Type_Sts = 'Y';

// Call program UPD Price Audit Update XF.
CALL PROGRAM(UPD Price Audit Update XF) ('PDMOXFR');
PARAMETER('CABZREP');
PARAMETER(DTL.Company_Number);
PARAMETER(*ZERO);
PARAMETER(DTL.Item_Code);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Formula_Meth_Type_Sts);
PARAMETER(PAR.USR_Market_Meth_Type_Sts);
PARAMETER(PAR.USR_Manual_Meth_Type_Sts);
PARAMETER(PAR.USR_Extend_Meth_Type_Sts);

ENDIF;

//?PK0519 New Updates to Item Default
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(Crt Item Default       CR) TYPE(CRTOBJ) FILE(OMBYREP)          AC1184294;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_Item_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(DTL.Transportation_Temp);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(DTL.Package_Type_Code);
PARAMETER(DTL.Fresh_Chilling_Time);
PARAMETER(DTL.Base_Conv_Loss_Item);
PARAMETER(DTL.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(DTL.Std_Weight_Head_Var_Ren);
PARAMETER(DTL.Pieces_Per_Head);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(DTL.Pallet_Tare_Weight);
PARAMETER(DTL.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(DTL.Packaging_Code);
PARAMETER(DTL.Item_Market_Code);
PARAMETER(DTL.TF_Co_Ownership_Sts);
PARAMETER(DTL.Agrimetrics_group);
PARAMETER(DTL.Agrimetrics_pack);
PARAMETER(DTL.Agrimetrics_grade);
PARAMETER(DTL.PA_Base_Avail_Rpt_Include);
PARAMETER(DTL.PM_Pounds_per_Hour);
PARAMETER(DTL.Item_Frt_Overage_Prc_UOM);
PARAMETER(DTL.Packages_per_case);
PARAMETER(DTL.Use_Freeze_Sell_By_Days);
PARAMETER(DTL.PM_Batch_Size);
PARAMETER(DTL.Package_Level_size);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Std_Costing_Unit_Weight);
PARAMETER(DTL.FP_Std_Green_Weight);
PARAMETER(DTL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(DTL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(DTL.PM_Formula_LBS_Per_Hour);
PARAMETER(DTL.PM_Finished_LBS_Per_Hour);
PARAMETER(DTL.SH_Unused_was_broker);
PARAMETER(DTL.PM_Raw_Material_Type_Code);
PARAMETER(DTL.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.Unit_Weight_Change_Sts);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);

// Call program Zzz Item Bal-Copacker  XF.
CALL PROGRAM(Zzz Item Bal-Copacker  XF) ('PPBQXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);

//?PK0519 New Updates to Item Default
// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

EXECUTE FUNCTION(Rtv/Chg Itm Def-Copack RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1679998;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(DTL.Fresh_Chilling_Time);
PARAMETER(DTL.Base_Conv_Loss_Item);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(DTL.Misc_Tare_Weight);

ENDIF;

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

