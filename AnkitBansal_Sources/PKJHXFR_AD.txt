// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKJHXFR
// ?Date: 14.08.2025 Time: 02:51:27
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Rtv Freight/BOL*COPY RT) TYPE(RTVOBJ) FILE(PKAXCPP)            AB1183832;
PARAMETER(PAR.@Company_Number);
PARAMETER(PAR.TRK_Trucker_Code);
PARAMETER(PAR.VCH_Header_Number);
PARAMETER(PAR.VCH_Batch_Number);
PARAMETER(PAR.@Status_Yes_No);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(Crt Frt Vchrs Init    IF) TYPE(EXCINTFUN)                      AB1147310;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.VCH_Batch_Number);
 PARAMETER(WRK.Trucker_Code_USR);
 {
  //?Execute internal function

  // PAR.Trucker Code          USR = CON.*BLANK
  PAR.Trucker_Code_USR = *BLANK;

  EXECUTE FUNCTION(Rtv Nxt Vch Batch #   RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1143058;
  PARAMETER(PAR.VCH_Company_number);
  PARAMETER(PAR.VCH_Batch_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.VCH Batch Number = CON.1
   PAR.VCH_Batch_Number = 1;

   //?USER: Process Data record

   // PAR.VCH Batch Number = DB1.VCH Batch Number + CON.1
   PAR.VCH_Batch_Number = DB1.VCH_Batch_Number + 1;

   QUIT;

  }

 }

 //?USER: Process Data record

 CASE;

 // IF DB1.BOL Trucker Payment Sts is Mark Trucker
 IF DB1.BOL_Trucker_Payment_Sts = 'MT';

 EXECUTE FUNCTION(Crt Frt Vchrs Detail  IF) TYPE(EXCINTFUN)                      AB1183833;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.BOL_Kill_Date);
 PARAMETER(DB1.BOL_Freight_UOM);
 PARAMETER(DB1.BOL_Freight_Unit_Amt);
 PARAMETER(DB1.BOL_Freight_Amt);
 PARAMETER(DB1.BOL_Trucker_Payment_Sts);
 PARAMETER(DB1.BOL_Trailer);
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(PAR.VCH_Batch_Number);
 PARAMETER(PAR.VCH_Header_Number);
 PARAMETER(WRK.VCH_Gross_Amt);
 PARAMETER(WRK.VCH_Deduction_Amt);
 PARAMETER(WRK.VCH_Less_Split_Amount);
 PARAMETER(WRK.VCH_Net_Amt);
 PARAMETER(WRK.VCD_Gross_Amt);
 PARAMETER(WRK.VCD_Deduction_Amt);
 PARAMETER(WRK.VCD_Less_Split_Amount);
 PARAMETER(WRK.VCD_Net_Amt);
 PARAMETER(WRK.Trucker_Code_USR);
 {
  //?Execute internal function

  //?Modification
  DO;

  //?***** Change Log
  //?T8163   RMC 1/10/17 use m3 supplier if live with m3
  //?E004069 RMC 6/5/15 Recompile for new ERP Fields
  //?** 03/13/2006 LJB TFS021
  //?** Retrieve the tattoo number of the first market hog found. This
  //?** hog class type = M. If none found, zero out the tattoo number
  //?*****
  //?FP1284 non-member purchases pass new fields to voucher detail
  //?08/08/2008 slm
  ENDDO;

  // Call program Rtv Company Values    XF.
  CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER('M3HPEVCH');
  PARAMETER(LCL.Live_with_M3_USR);

  //?Accumulate frt and create detail records and header
  CASE;

  // IF PAR.BOL Freight Unit Amt is Not Zeros
  IF PAR.BOL_Freight_Unit_Amt <> *ZERO;

  //?If Break in Trucker code
  CASE;

  // IF PAR.TRK Trucker Code NE PAR.Trucker Code          USR
  IF PAR.TRK_Trucker_Code <> PAR.Trucker_Code_USR;

  // PAR.Trucker Code          USR = PAR.TRK Trucker Code
  PAR.Trucker_Code_USR = PAR.TRK_Trucker_Code;

  EXECUTE FUNCTION(Rtv Nxt Vch Header#   RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1115269;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.VCH Header Number = CON.00001
   PAR.VCH_Header_Number = 00001;

   //?USER: Process Data record

   // PAR.CKH Header Number = DB1.CKH Header Number + CON.1
   PAR.VCH_Header_Number = DB1.VCH_Header_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Trucker Vnd Add#  RT) TYPE(RTVOBJ) FILE(PKBAREP)           AB1142829;
  PARAMETER(PAR.TRK_Trucker_Code);
  PARAMETER(WRK.VCH_AP_Address_Number);
  PARAMETER(WRK.TRK_M3_Supplier_Id);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Live with M3   USR is Yes
  IF LCL.Live_with_M3_USR = 'Y';

  // WRK.Text 7 USR = SUBSTRING(WRK.M3 Supplier ID,CON.4,CON.7)
  WRK.Text_7_USR = SUBSTRING(WRK.M3_Supplier_ID:4:7);

  // WRK.VCH AP Address Number = CVTVAR(WRK.Text 7 USR)
  WRK.VCH_AP_Address_Number = CVTVAR(WRK.Text_7_USR);

  ENDIF;

  //?Changed back to BOL Kill date 12/22/99.  -Purva
  EXECUTE FUNCTION(Crt Voucher Header    CR) TYPE(CRTOBJ) FILE(PKBKCPP)           AB1102568;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  PARAMETER(WRK.VCH_AP_Address_Number);
  PARAMETER(*ZERO);
  PARAMETER('T');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.VCH_Gross_Amt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.VCH_Net_Amt);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER('O');
  PARAMETER(PAR.BOL_Kill_Date);
  PARAMETER('R');
  PARAMETER(*BLANK);
  PARAMETER(PAR.TRK_Trucker_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  // PAR.VCH Gross Amt = CON.*ZERO
  PAR.VCH_Gross_Amt = *ZERO;

  // PAR.VCH Net Amt = CON.*ZERO
  PAR.VCH_Net_Amt = *ZERO;

  // PAR.VCH Deduction Amt = CON.*ZERO
  PAR.VCH_Deduction_Amt = *ZERO;

  // WRK.VCD Line = CON.*ZERO
  WRK.VCD_Line = *ZERO;

  ENDIF;

  // WRK.VCD Line = WRK.VCD Line + CON.1
  WRK.VCD_Line = WRK.VCD_Line + 1;

  //?Detail totals
  // PAR.VCD Deduction Amt = CON.*ZERO
  PAR.VCD_Deduction_Amt = *ZERO;

  //?Header Totals
  // PAR.VCH Gross Amt = PAR.VCH Gross Amt + PAR.BOL Freight Amt
  PAR.VCH_Gross_Amt = PAR.VCH_Gross_Amt + PAR.BOL_Freight_Amt;

  // PAR.VCH Net Amt = PAR.VCH Net Amt + PAR.BOL Freight Amt
  PAR.VCH_Net_Amt = PAR.VCH_Net_Amt + PAR.BOL_Freight_Amt;

  // PAR.VCH Deduction Amt = CON.*ZERO
  PAR.VCH_Deduction_Amt = *ZERO;

  // PAR.VCH Less Split Amount = CON.*ZERO
  PAR.VCH_Less_Split_Amount = *ZERO;

  EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(WRK.PD_Name);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // WRK.VCD Check Description = WRK.PD Name
  WRK.VCD_Check_Description = WRK.PD_Name;

  EXECUTE FUNCTION(Rtv BOH Py Typ,BO Typ RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1145157;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(WRK.VCD_Payment_Type);
  PARAMETER(WRK.VCD_BO_Type);
  {
   //?USER: Processing if Data record not found

   // PAR.BOH Payment Type = CND.Live
   PAR.BOH_Payment_Type = 'L';

   // PAR.BOH Buy Order Type = CND.Open Market
   PAR.BOH_Buy_Order_Type = 'O';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?** 03/13/2006 LJB TFS021
  //?** Retrieve the tattoo number of the first market hog found. This
  //?** hog class type = M. If none found, zero out the tattoo number
  EXECUTE FUNCTION(Rtv 1st Class=M Ttt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1271121;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(WRK.TH_Tattoo_Number);
  PARAMETER(WRK.Record_Found_TH_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.Record Found TH USR = CND.Record Not Found
   PAR.Record_Found_TH_USR = 'N';

   //?USER: Process Data record

   // PAR.TH Tattoo Number = DB1.TH Tattoo Number
   PAR.TH_Tattoo_Number = DB1.TH_Tattoo_Number;

   // PAR.Record Found TH USR = CND.Record Found
   PAR.Record_Found_TH_USR = 'Y';

   QUIT;

  }

  //?** if no record was returned, put zeros into the tattoo number
  CASE;

  // IF WRK.Record Found TH USR is Record Not Found
  IF WRK.Record_Found_TH_USR = 'N';

  // WRK.TH Tattoo Number = CND.Zero
  WRK.TH_Tattoo_Number = *ZERO;

  ENDIF;

  //?SDN440 format bo-ld-tattoo into mgl supplier invoice
  // LCL.Buy Order Number Alpha = PAR.BOH Buy Order Number
  LCL.Buy_Order_Number_Alpha = PAR.BOH_Buy_Order_Number;

  // LCL.Buy Order Load 4 USR = PAR.BOL Load Number
  LCL.Buy_Order_Load_4_USR = PAR.BOL_Load_Number;

  // LCL.Buy Order Load Alpha 4 = LCL.Buy Order Load 4 USR
  LCL.Buy_Order_Load_Alpha_4 = LCL.Buy_Order_Load_4_USR;

  // LCL.Tattoo Nbr 4          USR = WRK.TH Tattoo Number
  LCL.Tattoo_Nbr_4_USR = WRK.TH_Tattoo_Number;

  // LCL.Tattoo Nbr Alpha 4    USR = LCL.Tattoo Nbr 4          USR
  LCL.Tattoo_Nbr_Alpha_4_USR = LCL.Tattoo_Nbr_4_USR;

  // LCL.Buy Order Load Alpha = CONCAT(LCL.Buy Order Load Alpha 4,CON.-,CON.*ZERO)
  LCL.Buy_Order_Load_Alpha = LCL.Buy_Order_Load_Alpha_4 + '-' (*ZERO);

  // LCL.Text 8 USR = CONCAT(LCL.Buy Order Number Alpha,CON.-,CON.*ZERO)
  LCL.Text_8_USR = LCL.Buy_Order_Number_Alpha + '-' (*ZERO);

  // LCL.Text 13 USR = CONCAT(LCL.Text 8 USR,LCL.Buy Order Load Alpha,CON.*ZERO)
  LCL.Text_13_USR = LCL.Text_8_USR + LCL.Buy_Order_Load_Alpha (*ZERO);

  // LCL.Text 17 USR = CONCAT(LCL.Text 13 USR,LCL.Tattoo Nbr Alpha 4    USR,CON.*ZERO)
  LCL.Text_17_USR = LCL.Text_13_USR + LCL.Tattoo_Nbr_Alpha_4_USR (*ZERO);

  // LCL.MGL Supplier Invoice Nbr = LCL.Text 17 USR
  LCL.MGL_Supplier_Invoice_Nbr = LCL.Text_17_USR;

  EXECUTE FUNCTION(Crt Voucher Detail    CR) TYPE(CRTOBJ) FILE(PKBLCPP)           AB1102231;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  PARAMETER(WRK.VCD_Line);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.BOL_Freight_Amt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.BOL_Freight_Amt);
  PARAMETER(*ZERO);
  PARAMETER(WRK.VCD_Payment_Type);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(WRK.VCD_BO_Type);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(*BLANK);
  PARAMETER(WRK.VCD_Check_Description);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(WRK.TH_Tattoo_Number);
  PARAMETER(PAR.BOL_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing after Data update

   CASE;

   // IF DB1.VCD Split Percent is 100 %
   IF DB1.VCD_Split_Percent = 100;

   // Call program Crt Tattoo Action Comm XF.
   CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('CV');
   PARAMETER(*BLANK);

   ENDIF;

  }

  ENDIF;

 }

 ENDIF;

 //?USER: Exit processing

 EXECUTE FUNCTION(Crt Frt Vchrs Totals  IF) TYPE(EXCINTFUN)                      AB1147309;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.VCH_Batch_Number);
 PARAMETER(PAR.VCH_Header_Number);
 PARAMETER(WRK.VCH_Gross_Amt);
 PARAMETER(WRK.VCH_Deduction_Amt);
 PARAMETER(WRK.VCH_Less_Split_Amount);
 PARAMETER(WRK.VCH_Net_Amt);
 PARAMETER('O');
 PARAMETER(WRK.Trucker_Code_USR);
 PARAMETER(WRK.VCD_Gross_Amt);
 PARAMETER(WRK.VCD_Deduction_Amt);
 PARAMETER(WRK.VCD_Less_Split_Amount);
 PARAMETER(WRK.VCD_Net_Amt);
 PARAMETER(PAR.@Status_Yes_No);
 {
  //?Execute internal function

  CASE;

  // IF PAR.TRK Trucker Code NE WRK.Blank USR
  IF PAR.TRK_Trucker_Code <> WRK.Blank_USR;

  EXECUTE FUNCTION(Rtv/Chg Voucher Hdr   RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1142817;
  PARAMETER(PAR.VCH_Company_number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  PARAMETER(WRK.VCH_Base_Mkt_Price_Amt);
  PARAMETER(WRK.VCH_Sort_Disc_Amt);
  PARAMETER(WRK.VCH_Yield_Gain_Loss_Amt);
  PARAMETER(WRK.VCH_Base_Carcass_Value);
  PARAMETER(WRK.VCH_LN_Add_on_Deduct_Amt);
  PARAMETER(PAR.VCH_Gross_Amt);
  PARAMETER(PAR.VCH_Deduction_Amt);
  PARAMETER(PAR.VCH_Less_Split_Amount);
  PARAMETER(PAR.VCH_Net_Amt);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Voucher Header    CH) TYPE(CHGOBJ) FILE(PKBKCPP)           AB1102569;
   PARAMETER(DB1.VCH_Company_number);
   PARAMETER(DB1.VCH_Batch_Number);
   PARAMETER(DB1.VCH_Header_Number);
   PARAMETER(DB1.VCH_AP_Address_Number);
   PARAMETER(DB1.VCH_AP_Voucher_Number);
   PARAMETER(DB1.VCH_Payee_Type);
   PARAMETER(DB1.VCH_Manual_Check_Number);
   PARAMETER(DB1.VCH_Manual_Check_Date);
   PARAMETER(PAR.VCH_Base_Mkt_Price_Amt);
   PARAMETER(PAR.VCH_Sort_Disc_Amt);
   PARAMETER(PAR.VCH_Yield_Gain_Loss_Amt);
   PARAMETER(PAR.VCH_Base_Carcass_Value);
   PARAMETER(PAR.VCH_LN_Add_on_Deduct_Amt);
   PARAMETER(PAR.VCH_Gross_Amt);
   PARAMETER(PAR.VCH_Deduction_Amt);
   PARAMETER(PAR.VCH_Less_Split_Amount);
   PARAMETER(PAR.VCH_Net_Amt);
   PARAMETER(DB1.VCH_Split);
   PARAMETER(DB1.VCH_Split_Check_Sts);
   PARAMETER(PAR.VCH_Process_Status);
   PARAMETER(DB1.VCH_G_L_Date);
   PARAMETER(DB1.VCH_Check_Type);
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(DB1.TRK_Trucker_Code);
   PARAMETER(DB1.VR_Reason_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  // PAR.@Status (Yes/No) = CND.Yes
  PAR.@Status_Yes_No = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Status (Yes/No) = CND.No
  PAR.@Status_Yes_No = 'N';

  ENDIF;

  // PAR.VCD Gross Amt = CON.*ZERO
  PAR.VCD_Gross_Amt = *ZERO;

  // PAR.VCD Net Amt = CON.*ZERO
  PAR.VCD_Net_Amt = *ZERO;

  // PAR.VCD Deduction Amt = CON.*ZERO
  PAR.VCD_Deduction_Amt = *ZERO;

  // PAR.VCH Gross Amt = CON.*ZERO
  PAR.VCH_Gross_Amt = *ZERO;

  // PAR.VCH Net Amt = CON.*ZERO
  PAR.VCH_Net_Amt = *ZERO;

  // PAR.VCH Deduction Amt = CON.*ZERO
  PAR.VCH_Deduction_Amt = *ZERO;

  // PAR.VCH Less Split Amount = CON.*ZERO
  PAR.VCH_Less_Split_Amount = *ZERO;

 }

}


