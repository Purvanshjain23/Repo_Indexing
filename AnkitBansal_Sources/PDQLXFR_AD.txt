// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDQLXFR
// ?Date: 14.08.2025 Time: 03:29:27
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?RMC 5/23/06 Init error flag to no, write error log for lbl/prod dt decerr
EXECUTE FUNCTION(VAL Set Int. Acc EXTNL IF) TYPE(EXCINTFUN)                     AC1277374;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
PARAMETER(WRK.Name);
PARAMETER(WRK.System_Value_Alpha);
PARAMETER(WRK.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Appl EXTERNAL IF) TYPE(EXCINTFUN)                     AC1277611;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(WRK.Access_Denied_Y_N);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  //?User Profile Record Not found
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Use User Profile Control company if entered,get whse if the appl got one
  CASE;

  // IF LCL.Company Number is greater than zero
  IF LCL.Company_Number > *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   CASE;

   // IF DB1.Production Warehouse Code is Warehouse Code not Blank
   IF DB1.Production_Warehouse_Code <> *BLANK;

   // PAR.Warehouse Code = DB1.Production Warehouse Code
   PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

   QUIT;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 // PAR.Company Number = WRK.Company Number
 PAR.Company_Number = WRK.Company_Number;

 // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
 PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

 //?If access denied is no, rtv co. name
 CASE;

 // IF WRK.Access Denied (Y/N) is no
 IF WRK.Access_Denied_Y_N = 'N';

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 EXECUTE FUNCTION(RTV Screen Heading     RT) TYPE(EXCINTFUN)                     AC1277375;
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.System_Value_Alpha);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function DSP Center Text Str 40 US.
  EXECUTE FUNCTION(DSP Center Text Str 40 US) TYPE(EXCUSRSRC) ('PDA0UFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C                     MOVE 'N'       FLAG    1        FLAG
   C           UX        DOWGT0
   C           FLAG      ANDEQ'N'
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     MOVE 'Y'       FLAG
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   *** ADDED FOR HPE, THERE HEADER FOOTER IS OFF   MEA 042494
   C                     SUB  1         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // PAR.System Value Alpha = WRK.USR Description 40   2
  PAR.System_Value_Alpha = WRK.USR_Description_40_2;

 }

}


EXECUTE FUNCTION(Prc Production Trans   RT) TYPE(RTVOBJ) FILE(PDJVCPP)          AC1322494;
PARAMETER(LCL.Company_Number);
{
 //?USER: Initialize routine

 // PAR.Transaction Quantity = CON.*ZERO
 PAR.Transaction_Quantity = *ZERO;

 // PAR.USR Weight, 9.0 = CON.*ZERO
 PAR.USR_Weight_9_0 = *ZERO;

 // PAR.Count USR = CON.*ZERO
 PAR.Count_USR = *ZERO;

 // PAR.Quantity 11.0 = CON.*ZERO
 PAR.Quantity_11_0 = *ZERO;

 // PAR.Weight 11.2 USR = CON.*ZERO
 PAR.Weight_11_2_USR = *ZERO;

 // LCL.Error Flag            USR = CND.No
 LCL.Error_Flag_USR = 'N';

 //?*********************************************************
 // PAR.AS Transaction Date = JOB.*Job date
 PAR.AS_Transaction_Date = JOB.*Job_date;

 // PAR.AS Transaction Time = JOB.*Job time
 PAR.AS_Transaction_Time = JOB.*Job_time;

 // PAR.AS Notified List = CON.ASPRDUPL
 PAR.AS_Notified_List = 'ASPRDUPL';

 // PAR.AS Data Collection Code = CND.Production
 PAR.AS_Data_Collection_Code = 'PROD';

 // LCL.Upload Error USR = CND.no
 LCL.Upload_Error_USR = 'N';

 //?*********************************************************
 // PAR.First Time Flag = WRK.BLANK
 PAR.First_Time_Flag = WRK.BLANK;

 //?*********************************************************
 //?USER: Process Data record

 // LCL.Error Flag            USR = CND.No
 LCL.Error_Flag_USR = 'N';

 //?Check for Dec Data Errors
 // WRK.Text USR 5 = DB1.AS Product Code
 WRK.Text_USR_5 = DB1.AS_Product_Code;

 // Execute function RPG TESTN for 5 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 5 pos.  US) TYPE(EXCUSRSRC) ('POKGUFR');
 PARAMETER(WRK.Text_USR_5);
 {
  C                     TESTN          WUY7TX  5  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 //?VAL:  5 Position Numeric
 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // WRK.Item Code = CON.*ZERO
 WRK.Item_Code = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 //?VAL:  5 Position Numeric
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Item Code = CVTVAR(DB1.AS Product Code)
 WRK.Item_Code = CVTVAR(DB1.AS_Product_Code);

 ENDIF;

 //?Validate and Process Record
 CASE;

 // IF LCL.Error Flag            USR is Yes
 IF LCL.Error_Flag_USR = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Data_Collection_Code);
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER('Data Decimal Error');
 PARAMETER('ITMNOTNUM');
 PARAMETER(PAR.AS_Notified_List);

 // PAR.AS Error Code = CND.Error
 PAR.AS_Error_Code = 'E';

 // LCL.Upload Error USR = CND.yes
 LCL.Upload_Error_USR = 'Y';

 //?Validate and Process Record
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 // Retrieve message - '&1&2&3&4&5&6&7&8&9&10&11&12'
 PAR.AS_Error_Record = RTVMSG(USR3077);
 PARAMETER(DB1.AS_Product_Code);
 PARAMETER(DB1.AS_Label_Date);
 PARAMETER(DB1.AS_Inventory_Process_Code);
 PARAMETER(DB1.AS_Box_Quantity);
 PARAMETER(DB1.AS_Total_Net_Weight);
 PARAMETER(DB1.AS_OMS_Process_Code);
 PARAMETER(DB1.AS_Error_Code);
 PARAMETER(DB1.AS_Process_Code_4);
 PARAMETER(DB1.AS_Process_Code_5);
 PARAMETER(DB1.AS_Shift_Number);
 PARAMETER(DB1.AS_Production_Date);
 PARAMETER(DB1.AS_Carriage_Return);

 EXECUTE FUNCTION(Val Itm/Whs,PDC FG/WP RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1664171;
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Item_Code);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Sold_100_Percent_Frozen);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If item is not valid, check if Partial or WIP Reject
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 //?** Check Partial **
 EXECUTE FUNCTION(VAL Partial Code      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1663993;
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Item_Code);
 PARAMETER(LCL.Item_Code_USR);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?VAL:  Partial/WIP Reject Item
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // LCL.Yld Inv Balance Type = CND.Partial
 LCL.Yld_Inv_Balance_Type = 'PT';

 // LCL.Partial Item Sts USR = CND.yes
 LCL.Partial_Item_Sts_USR = 'Y';

 EXECUTE FUNCTION(Val Itm/Whs,PDC FG/WP RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1664171;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Item_Code_USR);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Sold_100_Percent_Frozen);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?VAL:  Partial/WIP Reject Item
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Check WIP Reject **
 EXECUTE FUNCTION(VAL WIP Reject Code   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1674437;
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Item_Code);
 PARAMETER(LCL.Item_Code_USR);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // LCL.Yld Inv Balance Type = CND.WIP Reject
 LCL.Yld_Inv_Balance_Type = 'RJ';

 // LCL.Partial Item Sts USR = CND.yes
 LCL.Partial_Item_Sts_USR = 'Y';

 EXECUTE FUNCTION(Val Itm/Whs,PDC FG/WP RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1664171;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Item_Code_USR);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Sold_100_Percent_Frozen);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Data_Collection_Code);
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(PAR.AS_Error_Record);
 PARAMETER('ITEMCODE');
 PARAMETER(PAR.AS_Notified_List);

 ENDIF;

 ENDIF;

 //?If item is not valid, check if Partial or WIP Reject
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Partial Item Sts USR = CND.no
 LCL.Partial_Item_Sts_USR = 'N';

 // LCL.Item Code USR = CON.*ZERO
 LCL.Item_Code_USR = *ZERO;

 ENDIF;

 //?Validate label date if production date control is yes
 CASE;

 // IF PAR.Production Date Control is yes
 IF PAR.Production_Date_Control = 'Y';

 // WRK.Text USR 6 = DB1.AS Label Date
 WRK.Text_USR_6 = DB1.AS_Label_Date;

 // Execute function RPG TESTN for 6 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 6 pos.  US) TYPE(EXCUSRSRC) ('POKHUFR');
 PARAMETER(DB1.AS_Label_Date);
 {
  C                     TESTN          WUXLTX  6  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // WRK.Label Date USR = CON.*ZERO
 WRK.Label_Date_USR = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Data_Collection_Code);
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(PAR.AS_Error_Record);
 PARAMETER('LBLDEC');
 PARAMETER(PAR.AS_Notified_List);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Label Date USR = CVTVAR(DB1.AS Label Date)
 WRK.Label_Date_USR = CVTVAR(DB1.AS_Label_Date);

 ENDIF;

 // WRK.Label Date = WRK.Label Date USR
 WRK.Label_Date = WRK.Label_Date_USR;

 //?Set Century.
 CASE;

 // IF WRK.Label Date is < 410101
 IF WRK.Label_Date < 410101;

 // WRK.Label Date = WRK.Label Date + CON.1000000
 WRK.Label_Date = WRK.Label_Date + 1000000;

 ENDIF;

 EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Label_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 //?If date is not valid then error = yes
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Data_Collection_Code);
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(PAR.AS_Error_Record);
 PARAMETER('LABELDATE');
 PARAMETER(PAR.AS_Notified_List);

 ENDIF;

 ENDIF;

 //?Validate production date if production date control is yes
 CASE;

 // IF PAR.Production Date Control is yes
 IF PAR.Production_Date_Control = 'Y';

 // WRK.Text USR 6 = DB1.AS Production Date
 WRK.Text_USR_6 = DB1.AS_Production_Date;

 // Execute function RPG TESTN for 6 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 6 pos.  US) TYPE(EXCUSRSRC) ('POKHUFR');
 PARAMETER(DB1.AS_Production_Date);
 {
  C                     TESTN          WUXLTX  6  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // WRK.Prod Date USR = CON.*ZERO
 WRK.Prod_Date_USR = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Data_Collection_Code);
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(PAR.AS_Error_Record);
 PARAMETER('PRDDEC');
 PARAMETER(PAR.AS_Notified_List);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Prod Date USR = CVTVAR(DB1.AS Production Date)
 WRK.Prod_Date_USR = CVTVAR(DB1.AS_Production_Date);

 ENDIF;

 // WRK.Production Date = WRK.Prod Date USR
 WRK.Production_Date = WRK.Prod_Date_USR;

 //?Set Century.
 CASE;

 // IF WRK.Production Date is < 410101
 IF WRK.Production_Date < 410101;

 // WRK.Production Date = WRK.Production Date + CON.1000000
 WRK.Production_Date = WRK.Production_Date + 1000000;

 ENDIF;

 EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Production_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 //?If date is not valid then error = yes
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Data_Collection_Code);
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(PAR.AS_Error_Record);
 PARAMETER('PRODDATE');
 PARAMETER(PAR.AS_Notified_List);

 ENDIF;

 ENDIF;

 //?Validate that shift has been sent
 CASE;

 // IF DB1.AS Shift Number is Not Entered
 IF DB1.AS_Shift_Number = *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Data_Collection_Code);
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(PAR.AS_Error_Record);
 PARAMETER('SHIFT');
 PARAMETER(PAR.AS_Notified_List);

 ENDIF;

 //?Validate Finished Goods & WIP Item Code Data
 CASE;

 // IF LCL.Partial Item Sts USR is no
 IF LCL.Partial_Item_Sts_USR = 'N';

 EXECUTE FUNCTION(Val Accu-Sort Whse     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1405160;
 PARAMETER(PAR.Default_Warehouse);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Trans Contol AS400/Plant is Plant
  IF DB1.Trans_Contol_AS400_Plant = 'P';

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  ENDIF;

 }

 //?If warehouse is not valid set error flag to yes
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Data_Collection_Code);
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(PAR.AS_Error_Record);
 PARAMETER('WHSCODE');
 PARAMETER(PAR.AS_Notified_List);

 ENDIF;

 //?Validate Unit Cost
 CASE;

 // IF PAR.Error Status is no
 IF PAR.Error_Status = 'N';

 EXECUTE FUNCTION(RTV Unit Cost Active   RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1413977;
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Item_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(WRK.Unit_Cost_Per_Pound);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF WRK.Unit Cost Per Pound EQ WRK.ZERO
 IF WRK.Unit_Cost_Per_Pound = WRK.ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Data_Collection_Code);
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(PAR.AS_Error_Record);
 PARAMETER('UNITCOST');
 PARAMETER(PAR.AS_Notified_List);

 ENDIF;

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF PAR.Error Status is no
 IF PAR.Error_Status = 'N';

 //?Set up first time pass
 CASE;

 // IF PAR.First Time Flag EQ WRK.BLANK
 IF PAR.First_Time_Flag = WRK.BLANK;

 // PAR.Item Code = WRK.Item Code
 PAR.Item_Code = WRK.Item_Code;

 // PAR.AS Product Code = DB1.AS Product Code
 PAR.AS_Product_Code = DB1.AS_Product_Code;

 // PAR.AS Label Date = DB1.AS Label Date
 PAR.AS_Label_Date = DB1.AS_Label_Date;

 // PAR.AS Production Date = DB1.AS Production Date
 PAR.AS_Production_Date = DB1.AS_Production_Date;

 // PAR.Shift Number = DB1.AS Shift Number
 PAR.Shift_Number = DB1.AS_Shift_Number;

 // PAR.First Time Flag = CND.Yes
 PAR.First_Time_Flag = 'Y';

 // PAR.Description = CON.Plant Floor Production
 PAR.Description = 'Plant Floor Production';

 //?Partial Processing
 // PAR.Partial Item Sts USR = LCL.Partial Item Sts USR
 PAR.Partial_Item_Sts_USR = LCL.Partial_Item_Sts_USR;

 // PAR.Item Code USR = LCL.Item Code USR
 PAR.Item_Code_USR = LCL.Item_Code_USR;

 // PAR.Yld Inv Balance Type = LCL.Yld Inv Balance Type
 PAR.Yld_Inv_Balance_Type = LCL.Yld_Inv_Balance_Type;

 ENDIF;

 //?Check for product or prod date or shift change
 CASE;

 // IF PAR.AS Product Code NE DB1.AS Product Code
 IF PAR.AS_Product_Code <> DB1.AS_Product_Code;

 // OR PAR.AS Label Date NE DB1.AS Label Date
 OR PAR.AS_Label_Date <> DB1.AS_Label_Date;

 // OR PAR.Shift Number NE DB1.AS Shift Number
 OR PAR.Shift_Number <> DB1.AS_Shift_Number;

 // PAR.Transaction Weight = PAR.USR Weight, 9.0 / CON.10 *Rounded
 PAR.Transaction_Weight = PAR.USR_Weight_9_0 / 10 'H';

 CASE;

 // IF PAR.Partial Item Sts USR is no
 IF PAR.Partial_Item_Sts_USR = 'N';

 EXECUTE FUNCTION(Val Itm/Whs,PDC FG/WP RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1664171;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Sold_100_Percent_Frozen);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Set up Label/Production dates by Production Date Control
 CASE;

 // IF PAR.Production Date Control is no
 IF PAR.Production_Date_Control = 'N';

 // PAR.Production Date = CON.*ZERO
 PAR.Production_Date = *ZERO;

 // PAR.Label Date = CON.*ZERO
 PAR.Label_Date = *ZERO;

 //?Set up Label/Production dates by Production Date Control
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Label Date USR = CVTVAR(PAR.AS Label Date)
 LCL.Label_Date_USR = CVTVAR(PAR.AS_Label_Date);

 // PAR.Label Date = LCL.Label Date USR
 PAR.Label_Date = LCL.Label_Date_USR;

 //?Set Century.
 CASE;

 // IF PAR.Label Date is < 410101
 IF PAR.Label_Date < 410101;

 // PAR.Label Date = PAR.Label Date + CON.1000000
 PAR.Label_Date = PAR.Label_Date + 1000000;

 ENDIF;

 // LCL.Prod Date USR = CVTVAR(PAR.AS Production Date)
 LCL.Prod_Date_USR = CVTVAR(PAR.AS_Production_Date);

 // PAR.Production Date = LCL.Prod Date USR
 PAR.Production_Date = LCL.Prod_Date_USR;

 //?Set Century.
 CASE;

 // IF PAR.Production Date is < 410101
 IF PAR.Production_Date < 410101;

 // PAR.Production Date = PAR.Production Date + CON.1000000
 PAR.Production_Date = PAR.Production_Date + 1000000;

 ENDIF;

 ENDIF;

 // PAR.Description = CON.Plant Floor Production
 PAR.Description = 'Plant Floor Production';

 CASE;

 // IF PAR.Sold 100% Frozen is yes
 IF PAR.Sold_100_Percent_Frozen = 'Y';

 // PAR.Default Warehouse = CND.Cloverleaf Freezer
 PAR.Default_Warehouse = 'CF1';

 ENDIF;

 // Call program Prc Create Dtl Receipt XF.
 CALL PROGRAM(Prc Create Dtl Receipt XF) ('CAALXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER('R');
 PARAMETER('RR');
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER('PRD');
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);

 // IF PAR.Partial Item Sts USR is yes
 IF PAR.Partial_Item_Sts_USR = 'Y';

 EXECUTE FUNCTION(Val Itm/Whs,PDC FG/WP RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1664171;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code_USR);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Sold_100_Percent_Frozen);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Set up Label/Production dates by Production Date Control
 CASE;

 // IF PAR.Production Date Control is no
 IF PAR.Production_Date_Control = 'N';

 // PAR.Production Date = CON.*ZERO
 PAR.Production_Date = *ZERO;

 // PAR.Label Date = CON.*ZERO
 PAR.Label_Date = *ZERO;

 //?Set up Label/Production dates by Production Date Control
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Label Date USR = CVTVAR(PAR.AS Label Date)
 LCL.Label_Date_USR = CVTVAR(PAR.AS_Label_Date);

 // PAR.Label Date = LCL.Label Date USR
 PAR.Label_Date = LCL.Label_Date_USR;

 //?Set Century.
 CASE;

 // IF PAR.Label Date is < 410101
 IF PAR.Label_Date < 410101;

 // PAR.Label Date = PAR.Label Date + CON.1000000
 PAR.Label_Date = PAR.Label_Date + 1000000;

 ENDIF;

 // LCL.Prod Date USR = CVTVAR(PAR.AS Production Date)
 LCL.Prod_Date_USR = CVTVAR(PAR.AS_Production_Date);

 // PAR.Production Date = LCL.Prod Date USR
 PAR.Production_Date = LCL.Prod_Date_USR;

 //?Set Century.
 CASE;

 // IF PAR.Production Date is < 410101
 IF PAR.Production_Date < 410101;

 // PAR.Production Date = PAR.Production Date + CON.1000000
 PAR.Production_Date = PAR.Production_Date + 1000000;

 ENDIF;

 ENDIF;

 //?**** Create Partial File ****
 // Call program Prc Crt Partial Rcpt  XF.
 CALL PROGRAM(Prc Crt Partial Rcpt  XF) ('POVAXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Code_USR);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Yld_Inv_Balance_Type);

 ENDIF;

 // PAR.Item Code = WRK.Item Code
 PAR.Item_Code = WRK.Item_Code;

 // PAR.AS Product Code = DB1.AS Product Code
 PAR.AS_Product_Code = DB1.AS_Product_Code;

 // PAR.AS Label Date = DB1.AS Label Date
 PAR.AS_Label_Date = DB1.AS_Label_Date;

 // PAR.AS Production Date = DB1.AS Production Date
 PAR.AS_Production_Date = DB1.AS_Production_Date;

 // PAR.Transaction Quantity = CON.*ZERO
 PAR.Transaction_Quantity = *ZERO;

 // PAR.Shift Number = DB1.AS Shift Number
 PAR.Shift_Number = DB1.AS_Shift_Number;

 // PAR.USR Weight, 9.0 = CON.*ZERO
 PAR.USR_Weight_9_0 = *ZERO;

 //?Partial Processing
 // PAR.Partial Item Sts USR = LCL.Partial Item Sts USR
 PAR.Partial_Item_Sts_USR = LCL.Partial_Item_Sts_USR;

 // PAR.Item Code USR = LCL.Item Code USR
 PAR.Item_Code_USR = LCL.Item_Code_USR;

 // PAR.Yld Inv Balance Type = LCL.Yld Inv Balance Type
 PAR.Yld_Inv_Balance_Type = LCL.Yld_Inv_Balance_Type;

 ENDIF;

 //?Add up box quantity and weight
 // WRK.Calc 5 = CVTVAR(DB1.AS Box Quantity)
 WRK.Calc_5 = CVTVAR(DB1.AS_Box_Quantity);

 // PAR.Transaction Quantity = PAR.Transaction Quantity + WRK.Calc 5
 PAR.Transaction_Quantity = PAR.Transaction_Quantity + WRK.Calc_5;

 // WRK.Calc 7 = CVTVAR(DB1.AS Total Net Weight)
 WRK.Calc_7 = CVTVAR(DB1.AS_Total_Net_Weight);

 // PAR.USR Weight, 9.0 = PAR.USR Weight, 9.0 + WRK.Calc 7
 PAR.USR_Weight_9_0 = PAR.USR_Weight_9_0 + WRK.Calc_7;

 // PAR.AS Error Code = CND.No
 PAR.AS_Error_Code = *BLANK;

 //?Accum Qty/Wgt Uploaded and # of records processed.
 DO;

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 // WRK.Text USR 5 = DB1.AS Box Quantity
 WRK.Text_USR_5 = DB1.AS_Box_Quantity;

 // Execute function RPG TESTN for 5 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 5 pos.  US) TYPE(EXCUSRSRC) ('POKGUFR');
 PARAMETER(DB1.AS_Box_Quantity);
 {
  C                     TESTN          WUY7TX  5  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // WRK.Calc 5 = CON.*ZERO
 WRK.Calc_5 = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Calc 5 = CVTVAR(DB1.AS Box Quantity)
 WRK.Calc_5 = CVTVAR(DB1.AS_Box_Quantity);

 ENDIF;

 // PAR.Quantity 11.0 = PAR.Quantity 11.0 + WRK.Calc 5
 PAR.Quantity_11_0 = PAR.Quantity_11_0 + WRK.Calc_5;

 // WRK.Text USR 7 = DB1.AS Total Net Weight
 WRK.Text_USR_7 = DB1.AS_Total_Net_Weight;

 // Execute function RPG TESTN for 7 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 7 pos.  US) TYPE(EXCUSRSRC) ('POKFUFR');
 PARAMETER(DB1.AS_Total_Net_Weight);
 {
  C                     TESTN          WUY8TX  7  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // WRK.Calc 7 = CON.*ZERO
 WRK.Calc_7 = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Calc 7 = CVTVAR(DB1.AS Total Net Weight)
 WRK.Calc_7 = CVTVAR(DB1.AS_Total_Net_Weight);

 ENDIF;

 // PAR.Weight 11.2 USR = PAR.Weight 11.2 USR + WRK.Calc 7
 PAR.Weight_11_2_USR = PAR.Weight_11_2_USR + WRK.Calc_7;

 ENDDO;

 //?Process Record
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.AS Error Code = CND.Error
 PAR.AS_Error_Code = 'E';

 // LCL.Upload Error USR = CND.yes
 LCL.Upload_Error_USR = 'Y';

 ENDIF;

 ENDIF;

 //?Change inventory process flag
 // PAR.AS Inventory Process USR = CND.Yes
 PAR.AS_Inventory_Process_USR = 'Y';

 EXECUTE FUNCTION(Chg Inventory Proc. Cd CH) TYPE(CHGOBJ) FILE(PDJVCPP)          AC1322505;
 PARAMETER(DB1.AS_Product_Code);
 PARAMETER(DB1.AS_Label_Date);
 PARAMETER(DB1.AS_Inventory_Process_Code);
 PARAMETER(PAR.AS_Error_Code);
 PARAMETER(DB1.AS_Shift_Number);
 PARAMETER(DB1.AS_Production_Date);
 PARAMETER(PAR.AS_Inventory_Process_USR);
 {
  //?USER: Processing before Data update

  // DB1.AS Inventory Process Code = PAR.AS Inventory Process USR
  DB1.AS_Inventory_Process_Code = PAR.AS_Inventory_Process_USR;

 }

 //?USER: Exit processing

 //?Write last  record if qty or wght is not zero
 CASE;

 // IF PAR.Transaction Quantity is not equal zero
 IF PAR.Transaction_Quantity <> *ZERO;

 // OR PAR.Transaction Weight is Not equal zero
 OR PAR.Transaction_Weight <> *ZERO;

 // PAR.Transaction Weight = PAR.USR Weight, 9.0 / CON.10 *Rounded
 PAR.Transaction_Weight = PAR.USR_Weight_9_0 / 10 'H';

 CASE;

 // IF PAR.Partial Item Sts USR is no
 IF PAR.Partial_Item_Sts_USR = 'N';

 EXECUTE FUNCTION(Val Itm/Whs,PDC FG/WP RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1664171;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Default_Warehouse);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Set up Label/Production dates by Production Date Control
 CASE;

 // IF PAR.Production Date Control is no
 IF PAR.Production_Date_Control = 'N';

 // PAR.Production Date = CON.*ZERO
 PAR.Production_Date = *ZERO;

 // PAR.Label Date = CON.*ZERO
 PAR.Label_Date = *ZERO;

 //?Set up Label/Production dates by Production Date Control
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Label Date USR = CVTVAR(PAR.AS Label Date)
 LCL.Label_Date_USR = CVTVAR(PAR.AS_Label_Date);

 // PAR.Label Date = LCL.Label Date USR
 PAR.Label_Date = LCL.Label_Date_USR;

 //?Set Century.
 CASE;

 // IF PAR.Label Date is < 410101
 IF PAR.Label_Date < 410101;

 // PAR.Label Date = PAR.Label Date + CON.1000000
 PAR.Label_Date = PAR.Label_Date + 1000000;

 ENDIF;

 // LCL.Prod Date USR = CVTVAR(PAR.AS Production Date)
 LCL.Prod_Date_USR = CVTVAR(PAR.AS_Production_Date);

 // PAR.Production Date = LCL.Prod Date USR
 PAR.Production_Date = LCL.Prod_Date_USR;

 //?Set Century.
 CASE;

 // IF PAR.Production Date is < 410101
 IF PAR.Production_Date < 410101;

 // PAR.Production Date = PAR.Production Date + CON.1000000
 PAR.Production_Date = PAR.Production_Date + 1000000;

 ENDIF;

 ENDIF;

 // PAR.Description = CON.Plant Floor Production
 PAR.Description = 'Plant Floor Production';

 // Call program Prc Create Dtl Receipt XF.
 CALL PROGRAM(Prc Create Dtl Receipt XF) ('CAALXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER('R');
 PARAMETER('RR');
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER('PRD');
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);

 // IF PAR.Partial Item Sts USR is yes
 IF PAR.Partial_Item_Sts_USR = 'Y';

 EXECUTE FUNCTION(Val Itm/Whs,PDC FG/WP RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1664171;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code_USR);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Default_Warehouse);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Set up Label/Production dates by Production Date Control
 CASE;

 // IF PAR.Production Date Control is no
 IF PAR.Production_Date_Control = 'N';

 // PAR.Production Date = CON.*ZERO
 PAR.Production_Date = *ZERO;

 // PAR.Label Date = CON.*ZERO
 PAR.Label_Date = *ZERO;

 //?Set up Label/Production dates by Production Date Control
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Label Date USR = CVTVAR(PAR.AS Label Date)
 LCL.Label_Date_USR = CVTVAR(PAR.AS_Label_Date);

 // PAR.Label Date = LCL.Label Date USR
 PAR.Label_Date = LCL.Label_Date_USR;

 //?Set Century.
 CASE;

 // IF PAR.Label Date is < 410101
 IF PAR.Label_Date < 410101;

 // PAR.Label Date = PAR.Label Date + CON.1000000
 PAR.Label_Date = PAR.Label_Date + 1000000;

 ENDIF;

 // LCL.Prod Date USR = CVTVAR(PAR.AS Production Date)
 LCL.Prod_Date_USR = CVTVAR(PAR.AS_Production_Date);

 // PAR.Production Date = LCL.Prod Date USR
 PAR.Production_Date = LCL.Prod_Date_USR;

 //?Set Century.
 CASE;

 // IF PAR.Production Date is < 410101
 IF PAR.Production_Date < 410101;

 // PAR.Production Date = PAR.Production Date + CON.1000000
 PAR.Production_Date = PAR.Production_Date + 1000000;

 ENDIF;

 ENDIF;

 //?**** Create Partial File ****
 // Call program Prc Crt Partial Rcpt  XF.
 CALL PROGRAM(Prc Crt Partial Rcpt  XF) ('POVAXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Code_USR);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Yld_Inv_Balance_Type);

 ENDIF;

 ENDIF;

 //?Send Office Message
 // Retrieve message - 'PRODUPL(PDJVCPP):  &1 Records, &2 Quantity, and &3 Weight processed at &4 on
 WRK.Office_Message_USR = RTVMSG(USR2796);
 PARAMETER(PAR.Count_USR);
 PARAMETER(PAR.Quantity_11_0);
 PARAMETER(PAR.Weight_11_2_USR);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*USER);

 // Call program SND Pager Msg (MPLUS) UP.
 CALL PROGRAM(SND Pager Msg (MPLUS) UP) ('POMSUPC');
 PARAMETER('PRKASUPLM');
 PARAMETER(WRK.Office_Message_USR);

 CASE;

 // IF LCL.Error Flag            USR is Yes
 IF LCL.Error_Flag_USR = 'Y';

 // Retrieve message - 'PRODUPL(PDJVCPP):  HAS DECIMAL DATA ERRORS at &1 on &2 by User &3.'
 WRK.Office_Message_USR = RTVMSG(USR3047);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*USER);

 // Call program SND Pager Msg (MPLUS) UP.
 CALL PROGRAM(SND Pager Msg (MPLUS) UP) ('POMSUPC');
 PARAMETER('PRKASERR');
 PARAMETER(WRK.Office_Message_USR);

 ENDIF;

 //?***********************************************************
 CASE;

 // IF LCL.Upload Error USR is yes
 IF LCL.Upload_Error_USR = 'Y';

 EXECUTE FUNCTION(Snd Pager Message     IF) TYPE(EXCINTFUN)                      AC1606816;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Notified_List);
 PARAMETER(400-300-003);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Company_Value_Code);
  PARAMETER(PAR.System_Value_Alpha);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Pager Name USR = PAR.System Value Alpha
  PAR.Pager_Name_USR = PAR.System_Value_Alpha;

  // Execute command - 'SND Pager Message'
  EXECUTE COMMAND(USR3006);
  PARAMETER(PAR.Pager_Name_USR);
  PARAMETER(PAR.Pager_Msg_USR);

 }

 ENDIF;

 //?***********************************************************
}


// Call program Exc Upd Last Dt Cllctn XF.
CALL PROGRAM(Exc Upd Last Dt Cllctn XF) ('PDTCXFR');
PARAMETER(LCL.Company_Number);
PARAMETER('PROD');

