// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNWZEFR
// ?Date: 14.08.2025 Time: 03:46:53
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?FP1110 -RMC 4/23/08   Added commmodity price group and market code
EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('IDS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile record (existing record)

// RCD.Condition Desc. 1  USR = Condition name of RCD.IGTS 3rd Party Price Type
RCD.Condition_Desc_1_USR = RTVCND(RCD.IGTS_3rd_Party_Price_Type);

//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

//?USER: Validate subfile record fields

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.IGTS Commodity Market
IF PGM.*Cursor_field = RCD.IGTS_Commodity_Market;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(RCD.IGTS_Commodity_Market);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> RCD.IGTS Commodity Group
IF PGM.*Cursor_field = RCD.IGTS_Commodity_Group;

// Call program SEL Commod Grp Active  SR.
CALL PROGRAM(SEL Commod Grp Active  SR) ('PDECSRR');
PARAMETER(RCD.IGTS_Commodity_Group);

ENDIF;

ENDIF;

//?Validate delete
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// RCD.Record Status = CND.Deleted
RCD.Record_Status = 'D';

ENDIF;

CASE;

// IF RCD.IGTS 3rd Party Price Type is Avg/Mkt w/Min Volume
IF RCD.IGTS_3rd_Party_Price_Type = 'V';

// RCD.IGTS Commodity Market = CND.Jacobsen Letter Chicago
RCD.IGTS_Commodity_Market = 'JLC';

//?REQ: Minimum Volume Percent
CASE;

// IF RCD.IGTS Min Sales Volume Pct is equal to zero
IF RCD.IGTS_Min_Sales_Volume_Pct = *ZERO;

// Send error message - 'Minimum Volume Percent Required.'
ERROR(USR4379);
MSGPARM(RCD.IGTS_Min_Sales_Volume_Pct);

ENDIF;

//?REQ: Commodity Price Group
CASE;

// IF RCD.IGTS Commodity Group is Not entered
IF RCD.IGTS_Commodity_Group = *BLANK;

// Send error message - 'Commodity price group is required.'
ERROR(USR2234);
MSGPARM(RCD.IGTS_Commodity_Group);

ENDIF;

// IF RCD.IGTS 3rd Party Price Type is Market Price
IF RCD.IGTS_3rd_Party_Price_Type = 'M';

// RCD.IGTS Min Sales Volume Pct = CON.*ZERO
RCD.IGTS_Min_Sales_Volume_Pct = *ZERO;

// RCD.IGTS Commodity Market = CND.Jacobsen Letter Chicago
RCD.IGTS_Commodity_Market = 'JLC';

//?REQ: Commodity Price Group
CASE;

// IF RCD.IGTS Commodity Group is Not entered
IF RCD.IGTS_Commodity_Group = *BLANK;

// Send error message - 'Commodity price group is required.'
ERROR(USR2234);
MSGPARM(RCD.IGTS_Commodity_Group);

ENDIF;

// IF RCD.IGTS 3rd Party Price Type is Average
IF RCD.IGTS_3rd_Party_Price_Type = 'A';

// RCD.IGTS Min Sales Volume Pct = CON.*ZERO
RCD.IGTS_Min_Sales_Volume_Pct = *ZERO;

// RCD.IGTS Commodity Market = CND.Not Entered
RCD.IGTS_Commodity_Market = *BLANK;

// RCD.IGTS Commodity Group = CND.Not entered
RCD.IGTS_Commodity_Group = *BLANK;

ENDIF;

//?VAL: Commodity Market
CASE;

// IF RCD.IGTS Commodity Market is Entered
IF RCD.IGTS_Commodity_Market <> *BLANK;

EXECUTE FUNCTION(RTV Active Description RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1387392;
PARAMETER(RCD.IGTS_Commodity_Market);
PARAMETER(LCL.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Commodity Market Desc EQ WRK.Blank for 30          USR
IF LCL.Commodity_Market_Desc = WRK.Blank_for_30_USR;

// Send error message - 'Commodity Market not found'
ERROR(USR2162);
MSGPARM(RCD.IGTS_Commodity_Market);

ENDIF;

ENDIF;

//?VAL: Commodity Price Group
CASE;

// IF RCD.IGTS Commodity Group is Not Blank
IF RCD.IGTS_Commodity_Group <> *BLANK;

EXECUTE FUNCTION(RTV Commod Group Desc  RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1277945;
PARAMETER(RCD.IGTS_Commodity_Group);
PARAMETER(LCL.Commodity_Price_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Commodity Price Desc EQ WRK.Blank for 30          USR
IF LCL.Commodity_Price_Desc = WRK.Blank_for_30_USR;

// Send error message - 'Commodity Price Group not found'
ERROR(USR2232);
MSGPARM(RCD.IGTS_Commodity_Group);

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(RCD.Item_Desc_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// RCD.Condition Desc. 1  USR = Condition name of RCD.IGTS 3rd Party Price Type
RCD.Condition_Desc_1_USR = RTVCND(RCD.IGTS_3rd_Party_Price_Type);

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Item Groups TP    CR) TYPE(CRTOBJ) FILE(PMDNREP)           AC1872263;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Group_with_Item_Code);
PARAMETER(RCD.IGTS_Min_Sales_Volume_Pct);
PARAMETER(RCD.IGTS_3rd_Party_Price_Type);
PARAMETER(RCD.IGTS_Combine_Sls_all_itms);
PARAMETER(RCD.IGTS_Unused_Nbr);
PARAMETER(RCD.IGTS_Unused_Nbr_2);
PARAMETER(RCD.IGTS_Unused_Date);
PARAMETER(RCD.IGTS_Commodity_Market);
PARAMETER(RCD.IGTS_Commodity_Group);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Item Groups TP    CH) TYPE(CHGOBJ) FILE(PMDNREP)           AC1872264;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Group_with_Item_Code);
PARAMETER(RCD.IGTS_Min_Sales_Volume_Pct);
PARAMETER(RCD.IGTS_3rd_Party_Price_Type);
PARAMETER(RCD.IGTS_Combine_Sls_all_itms);
PARAMETER(RCD.IGTS_Unused_Nbr);
PARAMETER(RCD.IGTS_Unused_Nbr_2);
PARAMETER(RCD.IGTS_Unused_Date);
PARAMETER(RCD.IGTS_Commodity_Market);
PARAMETER(RCD.IGTS_Commodity_Group);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


