      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF706
      * TITLE:       View Assigned Deposits
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     05/17/05
      *
      * FUNCTION: This function allows the user to view the Deposits assigned to a
      *           Cash Distribution Header
      *
      *           Restrictors:
      *             Batch number
      *
      *           Positioners:
      *             Deposit date
      *
      *           Selectors:
      *               None
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 11/29/06  LeAnne Ramsey
      *           Replaced the calls to the generic date conversion programs
      *           with ILE date logic.
      *
      * 10/14/09  LeAnne Ramsey
      *           Recompile only. Cash Distribution Header was changed.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd706    cf   e             workstn sfile(tf706s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Ftfp012    if   e           k disk
      *  Cash distribution header
      *
      *
     Fpdj2cpl6  if   e           k disk
      *   AR bank deposit
      *
      *
     Ftfp097    if   e           k disk
      *    Status codes
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2
     D svrrn1          s                   like(hdrrn1)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
     D wksyndt         s              7  0
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Save fields for positioners and selectors
      *
     D svbtsn          s                   like(c1btsn)
     D svmdy           s                   like(c1mdy)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     tf706k1
     C                   write     tf706ec
     C                   exfmt     tf706c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      '03'          rtncd
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   move      yes           reset
     C                   movel     set1          routne
      *
      * User has changed positioners/selectors.
      *
     C                   when      c1mdy <> svmdy
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   movel     scrn1         routne
     C                   other
      *
      * User pressed 'ENTER'
      *
     C                   eval      routne = set1
     C                   move      yes           reset
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   z-add     c1btsn        svbtsn
     C                   z-add     c1mdy         svmdy
      *
      * Get the MMDDYY date into Synon's format of CYYMMDD format.
      *
     C                   z-add     0             wksyndt
      *
     C                   if        c1mdy > 0                                    If a date
     C     *mdy          test(d)                 c1mdy                  92
     C                   if        *in92 = *off                                 If good date
     C     *mdy          move      c1mdy         wkisodate
     c     *cymd         move      wkisodate     wksyndt
     C                   endif                                                  If good date
     C                   endif                                                  If a date
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Retrieve Cash Distribution Header stuff for Control Record
      *---------------------------------------------------------------
      *
     C     $rtvhdr       begsr
      *
      * Retrieve values from Cash Distribution Header record
      *
     C     c1btsn        chain(n)  tfp012                             92
     C                   if        *in92 = *off                                 If hit
      *
     C                   z-add     chdpdccam     c1dpdccam
     C                   z-add     chdcdccam     c1dcdccam
      *
      * Flip Daily Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 chddt                  92
     C                   if        *in92 = *off                                 If OK date
     C                   move      chddt         wkisodate
     C     *mdy          move      wkisodate     c1ddtmdy
     C                   endif                                                  If OK date
      *
      *
      * Retrieve description for Status
      *
     C     chchstcd      chain     tfp097                             92
     C                   if        *in92 = *off
     C                   move      ststds        c1stds
     C                   endif
     C                   endif                                                  If hit
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   tf706s1
     C                   seton                                        83        sflclr
     C                   write     tf706c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     key01         setll     pdj2cpl6
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C     c1btsn        reade(n)  pdj2cpl6                               82
     C                   if        *in82 = *off                                 If read
      *
     C                   z-add     j2yxnx        d1tm
     C                   move      j2g4cd        d1bank
     C                   z-add     j2uiva        d1am
      *
      * Get Synon Deposit Date into MMDDYY format
      *
     C     *cymd         test(d)                 j2hxdt                 92
     C                   if        *in92 = *off                                 If OK date
     C     *cymd         move      j2hxdt        wkisodate
     C     *mdy          move      wkisodate     d1mdy
     C                   else
     C                   z-add     0             d1mdy
     C                   endif                                                  If OK date
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   write     tf706s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * a message telling the user to take F10 to assign charges
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
     C                   else
      *
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    c1btsn
     C                   parm                    rtncd
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    c1btsn
     C                   kfld                    wksyndt
      *
      * Retrieve Header stuff for Control Record
      *
     C                   exsr      $rtvhdr
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     12            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
