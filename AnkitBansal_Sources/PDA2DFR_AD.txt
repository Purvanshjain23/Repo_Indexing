// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDA2DFR
// ?Date: 14.08.2025 Time: 03:27:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag EQ WRK.BLANK
IF PAR.First_Time_Flag = WRK.BLANK;

// CTL.Accounting Company Number = PAR.Accounting Company Number
CTL.Company_Number = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?If allow multi-company is no then select CTL Company only
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// AND DB1.Accounting Company Number NE CTL.Accounting Company Number
AND DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Company Select
CASE;

// IF CTL.Accounting Company Number is greater than zero
IF CTL.Company_Number > *ZERO;

// AND DB1.Accounting Company Number NE CTL.Accounting Company Number
AND DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Cutout Matrix Code Select
CASE;

// IF CTL.Cutout Matrix Code NE WRK.BLANK
IF CTL.Cutout_Matrix_Code <> WRK.BLANK;

// AND DB1.Cutout Matrix Code NE CTL.Cutout Matrix Code
AND DB1.Cutout_Matrix_Code <> CTL.Cutout_Matrix_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Description = Condition name of RCD.Cutout Matrix Type
RCD.Description = RTVCND(RCD.Cutout_Matrix_Type);

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Company Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Accounting Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(CTL.Company_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?Create Cutout Matrix
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// Call program Edt Cutout Matrix     E1.
CALL PROGRAM(Edt Cutout Matrix     E1) ('PDA3E1R');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Cutout_Matrix_Code);
PARAMETER(CTL.Effective_Month_Day);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit Cutout Matrix
CASE;

// IF RCD.*SFLSEL is *Revise request
IF RCD.*SFLSEL = '2';

// Call program Edt Cutout Matrix     E1.
CALL PROGRAM(Edt Cutout Matrix     E1) ('PDA3E1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?3=Copy Cutout Matrix
CASE;

// IF RCD.*SFLSEL is *Copy request
IF RCD.*SFLSEL = '3'/'3';

// Call program Zzz Cutout Matrix     PV.
CALL PROGRAM(Zzz Cutout Matrix     PV) ('PDBSPVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?4=Delete Cutout Matrix
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// Send information message - 'Weight Range, Distribution, and Items will be deleted.'
MESSAGE(USR1734 *INFO);

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

QUIT;

ENDIF;

//?6/9=Print Options Prompt
CASE;

// IF RCD.*SFLSEL is *6
IF RCD.*SFLSEL = '6';

// OR RCD.*SFLSEL is 9
OR RCD.*SFLSEL = '9';

CASE;

// IF PAR.Display Prt Opt Pmt USR is *YES
IF PAR.Display_Prt_Opt_Pmt_USR = *YES;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Cutout Items');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

QUIT;

ENDIF;

// PAR.Display Prt Opt Pmt USR = CND.*NO
PAR.Display_Prt_Opt_Pmt_USR = *NO;

ENDIF;

ENDIF;

//?6=Print Distribution
CASE;

// IF RCD.*SFLSEL is *6
IF RCD.*SFLSEL = '6';

// Execute command - 'PS Prt Cutout Dist Items'
EXECUTE COMMAND(USR1840);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('PDH0PFR');
PARAMETER('PDH0PFR$');
PARAMETER('P/S');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER('PRTCUTDST');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?7=Edit Weight Ranges
CASE;

// IF RCD.*SFLSEL is Edit Opt7
IF RCD.*SFLSEL = '7'/'7';

// Call program WW Cutout Wgt Ranges EF.
CALL PROGRAM(WW Cutout Wgt Ranges EF) ('PDBTEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Cutout_Matrix_Desc);
PARAMETER(RCD.Cutout_Matrix_Type);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?9=Print Matrix Items
CASE;

// IF RCD.*SFLSEL is 9
IF RCD.*SFLSEL = '9';

// Execute command - 'PS Prt Cutout Dist Items'
EXECUTE COMMAND(USR1840);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('PDB7PFR');
PARAMETER('PDB7PFR$');
PARAMETER('P/S');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER('PRTCUTITM');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?10=Edit Yields
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

CASE;

// IF RCD.Cutout Matrix Type is Formula (Lean %)
IF RCD.Cutout_Matrix_Type = 'F';

// OR RCD.Cutout Matrix Type is Blend
OR RCD.Cutout_Matrix_Type = 'B';

// OR RCD.Cutout Matrix Type is Formula (Backfat)
OR RCD.Cutout_Matrix_Type = 'A';

// OR RCD.Cutout Matrix Type is Blend (Backfat)
OR RCD.Cutout_Matrix_Type = 'C';

// Call program Edt Cutout Yield      EF.
CALL PROGRAM(Edt Cutout Yield      EF) ('POQ6EFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Cutout_Matrix_Type);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?11=Edit Blend
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

CASE;

// IF RCD.Cutout Matrix Type is Blend
IF RCD.Cutout_Matrix_Type = 'B';

// OR RCD.Cutout Matrix Type is Blend (Backfat)
OR RCD.Cutout_Matrix_Type = 'C';

// Call program Zzz Cutout Blend      EF.
CALL PROGRAM(Zzz Cutout Blend      EF) ('PORDEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?12=Build Cutout
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

CASE;

// IF RCD.Cutout Matrix Type is Formula (Lean %)
IF RCD.Cutout_Matrix_Type = 'F';

// OR RCD.Cutout Matrix Type is Blend (Lean %)
OR RCD.Cutout_Matrix_Type = 'B';

// OR RCD.Cutout Matrix Type is Blend (Backfat)
OR RCD.Cutout_Matrix_Type = 'C';

// OR RCD.Cutout Matrix Type is Formula (Backfat)
OR RCD.Cutout_Matrix_Type = 'A';

// Call program Crt Cutout Items Ln%  PV.
CALL PROGRAM(Crt Cutout Items Ln%  PV) ('POQ7PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Cutout_Matrix_Type);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(DLT Cutout Matrix      DL) TYPE(DLTOBJ) FILE(PDI0REP)          AC1254444;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
{
 //?USER: Processing before Data update

 //?*Delete Cutout Weight Range, Distribution, and Items
 EXECUTE FUNCTION(Del Weight Range      RT) TYPE(RTVOBJ) FILE(PDI1REP)           AC1255918;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 {
  //?USER: Process Data record

  //?*Delete Weight Range, Distribution, and Items.
  EXECUTE FUNCTION(Del Weight Range      IF) TYPE(EXCINTFUN)                      AC1255937;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Cutout_Matrix_Code);
  PARAMETER(DB1.Effective_Month_Day);
  PARAMETER(DB1.Min_Carcass_Weight);
  PARAMETER(DB1.Max_Carcass_Weight);
  {
   //?Execute internal function

   //?*Delete Distribution and Items
   EXECUTE FUNCTION(Del Distribution      RT) TYPE(RTVOBJ) FILE(PDIZREP)           AC1255914;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Cutout_Matrix_Code);
   PARAMETER(PAR.Effective_Month_Day);
   PARAMETER(PAR.Min_Carcass_Weight);
   PARAMETER(PAR.Max_Carcass_Weight);
   {
    //?USER: Process Data record

    //?*Delete Distribution and Items
    EXECUTE FUNCTION(Del Distribution      IF) TYPE(EXCINTFUN)                      AC1255934;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Cutout_Matrix_Code);
    PARAMETER(DB1.Effective_Month_Day);
    PARAMETER(DB1.Min_Carcass_Weight);
    PARAMETER(DB1.Max_Carcass_Weight);
    PARAMETER(DB1.Lean_Percent);
    {
     //?Execute internal function

     //?*Delete Items
     EXECUTE FUNCTION(Del Cutout Item       RT) TYPE(RTVOBJ) FILE(PDI4REP)           AC1255921;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Cutout_Matrix_Code);
     PARAMETER(PAR.Effective_Month_Day);
     PARAMETER(PAR.Min_Carcass_Weight);
     PARAMETER(PAR.Max_Carcass_Weight);
     PARAMETER(PAR.Lean_Percent);
     {
      //?USER: Process Data record

      //?*Delete Item
      EXECUTE FUNCTION(DLT Cutout Item        DL) TYPE(DLTOBJ) FILE(PDI4REP)          AC1255834;
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Cutout_Matrix_Code);
      PARAMETER(DB1.Effective_Month_Day);
      PARAMETER(DB1.Min_Carcass_Weight);
      PARAMETER(DB1.Max_Carcass_Weight);
      PARAMETER(DB1.Lean_Percent);
      PARAMETER(DB1.Item_Code);
     }

     //?*Delete Distribution
     EXECUTE FUNCTION(DLT Distribution       DL) TYPE(DLTOBJ) FILE(PDIZREP)          AC1254598;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Cutout_Matrix_Code);
     PARAMETER(PAR.Effective_Month_Day);
     PARAMETER(PAR.Min_Carcass_Weight);
     PARAMETER(PAR.Max_Carcass_Weight);
     PARAMETER(PAR.Lean_Percent);
    }

   }

   EXECUTE FUNCTION(Del Dist Backfat      RT) TYPE(RTVOBJ) FILE(PDJ0REP)           AC1333226;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Cutout_Matrix_Code);
   PARAMETER(PAR.Effective_Month_Day);
   PARAMETER(PAR.Min_Carcass_Weight);
   PARAMETER(PAR.Max_Carcass_Weight);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del Distribution      IF) TYPE(EXCINTFUN)                      AC1934938;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Cutout_Matrix_Code);
    PARAMETER(DB1.Effective_Month_Day);
    PARAMETER(DB1.Min_Carcass_Weight);
    PARAMETER(DB1.Max_Carcass_Weight);
    PARAMETER(DB1.Backfat_Inches);
    {
     //?Execute internal function

     //?*Delete Distribution
     EXECUTE FUNCTION(DLT Dist Backfat       DL) TYPE(DLTOBJ) FILE(PDJ0REP)          AC1333075;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Cutout_Matrix_Code);
     PARAMETER(PAR.Effective_Month_Day);
     PARAMETER(PAR.Min_Carcass_Weight);
     PARAMETER(PAR.Max_Carcass_Weight);
     PARAMETER(PAR.Backfat_Inches);
    }

   }

   EXECUTE FUNCTION(Del Dist Loin-Eye     RT) TYPE(RTVOBJ) FILE(PDJ1REP)           AC1333227;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Cutout_Matrix_Code);
   PARAMETER(PAR.Effective_Month_Day);
   PARAMETER(PAR.Min_Carcass_Weight);
   PARAMETER(PAR.Max_Carcass_Weight);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(DLT Dist Loin-Eye      DL) TYPE(DLTOBJ) FILE(PDJ1REP)          AC1333094;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Cutout_Matrix_Code);
    PARAMETER(DB1.Effective_Month_Day);
    PARAMETER(DB1.Min_Carcass_Weight);
    PARAMETER(DB1.Max_Carcass_Weight);
    PARAMETER(DB1.Loin_Eye_Depth);
   }

   //?*Delete Weight Range
   EXECUTE FUNCTION(DLT Weight Range       DL) TYPE(DLTOBJ) FILE(PDI1REP)          AC1254506;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Cutout_Matrix_Code);
   PARAMETER(PAR.Effective_Month_Day);
   PARAMETER(PAR.Min_Carcass_Weight);
   PARAMETER(PAR.Max_Carcass_Weight);
  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

