      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      Hog Production
      * PROGRAM:     HP4484
      * TITLE:       Specify Quarterly Prediction Values to Copy
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     01/30/02
      *
      * FUNCTION: Allows user to enter options for copying/duplicating data.
      *
      * NOTE: THIS IS A POP-UP WINDOW PROGRAM. PLEASE NOTE THAT IN
      *       WINDOW PROGRAMS THE RECORD FORMAT CONTAINING THE WINDOW
      *       DEFINITION MUST BE WRITTEN FIRST. SO, WE WRITE THE
      *       ERROR MESSAGE SUBFILE CONTROL RECORD FIRST FOLLOWED BY
      *       THE COMMAND LINE RECORD FORMAT.  THIS IS OPPOSITE OF
      *       THE NON-WINDOW PROGRAMS.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd4484   cf   e             workstn
     F                                     infds(iofeed)
      *
      *
     Fhsl018j   if   e           k disk
      *    Farm site
      *
      *
     Fhsp025    if   e           k disk
      *    Group type
      *
      *
     Fhsp083    if   e           k disk
      *    Quarterly prediction values
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Parms
      *
     D xxjobq          s             10     inz('*JOBD     ')
      *
     D xxalphcell      s              2a
     D xxcdyr          s                   like(d1fcdyr)
     D xxcdqr          s                   like(d1fcdqr)
     D xxgtcd          s                   like(d1fgtcd)
     D xxgtds          s                   like(gtgtds)
     D xxcell          s                   like(d1fcell)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      * Local data area.
      *
     Dlda             uds                  dtaara(*lda)
     D  ldfcdyr                1      4  0
     D  ldfcdqr                5      5  0
     D  ldfcell                6      7  0
     D  ldfgtcd                8      8
      *
     D  ldtcdyr                9     12  0
     D  ldtcdqr               13     13  0
     D  ldtcell               14     15  0
     D  ldtgtcd               16     16
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * Write screen 1 to CRT.
      *
     C                   write     hp4484ec
     C                   write     hp4484k1
     C                   exfmt     hp4484r1
      *
      * Clear messages
      *
     C                   exsr      $clmsg
      *
      *
      * Get user's input and set routine
      *
     C                   select
      *
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in08 = *on                                  F8-submit
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $proc1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
     C                   other
      *
     C                   exsr      $edit1
     C                   eval      routne = scrn1
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      *
      * Validate from/to calendar year
      *
     C                   exsr      $fcdyr
     C                   exsr      $tcdyr
      *
      * Validate from/to calendar quarter
      *
     C                   exsr      $fcdqr
     C                   exsr      $tcdqr
      *
      * Validate from/to cell
      *
     C                   exsr      $fcell
     C                   exsr      $tcell
      *
      * Validate from/to group type
      *
     C                   exsr      $fgtcd
     C                   exsr      $tgtcd
      *
      * Validate that all froms/tos are not identical
      *
     C                   exsr      $allsame
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate From Calendar Year
      *---------------------------------------------------------------
      *
     C     $fcdyr        begsr
      *
     C                   select
     C                   when      d1fcdyr = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1fcdyr < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1fcdyr < 1998
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09028'
     C                   endif
     C                   endsl
      *
      * If there are no errors, make sure that data exists for this
      * calendar year.
      *
     C     d1fcdyr       chain     hsp083                             92
     C                   if        *in92 = *on                                  If nothing
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS01165'
     C                   endif
     C                   endif                                                  If nothing
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate To Calendar Year
      *---------------------------------------------------------------
      *
     C     $tcdyr        begsr
      *
     C                   select
     C                   when      d1tcdyr = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1tcdyr < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1tcdyr < 1998
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09028'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate From Calendar Quarter
      *---------------------------------------------------------------
      *
     C     $fcdqr        begsr
      *
     C                   select
     C                   when      d1fcdqr >= 1 and d1fcdqr <= 4
      *
     C                   when      d1fcdqr < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1fcdqr = 0 and d1tcdqr <> 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09173'
     C                   endif
      *
     C                   when      d1fcdqr > 4
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09172'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate To Calendar Quarter
      *---------------------------------------------------------------
      *
     C     $tcdqr        begsr
      *
     C                   select
     C                   when      d1tcdqr >= 1 and d1tcdqr <= 4
      *
     C                   when      d1tcdqr < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1tcdqr = 0 and d1fcdqr <> 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09174'
     C                   endif
      *
     C                   when      d1tcdqr > 4
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09172'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate From Cell
      *---------------------------------------------------------------
      *
     C     $fcell        begsr
      *
     C                   select
     C                   when      d1fcell = 0 and d1tcell = 0
      *
     C                   when      d1fcell = 0 and d1tcell <> 0
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09175'     mgid(e)
     C                   endif
      *
     C                   when      d1fcell < 0
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
      * We don't have a "CELL" master. So, just check that the cell is
      * on any record in the Farm Master file.
      *
     C     d1fcell       chain     hsl018j                            92
     C                   if        *in92 = *on                                  If not assigned
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01163'     mgid(e)
     C                   clear                   mgw
     C                   move      d1fcell       xxalphcell
     C                   movea     xxalphcell    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If not assigned
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate To Cell
      *---------------------------------------------------------------
      *
     C     $tcell        begsr
      *
     C                   select
     C                   when      d1tcell = 0 and d1fcell = 0
      *
     C                   when      d1tcell = 0 and d1fcell <> 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09176'     mgid(e)
     C                   endif
      *
     C                   when      d1tcell < 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
      *
      * We don't have a "CELL" master. So, just check that the cell is
      * on any record in the Farm Master file.
      *
     C     d1tcell       chain     hsl018j                            92
     C                   if        *in92 = *on                                  If not assigned
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01163'     mgid(e)
     C                   clear                   mgw
     C                   move      d1tcell       xxalphcell
     C                   movea     xxalphcell    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If not assigned
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate From Group Type
      *----------------------------------------------------------------
      *
     C     $fgtcd        begsr
      *
     C                   select
     C                   when      d1fgtcd = *blank and d1tgtcd <> *blank
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09177'     mgid(e)
     C                   endif
      *
     C                   when      d1fgtcd <> *blank
     C     d1fgtcd       chain     hsp025                             92
     C                   if        *in92 = *on                                  If invalid
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00137'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1fgtcd       mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If valid
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate To Group Type
      *----------------------------------------------------------------
      *
     C     $tgtcd        begsr
      *
     C                   select
     C                   when      d1tgtcd = *blank and d1fgtcd <> *blank
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09178'     mgid(e)
     C                   endif
      *
     C                   when      d1tgtcd <> *blank
     C     d1tgtcd       chain     hsp025                             92
     C                   if        *in92 = *on                                  If invalid
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00137'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1tgtcd       mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If valid
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate that the 'froms' and 'tos' are not all the same
      *---------------------------------------------------------------
      *
     C     $allsame      begsr
      *
     C                   if        error = 0 and
     C                             d1fcdyr = d1tcdyr and
     C                             d1fcdqr = d1tcdqr and
     C                             d1fcell = d1tcell and
     C                             d1fgtcd = d1tgtcd
      *
     C                   seton                                        323436
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09179'     mgid(e)
     C                   endif
      *
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      *
     C                   select
      *
      * From group type
     C                   when      fld = 'D1FGTCD'
     C                   call      'HP531'
     C                   parm      *blank        xxgtcd
     C                   parm      *blank        xxgtds
     C                   seton                                        57
     C                   if        xxgtcd <> *blank
     C                   move      xxgtcd        d1fgtcd
     C                   endif
      *
      * To group type
     C                   when      fld = 'D1TGTCD'
     C                   call      'HP531'
     C                   parm      *blank        xxgtcd
     C                   parm      *blank        xxgtds
     C                   seton                                        58
     C                   if        xxgtcd <> *blank
     C                   move      xxgtcd        d1tgtcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the copy
      *
     C     $proc1        begsr
      *
      * Move submission values into LDA
      *
     C                   z-add     d1fcdyr       ldfcdyr
     C                   z-add     d1tcdyr       ldtcdyr
      *
     C                   z-add     d1fcdqr       ldfcdqr
     C                   z-add     d1tcdqr       ldtcdqr
      *
     C                   z-add     d1fcell       ldfcell
     C                   z-add     d1tcell       ldtcell
      *
     C                   move      d1fgtcd       ldfgtcd
     C                   move      d1tgtcd       ldtgtcd
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
      *
     C                   out       lda
     C                   movea     xxjobq        cmd(51)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1fcdyr       parm                    xxcdyr
     C     d1fcdqr       parm                    xxcdqr
     C     d1fcell       parm                    xxcell
     C     d1fgtcd       parm                    xxgtcd
      *
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldfcdyr
     C                   z-add     0             ldfcdqr
     C                   z-add     0             ldfcell
     C                   move      *blank        ldfgtcd
      *
     C                   z-add     0             ldtcdyr
     C                   z-add     0             ldtcdqr
     C                   z-add     0             ldtcell
     C                   move      *blank        ldtgtcd
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * This window logic keeps the screen in the calling program from being
      * cleared.
      *
     C                   write     assume
      *
     C                   endsr
      /eject
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(HP4484CL)) JOB(COPYPRED) JOBQ(__________)
