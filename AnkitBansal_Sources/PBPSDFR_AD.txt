// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBPSDFR
// ?Date: 14.08.2025 Time: 03:48:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// LCL.Display Flag 1 USR = CND.no
LCL.Display_Flag_1_USR = 'N';

//?USER: Initialize subfile record from DBF record

CASE;

// IF RCD.D-EDI INV PROC FLAG is ERROR
IF RCD.D_EDI_INV_PROC_FLAG = 'X';

//?Display record
// RCD.Date                  USR = RCD.BAK04-PO Date
RCD.Date_USR = RCD.BAK04_PO_Date;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?E3422 JJH 09/29/14 - This is a hidden option, and intended for
//? selected users to be able to Create a PO Acknowledgement
//?F23=Create PO Acknowledgement
CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

// Call program Pmt Val for PO Ack    PV.
CALL PROGRAM(Pmt Val for PO Ack    PV) ('PBPVPVR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

// LCL.Display Flag 1 USR = CND.no
LCL.Display_Flag_1_USR = 'N';

//?8=Display Detail
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Dsp PO Ack Detail     DF.
CALL PROGRAM(Dsp PO Ack Detail     DF) ('PBPTDFR');
PARAMETER(RCD.EDI_SURROGATE_NUMBER);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?10=Create Acknowledgement
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

CASE;

// IF RCD.D-TRADE PARTNER CODE is SYSCO
IF RCD.D_TRADE_PARTNER_CODE = 'SYSCO';

// OR RCD.D-TRADE PARTNER CODE is DSYSCO
OR RCD.D_TRADE_PARTNER_CODE = 'DSYSCO';

EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
PARAMETER(LCL.Company_Number);
PARAMETER(RCD.EDI_SURROGATE_NUMBER);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Val for PO Ack        IF) TYPE(EXCINTFUN)                      AC2041958;
PARAMETER(LCL.Company_Number);
PARAMETER(RCD.EDI_SURROGATE_NUMBER);
PARAMETER('PM');
PARAMETER(PAR.Trans_Type_1_PASS_USR);
{
 //?Execute internal function

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 //?Retrieve the BT Customer
 EXECUTE FUNCTION(Rtv Order Info ALL    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1745072;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(NLL.Order_Type_Sales);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(NLL.Ship_To_Customer);
 PARAMETER(NLL.Ship_To_Name);
 PARAMETER(NLL.Ship_To_Address_Line_1);
 PARAMETER(NLL.Ship_To_Address_Line_2);
 PARAMETER(NLL.Ship_To_Address_Line_3);
 PARAMETER(NLL.Ship_To_City);
 PARAMETER(NLL.Ship_To_State_Code);
 PARAMETER(NLL.Ship_To_Zip_Postal_Code);
 PARAMETER(NLL.Bill_to_Customer);
 PARAMETER(NLL.Bill_to_Name);
 PARAMETER(NLL.Bill_to_Address_Line_1);
 PARAMETER(NLL.Bill_to_Address_Line_2);
 PARAMETER(NLL.Bill_to_Address_Line_3);
 PARAMETER(NLL.Bill_to_City);
 PARAMETER(NLL.Bill_to_State_Code);
 PARAMETER(NLL.Bill_to_Zip_Postal_Code);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(NLL.Order_Date);
 PARAMETER(NLL.Requested_Ship_Date);
 PARAMETER(NLL.Actual_Shipped_Date);
 PARAMETER(NLL.Cancel_Date);
 PARAMETER(NLL.Terms_Code);
 PARAMETER(NLL.Special_Instructions);
 PARAMETER(NLL.Special_Instructions_2);
 PARAMETER(NLL.Carrier_Code);
 PARAMETER(NLL.Comment_Print_Acknowledge);
 PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(NLL.Comment_Print_Pick_Slip);
 PARAMETER(NLL.Comment_Print_Ship_Doc);
 PARAMETER(NLL.Reason_Code);
 PARAMETER(NLL.Order_in_Use);
 PARAMETER(NLL.Header_Status);
 PARAMETER(NLL.Header_Status_Last);
 PARAMETER(NLL.Order_Type_Print_Status);
 PARAMETER(NLL.Scheduled_Ship_Date);
 PARAMETER(NLL.User_Original_Entry);
 PARAMETER(NLL.Date_of_Original_Entry);
 PARAMETER(NLL.Order_Value_Total);
 PARAMETER(NLL.Order_Weight_Total);
 PARAMETER(NLL.Credit_Hold);
 PARAMETER(NLL.Production_Hold);
 PARAMETER(NLL.New_Customer_Hold);
 PARAMETER(NLL.Requested_Delivery_Date);
 PARAMETER(NLL.Requested_Delivery_Time);
 PARAMETER(NLL.Accounts_Receiv_Ent_1);
 PARAMETER(NLL.Accounts_Receiv_Ent_2);
 PARAMETER(NLL.Load_ID);
 PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
 PARAMETER(NLL.Rated_Freight);
 PARAMETER(NLL.LTL_Flag);
 PARAMETER(NLL.Price_Audit);
 PARAMETER(LCL.Price_Status);
 PARAMETER(NLL.Shipping_Method);
 PARAMETER(NLL.Export_Status);
 PARAMETER(NLL.Palletize);
 PARAMETER(NLL.Shrink_Wrap);
 PARAMETER(NLL.Slip_Sheet);
 PARAMETER(NLL.Age_Code);
 PARAMETER(NLL.Reefer_Temperature);
 PARAMETER(NLL.Load_Type);
 PARAMETER(NLL.Attach_to_Invoice_Number);
 PARAMETER(NLL.Load_Plan_Order);
 PARAMETER(NLL.Print_Pick_Slip);
 PARAMETER(NLL.Resell_Reference_Number);
 PARAMETER(NLL.Special_Comment_1);
 PARAMETER(NLL.Special_Comment_2);
 PARAMETER(NLL.Affect_Auto_Accruals);
 PARAMETER(NLL.Sales_Route_Code);
 PARAMETER(NLL.Manager_Level_Code);
 PARAMETER(NLL.VP_Level_Code);
 PARAMETER(NLL.Attach_to_Order_Number);
 PARAMETER(NLL.Reason_for_Price_Audit);
 PARAMETER(NLL.Invoice_Number);
 PARAMETER(NLL.Invoice_Suffix);
 PARAMETER(NLL.Invoice_Date);
 PARAMETER(NLL.Event_Code);
 PARAMETER(NLL.Trans_Contol_AS400_Plant);
 PARAMETER(NLL.Modified_Flag);
 PARAMETER(NLL.A_R_order_Value_Total);
 PARAMETER(NLL.Billing_Activity_Type);
 PARAMETER(NLL.Block_Order_Flag);
 PARAMETER(NLL.Order_Certification_Flag);
 PARAMETER(NLL.Invoice_Order_Value_Tot);
 PARAMETER(NLL.Process_Sts_for_3C);
 PARAMETER(NLL.Order_Conf_Fax_Sts);
 PARAMETER(NLL.Manifest_Fax_Sts);
 PARAMETER(NLL.Invoice_Fax_Sts);
 PARAMETER(NLL.Transfer_in_Storage_Ind);
 PARAMETER(NLL.Email_Cust_On_Order_Ship);
 PARAMETER(NLL.Order_Emailed);
 PARAMETER(NLL.Export_Docs_Go_w_Driver);
 PARAMETER(NLL.Shipping_Temp_Code_C_F);
 PARAMETER(NLL.Broker_Order_Status);
 PARAMETER(NLL.Air_Freight_Order);
 PARAMETER(NLL.Order_Requires_Review);
 PARAMETER(NLL.OH_Load_Plan_Ready);
 PARAMETER(NLL.Export_USDA_Approved);
 PARAMETER(NLL.HPB_Ship_to_Warehouse);
 PARAMETER(NLL.OH_TF_Exempt_Code);
 PARAMETER(NLL.OH_Appt_Confirmation_Dt);
 PARAMETER(NLL.JPN_Invoice_Issuance_Date);
 PARAMETER(NLL.Load_Actual_Shipped_Date);
 PARAMETER(NLL.Load_BOL_Complete_Date);
 PARAMETER(NLL.Load_Truck_Departure_Date);
 PARAMETER(NLL.Maximum_Gross_Weight);
 PARAMETER(NLL.Time_of_Original_Entry);
 PARAMETER(NLL.OH_Appt_Confirmation_Tm);
 PARAMETER(NLL.Load_BOL_Complete_Time);
 PARAMETER(NLL.Load_Truck_Departure_Time);
 PARAMETER(NLL.Act_Frt_Reference_Amount);
 PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
 PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
 PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
 PARAMETER(NLL.Claim_Number);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 PARAMETER(NLL.Job_Time);
 PARAMETER(NLL.User_Id);
 PARAMETER(NLL.Job_Name);
 PARAMETER(NLL.Job_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check to see it the BT Cust should get a POA/POAC (ack or chgd ack)
 EXECUTE FUNCTION(RTV BT Intrchg BT custRT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2023144;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER('POACK');
 PARAMETER(LCL.POC_POCA);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?01/24/23 DN W95589-Check Record Status is Active for both 855 & 865.
  CASE;

  // IF DB1.Interchange Code is PO Acknowledgement  855
  IF DB1.Interchange_Code = 'POACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Ack
  PAR.POC_POCA = 'POACK';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Interchange Code is PO Change Ack       865
  IF DB1.Interchange_Code = 'POCACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Change Ack
  PAR.POC_POCA = 'POCACK';

  ENDIF;

  ENDIF;

 }

 //?W95589 DN 01/24/23-Commented Out & Moved Below.
 //?W95589 DN 01/24/23-Only Check if Record Exist to Set EDI POA Flag.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Chk to see if BT cust requires a EDI PO ACK
 CASE;

 // IF LCL.POC/POCA ?? is PO Ack
 IF LCL.POC_POCA = 'POACK';

 // LCL.EDI POA = CND.Yes
 LCL.EDI_POA = 'Y';

 //?Chk to see if BT cust requires a EDI PO ACK
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDI POA = CND.No
 LCL.EDI_POA = 'N';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV BT Intrchg BT custRT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2023144;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER('POCACK');
 PARAMETER(LCL.POC_POCA);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?01/24/23 DN W95589-Check Record Status is Active for both 855 & 865.
  CASE;

  // IF DB1.Interchange Code is PO Acknowledgement  855
  IF DB1.Interchange_Code = 'POACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Ack
  PAR.POC_POCA = 'POACK';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Interchange Code is PO Change Ack       865
  IF DB1.Interchange_Code = 'POCACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Change Ack
  PAR.POC_POCA = 'POCACK';

  ENDIF;

  ENDIF;

 }

 //?W95589 DN 01/24/23-Commented Out & Moved Below.
 //?W95589 DN 01/24/23-Only Check if Record Exist to Set EDI POAC Flag.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Chk to see if BT cust requires a EDI PO Chg ACK
 CASE;

 // IF LCL.POC/POCA ?? is PO Change Ack
 IF LCL.POC_POCA = 'POCACK';

 // LCL.EDI POAC = CND.Yes
 LCL.EDI_POAC = 'Y';

 //?Chk to see if BT cust requires a EDI PO Chg ACK
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDI POAC = CND.NO
 LCL.EDI_POAC = 'N';

 ENDIF;

 ENDIF;

 //?See if a rcd has been written to OH ext.
 EXECUTE FUNCTION(RTV EDI PO Flag       RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2023170;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Initialize routine

  //?3/11/14 SAZ If OHE PO ack flag = Blank, initialize to *NO
  //?3/11/14 SAZ If Record not found, initialize  OHE PO Ack Flag to *NO
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  // PAR.OHE PO ACK Flag = CND.*NO
  PAR.OHE_PO_ACK_Flag = *NO;

  //?USER: Process Data record

  // PAR.OHE PO ACK Flag = DB1.OHE PO ACK Flag
  PAR.OHE_PO_ACK_Flag = DB1.OHE_PO_ACK_Flag;

  CASE;

  // IF DB1.OHE PO ACK Flag is *Blank
  IF DB1.OHE_PO_ACK_Flag = *BLANK;

  // PAR.OHE PO ACK Flag = CND.*NO
  PAR.OHE_PO_ACK_Flag = *NO;

  ENDIF;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

 }

 //?Record found in Order header ext
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 //?If flag blank, No ack has been sent for this PO yet.
 CASE;

 // IF LCL.OHE PO ACK Flag is *Blank
 IF LCL.OHE_PO_ACK_Flag = *BLANK;

 // OR LCL.OHE PO ACK Flag is *NO
 OR LCL.OHE_PO_ACK_Flag = *NO;

 CASE;

 // IF LCL.EDI POA is Yes
 IF LCL.EDI_POA = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 //?If flag blank, No ack has been sent for this PO yet.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If flag not blank, 855 ack has been sent for this PO. Need to send
 //?another 855(865) if the customer is set up for it.
 CASE;

 // IF LCL.EDI POAC is Yes
 IF LCL.EDI_POAC = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 ENDIF;

 //?If record not found and POA is yes, send
 //?Record found in Order header ext
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.EDI POA is Yes
 IF LCL.EDI_POA = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 ENDIF;

 //?When all chks are done, need to check to see if the Cust PO
 //?has been entered. If not,do not send to customer.
 //?If Cust PO# not entered
 CASE;

 // IF LCL.Customer Purchase Order # is tba
 IF LCL.Customer_Purchase_Order_# = 'tba';

 // OR LCL.Customer Purchase Order # is TBA(cap)
 OR LCL.Customer_Purchase_Order_# = 'TBA';

 // OR LCL.Customer Purchase Order # is TBD(cap)
 OR LCL.Customer_Purchase_Order_# = 'TBD';

 // OR LCL.Customer Purchase Order # is tbd
 OR LCL.Customer_Purchase_Order_# = 'tbd';

 // OR LCL.Customer Purchase Order # is BLOCK(cap)
 OR LCL.Customer_Purchase_Order_# = 'BLOCK';

 // OR LCL.Customer Purchase Order # is Block
 OR LCL.Customer_Purchase_Order_# = 'Block';

 //?S13599 DN 08/16/18-Added check for 'TBD, tbd, BLOCK & Block'.
 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 // PAR.Trans Type 1 PASS     USR = CND.EDI PO does not exist
 PAR.Trans_Type_1_PASS_USR = 'NP';

 ENDIF;

 //?2014/09/10 PKD/SAZ Check if PO was sent via EDI for SYSCO.  If yes, then
 //?                   Create an 855; otherwise don't do it.
 //?E003964 SLM  02/24/2015 logic for SYSCO & DSYSCO Work the same
 CASE;

 // IF LCL.EDI Trading Partner No. is SYSCO Dailys
 IF LCL.EDI_Trading_Partner_No = 'DSYSCO';

 // OR LCL.EDI Trading Partner No. is SYSCO Foods
 OR LCL.EDI_Trading_Partner_No = 'SYSCO';

 EXECUTE FUNCTION(VAL PO Exists         RT) TYPE(RTVOBJ) FILE(ECP004)            AC2099993;
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

 }

 //?VAL: Return Code
 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 // PAR.Trans Type 1 PASS     USR = CND.NO Trade Partner PO
 PAR.Trans_Type_1_PASS_USR = 'TP';

 ENDIF;

 ENDIF;

 //? 7/13/2021 JBB SDD657 - Trading Partner Control
 // Call program Rtv EDI Manual PO Sts XF.
 CALL PROGRAM(Rtv EDI Manual PO Sts XF) ('PUTBXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER('POACK');
 PARAMETER(LCL.Send_EDI_Document_Y_N);

 //?If Send EDI Invoice = N, set EDI Process Flag = N
 CASE;

 // IF LCL.Send EDI Document Y/N is No
 IF LCL.Send_EDI_Document_Y_N = 'N';

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 ENDIF;

 CASE;

 // IF LCL.EDI Process Flag is Process
 IF LCL.EDI_Process_Flag = 'Y';

 //?2014/09/09 PKD Added Price Audit condition
 //?Do we need to EDI 855/865?
 CASE;

 // IF PAR.Pricing Event Called From is Market Price Change
 IF PAR.Pricing_Event_Called_From = 'MPC';

 // OR PAR.Pricing Event Called From is Order Entry
 OR PAR.Pricing_Event_Called_From = 'OE';

 // OR PAR.Pricing Event Called From is Price Maintenance
 OR PAR.Pricing_Event_Called_From = 'PM';

 // OR PAR.Pricing Event Called From is Price Audit
 OR PAR.Pricing_Event_Called_From = 'PA';

 CASE;

 // IF LCL.Price Status is Priced
 IF LCL.Price_Status = 'P';

 // Call program Rtv/Crt EDI PO Ack    XF.
 CALL PROGRAM(Rtv/Crt EDI PO Ack    XF) ('PNYLXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Trans_Type_1_PASS_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Trans Type 1 PASS     USR = CND.EDI Order is not Priced
 PAR.Trans_Type_1_PASS_USR = 'OP';

 ENDIF;

 ENDIF;

 ENDIF;

}


// RCD.Description 4 usr = PAR.Trans Type 1 PASS     USR
RCD.Description_4_usr = PAR.Trans_Type_1_PASS_USR;

EXECUTE FUNCTION(Rtv EDI INV PROC FLAG RT) TYPE(RTVOBJ) FILE(ECP032)            AC2099167;
PARAMETER(RCD.EDI_SURROGATE_NUMBER);
PARAMETER(LCL.D_EDI_INV_PROC_FLAG);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.D-EDI INV PROC FLAG is *No
IF LCL.D_EDI_INV_PROC_FLAG = 'N';

// Send information message - 'PO Ack created for Order &1.'
MESSAGE(USR4762 *INFO);
MSGPARM(RCD.EDI_SURROGATE_NUMBER);

// RCD.Description 4 usr = CON.PO Ack created
RCD.Description_4_usr = 'PO Ack created';

// LCL.Display Flag 1 USR = CND.no
LCL.Display_Flag_1_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Trans Type 1 PASS     USR is GTIN Req'd, Not Cancelled
IF PAR.Trans_Type_1_PASS_USR = 'GN';

// RCD.Description 4 usr = CON.GTIN req'd not in IDE
RCD.Description_4_usr = 'GTIN req'd not in IDE';

// IF PAR.Trans Type 1 PASS     USR is GTIN Req'd, Cancelled
IF PAR.Trans_Type_1_PASS_USR = 'GX';

// RCD.Description 4 usr = CON.GTIN req'd not in IDE
RCD.Description_4_usr = 'GTIN req'd not in IDE';

// IF PAR.Trans Type 1 PASS     USR is Item X-Ref is missing
IF PAR.Trans_Type_1_PASS_USR = 'IX';

// RCD.Description 4 usr = CON.Item X-Ref is missing
RCD.Description_4_usr = 'Item X-Ref is missing';

// IF PAR.Trans Type 1 PASS     USR is NO Trade Partner PO
IF PAR.Trans_Type_1_PASS_USR = 'TP';

// RCD.Description 4 usr = CON.No PO for Trade Partner
RCD.Description_4_usr = 'No PO for Trade Partner';

// IF PAR.Trans Type 1 PASS     USR is EDI PO does not exist
IF PAR.Trans_Type_1_PASS_USR = 'NP';

// RCD.Description 4 usr = CON.EDI PO does not exist
RCD.Description_4_usr = 'EDI PO does not exist';

// IF PAR.Trans Type 1 PASS     USR is EDI Order is not Priced
IF PAR.Trans_Type_1_PASS_USR = 'OP';

// RCD.Description 4 usr = CON.EDI Order is not Priced
RCD.Description_4_usr = 'EDI Order is not Priced';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Description 4 usr = CON.Errors exist
RCD.Description_4_usr = 'Errors exist';

ENDIF;

// Send error message - 'PO Acknowledgement for Order not created. Errors exist.'
ERROR(USR4802);
MSGPARM(RCD.EDI_SURROGATE_NUMBER);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option invalid-Trade Partner &1 is not SYSCO or DSYSCO'
ERROR(USR4801);
MSGPARM(RCD.D_TRADE_PARTNER_CODE);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

