// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICP7PVR
// ?Date: 14.08.2025 Time: 03:26:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Cycle Count Code - IB = PAR.Cycle Count Code
PAR.Cycle_Count_Code_IB = PAR.Cycle_Count_Code;

//?USER: Load screen

// DTL.Accounting Company Number = PAR.Accounting Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Warehouse Code = PAR.Warehouse Code
DTL.Warehouse_Code = PAR.Warehouse_Code;

//?Set up warehouse if first time flag is blank and warehouse is blank
CASE;

// IF PAR.First Time Flag EQ WRK.BLANK
IF PAR.First_Time_Flag = WRK.BLANK;

// AND DTL.Warehouse Code is Warehouse Code Blank
AND DTL.Warehouse_Code = *BLANK;

// DTL.Warehouse Code = PAR.Warehouse Code
DTL.Warehouse_Code = PAR.Warehouse_Code;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// PAR.Item Code = DTL.Item Code
PAR.Item_Code = DTL.Item_Code;

CASE;

// IF DTL.Transaction Date Code is not entered
IF DTL.Transaction_Date_Code = *ZERO;

//?09/09/09 PKD E00475 Use System Date instead of Job Date
EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
PARAMETER(DTL.Transaction_Date_Code);
{
 //?Execute internal function

 // LCL.*System timestamp = JOB.*System timestamp
 LCL.*System_timestamp = JOB.*System_timestamp;

 // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
 LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

 // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
 LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

 // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
 LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

 // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
 LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.System_Date_USR);
 PARAMETER(LCL.DATE);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

}


ENDIF;

// DTL.Shift Number = CON.1
DTL.Shift_Number = 1;

//?USER: Validate fields

//?Select warehouse and item
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse Code
IF PGM.*Cursor_field = DTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_Code);

// IF PGM.*Cursor field <IS> DTL.Item Code
IF PGM.*Cursor_field = DTL.Item_Code;

// Call program SEL Actv Item by Co    SR.
CALL PROGRAM(SEL Actv Item by Co    SR) ('PDL9SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Whse Desc/Slott    RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1134063;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON/CND);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Invalid warehouse
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Invalid warehouse
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Invalid item
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Invalid item
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Item not found.'
ERROR(USR0326);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Item_Code);

ENDIF;

//?If Item change defer confirm
CASE;

// IF DTL.Item Code NE PAR.Item Code
IF DTL.Item_Code <> PAR.Item_Code;

// AND DTL.Item Code is Entered
AND DTL.Item_Code <> *ZERO;

// AND PAR.Item Code is Entered
AND PAR.Item_Code <> *ZERO;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PAR.Item Code = DTL.Item Code
PAR.Item_Code = DTL.Item_Code;

ENDIF;

//?Check for part of Physical Count Group
CASE;

// IF DTL.Item Code is Entered
IF DTL.Item_Code <> *ZERO;

EXECUTE FUNCTION(Val Physical Count     RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1217871;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Physical Count Status is Physical in progress
 IF DB1.Physical_Count_Status = 'P';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Item/Warehouse has not been assigned for a Physical Count.'
ERROR(USR1491);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code);

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

EXECUTE FUNCTION(Rtv Cycle Code         RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1221116;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Cycle_Count_Code_IB);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Val Existance          RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1218084;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Cycle_Count_Code_IB);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Existance          RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1218084;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(*BLANK);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Existance          RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1218084;
PARAMETER(DTL.Company_Number);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Existance          RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1218084;
PARAMETER(DTL.Company_Number);
PARAMETER(*BLANK);
PARAMETER(PAR.Cycle_Count_Code_IB);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item/Warehouse has not been assigned for a Physical Count.'
ERROR(USR1491);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?S13514 DN 07/31/18-Validate Transaction Date Code.
CASE;

// IF DTL.Transaction Date Code is entered
IF DTL.Transaction_Date_Code <> *ZERO;

EXECUTE FUNCTION(Val Date In Not < 2yrs IF) TYPE(EXCINTFUN)                     AC2157322;
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER('T');
PARAMETER(LCL.Generic_Message_80_USR);
{
 //?Execute internal function

 //?Date In must be >= Jan 1 (2 yrs ago) and <= Current Date.
 //?Initialize.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Generic Message 80 USR = CON.*BLANK
 PAR.Generic_Message_80_USR = *BLANK;

 //?Set 'Date In' Text.
 CASE;

 // IF PAR.Date In Type USR is Transaction Date
 IF PAR.Date_In_Type_USR = 'T';

 // LCL.Text USR 15 = CON.Transaction
 LCL.Text_USR_15 = 'Transaction';

 //?Set 'Date In' Text.
 // IF PAR.Date In Type USR is Production Date
 IF PAR.Date_In_Type_USR = 'P';

 // LCL.Text USR 15 = CON.Production
 LCL.Text_USR_15 = 'Production';

 //?Set 'Date In' Text.
 // IF PAR.Date In Type USR is Label Date
 IF PAR.Date_In_Type_USR = 'L';

 // LCL.Text USR 15 = CON.Label
 LCL.Text_USR_15 = 'Label';

 ENDIF;

 ENDIF;

 //?Get System Date & Set Date 2 Years Back on Jan 1.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
 PARAMETER(LCL.System_Date_USR);
 {
  //?Execute internal function

  // LCL.*System timestamp = JOB.*System timestamp
  LCL.*System_timestamp = JOB.*System_timestamp;

  // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
  LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

  // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
  LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

  // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
  LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

  // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
  LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

  EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
  PARAMETER(PAR.System_Date_USR);
  PARAMETER(LCL.DATE);
  {
   //?Execute internal function

   //?** YEAR **
   // PAR.Year Code = PAR.DATE / CON.10000 *
   PAR.Year_Code = PAR.DATE / 10000;

   // PAR.Year  NBR USR = PAR.Year Code
   PAR.Year_NBR_USR = PAR.Year_Code;

   // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
   PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

   //?** MONTH **
   // PAR.Month                 USR = PAR.DATE / CON.100 *
   PAR.Month_USR = PAR.DATE / 100;

   // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
   PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

   //?** DAY **
   // PAR.Day of Month USR = PAR.DATE
   PAR.Day_of_Month_USR = PAR.DATE;

   // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
   PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

   //?CENTURY+YEAR
   CASE;

   // IF PAR.Year Code is Twentieth Century
   IF PAR.Year_Code <= 1999;

   // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

   //?CENTURY+YEAR
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

   ENDIF;

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
   PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

  }

 }

 // LCL.Transaction Date D8# USR = LCL.System Date USR
 LCL.Transaction_Date_D8#_USR = LCL.System_Date_USR;

 //?** YEAR ** (Go Back 2 Years)
 // LCL.Year Code = LCL.Transaction Date D8# USR / CON.10000 *
 LCL.Year_Code = LCL.Transaction_Date_D8#_USR / 10000;

 // LCL.Year Code = LCL.Year Code - CON.2
 LCL.Year_Code = LCL.Year_Code - 2;

 // LCL.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 LCL.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // LCL.Year  NBR USR = LCL.Year Code
 LCL.Year_NBR_USR = LCL.Year_Code;

 // LCL.Year  (Char) USR = CVTVAR(LCL.Year  NBR USR)
 LCL.Year_Char_USR = CVTVAR(LCL.Year_NBR_USR);

 //?** MONTH ** (Default to Jan)
 // LCL.Month (Char) USR = CON.01
 LCL.Month_Char_USR = 01;

 //?** DAY ** (Default to 01)
 // LCL.Day   (Char) USR = CON.01
 LCL.Day_Char_USR = 01;

 //?** Convert Date to CYYMMDD Format **
 // LCL.Date (Char-8) USR = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Month (Char) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_Alpha_YYYY_USR + LCL.Month_Char_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day   (Char) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_Char_USR (*ZERO);

 //?** Convert Date to CYYMMDD Format **
 //?CENTURY+YEAR
 CASE;

 // IF LCL.Year Code is Twentieth Century
 IF LCL.Year_Code <= 1999;

 // LCL.Date (Alpha) USR = CONCAT(CON.0,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = '0' + LCL.Year_Char_USR (*ZERO);

 //?CENTURY+YEAR
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Date (Alpha) USR = CONCAT(CON.1,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = '1' + LCL.Year_Char_USR (*ZERO);

 ENDIF;

 // LCL.Date (Alpha) USR = CONCAT(LCL.Date (Alpha) USR,LCL.Month (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Date_Alpha_USR + LCL.Month_Char_USR (*ZERO);

 // LCL.Date (Alpha) USR = CONCAT(LCL.Date (Alpha) USR,LCL.Day   (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Date_Alpha_USR + LCL.Day_Char_USR (*ZERO);

 // LCL.Date                  USR = CVTVAR(LCL.Date (Alpha) USR)
 LCL.Date_USR = CVTVAR(LCL.Date_Alpha_USR);

 ENDIF;

 //?Send Error Message.
 CASE;

 // IF PAR.Date In  (7,0) USR GT LCL.System Date USR
 IF PAR.Date_In_70_USR > LCL.System_Date_USR;

 //?Cannot be a future date.
 // PAR.Generic Message 80 USR = CONCAT(LCL.Text USR 15,CON.Date cannot be a future,CON.1)
 PAR.Generic_Message_80_USR = LCL.Text_USR_15 + 'Date cannot be a future' (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,CON.date.,CON.1)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + 'date.' (1);

 //?Send Error Message.
 // IF PAR.Date In  (7,0) USR LT LCL.Date                  USR
 IF PAR.Date_In_70_USR < LCL.Date_USR;

 //?Cannot be older than last 2 years ago.
 // PAR.Generic Message 80 USR = CONCAT(LCL.Text USR 15,CON.Date cannot be prior to,CON.1)
 PAR.Generic_Message_80_USR = LCL.Text_USR_15 + 'Date cannot be prior to' (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,LCL.Date (Char-8) USR,CON.1)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + LCL.Date_Char_8_USR (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,CON..,CON.*ZERO)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + '.' (*ZERO);

 ENDIF;

}


CASE;

// IF LCL.Generic Message 80 USR is Entered
IF LCL.Generic_Message_80_USR <> *BLANK;

// Send error message - '&1'
ERROR(USR5086);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Transaction_Date_Code);

QUIT;

ENDIF;

ENDIF;

//?CALC: Screen function fields

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Item Code
AND PGM.*Cursor_field = DTL.Item_Code;

// Call program Sel Item Balance       SL.
CALL PROGRAM(Sel Item Balance       SL) ('ICOLSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Cycle_Count_Code_IB);

ENDIF;

//?USER: Validate relations

//?  Only allow entry to items that have an available status
EXECUTE FUNCTION(Rtv Status/Default     RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152524;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Unit_Cost_Per_Pound);
PARAMETER(WRK.Cost_Update_Pending);
PARAMETER(WRK.Post_GL_Status);
PARAMETER(WRK.Vendor_Item_Whse_Default);
PARAMETER(PAR.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Valid item?
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Valid item?
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?Fill in shift
CASE;

// IF DTL.Shift Number EQ WRK.BLANK
IF DTL.Shift_Number = WRK.BLANK;

// DTL.Shift Number = CON.1
DTL.Shift_Number = 1;

ENDIF;

//?USER: User defined action

// PAR.Update Exception Status = CND.no
PAR.Update_Exception_Status = 'N';

// PAR.USR Item Processed = CND.no
PAR.USR_Item_Processed = 'N';

// PAR.Item Code = DTL.Item Code
PAR.Item_Code = DTL.Item_Code;

// Call program Zzz Enter Physical Cnt EF.
CALL PROGRAM(Zzz Enter Physical Cnt EF) ('PDEPEFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Physical_Start_Date);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.Shift_Number);
PARAMETER(PAR.Update_Exception_Status);

CASE;

// IF PAR.Update Exception Status is blank
IF PAR.Update_Exception_Status = *BLANK;

// Send information message - 'Last item &1 processed.'
MESSAGE(USR0400 *INFO);
MSGPARM(DTL.Item_Code);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Update Exception Status is no
IF PAR.Update_Exception_Status = 'N';

// Send information message - 'Last item &1 not processed.'
MESSAGE(USR0399 *INFO);
MSGPARM(DTL.Item_Code);

ENDIF;

ENDIF;

//?Reset screen for next item if processed successfully
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// DTL.Item Code = CON.*ZERO
DTL.Item_Code = *ZERO;

// DTL.Item Description = CON.*BLANK
DTL.Item_Description = *BLANK;

ENDIF;

