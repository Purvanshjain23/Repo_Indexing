// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUD3DFR
// ?Date: 14.08.2025 Time: 03:50:07
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// Call program VAL Set Inter. Access  XF.
CALL PROGRAM(VAL Set Inter. Access  XF) ('PDSKXFR');
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// LCL.USR Display field = CND.no
LCL.USR_Display_field = 'N';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Exit requested Y/N = CND.Exit after update
LCL.Exit_requested_Y_N = 'N';

// LCL.Item Code Exist USR = CND.Yes
LCL.Item_Code_Exist_USR = 'Y';

// LCL.Ship To Customer SavUsr = CON.*ZERO
LCL.Ship_To_Customer_SavUsr = *ZERO;

//?W84569 DN 12/01/21-Initialize Order Number Saved USR.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Order Number Saved USR = CON.*ZERO
LCL.Order_Number_Saved_USR = *ZERO;

ENDIF;

//?USER: Initialize subfile control

//?First time
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

//?01/06/21 DN S17031-Added Delivery PO Number Field on Screen.
//?02/23/21 DN R17040-Added Customer Ref ID Qualifier & Customer Ref ID.
EXECUTE FUNCTION(Rtv All Hdr by Control RT) TYPE(RTVOBJ) FILE(ECP004)           AC2140646;
PARAMETER(PAR.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(NLL.G5001_ORDER_STATUS_CODE);
PARAMETER(LCL.Order_Date);
PARAMETER(CTL.G5003_PURCHASE_ORDER_NUMB);
PARAMETER(NLL.G6101_CONTACT_FUNCTION_CO);
PARAMETER(NLL.G6102_CONTACT_NAME);
PARAMETER(NLL.G6103_COMM_NUM_QUALIFIER);
PARAMETER(NLL.G6104_COMM_NUMBER);
PARAMETER(NLL.G6105_INQUIRY_REFERENCE);
PARAMETER(NLL.SAC01_ALLOW_OR_CHG_INDICA);
PARAMETER(NLL.SAC02_SERV_PROMO_ALLO_OR);
PARAMETER(NLL.SAC05_$$_AMT_OF_ALLOW_CHG);
PARAMETER(NLL.SAC12_ALLOW_CHG_CODE);
PARAMETER(NLL.SAC15_Description);
PARAMETER(LCL.DTM01_Ship_Date_Qualifier);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(LCL.G6201_DATE_QUALIFIER);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(LCL.G6601_SHIPMENT_METHOD);
PARAMETER(LCL.G6602_METHOD_TYPE_CODE);
PARAMETER(NLL.G6603_PALLET_EXCHANGE_COD);
PARAMETER(NLL.G6604_UNIT_LOAD_OPTION_CO);
PARAMETER(NLL.G6605_ROUTING);
PARAMETER(NLL.G6606_FOB_POINT_CODE);
PARAMETER(CTL.G7601_QUANTITY_ORDERED);
PARAMETER(NLL.G6802_BASIS_FOR_MEASUREME);
PARAMETER(CTL.G7603_WEIGHT_ORDERED);
PARAMETER(NLL.G7608_ORDER_AMOUNT);
PARAMETER(NLL.EDI_RECORD_STATUS);
PARAMETER(LCL.Customer_Ref_ID_Qualifier);
PARAMETER(LCL.Customer_Ref_ID);
PARAMETER(NLL.Internal_Ord_ID_Qualifier);
PARAMETER(NLL.Internal_Order_number);
PARAMETER(NLL.Buyer_ID_Qualifier);
PARAMETER(NLL.Buyer_Identification);
PARAMETER(NLL.Reference_Vs_Nbr_ID_Qual);
PARAMETER(NLL.Ref_Version_Nbr);
PARAMETER(NLL.Revision_Nbr_ID_Qualifier);
PARAMETER(NLL.Revision_Nbr);
PARAMETER(NLL.Ref_ID_Qualifier_01);
PARAMETER(NLL.Reference_01);
PARAMETER(NLL.Ref_ID_Qualifier_02);
PARAMETER(CTL.OH_Order_Number);
PARAMETER(CTL.Delivery_PO_Number);
PARAMETER(CTL.Don_t_Create_Order_Reason);
PARAMETER(NLL.POH_Date_Stamp_received);
PARAMETER(NLL.POH_PO_Purpose_cde_OO);
PARAMETER(CTL.EDI_Trading_Partner_No);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Fill in reason description if there is a reason code
CASE;

// IF CTL.Don't Create Order Reason NE WRK.Blank for 3          USR
IF CTL.Don_t_Create_Order_Reason <> WRK.Blank_for_3_USR;

// CTL.USR Description 22 = Condition name of CTL.Don't Create Order Reason
CTL.USR_Description_22 = RTVCND(CTL.Don_t_Create_Order_Reason);

ENDIF;

// LCL.Requested Delivery Date = CTL.Requested Delivery Date
LCL.Requested_Delivery_Date = CTL.Requested_Delivery_Date;

//?* Get Duns Number for Ship To customer
EXECUTE FUNCTION(Rtv All info by type  RT) TYPE(RTVOBJ) FILE(ECP006)            AC2140467;
PARAMETER(CTL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER('ST');
PARAMETER(LCL.N102_NAME);
PARAMETER(LCL.N103_ID_CODE_QUALIFIER);
PARAMETER(LCL.EDI_Shipto_Duns_Number);
PARAMETER(NLL.N201_NAME);
PARAMETER(NLL.N202_NAME);
PARAMETER(CTL.N301_ADD);
PARAMETER(NLL.N302_ADDRESS);
PARAMETER(CTL.N401_CITY);
PARAMETER(CTL.N402_STATE);
PARAMETER(NLL.N403_POSTAL_CODE);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.EDI Shipto Duns Number is Not Found
IF LCL.EDI_Shipto_Duns_Number = *BLANK;

EXECUTE FUNCTION(Rtv All info by type  RT) TYPE(RTVOBJ) FILE(ECP006)            AC2140467;
PARAMETER(CTL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER('BS');
PARAMETER(LCL.N102_NAME);
PARAMETER(LCL.N103_ID_CODE_QUALIFIER);
PARAMETER(LCL.EDI_Shipto_Duns_Number);
PARAMETER(NLL.N201_NAME);
PARAMETER(NLL.N202_NAME);
PARAMETER(CTL.N301_ADD);
PARAMETER(NLL.N302_ADDRESS);
PARAMETER(CTL.N401_CITY);
PARAMETER(CTL.N402_STATE);
PARAMETER(NLL.N403_POSTAL_CODE);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

CASE;

// IF LCL.EDI Shipto Duns Number is Not Found
IF LCL.EDI_Shipto_Duns_Number = *BLANK;

EXECUTE FUNCTION(Rtv All info by type  RT) TYPE(RTVOBJ) FILE(ECP006)            AC2140467;
PARAMETER(CTL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER('BY');
PARAMETER(LCL.N102_NAME);
PARAMETER(LCL.N103_ID_CODE_QUALIFIER);
PARAMETER(LCL.EDI_Shipto_Duns_Number);
PARAMETER(NLL.N201_NAME);
PARAMETER(NLL.N202_NAME);
PARAMETER(CTL.N301_ADD);
PARAMETER(NLL.N302_ADDRESS);
PARAMETER(CTL.N401_CITY);
PARAMETER(CTL.N402_STATE);
PARAMETER(NLL.N403_POSTAL_CODE);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?* Get Ship To customer for Duns Number
//?11/14/19 DN S15503-Changed to Check for Active Customer.
//?02/22/21 DN R17040-Changed to Check that EDI Trading Partner # matches.
//?   Changed EDI Trading Partner No. Parm from output to input.
EXECUTE FUNCTION(Rtv EDI ST by EDI Duns RT) TYPE(RTVOBJ) FILE(PDNEREP)          AC2140468;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(CTL.EDI_Trading_Partner_No);
PARAMETER(LCL.EDI_Shipto_Duns_Number);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?02/22/21 DN R17040-Old Logic. Commented Out.
 //?***NOTE: Any changes made here, should consider changes to
 //?         'Rtv Sales Rte-1st ShToRT - Customer EXT',
 //?         'PRT BT Cust by DUNS   PO - Customer EXT' &
 //?         'PRT ST Cust by DUNS   PO - Customer EXT' functions as
 //?         well. BOTH functions share the same Business Logic to get
 //?         the correct EDI Ship To Customer #. ***
 //?03/01/21 DN R17040-New Logic: Get 1st Active STC# by DUNS#/Trade Partner.
 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 //?Get Ship To Cust Flag & Bill To Customer #.
 EXECUTE FUNCTION(Rtv ShpTo Info/AR Cst RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1522850;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(NLL.Customer_Name);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(NLL.City);
 PARAMETER(NLL.State_Code);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(NLL.Telephone_Number_FF);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(NLL.Order_Entry_Hold);
 PARAMETER(LCL.Ship_To_Customer_Flag);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Must Be Use as Ship To Customer.
 CASE;

 // IF LCL.Ship To Customer Flag is Allow Use as Ship To Cust
 IF LCL.Ship_To_Customer_Flag = 'Y';

 EXECUTE FUNCTION(Rtv Trading Partner   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC2195397;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Match by Trading Partner for Bill To Customer.
 CASE;

 // IF PAR.EDI Trading Partner No. EQ LCL.EDI Trading Partner No.
 IF PAR.EDI_Trading_Partner_No = LCL.EDI_Trading_Partner_No;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


// CTL.Company Number CDE = CND.Equal to zero
CTL.Company_Number_CDE = *ZERO;

// CTL.Order Type - Sales = CND.Regular Order
CTL.Order_Type_Sales = 'OR';

// CTL.Load Type = CND.Regular
CTL.Load_Type = 'R';

//?* Default Spot Buy to N, *No for now
//?06/11/21 DN W77844-Convert 'N' to 'T'urn.
// CTL.Spot Buy  (Y/N) = CND.Turn
CTL.Spot_Buy_Y_N = 'T';

// LCL.OHE Spot Buy = CND.Turn
LCL.OHE_Spot_Buy = 'T';

// CTL.Price Method Code = CND.Manual
CTL.Price_Method_Code = 'MAN';

// CTL.Date Method Code = CND.Not Entered
CTL.Date_Method_Code = *BLANK;

// CTL.OD Price Type = CND.Negotiated
CTL.OD_Price_Type = 'NEG';

EXECUTE FUNCTION(RTV All fields         RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1478652;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.County_Code);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Telephone_Number_FF);
PARAMETER(NLL.Fax_Number_FF);
PARAMETER(NLL.Alpha_Search);
PARAMETER(NLL.Federal_Tax_Id);
PARAMETER(NLL.New_Customer_Status);
PARAMETER(NLL.SIC_Number);
PARAMETER(NLL.D_B_Number);
PARAMETER(NLL.D_B_Rating);
PARAMETER(NLL.Date_of_D_B_Rating);
PARAMETER(NLL.Credit_Line_Expire_Date);
PARAMETER(CTL.A_R_Customer);
PARAMETER(NLL.Parent_Customer);
PARAMETER(NLL.Credit_Check_AR_Customer);
PARAMETER(NLL.Credit_Check_Parent_Cust);
PARAMETER(NLL.Country_Code);
PARAMETER(NLL.EDI_Invoice_Sts);
PARAMETER(NLL.Order_Entry_Hold);
PARAMETER(NLL.Parent_Credit_Limit);
PARAMETER(NLL.AR_Credit_Limit);
PARAMETER(NLL.Order_Entry_Hold_Date);
PARAMETER(LCL.Ship_To_Customer_Flag);
PARAMETER(NLL.Field_vs_In_House_flag);
PARAMETER(NLL.Email_When_Order_Shipped);
PARAMETER(NLL.Print_Invoice_Sts);
PARAMETER(NLL.Item_Reference_Status);
PARAMETER(NLL.Statement_Print_Frequency);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.Ship To Address Line 2 is Blank
IF CTL.Ship_To_Address_Line_2 = *BLANK;

// CTL.Ship To Address Line 2 = LCL.Address Line 1
CTL.Ship_To_Address_Line_2 = LCL.Address_Line_1;

ENDIF;

EXECUTE FUNCTION(RTV Bill To Cust Name  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2066378;
PARAMETER(CTL.Customer_Name);
PARAMETER(CTL.A_R_Customer);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF PAR.A/R Customer Number EQ DB1.A/R Customer Number
 IF PAR.AR_Customer_Number = DB1.AR_Customer_Number;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?RMC dont default ship to per Alicia  10.23.17
//?09/20/19 DN S15503-Commented Out. Added Logic When to Default STC to 0.
//?09/20/19 DN S15503-Don't Default STC# if Multiple STC# Exist w/Same DUNS.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Diff STC w/Sme DunsRT) TYPE(RTVOBJ) FILE(CABBREP)          AC2175799;
PARAMETER(CTL.A_R_Customer);
PARAMETER(LCL.EDI_Shipto_Duns_Number);
PARAMETER(LCL.Diff_STC#_w_Sme_Duns_Exst);
{
 //?USER: Initialize routine

 // LCL.Count USR = CON.*ZERO
 LCL.Count_USR = *ZERO;

 // PAR.Diff STC# w/Sme Duns Exst = CND.No
 PAR.Diff_STC#_w_Sme_Duns_Exst = 'N';

 //?USER: Process Data record

 //?Set Diff STC# w/Sme Duns Exst=Y if Multiple Diff STC# Exists for Same DUNS
 CASE;

 // IF PAR.A/R Customer Number NE DB1.Ship To Customer
 IF PAR.AR_Customer_Number <> DB1.Ship_To_Customer;

 // AND DB1.Record Status is Active
 AND DB1.Record_Status = 'A';

 //?11/06/19 DN S15503-Select Only Active Customer.
 EXECUTE FUNCTION(Rtv EDI Cust Duns Nbr2 RT) TYPE(RTVOBJ) FILE(PDNEREP)          AC2178493;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.EDI_Cust_Duns_Number);
 {
  //?USER: Initialize routine

  // PAR.EDI Cust Duns Number = CON.*BLANK
  PAR.EDI_Cust_Duns_Number = *BLANK;

  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  // PAR.EDI Cust Duns Number = DB1.EDI Cust Duns Number
  PAR.EDI_Cust_Duns_Number = DB1.EDI_Cust_Duns_Number;

  ENDIF;

 }

 CASE;

 // IF LCL.EDI Cust Duns Number is NE Blank
 IF LCL.EDI_Cust_Duns_Number <> *BLANK;

 // AND PAR.EDI Shipto Duns Number EQ LCL.EDI Cust Duns Number
 AND PAR.EDI_Shipto_Duns_Number = LCL.EDI_Cust_Duns_Number;

 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

 CASE;

 // IF LCL.Count USR is GT 1
 IF LCL.Count_USR > 1;

 // PAR.Diff STC# w/Sme Duns Exst = CND.Yes
 PAR.Diff_STC#_w_Sme_Duns_Exst = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Diff STC# w/Sme Duns Exst is Yes
IF LCL.Diff_STC#_w_Sme_Duns_Exst = 'Y';

// CTL.Customer Number       NBR = CON.*ZERO
CTL.Customer_Number_NBR = *ZERO;

ENDIF;

//?Populate Screen Control Fields if Ship To Customer # is Present.
CASE;

// IF CTL.Customer Number       NBR is not equal 0
IF CTL.Customer_Number_NBR <> *ZERO;

// CTL.Ship To Name = LCL.Ship To Name
CTL.Ship_To_Name = LCL.Ship_To_Name;

// CTL.Ship To Address Line 2 = LCL.Ship To Address Line 2
CTL.Ship_To_Address_Line_2 = LCL.Ship_To_Address_Line_2;

// CTL.Ship To City = LCL.Ship To City
CTL.Ship_To_City = LCL.Ship_To_City;

EXECUTE FUNCTION(Rtv Dflt Whse/Cmp/Sls RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2145709;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Default Shipping Co Sts is Yes
 IF DB1.Default_Shipping_Co_Sts = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


ENDIF;

ENDIF;

//?11/19/21 DN W84569-Get Customer EXT2 Info.
EXECUTE FUNCTION(Rtv Customer More Info RT) TYPE(RTVOBJ) FILE(PUAAREP)          AC2201525;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(CTL.Pallet_Type_NOREF);
PARAMETER(LCL.Cust_Dft_Price_Type);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.OD Pallet Type = CTL.Pallet Type NOREF
CTL.OD_Pallet_Type = CTL.Pallet_Type_NOREF;

//?11/18/21 DN W84569-Override OD Price Type if Entered from Customer EXT2.
CASE;

// IF NOT LCL.Cust Dft Price Type is *NONE
IF ! LCL.Cust_Dft_Price_Type = *BLANK;

// CTL.OD Price Type = LCL.Cust Dft Price Type
CTL.OD_Price_Type = LCL.Cust_Dft_Price_Type;

ENDIF;

EXECUTE FUNCTION(RTV Deliv. Times       RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1252402;
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(LCL.Deliver_after_time);
PARAMETER(LCL.Deliver_before_time);
PARAMETER(LCL.Mileage_To_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Age Information   XF.
CALL PROGRAM(Rtv Age Information   XF) ('PNQCXFR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(LCL.Item_Age_Days_Fresh);
PARAMETER(LCL.Item_Age_Days_Frozen);

// CTL.Requested Delivery Time = CND.8:00 a.m.
CTL.Requested_Delivery_Time = 0800;

//?04/01/20 DN S16395-Override Requested Delivery Time If Exist.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?11/18/21 DN W84569-Comment Out/Move Below. Cust Delv Time takes precedence
//?11/18/21 DN W84569-Use Req Delvy Time f/ Cust EXT2 if Exist Else Use TPC.
CASE;

// IF LCL.Deliver after time is Entered
IF LCL.Deliver_after_time <> *ZERO;

// CTL.Requested Delivery Time = LCL.Deliver after time
CTL.Requested_Delivery_Time = LCL.Deliver_after_time;

//?11/18/21 DN W84569-Use Req Delvy Time f/ Cust EXT2 if Exist Else Use TPC.
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Rqstd Delv Tme Dft RT) TYPE(RTVOBJ) FILE(PBB8REP)          AC2183594;
PARAMETER(CTL.EDI_Trading_Partner_No);
PARAMETER(LCL.Requested_Delv_Time_Dflt);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Not Blank, Convert to Numeric Time.
CASE;

// IF NOT LCL.Requested Delv Time Dflt is Blank
IF ! LCL.Requested_Delv_Time_Dflt = *BLANK;

EXECUTE FUNCTION(Cvt Rqstd Delv Tme Dft IF) TYPE(EXCINTFUN)                     AC2183598;
PARAMETER(LCL.Requested_Delv_Time_Dflt);
PARAMETER(CTL.Requested_Delivery_Time);
{
 //?Execute internal function

 //?Convert Time to Numeric.
 CASE;

 // IF PAR.Requested Delv Time Dflt is Midnight
 IF PAR.Requested_Delv_Time_Dflt = '0';

 // PAR.Requested Delivery Time = CND.Minute after Midnight
 PAR.Requested_Delivery_Time = 0001;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 1 AM
 IF PAR.Requested_Delv_Time_Dflt = '1';

 // PAR.Requested Delivery Time = CND.1 AM
 PAR.Requested_Delivery_Time = 0100;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 2 AM
 IF PAR.Requested_Delv_Time_Dflt = '2';

 // PAR.Requested Delivery Time = CND.2 AM
 PAR.Requested_Delivery_Time = 0200;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 3 AM
 IF PAR.Requested_Delv_Time_Dflt = '3';

 // PAR.Requested Delivery Time = CND.3 AM
 PAR.Requested_Delivery_Time = 0300;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 4 AM
 IF PAR.Requested_Delv_Time_Dflt = '4';

 // PAR.Requested Delivery Time = CND.4 AM
 PAR.Requested_Delivery_Time = 0400;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 5 AM
 IF PAR.Requested_Delv_Time_Dflt = '5';

 // PAR.Requested Delivery Time = CND.5 AM
 PAR.Requested_Delivery_Time = 0500;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 6 AM
 IF PAR.Requested_Delv_Time_Dflt = '6';

 // PAR.Requested Delivery Time = CND.6 AM
 PAR.Requested_Delivery_Time = 0600;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 7 AM
 IF PAR.Requested_Delv_Time_Dflt = '7';

 // PAR.Requested Delivery Time = CND.7 AM
 PAR.Requested_Delivery_Time = 0700;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 8 AM
 IF PAR.Requested_Delv_Time_Dflt = '8';

 // PAR.Requested Delivery Time = CND.8:00 a.m.
 PAR.Requested_Delivery_Time = 0800;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 9 AM
 IF PAR.Requested_Delv_Time_Dflt = '9';

 // PAR.Requested Delivery Time = CND.9 AM
 PAR.Requested_Delivery_Time = 0900;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 10 AM
 IF PAR.Requested_Delv_Time_Dflt = '10';

 // PAR.Requested Delivery Time = CND.10 AM
 PAR.Requested_Delivery_Time = 1000;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 11 AM
 IF PAR.Requested_Delv_Time_Dflt = '11';

 // PAR.Requested Delivery Time = CND.11 AM
 PAR.Requested_Delivery_Time = 1100;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 12 PM
 IF PAR.Requested_Delv_Time_Dflt = '12';

 // PAR.Requested Delivery Time = CND.12 PM
 PAR.Requested_Delivery_Time = 1200;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 1 PM
 IF PAR.Requested_Delv_Time_Dflt = '13';

 // PAR.Requested Delivery Time = CND.1 PM
 PAR.Requested_Delivery_Time = 1300;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 2 PM
 IF PAR.Requested_Delv_Time_Dflt = '14';

 // PAR.Requested Delivery Time = CND.2 PM
 PAR.Requested_Delivery_Time = 1400;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 3 PM
 IF PAR.Requested_Delv_Time_Dflt = '15';

 // PAR.Requested Delivery Time = CND.3 PM
 PAR.Requested_Delivery_Time = 1500;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 4 PM
 IF PAR.Requested_Delv_Time_Dflt = '16';

 // PAR.Requested Delivery Time = CND.4 PM
 PAR.Requested_Delivery_Time = 1600;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 5 PM
 IF PAR.Requested_Delv_Time_Dflt = '17';

 // PAR.Requested Delivery Time = CND.5 PM
 PAR.Requested_Delivery_Time = 1700;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 6 PM
 IF PAR.Requested_Delv_Time_Dflt = '18';

 // PAR.Requested Delivery Time = CND.6 PM
 PAR.Requested_Delivery_Time = 1800;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 7 PM
 IF PAR.Requested_Delv_Time_Dflt = '19';

 // PAR.Requested Delivery Time = CND.7 PM
 PAR.Requested_Delivery_Time = 1900;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 8 PM
 IF PAR.Requested_Delv_Time_Dflt = '20';

 // PAR.Requested Delivery Time = CND.8 PM
 PAR.Requested_Delivery_Time = 2000;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 9 PM
 IF PAR.Requested_Delv_Time_Dflt = '21';

 // PAR.Requested Delivery Time = CND.9 PM
 PAR.Requested_Delivery_Time = 2100;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 10 PM
 IF PAR.Requested_Delv_Time_Dflt = '22';

 // PAR.Requested Delivery Time = CND.10 PM
 PAR.Requested_Delivery_Time = 2200;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 11 PM
 IF PAR.Requested_Delv_Time_Dflt = '23';

 // PAR.Requested Delivery Time = CND.11 PM
 PAR.Requested_Delivery_Time = 2300;

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

//?* Retrieve EDI Bill To information
EXECUTE FUNCTION(Rtv All info by type  RT) TYPE(RTVOBJ) FILE(ECP006)            AC2140467;
PARAMETER(CTL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER('BT');
PARAMETER(LCL.N102_NAME);
PARAMETER(NLL.N103_ID_CODE_QUALIFIER);
PARAMETER(LCL.N104_ID_CODE);
PARAMETER(NLL.N201_NAME);
PARAMETER(NLL.N202_NAME);
PARAMETER(NLL.N301_ADD);
PARAMETER(NLL.N302_ADDRESS);
PARAMETER(NLL.N401_CITY);
PARAMETER(NLL.N402_STATE);
PARAMETER(NLL.N403_POSTAL_CODE);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?01/02/20 DN S15952-Replaced Logic to Populate Shipping Method.
//?Shipping Method
CASE;

// IF LCL.G6602-METHOD TYPE CODE is Customer Pickup
IF LCL.G6602_METHOD_TYPE_CODE = 'H';

// CTL.Shipping Method = CND.Collect Truck
CTL.Shipping_Method = 'CT';

//?Shipping Method
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Shipping Method = CND.Prepaid Truck
CTL.Shipping_Method = 'PT';

ENDIF;

//?Default Requested Delivery Time if it is zeros
CASE;

// IF CTL.Requested Delivery Time is Zero
IF CTL.Requested_Delivery_Time = *ZERO;

// CTL.Requested Delivery Time = CND.8:00 a.m.
CTL.Requested_Delivery_Time = 0800;

ENDIF;

//?If company is not zeros
CASE;

// IF CTL.Company Number CDE is not equal to zero
IF CTL.Company_Number_CDE <> *ZERO;

// Call program RTV Company Name       XF.
CALL PROGRAM(RTV Company Name       XF) ('PNH7XFR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.USR_Company_Name);

// Call program RTV Co. Dflt Int All,O XF.
CALL PROGRAM(RTV Co. Dflt Int All,O XF) ('PMRMXFR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(NLL.Shipping_Method_Dft);
PARAMETER(CTL.Load_Type);
PARAMETER(NLL.LTL_Flag_Dft);
PARAMETER(NLL.Export_Status_Dft);
PARAMETER(NLL.Shrink_Wrap_Dft);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(NLL.Export_Code_Dft);
PARAMETER(LCL.Allow_Mult_Whse_to_Order);
PARAMETER(NLL.Allow_Multi_Export_On_Ord);
PARAMETER(NLL.Slip_Sheet_Dft);
PARAMETER(NLL.Palletize_Dft);
PARAMETER(PAR.Company_Organization);

// Call program RTV Dflt Type for Co  XF.
CALL PROGRAM(RTV Dflt Type for Co  XF) ('POGOXFR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Order_Type_Sales);

// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER('ODPRCTYPRQ');
PARAMETER(LCL.OD_Price_Type_Req_STS_USR);

ENDIF;

//?* Default ctl.Sales Channel for Seaboard only, if blank
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// AND CTL.Type Code is EQ Blank
AND CTL.Type_Code = *BLANK;

// Call program Rtv Dft Sales Channel  XF.
CALL PROGRAM(Rtv Dft Sales Channel  XF) ('PBHPXFR');
PARAMETER(CTL.Salesperson_Code);
PARAMETER(LCL.SEC_Default_Sales_Channel);

// CTL.Type Code = LCL.SEC Default Sales Channel
CTL.Type_Code = LCL.SEC_Default_Sales_Channel;

ENDIF;

//?Get Warehouse type
CASE;

// IF CTL.Warehouse Code NE WRK.BLANK
IF CTL.Warehouse_Code <> WRK.BLANK;

// Call program RTV WhsTyp/Ctrl/LdTyp XF.
CALL PROGRAM(RTV WhsTyp/Ctrl/LdTyp XF) ('PNMRXFR');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.WHS_Default_Load_Type);

ENDIF;

//?display inter-co or third party message
CASE;

// IF CTL.Type Code is Inter Company
IF CTL.Type_Code = 'IC';

// CTL.Customer Type Desc Usr = CON.* Internal Company *
CTL.Customer_Type_Desc_Usr = * Internal Company *;

//?display inter-co or third party message
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Customer Type Desc Usr = CON.* 3rd Party *
CTL.Customer_Type_Desc_Usr = * 3rd Party *;

ENDIF;

//?10/18/21 DN W84569-Populate Shipping Temperature.
CASE;

// IF CTL.Warehouse Code is Not Blanks
IF CTL.Warehouse_Code <> *BLANK;

// Call program RTV Shipping Temp      XF.
CALL PROGRAM(RTV Shipping Temp      XF) ('PDSSXFR');
PARAMETER(WRK.Warehouse_Type);
PARAMETER(CTL.Reefer_Temperature);
PARAMETER(CTL.Shipping_Temp_Code_C_F);

//?Override with Customer Temperature if Entered.
CASE;

// IF CTL.Company Number CDE is not equal to zero
IF CTL.Company_Number_CDE <> *ZERO;

// AND CTL.Customer Number       NBR is not equal 0
AND CTL.Customer_Number_NBR <> *ZERO;

// Call program Rtv Cust Shipping Tmp XF.
CALL PROGRAM(Rtv Cust Shipping Tmp XF) ('POPRXFR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(LCL.Cust_Shipping_Temp);
PARAMETER(LCL.Cust_Shipping_Temp_C_F);
PARAMETER(NLL.Ship_To_Warehouse);
PARAMETER(LCL.Item_Age_Days_Fresh);
PARAMETER(LCL.Item_Age_Days_Frozen);

//?Cust Shipping Temp
CASE;

// IF LCL.Cust Shipping Temp is Entered
IF LCL.Cust_Shipping_Temp <> *ZERO;

// CTL.Reefer Temperature = LCL.Cust Shipping Temp
CTL.Reefer_Temperature = LCL.Cust_Shipping_Temp;

// CTL.Shipping Temp Code C/F = LCL.Cust Shipping Temp C/F
CTL.Shipping_Temp_Code_C_F = LCL.Cust_Shipping_Temp_C_F;

ENDIF;

ENDIF;

ENDIF;

// LCL.Warehouse Code SavUsr = CTL.Warehouse Code
LCL.Warehouse_Code_SavUsr = CTL.Warehouse_Code;

ENDIF;

SET CURSOR;

//?07/08/25 JM S031833-get Order Header Extension
CASE;

// IF CTL.OH Order Number is Not Zeros
IF CTL.OH_Order_Number <> *zeros;

// LCL.Order Number Alpha = SUBSTRING(CTL.OH Order Number,CON.1,CON.7)
LCL.Order_Number_Alpha = SUBSTRING(CTL.OH_Order_Number:1:7);

// LCL.Order Number = CVTVAR(LCL.Order Number Alpha)
LCL.Order_Number = CVTVAR(LCL.Order_Number_Alpha);

// Call program RTV OHE for Ord Entry XF.
CALL PROGRAM(RTV OHE for Ord Entry XF) ('PMDBXFR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(LCL.Order_Number);
PARAMETER(NLL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(NLL.OHE_HPB_RIN_Price);
PARAMETER(CTL.OHE_Spot_Buy);
PARAMETER(NLL.OHE_Override_Type_Code);
PARAMETER(LCL.Delivery_P_O_Number);
PARAMETER(NLL.OHE_Intended_for_ExportCC);
PARAMETER(NLL.OHE_Appt_Confirmation_#);
PARAMETER(NLL.OHE_Appt_Confirmation_Nm);
PARAMETER(NLL.Letter_of_Credit_Number);

ENDIF;

//?07/08/25 JM S031833-Add spot/turn/promo on screen.
CASE;

// IF CTL.OHE Spot Buy is Spot
IF CTL.OHE_Spot_Buy = 'S';

// CTL.Spot Buy  (Y/N) = CND.Spot
CTL.Spot_Buy_Y_N = 'S';

// CTL.Spot Buy Text USR = Condition name of CTL.Spot Buy  (Y/N)
CTL.Spot_Buy_Text_USR = RTVCND(CTL.Spot_Buy_Y_N);

//?07/08/25 JM S031833-Add spot/turn/promo on screen.
// IF CTL.OHE Spot Buy is Turn
IF CTL.OHE_Spot_Buy = 'T';

// CTL.Spot Buy  (Y/N) = CND.Turn
CTL.Spot_Buy_Y_N = 'T';

// CTL.Spot Buy Text USR = Condition name of CTL.Spot Buy  (Y/N)
CTL.Spot_Buy_Text_USR = RTVCND(CTL.Spot_Buy_Y_N);

//?07/08/25 JM S031833-Add spot/turn/promo on screen.
// IF CTL.OHE Spot Buy is Promo
IF CTL.OHE_Spot_Buy = 'P';

// CTL.Spot Buy  (Y/N) = CND.Promo
CTL.Spot_Buy_Y_N = 'P';

// CTL.Spot Buy Text USR = Condition name of CTL.Spot Buy  (Y/N)
CTL.Spot_Buy_Text_USR = RTVCND(CTL.Spot_Buy_Y_N);

//?07/08/25 JM S031833-Add spot/turn/promo on screen.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Spot Buy  (Y/N) = CND.Turn
CTL.Spot_Buy_Y_N = 'T';

// CTL.Spot Buy Text USR = Condition name of CTL.Spot Buy  (Y/N)
CTL.Spot_Buy_Text_USR = RTVCND(CTL.Spot_Buy_Y_N);

ENDIF;

ENDIF;

//?USER: Initialize subfile record from DBF record

MOVE *ALL (To: RCD From: DB1);

// LCL.USR Update Flag = CND.No
LCL.USR_Update_Flag = *BLANK;

// LCL.Item Code Exist USR = CND.Blank
LCL.Item_Code_Exist_USR = *BLANK;

// LCL.CIR Resource No = CON.*BLANK
LCL.CIR_Resource_No = *BLANK;

//?G6805 check
CASE;

// IF DB1.G6805/P108 PROD ID QUAL is Vendor Product
IF DB1.G6805_P108_PROD_ID_QUAL = 'VP';

// OR DB1.G6805/P108 PROD ID QUAL is Vendor Product 2
OR DB1.G6805_P108_PROD_ID_QUAL = 'VN';

// OR DB1.G6805/P108 PROD ID QUAL is Manufacturer Part Number
OR DB1.G6805_P108_PROD_ID_QUAL = 'MG';

// WRK.Text USR 7 = RCD.G6806/P109 PRODUCT ID
WRK.Text_USR_7 = RCD.G6806_P109_PRODUCT_ID;

// Execute function RTV Right Just  7 Alph US.
EXECUTE FUNCTION(RTV Right Just  7 Alph US) TYPE(EXCUSRSRC) ('POM3UFR');
PARAMETER(WRK.Text_USR_7);
PARAMETER(WRK.Text_7_Alpha_Usr);
{
 E                    A1         07  1
 E                    A2         07  1
 C                     MOVEAWUY8TX    A1
 C                     MOVEA*BLANKS   A2
 C                     MOVE 07        C1      20
 C                     MOVE 07        C2      20
 C           C1        DOWGT0
 C           A1,C1     IFNE ' '
 C                     MOVE A1,C1     A2,C2
 C           C2        SUB  1         C2
 C                     END
 C           C1        SUB  1         C1
 C                     END
 C                     MOVEAA2        WUZ3TX
}


// LCL.USR Item Code 7,0 signed = CVTVAR(WRK.Text 7 Alpha Usr)
LCL.USR_Item_Code_70_signed = CVTVAR(WRK.Text_7_Alpha_Usr);

// LCL.Item Code Number 7.0  USR = LCL.USR Item Code 7,0 signed
LCL.Item_Code_Number_7_0_USR = LCL.USR_Item_Code_70_signed;

EXECUTE FUNCTION(Rtv CIR Resource      RT) TYPE(RTVOBJ) FILE(POBIREP)           AC2159017;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(LCL.Item_Code_Number_7_0_USR);
PARAMETER(LCL.CIR_Resource_No);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.CIR Resource No is Entered
IF LCL.CIR_Resource_No <> *BLANK;

// RCD.Item Code Number 7.0  USR = LCL.Item Code Number 7.0  USR
RCD.Item_Code_Number_7_0_USR = LCL.Item_Code_Number_7_0_USR;

// LCL.Item Code Exist USR = CND.Yes
LCL.Item_Code_Exist_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Item Code Number 7.0  USR = CON.*ZERO
LCL.Item_Code_Number_7_0_USR = *ZERO;

ENDIF;

ENDIF;

//?G6807 check
CASE;

// IF LCL.CIR Resource No is Not Entered
IF LCL.CIR_Resource_No = *BLANK;

CASE;

// IF DB1.G6807/PO110 Prod ID Qual is Vendor Product 1
IF DB1.G6807_PO110_Prod_ID_Qual = 'VP';

// OR DB1.G6807/PO110 Prod ID Qual is Vendor Product 2
OR DB1.G6807_PO110_Prod_ID_Qual = 'VN';

// OR DB1.G6807/PO110 Prod ID Qual is Manufacturer Part Number
OR DB1.G6807_PO110_Prod_ID_Qual = 'MG';

// WRK.Text USR 7 = DB1.G6808/PO111 Prod ID
WRK.Text_USR_7 = DB1.G6808_PO111_Prod_ID;

// Execute function RTV Right Just  7 Alph US.
EXECUTE FUNCTION(RTV Right Just  7 Alph US) TYPE(EXCUSRSRC) ('POM3UFR');
PARAMETER(WRK.Text_USR_7);
PARAMETER(WRK.Text_7_Alpha_Usr);
{
 E                    A1         07  1
 E                    A2         07  1
 C                     MOVEAWUY8TX    A1
 C                     MOVEA*BLANKS   A2
 C                     MOVE 07        C1      20
 C                     MOVE 07        C2      20
 C           C1        DOWGT0
 C           A1,C1     IFNE ' '
 C                     MOVE A1,C1     A2,C2
 C           C2        SUB  1         C2
 C                     END
 C           C1        SUB  1         C1
 C                     END
 C                     MOVEAA2        WUZ3TX
}


// LCL.USR Item Code 7,0 signed = CVTVAR(WRK.Text 7 Alpha Usr)
LCL.USR_Item_Code_70_signed = CVTVAR(WRK.Text_7_Alpha_Usr);

// LCL.Item Code Number 7.0  USR = LCL.USR Item Code 7,0 signed
LCL.Item_Code_Number_7_0_USR = LCL.USR_Item_Code_70_signed;

EXECUTE FUNCTION(Rtv CIR Resource      RT) TYPE(RTVOBJ) FILE(POBIREP)           AC2159017;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(LCL.Item_Code_Number_7_0_USR);
PARAMETER(LCL.CIR_Resource_No);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.CIR Resource No is Entered
IF LCL.CIR_Resource_No <> *BLANK;

// RCD.Item Code Number 7.0  USR = LCL.Item Code Number 7.0  USR
RCD.Item_Code_Number_7_0_USR = LCL.Item_Code_Number_7_0_USR;

// LCL.Item Code Exist USR = CND.Yes
LCL.Item_Code_Exist_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Item Code Number 7.0  USR = CON.*ZERO
LCL.Item_Code_Number_7_0_USR = *ZERO;

ENDIF;

ENDIF;

ENDIF;

//?GTIN = UK check
CASE;

// IF LCL.CIR Resource No is Not Entered
IF LCL.CIR_Resource_No = *BLANK;

CASE;

// IF DB1.P106 UPC/GTIN QUAL is GTIN/UPC Code
IF DB1.P106_UPC_GTIN_QUAL = 'UK';

EXECUTE FUNCTION(Rtv CIR Ref item      RT) TYPE(RTVOBJ) FILE(POBIREP)           AC2052817;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(LCL.Item_Code_Number_7_0_USR);
PARAMETER(DB1.G6804_P107_UPC_GTIN_CODE);
PARAMETER(NLL.CIR_UM_Base_Price);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Item Code Number 7.0  USR is Entered
IF LCL.Item_Code_Number_7_0_USR <> *ZERO;

// RCD.Item Code Number 7.0  USR = LCL.Item Code Number 7.0  USR
RCD.Item_Code_Number_7_0_USR = LCL.Item_Code_Number_7_0_USR;

// LCL.CIR Resource No = DB1.G6804/P107 UPC/GTIN CODE
LCL.CIR_Resource_No = DB1.G6804_P107_UPC_GTIN_CODE;

// LCL.Item Code Exist USR = CND.Yes
LCL.Item_Code_Exist_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Catchall
CASE;

// IF LCL.CIR Resource No is Not Entered
IF LCL.CIR_Resource_No = *BLANK;

// LCL.Item Code = CON.*ZERO
LCL.Item_Code = *ZERO;

CASE;

// IF DB1.G6806/P109 PRODUCT ID is Not Blank
IF DB1.G6806_P109_PRODUCT_ID <> *BLANK;

EXECUTE FUNCTION(Rtv CIR Ref item      RT) TYPE(RTVOBJ) FILE(POBIREP)           AC2052817;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(LCL.Item_Code);
PARAMETER(DB1.G6806_P109_PRODUCT_ID);
PARAMETER(NLL.CIR_UM_Base_Price);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Item Code is Entered
IF LCL.Item_Code <> *ZERO;

// RCD.Item Code Number 7.0  USR = LCL.Item Code
RCD.Item_Code_Number_7_0_USR = LCL.Item_Code;

// LCL.Item Code Exist USR = CND.Yes
LCL.Item_Code_Exist_USR = 'Y';

ENDIF;

ENDIF;

CASE;

// IF LCL.Item Code is Not Entered
IF LCL.Item_Code = *ZERO;

CASE;

// IF DB1.G6808/PO111 Prod ID is Entered
IF DB1.G6808_PO111_Prod_ID <> *BLANK;

EXECUTE FUNCTION(Rtv CIR Ref item      RT) TYPE(RTVOBJ) FILE(POBIREP)           AC2052817;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(LCL.Item_Code);
PARAMETER(DB1.G6808_PO111_Prod_ID);
PARAMETER(NLL.CIR_UM_Base_Price);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Item Code is Entered
IF LCL.Item_Code <> *ZERO;

// RCD.Item Code Number 7.0  USR = LCL.Item Code
RCD.Item_Code_Number_7_0_USR = LCL.Item_Code;

// LCL.CIR Resource No = DB1.G6808/PO111 Prod ID
LCL.CIR_Resource_No = DB1.G6808_PO111_Prod_ID;

// LCL.Item Code Exist USR = CND.Yes
LCL.Item_Code_Exist_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If no product id then zero out SBD item number
CASE;

// IF RCD.Item Code Number 7.0  USR is Not Entered
IF RCD.Item_Code_Number_7_0_USR = *ZERO;

// OR LCL.Item Code Exist USR is No
OR LCL.Item_Code_Exist_USR = 'N';

// RCD.Item Code Number 7.0  USR = CND.Not Entered
RCD.Item_Code_Number_7_0_USR = *ZERO;

ENDIF;

//?10/25/17 DN E011229-Overlay SBD Item# if Entered or Update it in ECP005.
CASE;

// IF RCD.POD SBD Item Number is Entered
IF RCD.POD_SBD_Item_Number <> 0;

// RCD.Item Code Number 7.0  USR = RCD.POD SBD Item Number
RCD.Item_Code_Number_7_0_USR = RCD.POD_SBD_Item_Number;

//?10/25/17 DN E011229-Overlay SBD Item# if Entered or Update it in ECP005.
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chg PO Dtl SBD Item #  CH) TYPE(CHGOBJ) FILE(ECP005)           AC2145177;
PARAMETER(RCD.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(RCD.ITEM_SEQUENCE_NUMBER);
PARAMETER(RCD.Item_Code_Number_7_0_USR);

ENDIF;

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?11/19/21 DN W84569-Populate Item Age Days.
CASE;

// IF DB1.POD Item Age Days is Entered
IF DB1.POD_Item_Age_Days <> *ZERO;

// RCD.POD Item Age Days USR = DB1.POD Item Age Days
RCD.POD_Item_Age_Days_USR = DB1.POD_Item_Age_Days;

ENDIF;

CASE;

// IF RCD.POD Item Age Days is Entered
IF RCD.POD_Item_Age_Days <> *ZERO;

// AND CTL.Warehouse Code EQ LCL.Warehouse Code SavUsr
AND CTL.Warehouse_Code = LCL.Warehouse_Code_SavUsr;

// IF *OTHERWISE
IF *OTHERWISE;

//?Use item age days fresh
CASE;

// IF WRK.Warehouse Type is Fresh
IF WRK.Warehouse_Type = 'FR';

// AND LCL.Item Age Days Fresh is Entered
AND LCL.Item_Age_Days_Fresh <> *ZERO;

// RCD.POD Item Age Days USR = LCL.Item Age Days Fresh
RCD.POD_Item_Age_Days_USR = LCL.Item_Age_Days_Fresh;

ENDIF;

//?Use item age days frozen
CASE;

// IF WRK.Warehouse Type is Frozen
IF WRK.Warehouse_Type = 'FZ';

// AND LCL.Item Age Days Frozen is Entered
AND LCL.Item_Age_Days_Frozen <> *ZERO;

// RCD.POD Item Age Days USR = LCL.Item Age Days Frozen
RCD.POD_Item_Age_Days_USR = LCL.Item_Age_Days_Frozen;

ENDIF;

ENDIF;

// LCL.Warehouse Code SavUsr = CTL.Warehouse Code
LCL.Warehouse_Code_SavUsr = CTL.Warehouse_Code;

// PAR.Quantity Ordered = DB1.G6801-QUANTITY ORDERED
PAR.Quantity_Ordered = DB1.G6801_QUANTITY_ORDERED;

// RCD.ITEM SEQUENCE NUMBER = DB1.ITEM SEQUENCE NUMBER
RCD.ITEM_SEQUENCE_NUMBER = DB1.ITEM_SEQUENCE_NUMBER;

//?Seq #
CASE;

// IF RCD.ITEM SEQUENCE NUMBER is Equal zeros
IF RCD.ITEM_SEQUENCE_NUMBER = *ZERO;

// RCD.ITEM SEQUENCE NUMBER = WRK.Order Sequence Number + CON.1
RCD.ITEM_SEQUENCE_NUMBER = WRK.Order_Sequence_Number + 1;

// WRK.Order Sequence Number = RCD.ITEM SEQUENCE NUMBER
WRK.Order_Sequence_Number = RCD.ITEM_SEQUENCE_NUMBER;

ENDIF;

// LCL.USR Update Flag = CND.No
LCL.USR_Update_Flag = *BLANK;

// LCL.USR Display field = CND.no
LCL.USR_Display_field = 'N';

// LCL.USR Display 4 = CND.No
LCL.USR_Display_4 = 'N';

// LCL.Order Secondary Line Seq = CON.1
LCL.Order_Secondary_Line_Seq = 1;

// LCL.Don't Create Order Reason = CTL.Don't Create Order Reason
LCL.Don_t_Create_Order_Reason = CTL.Don_t_Create_Order_Reason;

//?CALC: Subfile control function fields

//?Prompt Control fields
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number CDE
IF PGM.*Cursor_field = CTL.Company_Number_CDE;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number_CDE);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Customer Number       NBR
IF PGM.*Cursor_field = CTL.Customer_Number_NBR;

CASE;

// IF CTL.A/R Customer is not equal to zero
IF CTL.A_R_Customer <> *ZERO;

// Call program SEL Ship To by Bill To SR.
CALL PROGRAM(SEL Ship To by Bill To SR) ('PUEDSRR');
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(CTL.A_R_Customer);

//?11/08/17 DN E011229-Populate Co/Whs/Slsprsn.
CASE;

// IF CTL.Customer Number       NBR is not equal 0
IF CTL.Customer_Number_NBR <> *ZERO;

EXECUTE FUNCTION(Rtv Dflt Whse/Cmp/Sls RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2145709;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Default Shipping Co Sts is Yes
 IF DB1.Default_Shipping_Co_Sts = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Order Type - Sales
IF PGM.*Cursor_field = CTL.Order_Type_Sales;

// Call program SEL Invoice Types      SR.
CALL PROGRAM(SEL Invoice Types      SR) ('PDGVSRR');
PARAMETER(CTL.Order_Type_Sales);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

//?Sel Warehouse
CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// Call program Sel User Appl Whs     SR.
CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Warehouse_Code);

//?Sel Warehouse
// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Salesperson Code
IF PGM.*Cursor_field = CTL.Salesperson_Code;

// Call program SEL Active Salesperson SR.
CALL PROGRAM(SEL Active Salesperson SR) ('CABYSRR');
PARAMETER(CTL.Salesperson_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Price Method Code
IF PGM.*Cursor_field = CTL.Price_Method_Code;

// Call program SEL OMS System Only    SR.
CALL PROGRAM(SEL OMS System Only    SR) ('PDZSSRR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Price_Method_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?Requested Delivery date is required
CASE;

// IF CTL.Requested Delivery Date is not entered
IF CTL.Requested_Delivery_Date = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(CTL.Requested_Delivery_Date);

//?Requested Delivery date is required
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Requested Ship Date GT CTL.Requested Delivery Date
IF CTL.Requested_Ship_Date > CTL.Requested_Delivery_Date;

// Send error message - 'Requested Delivery Date is before Scheduled Ship Date'
ERROR(USR3980);
MSGPARM(CTL.Requested_Delivery_Date);

ENDIF;

ENDIF;

//?11/09/17 DN E011229-Populate Co/Whs/Slsprsn if ShipToCust Manually Entered
CASE;

// IF CTL.Customer Number       NBR is not equal 0
IF CTL.Customer_Number_NBR <> *ZERO;

// AND CTL.Company Number CDE is Equal to zero
AND CTL.Company_Number_CDE = *ZERO;

// AND CTL.Warehouse Code is Blanks
AND CTL.Warehouse_Code = *BLANK;

// AND CTL.Salesperson Code is not entered
AND CTL.Salesperson_Code = *BLANK;

EXECUTE FUNCTION(Rtv Dflt Whse/Cmp/Sls RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2145709;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Default Shipping Co Sts is Yes
 IF DB1.Default_Shipping_Co_Sts = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.Don't Create Order Reason NE LCL.Don't Create Order Reason
IF CTL.Don_t_Create_Order_Reason <> LCL.Don_t_Create_Order_Reason;

// CTL.USR Description 22 = Condition name of CTL.Don't Create Order Reason
CTL.USR_Description_22 = RTVCND(CTL.Don_t_Create_Order_Reason);

// IF *OTHERWISE
IF *OTHERWISE;

//?F4=Prompt.                                  11/23/21 DN W84569
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Pallet Type.
CASE;

// IF PGM.*Cursor field <IS> CTL.Pallet Type NOREF
IF PGM.*Cursor_field = CTL.Pallet_Type_NOREF;

// Call program Sel Pallet Master     SR.
CALL PROGRAM(Sel Pallet Master     SR) ('PUTOSRR');
PARAMETER(LCL.Pallet_Type_NOREF);
PARAMETER('N');

CASE;

// IF LCL.Pallet Type NOREF is Entered
IF LCL.Pallet_Type_NOREF <> *BLANK;

// CTL.Pallet Type NOREF = LCL.Pallet Type NOREF
CTL.Pallet_Type_NOREF = LCL.Pallet_Type_NOREF;

// CTL.OD Pallet Type = CTL.Pallet Type NOREF
CTL.OD_Pallet_Type = CTL.Pallet_Type_NOREF;

ENDIF;

ENDIF;

ENDIF;

//?Validate fields if PO Not Denied
CASE;

// IF CTL.Don't Create Order Reason is Not Created Reasons
IF CTL.Don_t_Create_Order_Reason = 'C'/'D'/'V'/'P'/'R'/'A';

// CTL.USR Description 22 = Condition name of CTL.Don't Create Order Reason
CTL.USR_Description_22 = RTVCND(CTL.Don_t_Create_Order_Reason);

//?Validate fields if PO Not Denied
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.USR Description 22 = CON.*BLANK
CTL.USR_Description_22 = *BLANK;

//?See if customer is Order Entry Hold or not a ship to customer
CASE;

// IF CTL.Customer Number       NBR is not equal 0
IF CTL.Customer_Number_NBR <> *ZERO;

// Call program RTV OE Hold/ShipTo FlagXF.
CALL PROGRAM(RTV OE Hold/ShipTo FlagXF) ('PDNEXFR');
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(WRK.Order_Entry_Hold);
PARAMETER(WRK.Ship_To_Customer_Flag);

//?Order Entry Hold, not a ship to customer
CASE;

// IF WRK.Ship To Customer Flag is No Use as Ship to Cust
IF WRK.Ship_To_Customer_Flag = 'N';

// LCL.Ship To Customer = CTL.Customer Number       NBR
LCL.Ship_To_Customer = CTL.Customer_Number_NBR;

// Send error message - 'Invalid Ship To entered - Ship to Customer Flag is 'N'o.'
ERROR(USR2482);
MSGPARM(LCL.Ship_To_Customer);

//?Order Entry Hold, not a ship to customer
// IF WRK.Order Entry Hold is New Order Hold
IF WRK.Order_Entry_Hold = 'Y';

// Send error message - 'Customer is held for new orders. Cannot process transaction.'
ERROR(USR1025);

ENDIF;

ENDIF;

CASE;

// IF CTL.Company Number CDE is Equal to zero
IF CTL.Company_Number_CDE = *ZERO;

// LCL.Company Number = CVTVAR(CTL.Company Number CDE)
LCL.Company_Number = CVTVAR(CTL.Company_Number_CDE);

// Send error message - 'Company number must be entered.'
ERROR(USR2384);
MSGPARM(LCL.Company_Number);

ENDIF;

// Call program RTV Cust Ordering Dflt2XF.
CALL PROGRAM(RTV Cust Ordering Dflt2XF) ('PNS9XFR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(NLL.Terms_Code);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.P_O_Required_Flag);
PARAMETER(NLL.Deliver_after_time);
PARAMETER(CTL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(NLL.Outside_Warehouse_Flag);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
PARAMETER(WRK.Record_Found_USR);

//?Validate Co/Cust exists
CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// CTL.Warehouse Code = WRK.Warehouse Code
CTL.Warehouse_Code = WRK.Warehouse_Code;

ENDIF;

//?Validate Co/Cust exists
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Don't Create Order Reason is Not Created Reasons
IF CTL.Don_t_Create_Order_Reason = 'C'/'D'/'V'/'P'/'R'/'A';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number = CVTVAR(CTL.Company Number CDE)
LCL.Company_Number = CVTVAR(CTL.Company_Number_CDE);

// Send error message - 'Company Customer not found.'
ERROR(USR1007);
MSGPARM(LCL.Company_Number);

ENDIF;

ENDIF;

CASE;

// IF CTL.Warehouse Code is Blanks
IF CTL.Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

//?Requested Ship date is required
CASE;

// IF CTL.Requested Ship Date is not entered
IF CTL.Requested_Ship_Date = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(CTL.Requested_Ship_Date);

ENDIF;

ENDIF;

//?If company is not zeros, get company name
CASE;

// IF CTL.Company Number CDE is not equal to zero
IF CTL.Company_Number_CDE <> *ZERO;

// Call program RTV Company Name       XF.
CALL PROGRAM(RTV Company Name       XF) ('PNH7XFR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.USR_Company_Name);

ENDIF;

//?If Ship To Customer is not zeros, get customer name
CASE;

// IF CTL.Customer Number       NBR is not equal 0
IF CTL.Customer_Number_NBR <> *ZERO;

EXECUTE FUNCTION(RTV STNm,Add,A/R,STflgRT) TYPE(RTVOBJ) FILE(CABBREP)           AC2037996;
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(LCL.Address_Line_1);
PARAMETER(CTL.Ship_To_Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(CTL.Ship_To_City);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Country_Code);
PARAMETER(NLL.Ship_To_Customer_Flag);
PARAMETER(NLL.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.Ship To Address Line 2 is Blank
IF CTL.Ship_To_Address_Line_2 = *BLANK;

// CTL.Ship To Address Line 2 = LCL.Address Line 1
CTL.Ship_To_Address_Line_2 = LCL.Address_Line_1;

ENDIF;

ENDIF;

//?Reload subfile to derive item codes with new customer #
CASE;

// IF CTL.Customer Number       NBR NE LCL.Ship To Customer SavUsr
IF CTL.Customer_Number_NBR <> LCL.Ship_To_Customer_SavUsr;

// LCL.Ship To Customer SavUsr = CTL.Customer Number       NBR
LCL.Ship_To_Customer_SavUsr = CTL.Customer_Number_NBR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Default Order Type if it is blank
CASE;

// IF CTL.Order Type - Sales is Not Entered
IF CTL.Order_Type_Sales = *BLANK;

// CTL.Order Type - Sales = CND.Regular Order
CTL.Order_Type_Sales = 'OR';

ENDIF;

//?W77844 DN 06/12/21-Convert Old Spot Buy Flag Value to New Val: S, T, P
//?* Validate Spot Buy               W77844 DN 06/12/21-Use New Values.
CASE;

// IF CTL.Spot Buy  (Y/N) is Spot
IF CTL.Spot_Buy_Y_N = 'S';

// LCL.OHE Spot Buy = CND.Spot
LCL.OHE_Spot_Buy = 'S';

// CTL.Spot Buy Text USR = Condition name of CTL.Spot Buy  (Y/N)
CTL.Spot_Buy_Text_USR = RTVCND(CTL.Spot_Buy_Y_N);

//?* Validate Spot Buy               W77844 DN 06/12/21-Use New Values.
// IF CTL.Spot Buy  (Y/N) is Turn
IF CTL.Spot_Buy_Y_N = 'T';

// LCL.OHE Spot Buy = CND.Turn
LCL.OHE_Spot_Buy = 'T';

// CTL.Spot Buy Text USR = Condition name of CTL.Spot Buy  (Y/N)
CTL.Spot_Buy_Text_USR = RTVCND(CTL.Spot_Buy_Y_N);

//?* Validate Spot Buy               W77844 DN 06/12/21-Use New Values.
// IF CTL.Spot Buy  (Y/N) is Promo
IF CTL.Spot_Buy_Y_N = 'P';

// LCL.OHE Spot Buy = CND.Promo
LCL.OHE_Spot_Buy = 'P';

// CTL.Spot Buy Text USR = Condition name of CTL.Spot Buy  (Y/N)
CTL.Spot_Buy_Text_USR = RTVCND(CTL.Spot_Buy_Y_N);

//?* Validate Spot Buy               W77844 DN 06/12/21-Use New Values.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// LCL.OHE Spot Buy = CND.*Blank
LCL.OHE_Spot_Buy = *BLANK;

// Send error message - 'Spot Buy S/T/P required'
ERROR(USR4747);
MSGPARM(CTL.Spot_Buy_Y_N);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.OHE Spot Buy = CND.Turn
LCL.OHE_Spot_Buy = 'T';

// CTL.Spot Buy  (Y/N) = CND.Turn
CTL.Spot_Buy_Y_N = 'T';

ENDIF;

ENDIF;

//?* Default Sales Route from salesperson code
CASE;

// IF LCL.Sales Route Code is not entered
IF LCL.Sales_Route_Code = *BLANK;

CASE;

// IF LCL.Ord Ent Default Sls Rte is Yes
IF LCL.Ord_Ent_Default_Sls_Rte = 'Y';

// LCL.Sales Route Code = LCL.Salesperson Code
LCL.Sales_Route_Code = LCL.Salesperson_Code;

ENDIF;

ENDIF;

//?display inter-co or third party message
CASE;

// IF CTL.Type Code is Inter Company
IF CTL.Type_Code = 'IC';

// CTL.Customer Type Desc Usr = CON.* Internal Company *
CTL.Customer_Type_Desc_Usr = * Internal Company *;

//?display inter-co or third party message
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Customer Type Desc Usr = CON.* 3rd Party *
CTL.Customer_Type_Desc_Usr = * 3rd Party *;

ENDIF;

//?Populate salesperson if blank
CASE;

// IF CTL.Salesperson Code is not entered
IF CTL.Salesperson_Code = *BLANK;

// Call program RTV Salesman Code      XF.
CALL PROGRAM(RTV Salesman Code      XF) ('PNIAXFR');
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(CTL.Salesperson_Code);

ENDIF;

// Call program RTV Sls Route by Slsp  XF.
CALL PROGRAM(RTV Sls Route by Slsp  XF) ('PNH6XFR');
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(LCL.Manager_Level_Code);
PARAMETER(LCL.VP_Level_Code);

//?Populate warehouse code if blank
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// CTL.Warehouse Code = WRK.Warehouse Code
CTL.Warehouse_Code = WRK.Warehouse_Code;

ENDIF;

EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(PAR.Company_Number);
 PARAMETER('FZNCHLTME');
 PARAMETER(PAR.System_Value_Numeric);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Fresh Chilling Time = PAR.System Value Numeric
 PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

 ENDIF;

}


CASE;

// IF CTL.Warehouse Code NE LCL.Warehouse Code SavUsr
IF CTL.Warehouse_Code <> LCL.Warehouse_Code_SavUsr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Warehouse Code SavUsr = CTL.Warehouse Code
LCL.Warehouse_Code_SavUsr = CTL.Warehouse_Code;

ENDIF;

//?Requested Delivery Date is retrieved from EDI PO Header
CASE;

// IF CTL.Requested Delivery Date is not entered
IF CTL.Requested_Delivery_Date = *ZERO;

// CTL.Requested Delivery Date = PAR.G6202-DELIVERY DATE
CTL.Requested_Delivery_Date = PAR.G6202_DELIVERY_DATE;

ENDIF;

//?rtv temp - Only update CTL temp if zeros
CASE;

// IF CTL.Reefer Temperature is Not Entered
IF CTL.Reefer_Temperature = *ZERO;

// Call program RTV Shipping Temp      XF.
CALL PROGRAM(RTV Shipping Temp      XF) ('PDSSXFR');
PARAMETER(WRK.Warehouse_Type);
PARAMETER(CTL.Reefer_Temperature);
PARAMETER(CTL.Shipping_Temp_Code_C_F);

//?Override with Customer Temperature if Entered. W84569 DN 10/28/21.
CASE;

// IF CTL.Company Number CDE is not equal to zero
IF CTL.Company_Number_CDE <> *ZERO;

// AND CTL.Customer Number       NBR is not equal 0
AND CTL.Customer_Number_NBR <> *ZERO;

// Call program Rtv Cust Shipping Tmp XF.
CALL PROGRAM(Rtv Cust Shipping Tmp XF) ('POPRXFR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(LCL.Cust_Shipping_Temp);
PARAMETER(LCL.Cust_Shipping_Temp_C_F);
PARAMETER(NLL.Ship_To_Warehouse);
PARAMETER(NLL.Item_Age_Days_Fresh);
PARAMETER(NLL.Item_Age_Days_Frozen);

//?Cust Shipping Temp
CASE;

// IF LCL.Cust Shipping Temp is Entered
IF LCL.Cust_Shipping_Temp <> *ZERO;

// CTL.Reefer Temperature = LCL.Cust Shipping Temp
CTL.Reefer_Temperature = LCL.Cust_Shipping_Temp;

// CTL.Shipping Temp Code C/F = LCL.Cust Shipping Temp C/F
CTL.Shipping_Temp_Code_C_F = LCL.Cust_Shipping_Temp_C_F;

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF CTL.Shipping Temp Code C/F is *ALL values
IF CTL.Shipping_Temp_Code_C_F = 'C'/'F';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Shipping temp code is required.'
ERROR(USR5058);
MSGPARM(CTL.Shipping_Temp_Code_C_F);

ENDIF;

//?Validate temperature 1.19.18
CASE;

// IF CTL.Reefer Temperature is LE 100-
IF CTL.Reefer_Temperature <= -100;

// OR CTL.Reefer Temperature is GE 100
OR CTL.Reefer_Temperature >= 100;

// Send error message - 'Temperature must be < 100 degrees.'
ERROR(USR4960);
MSGPARM(CTL.Reefer_Temperature);

ENDIF;

//?Populate delivery time if blank
CASE;

// IF CTL.Requested Delivery Time is Zero
IF CTL.Requested_Delivery_Time = *ZERO;

EXECUTE FUNCTION(RTV Deliv. Times       RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1252402;
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(LCL.Deliver_after_time);
PARAMETER(LCL.Deliver_before_time);
PARAMETER(LCL.Mileage_To_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Requested Delivery Time = CND.8:00 a.m.
CTL.Requested_Delivery_Time = 0800;

CASE;

// IF LCL.Deliver after time is Entered
IF LCL.Deliver_after_time <> *ZERO;

// CTL.Requested Delivery Time = LCL.Deliver after time
CTL.Requested_Delivery_Time = LCL.Deliver_after_time;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Rqstd Delv Tme Dft RT) TYPE(RTVOBJ) FILE(PBB8REP)          AC2183594;
PARAMETER(CTL.EDI_Trading_Partner_No);
PARAMETER(LCL.Requested_Delv_Time_Dflt);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Not Blank, Convert to Numeric Time.
CASE;

// IF NOT LCL.Requested Delv Time Dflt is Blank
IF ! LCL.Requested_Delv_Time_Dflt = *BLANK;

EXECUTE FUNCTION(Cvt Rqstd Delv Tme Dft IF) TYPE(EXCINTFUN)                     AC2183598;
PARAMETER(LCL.Requested_Delv_Time_Dflt);
PARAMETER(CTL.Requested_Delivery_Time);
{
 //?Execute internal function

 //?Convert Time to Numeric.
 CASE;

 // IF PAR.Requested Delv Time Dflt is Midnight
 IF PAR.Requested_Delv_Time_Dflt = '0';

 // PAR.Requested Delivery Time = CND.Minute after Midnight
 PAR.Requested_Delivery_Time = 0001;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 1 AM
 IF PAR.Requested_Delv_Time_Dflt = '1';

 // PAR.Requested Delivery Time = CND.1 AM
 PAR.Requested_Delivery_Time = 0100;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 2 AM
 IF PAR.Requested_Delv_Time_Dflt = '2';

 // PAR.Requested Delivery Time = CND.2 AM
 PAR.Requested_Delivery_Time = 0200;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 3 AM
 IF PAR.Requested_Delv_Time_Dflt = '3';

 // PAR.Requested Delivery Time = CND.3 AM
 PAR.Requested_Delivery_Time = 0300;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 4 AM
 IF PAR.Requested_Delv_Time_Dflt = '4';

 // PAR.Requested Delivery Time = CND.4 AM
 PAR.Requested_Delivery_Time = 0400;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 5 AM
 IF PAR.Requested_Delv_Time_Dflt = '5';

 // PAR.Requested Delivery Time = CND.5 AM
 PAR.Requested_Delivery_Time = 0500;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 6 AM
 IF PAR.Requested_Delv_Time_Dflt = '6';

 // PAR.Requested Delivery Time = CND.6 AM
 PAR.Requested_Delivery_Time = 0600;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 7 AM
 IF PAR.Requested_Delv_Time_Dflt = '7';

 // PAR.Requested Delivery Time = CND.7 AM
 PAR.Requested_Delivery_Time = 0700;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 8 AM
 IF PAR.Requested_Delv_Time_Dflt = '8';

 // PAR.Requested Delivery Time = CND.8:00 a.m.
 PAR.Requested_Delivery_Time = 0800;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 9 AM
 IF PAR.Requested_Delv_Time_Dflt = '9';

 // PAR.Requested Delivery Time = CND.9 AM
 PAR.Requested_Delivery_Time = 0900;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 10 AM
 IF PAR.Requested_Delv_Time_Dflt = '10';

 // PAR.Requested Delivery Time = CND.10 AM
 PAR.Requested_Delivery_Time = 1000;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 11 AM
 IF PAR.Requested_Delv_Time_Dflt = '11';

 // PAR.Requested Delivery Time = CND.11 AM
 PAR.Requested_Delivery_Time = 1100;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 12 PM
 IF PAR.Requested_Delv_Time_Dflt = '12';

 // PAR.Requested Delivery Time = CND.12 PM
 PAR.Requested_Delivery_Time = 1200;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 1 PM
 IF PAR.Requested_Delv_Time_Dflt = '13';

 // PAR.Requested Delivery Time = CND.1 PM
 PAR.Requested_Delivery_Time = 1300;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 2 PM
 IF PAR.Requested_Delv_Time_Dflt = '14';

 // PAR.Requested Delivery Time = CND.2 PM
 PAR.Requested_Delivery_Time = 1400;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 3 PM
 IF PAR.Requested_Delv_Time_Dflt = '15';

 // PAR.Requested Delivery Time = CND.3 PM
 PAR.Requested_Delivery_Time = 1500;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 4 PM
 IF PAR.Requested_Delv_Time_Dflt = '16';

 // PAR.Requested Delivery Time = CND.4 PM
 PAR.Requested_Delivery_Time = 1600;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 5 PM
 IF PAR.Requested_Delv_Time_Dflt = '17';

 // PAR.Requested Delivery Time = CND.5 PM
 PAR.Requested_Delivery_Time = 1700;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 6 PM
 IF PAR.Requested_Delv_Time_Dflt = '18';

 // PAR.Requested Delivery Time = CND.6 PM
 PAR.Requested_Delivery_Time = 1800;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 7 PM
 IF PAR.Requested_Delv_Time_Dflt = '19';

 // PAR.Requested Delivery Time = CND.7 PM
 PAR.Requested_Delivery_Time = 1900;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 8 PM
 IF PAR.Requested_Delv_Time_Dflt = '20';

 // PAR.Requested Delivery Time = CND.8 PM
 PAR.Requested_Delivery_Time = 2000;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 9 PM
 IF PAR.Requested_Delv_Time_Dflt = '21';

 // PAR.Requested Delivery Time = CND.9 PM
 PAR.Requested_Delivery_Time = 2100;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 10 PM
 IF PAR.Requested_Delv_Time_Dflt = '22';

 // PAR.Requested Delivery Time = CND.10 PM
 PAR.Requested_Delivery_Time = 2200;

 //?Convert Time to Numeric.
 // IF PAR.Requested Delv Time Dflt is 11 PM
 IF PAR.Requested_Delv_Time_Dflt = '23';

 // PAR.Requested Delivery Time = CND.11 PM
 PAR.Requested_Delivery_Time = 2300;

 ENDIF;

}


ENDIF;

ENDIF;

//?Edit Delivery Time
CASE;

// IF CTL.Requested Delivery Time is GT 24 Hour Day
IF CTL.Requested_Delivery_Time > 2400;

// Send error message - 'Time Field GT 24 Hours.  Correct time and re-enter.'
ERROR(USR1712);
MSGPARM(CTL.Requested_Delivery_Time);

//?Edit Delivery Time
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Remainder= CTL.Requested Delivery Time\CON.100
WRK.USR_Remainder = MODULO(CTL.Requested_Delivery_Time 100 1);

CASE;

// IF WRK.USR Remainder is GT 59 Minutes
IF WRK.USR_Remainder > 59;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(CTL.Requested_Delivery_Time);

ENDIF;

ENDIF;

ENDIF;

// Call program Val App Whs Itm Acs   XF.
CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.WHS_Item_Access_Sts_USR);

//?VAL: Warehouse Access
CASE;

// IF LCL.WHS/Item Access Sts USR is Access Denied
IF LCL.WHS_Item_Access_Sts_USR = 'D';

// Send error message - 'Access Denied to &1 for Warehouse &2.'
ERROR(USR2776);
MSGPARM(JOB.*USER);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

//?Validate Type code  (Sales Channel)
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

//?Validate Type code
CASE;

// IF CTL.Type Code is Entered
IF CTL.Type_Code <> *BLANK;

// Call program Val Type Codes         XF.
CALL PROGRAM(Val Type Codes         XF) ('PBAKXFR');
PARAMETER(CTL.Type_Code);
PARAMETER(WRK.Return_Code_Usr);

CASE;

// IF WRK.Return Code Usr is *Record does not exist
IF WRK.Return_Code_Usr = 'Y2U0005';

// Send error message - 'Type Code &1 Not Found'
ERROR(USR3388);
MSGPARM(CTL.Type_Code);

ENDIF;

//?Validate Type code
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Sales Channel not found.'
ERROR(USR4832);

ENDIF;

ENDIF;

//?Validate - load type cannot be blanks
CASE;

// IF CTL.Load Type is Blank
IF CTL.Load_Type = *BLANK;

// Send error message - 'Load Type cannnot be BLANK.'
ERROR(USR1813);
MSGPARM(CTL.Load_Type);

//?Validate - load type cannot be blanks
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Load Type Desc = Condition name of CTL.Load Type
CTL.Load_Type_Desc = RTVCND(CTL.Load_Type);

ENDIF;

//?11/08/17 DN E011229-Additional Validation.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Bypass Co/Whs/AgeDay is Required Logic if Deny PO Reason is Entered.
CASE;

// IF NOT CTL.Don't Create Order Reason is *Blanks
IF ! CTL.Don_t_Create_Order_Reason = *BLANK;

//?Bypass Co/Whs/AgeDay is Required Logic if Deny PO Reason is Entered.
// IF *OTHERWISE
IF *OTHERWISE;

//?Deny PO Reason originally entered then was blank out so don't validate.
CASE;

// IF NOT LCL.Don't Create Order Reason is *Blanks
IF ! LCL.Don_t_Create_Order_Reason = *BLANK;

//?Deny PO Reason originally entered then was blank out so don't validate.
// IF *OTHERWISE
IF *OTHERWISE;

//?Throw Error Msg: Company Number is required.
CASE;

// IF CTL.Company Number CDE is Equal to zero
IF CTL.Company_Number_CDE = *ZERO;

// LCL.Company Number = CVTVAR(CTL.Company Number CDE)
LCL.Company_Number = CVTVAR(CTL.Company_Number_CDE);

// Send error message - 'Company Number is Required'
ERROR(USR5033);
MSGPARM(CTL.Company_Number_CDE);

ENDIF;

//?Throw Error Msg: Warehouse is required.
CASE;

// IF CTL.Warehouse Code is Blanks
IF CTL.Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

//?Throw Error Msg: Salesperson is required.
CASE;

// IF CTL.Salesperson Code is not entered
IF CTL.Salesperson_Code = *BLANK;

// Send error message - 'Salesperson is required.'
ERROR(USR5059);
MSGPARM(CTL.Salesperson_Code);

ENDIF;

ENDIF;

ENDIF;

//?Validate Warehouse Code.
CASE;

// IF CTL.Warehouse Code is Not Blanks
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val ShipCo/Whs Active RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2145777;
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 ENDIF;

}


//?01/07/20 DN S15952-Force SFLNXTCHG to Validate Fresh/Frozen Items.
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// LCL.Company Number = CVTVAR(CTL.Company Number CDE)
LCL.Company_Number = CVTVAR(CTL.Company_Number_CDE);

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_Code);
MSGPARM(LCL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

ENDIF;

ENDIF;

//?Validate Salesperson Code.
CASE;

// IF CTL.Salesperson Code is entered
IF CTL.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(Val Salesperson Exist RT) TYPE(RTVOBJ) FILE(CAAPREP)           AC1995516;
PARAMETER(CTL.Salesperson_Code);
PARAMETER(NLL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(CTL.Salesperson_Code);

ENDIF;

ENDIF;

//?Validate Price Method Code.
CASE;

// IF CTL.Price Method Code is Not Blank
IF CTL.Price_Method_Code <> *BLANK;

EXECUTE FUNCTION(VAL Price Meth Exists  RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1365282;
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(NLL.Price_Method_Description);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Price Method invalid'
ERROR(USR1957);
MSGPARM(CTL.Price_Method_Code);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?If Deny PO Reason is Entered, Bypass Validation Else Continue Validation.
CASE;

// IF NOT CTL.Don't Create Order Reason is *Blanks
IF ! CTL.Don_t_Create_Order_Reason = *BLANK;

//?If entered, bypass validation & do NOT allow update of ECP005.
//?Do Not Allow To 'Add to Order'.
CASE;

// IF RCD.Status - Y or N is Exclude
IF RCD.Status_Y_or_N = 'X';

// LCL.Generic Message 80 USR = CONCAT(CON.Deny PO Reason is entered,CON.. Add to Order not,CON.*ZER
LCL.Generic_Message_80_USR = 'Deny PO Reason is entered' + '. Add to Order not' (0);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.allowed.,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'allowed.' (1);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

//?If Deny PO Reason is Entered, Bypass Validation Else Continue Validation.
// IF *OTHERWISE
IF *OTHERWISE;

//?Allow F4 on SBD Item #.
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Item Code Number 7.0  USR
AND PGM.*Cursor_field = RCD.Item_Code_Number_7_0_USR;

// AND CTL.Company Number CDE is not equal to zero
AND CTL.Company_Number_CDE <> *ZERO;

// Call program SEL Actv Finished Good SR.
CALL PROGRAM(SEL Actv Finished Good SR) ('PDNHSRR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(RCD.Item_Code_Number_7_0_USR);

ENDIF;

//?Validate SBD Item #.
CASE;

// IF RCD.Item Code Number 7.0  USR is Entered
IF RCD.Item_Code_Number_7_0_USR <> *ZERO;

EXECUTE FUNCTION(Rtv FG Item Exists    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC2145132;
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(RCD.Item_Code_Number_7_0_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Item Not Found, Throw Error Message.
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?Do NOT update ECP005.
// Send error message - 'Item not found'
ERROR(USR0374);
MSGPARM(RCD.Item_Code_Number_7_0_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?Validate Item is Fresh/Frozen.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Sold 100% Frozen  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC2085833;
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(RCD.Item_Code_Number_7_0_USR);
PARAMETER(LCL.Sold_100_Percent_Frozen);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Item Code = RCD.Item Code Number 7.0  USR
LCL.Item_Code = RCD.Item_Code_Number_7_0_USR;

//?Fresh item and FZ warehouse
CASE;

// IF LCL.Warehouse Type is Fresh
IF LCL.Warehouse_Type = 'FR';

// AND LCL.Sold 100% Frozen is yes
AND LCL.Sold_100_Percent_Frozen = 'Y';

//?01/07/20 DN S15952-Send As Info Msg Instead. Commented out QUIT.
// Send information message - 'Warning: Item &1 is sold 100% frozen.'
MESSAGE(USR5161 *INFO);
MSGPARM(LCL.Item_Code);

ENDIF;

//?FZ    item and FR warehouse
CASE;

// IF LCL.Warehouse Type is Frozen
IF LCL.Warehouse_Type = 'FZ';

// AND LCL.Sold 100% Frozen is Not Yes
AND LCL.Sold_100_Percent_Frozen = *BLANK/'N';

//?01/07/20 DN S15952-Send As Info Msg Instead. Commented out QUIT.
// Send information message - 'Warning: Item &1 not sold 100% frozen.'
MESSAGE(USR5160 *INFO);
MSGPARM(LCL.Item_Code);

ENDIF;

ENDIF;

ENDIF;

//?Validate Add to Order Flag.
CASE;

// IF RCD.Status - Y or N is Exclude
IF RCD.Status_Y_or_N = 'X';

// AND RCD.Item Code Number 7.0  USR is Not Entered
AND RCD.Item_Code_Number_7_0_USR = *ZERO;

// LCL.Generic Message 80 USR = CONCAT(CON.Item Number must be enter,CON.ed.,CON.*ZERO)
LCL.Generic_Message_80_USR = 'Item Number must be enter' + 'ed.' (0);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

//?Validate Add to Order Flag.
// IF RCD.Status - Y or N is Exclude
IF RCD.Status_Y_or_N = 'X';

// AND RCD.POD Item Age Days USR is Not Entered
AND RCD.POD_Item_Age_Days_USR = *ZERO;

// LCL.Generic Message 80 USR = CONCAT(CON.Item Age Days must be ent,CON.ered.,CON.*ZERO)
LCL.Generic_Message_80_USR = 'Item Age Days must be ent' + 'ered.' (0);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?Validate Pallet Type.                         11/22/21 DN W84569
CASE;

// IF CTL.Pallet Type NOREF is Entered
IF CTL.Pallet_Type_NOREF <> *BLANK;

EXECUTE FUNCTION(Chk Pallet Typ Exists RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198492;
PARAMETER(CTL.Pallet_Type_NOREF);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Pallet Type not found.'
ERROR(USR5214);
MSGPARM(CTL.Pallet_Type_NOREF);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.OD Pallet Type = CTL.Pallet Type NOREF
CTL.OD_Pallet_Type = CTL.Pallet_Type_NOREF;

ENDIF;

ENDIF;

CASE;

// IF NOT RCD.POD Added to an Order is Added to Order
IF ! RCD.POD_Added_to_an_Order = 'Y';

//?RMC - validate days if not already on an order 11/9/20
CASE;

// IF CTL.Warehouse Code NE LCL.Warehouse Code SavUsr
IF CTL.Warehouse_Code <> LCL.Warehouse_Code_SavUsr;

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?11/19/21 DN W84569-Populate Item Age Days.
CASE;

// IF DB1.POD Item Age Days is Entered
IF DB1.POD_Item_Age_Days <> *ZERO;

// RCD.POD Item Age Days USR = DB1.POD Item Age Days
RCD.POD_Item_Age_Days_USR = DB1.POD_Item_Age_Days;

//?11/19/21 DN W84569-Populate Item Age Days.
// IF *OTHERWISE
IF *OTHERWISE;

//?Use item age days fresh
CASE;

// IF WRK.Warehouse Type is Fresh
IF WRK.Warehouse_Type = 'FR';

// AND LCL.Item Age Days Fresh is Entered
AND LCL.Item_Age_Days_Fresh <> *ZERO;

// RCD.POD Item Age Days USR = LCL.Item Age Days Fresh
RCD.POD_Item_Age_Days_USR = LCL.Item_Age_Days_Fresh;

ENDIF;

//?Use item age days frozen
CASE;

// IF WRK.Warehouse Type is Frozen
IF WRK.Warehouse_Type = 'FZ';

// AND LCL.Item Age Days Frozen is Entered
AND LCL.Item_Age_Days_Frozen <> *ZERO;

// RCD.POD Item Age Days USR = LCL.Item Age Days Frozen
RCD.POD_Item_Age_Days_USR = LCL.Item_Age_Days_Frozen;

ENDIF;

ENDIF;

//?01/18/18 DN R12342-Validate Item Age Days.
CASE;

// IF RCD.POD Item Age Days USR is Entered
IF RCD.POD_Item_Age_Days_USR <> *ZERO;

//?Cannot be negative.
CASE;

// IF RCD.POD Item Age Days USR is LT 0
IF RCD.POD_Item_Age_Days_USR < *ZERO;

// LCL.Generic Message 80 USR = CONCAT(CON.Item Age Days cannot be n,CON.egative.,CON.*ZERO)
LCL.Generic_Message_80_USR = 'Item Age Days cannot be n' + 'egative.' (0);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?Snippet codes below copied from 'Val Age Information   IF' & modified.
// Call program Val Age information   XF.
CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
PARAMETER(RCD.Item_Code_Number_7_0_USR);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Error_Flag_USR);
PARAMETER(WRK.Error_Reason_Descript_1);
PARAMETER(WRK.Error_Reason_Descript_2);
PARAMETER(WRK.Error_Reason_Descript_3);
PARAMETER(WRK.Error_Reason_Descript_4);
PARAMETER(WRK.Error_Reason_Descript_5);
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(CTL.Requested_Ship_Date);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(RCD.POD_Item_Age_Days_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Production_AgeDte_Fr);
PARAMETER(WRK.Production_AgeDte_To);

//?Verify if message should be sent if validation is required
CASE;

// IF WRK.Error Flag            USR is Yes
IF WRK.Error_Flag_USR = 'Y';

//?message 1 Product is shipped before product is made
CASE;

// IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

//?R12342-DN-Note that this is the only error that can potentially be called.
//?       Error message 2-5 will NOT happen.
// Send error message - 'Prd Date is invalid for requested delivery date'
ERROR(USR4307);
MSGPARM(CTL.Requested_Delivery_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?message 2 Either Days or override date but not both
CASE;

// IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

// Send error message - 'Enter Age Days or Dates'
ERROR(USR4304);
MSGPARM(RCD.POD_Item_Age_Days_USR);
MSGPARM(WRK.Production_Ovr_AgeDte_Fr);
MSGPARM(WRK.Production_Ovr_AgeDte_To);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?message 3 With Chill Days Either Days or Override Dates required
CASE;

// IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

// Send error message - 'Override Dates is after shipped date'
ERROR(USR4305);
MSGPARM(RCD.POD_Item_Age_Days_USR);
MSGPARM(WRK.Production_Ovr_AgeDte_Fr);
MSGPARM(WRK.Production_Ovr_AgeDte_To);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?message 4 From date is > then SHIP DATE
CASE;

// IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

// Send error message - 'Override Dates is after shipped date'
ERROR(USR4305);
MSGPARM(RCD.POD_Item_Age_Days_USR);
MSGPARM(WRK.Production_Ovr_AgeDte_Fr);
MSGPARM(WRK.Production_Ovr_AgeDte_To);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?message 5 To date is > then SHIP DATE
CASE;

// IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

// Send error message - 'Override Dates is after shipped date'
ERROR(USR4305);
MSGPARM(RCD.POD_Item_Age_Days_USR);
MSGPARM(WRK.Production_Ovr_AgeDte_Fr);
MSGPARM(WRK.Production_Ovr_AgeDte_To);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

ENDIF;

// LCL.Warehouse Code SavUsr = CTL.Warehouse Code
LCL.Warehouse_Code_SavUsr = CTL.Warehouse_Code;

ENDIF;

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

//?Validate F6=Create Auto Order.
CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

EXECUTE FUNCTION(Val EDI PO Dtl-selctd RT) TYPE(RTVOBJ) FILE(ECP005)            AC2145045;
PARAMETER(CTL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(LCL.Status_Flag_13_Y_N);
{
 //?USER: Initialize routine

 // PAR.Status Flag 13 Y/N = CND.No
 PAR.Status_Flag_13_Y_N = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.POD Added to an Order is Selected for Add to Ord
 IF DB1.POD_Added_to_an_Order = 'X';

 // PAR.Status Flag 13 Y/N = CND.Yes
 PAR.Status_Flag_13_Y_N = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Status Flag 13 Y/N is No
IF LCL.Status_Flag_13_Y_N = 'N';

// Send error message - 'Item code must be selected. Cannot create order.'
ERROR(USR5057);

ENDIF;

ENDIF;

//?Validate F20=Create/Edit/Post Order.          11/19/21 DN W84569
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

EXECUTE FUNCTION(Val EDI PO Dtl-selctd RT) TYPE(RTVOBJ) FILE(ECP005)            AC2145045;
PARAMETER(CTL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(LCL.Status_Flag_13_Y_N);
{
 //?USER: Initialize routine

 // PAR.Status Flag 13 Y/N = CND.No
 PAR.Status_Flag_13_Y_N = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.POD Added to an Order is Selected for Add to Ord
 IF DB1.POD_Added_to_an_Order = 'X';

 // PAR.Status Flag 13 Y/N = CND.Yes
 PAR.Status_Flag_13_Y_N = 'Y';

 QUIT;

 ENDIF;

}


//?New Items Selected?
CASE;

// IF LCL.Status Flag 13 Y/N is No
IF LCL.Status_Flag_13_Y_N = 'N';

//?OMS Order Number Created in Same Session?
CASE;

// IF LCL.Order Number Saved USR is Not equal to zeros
IF LCL.Order_Number_Saved_USR <> *ZERO;

//?Allow to only call Order Entry process PDSQXFR.
//?OMS Order Number Created in Same Session?
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item code must be selected. Cannot create order.'
ERROR(USR5057);

QUIT;

ENDIF;

//?New Items Selected?
// IF *OTHERWISE
IF *OTHERWISE;

//?Allow to create Order & call Order Entry process PDSQXFR.
// LCL.Order Number Saved USR = CON.*ZERO
LCL.Order_Number_Saved_USR = *ZERO;

ENDIF;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?X=Selected for Order.The PO order dtl will be chg to Y after it is added
CASE;

// IF RCD.POD Added to an Order is Added to Order
IF RCD.POD_Added_to_an_Order = 'Y';

//?X=Selected for Order.The PO order dtl will be chg to Y after it is added
// IF *OTHERWISE
IF *OTHERWISE;

//?01/02/20 DN S15952-Save 'Add to Order' Value.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?01/02/20 DN S15952-Accum CTL Qty/Wgt Ordered for Lines 'Add to Order X'.
CASE;

// IF RCD.Status - Y or N NE RCD.Add to Order USR
IF RCD.Status_Y_or_N <> RCD.Add_to_Order_USR;

//?Add.
CASE;

// IF RCD.Status - Y or N is Exclude
IF RCD.Status_Y_or_N = 'X';

EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(RCD.Item_Code_Number_7_0_USR);
PARAMETER(LCL.Unit_Weight);
PARAMETER(NLL.Quality_Level);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Quantity Ordered Tot USR = PAR.Quantity Ordered Tot USR + RCD.G6801-QUANTITY ORDERED
PAR.Quantity_Ordered_Tot_USR = PAR.Quantity_Ordered_Tot_USR + RCD.G6801_QUANTITY_ORDERED;

// LCL.Weight Ordered Tot Usr = RCD.G6801-QUANTITY ORDERED * LCL.Unit Weight *
LCL.Weight_Ordered_Tot_Usr = RCD.G6801_QUANTITY_ORDERED * LCL.Unit_Weight;

// PAR.Weight Ordered Tot Usr = PAR.Weight Ordered Tot Usr + LCL.Weight Ordered Tot Usr
PAR.Weight_Ordered_Tot_Usr = PAR.Weight_Ordered_Tot_Usr + LCL.Weight_Ordered_Tot_Usr;

ENDIF;

//?Subtract.
CASE;

// IF RCD.Status - Y or N is blank
IF RCD.Status_Y_or_N = *BLANK;

EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(RCD.Item_Code_Number_7_0_USR);
PARAMETER(LCL.Unit_Weight);
PARAMETER(NLL.Quality_Level);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Quantity Ordered Tot USR = PAR.Quantity Ordered Tot USR - RCD.G6801-QUANTITY ORDERED
PAR.Quantity_Ordered_Tot_USR = PAR.Quantity_Ordered_Tot_USR - RCD.G6801_QUANTITY_ORDERED;

// LCL.Weight Ordered Tot Usr = RCD.G6801-QUANTITY ORDERED * LCL.Unit Weight *
LCL.Weight_Ordered_Tot_Usr = RCD.G6801_QUANTITY_ORDERED * LCL.Unit_Weight;

// PAR.Weight Ordered Tot Usr = PAR.Weight Ordered Tot Usr - LCL.Weight Ordered Tot Usr
PAR.Weight_Ordered_Tot_Usr = PAR.Weight_Ordered_Tot_Usr - LCL.Weight_Ordered_Tot_Usr;

ENDIF;

ENDIF;

// RCD.Add to Order USR = RCD.Status - Y or N
RCD.Add_to_Order_USR = RCD.Status_Y_or_N;

ENDIF;

//?In case Item# was originally blank, set flag to allow F6=Create.
// LCL.Item Code Exist USR = CND.Yes
LCL.Item_Code_Exist_USR = 'Y';

//?Update Added to an Order Status, SBD Item # & Age Days.
//?01/19/19 DN R12342-Added POD Item Age Days for update.
EXECUTE FUNCTION(Chg AddtoOrd/Itm#/AgeD CH) TYPE(CHGOBJ) FILE(ECP005)           AC2145317;
PARAMETER(RCD.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(RCD.ITEM_SEQUENCE_NUMBER);
PARAMETER(RCD.POD_Item_Age_Days_USR);
PARAMETER(RCD.Status_Y_or_N);
PARAMETER(RCD.Item_Code_Number_7_0_USR);

ENDIF;

//?USER: Final processing (Post-confirm)

//?01/07/20 DN S15952-Update CTL Qty/Wgt Ordered.
// CTL.Quantity Ordered Tot USR = PAR.Quantity Ordered Tot USR
CTL.Quantity_Ordered_Tot_USR = PAR.Quantity_Ordered_Tot_USR;

// CTL.Weight Ordered Tot Usr = PAR.Weight Ordered Tot Usr
CTL.Weight_Ordered_Tot_Usr = PAR.Weight_Ordered_Tot_Usr;

//?USER: Process command keys

//?F3=Exit with or without Update
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PGM.*Return code = CND.*No value selected
PGM.*Return_code = 'Y2U0016';

RETURN;

ENDIF;

//?F6/F20=Create/Post EDI Auto Order             11/11/21 DN W84569
CASE;

// IF LCL.Item Code Exist USR is No
IF LCL.Item_Code_Exist_USR = 'N';

// AND CTL.Don't Create Order Reason is *Blanks
AND CTL.Don_t_Create_Order_Reason = *BLANK;

// AND CTL.*CMD key is CF06
AND CTL.*CMD_key = '06';

//?DO NOT create the order
// PGM.*Return code = CND.Invalid Item Numbers
PGM.*Return_code = 'USR5036';

RETURN;

//?F6/F20=Create/Post EDI Auto Order             11/11/21 DN W84569
// IF CTL.Don't Create Order Reason NE LCL.Don't Create Order Reason
IF CTL.Don_t_Create_Order_Reason <> LCL.Don_t_Create_Order_Reason;

//?Do NOT create the order. Update Deny PO Reason in EDI PO Header.
EXECUTE FUNCTION(Chg don't crt ord sts CH) TYPE(CHGOBJ) FILE(ECP004)            AC2142803;
PARAMETER(CTL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(CTL.Don_t_Create_Order_Reason);

// LCL.Don't Create Order Reason = CTL.Don't Create Order Reason
LCL.Don_t_Create_Order_Reason = CTL.Don_t_Create_Order_Reason;

//?F6/F20=Create/Post EDI Auto Order             11/11/21 DN W84569
// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

// OR CTL.*CMD key is CF20
OR CTL.*CMD_key = '20';

//?Create Order.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number Pass   USR = CTL.Company Number CDE
LCL.Company_Number_Pass_USR = CTL.Company_Number_CDE;

// PAR.Customer Number Pass  USR = CTL.Customer Number       NBR
PAR.Customer_Number_Pass_USR = CTL.Customer_Number_NBR;

// PAR.Date 1          PASS  USR = CTL.Requested Ship Date
PAR.Date_1_PASS_USR = CTL.Requested_Ship_Date;

// PAR.Date 2          PASS  USR = CTL.Requested Ship Date
PAR.Date_2_PASS_USR = CTL.Requested_Ship_Date;

// PAR.From Date Pass        USR = CTL.Requested Delivery Date
PAR.From_Date_Pass_USR = CTL.Requested_Delivery_Date;

// PAR.Thru Date Pass        USR = LCL.Order Date
PAR.Thru_Date_Pass_USR = LCL.Order_Date;

// WRK.Company Number = CTL.Company Number CDE
WRK.Company_Number = CTL.Company_Number_CDE;

// LCL.User Original Entry = JOB.*USER
LCL.User_Original_Entry = JOB.*USER;

// LCL.ITEM SEQUENCE NUMBER = CND.Equal one
LCL.ITEM_SEQUENCE_NUMBER = 1;

//?02/23/21 DN R17040-Set Customer Ref ID if 'IA' Else Set as Blank.
CASE;

// IF LCL.Customer Ref ID Qualifier is IA
IF LCL.Customer_Ref_ID_Qualifier = 'IA';

//?Use LCL.Customer Ref ID to populate OHE Customer Vendor f/PO.
//?02/23/21 DN R17040-Set Customer Ref ID if 'IA' Else Set as Blank.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Customer Ref ID = CON.*BLANK
LCL.Customer_Ref_ID = *BLANK;

ENDIF;

//?06/14/21 DN R17040-Passed in OHE Spot Buy as Input Parm.
//?11/22/21 DN W84569-Passed in OD Pallet Type as Input Parm.
//?W84569 DN 12/01/21-If F6 or F20 & OMS Order Not Created Yet Then Crt Order
CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

// OR CTL.*CMD key is CF20
OR ( CTL.*CMD_key = '20';

// AND LCL.Order Number Saved USR is Equal to zeros
AND LCL.Order_Number_Saved_USR = *ZERO );

// Call program CRT EDI Auto Ords Only XF.
CALL PROGRAM(CRT EDI Auto Ords Only XF) ('PUD0XFR');
PARAMETER(CTL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(LCL.ITEM_SEQUENCE_NUMBER);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(CTL.G5003_PURCHASE_ORDER_NUMB);
PARAMETER(LCL.Customer_Ref_ID);
PARAMETER(CTL.Delivery_PO_Number);
PARAMETER(CTL.EDI_Trading_Partner_No);
PARAMETER(LCL.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(LCL.Order_Number_1_PASS_USR);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(JOB.*USER);
PARAMETER(PAR.Use_PO_Price);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.A_R_Customer);
PARAMETER(CTL.G5003_PURCHASE_ORDER_NUMB);
PARAMETER(PAR.Terms_Code);
PARAMETER(JOB.*USER);
PARAMETER(CTL.Requested_Delivery_Time);
PARAMETER(CTL.Shipping_Method);
PARAMETER(CTL.Reefer_Temperature);
PARAMETER(CTL.Load_Type);
PARAMETER(LCL.Load_Plan_Order);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(JOB.*USER);
PARAMETER(CTL.OD_Pallet_Type);
PARAMETER(CTL.OD_Price_Type);
PARAMETER(PAR.Next_Order_Number);
PARAMETER(LCL.OHE_Spot_Buy);

//?* Convert order# from 7.0 to 30 alpha
// LCL.Order Number = PAR.Next Order Number
LCL.Order_Number = PAR.Next_Order_Number;

//?W84569 DN 12/01/21-Save Last Order Number Created.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Order Number Saved USR = LCL.Order Number
LCL.Order_Number_Saved_USR = LCL.Order_Number;

ENDIF;

// LCL.Order Number Alpha = CVTVAR(LCL.Order Number)
LCL.Order_Number_Alpha = CVTVAR(LCL.Order_Number);

// LCL.OH Order Number = LCL.Order Number Alpha
LCL.OH_Order_Number = LCL.Order_Number_Alpha;

//?If 1 order already created, put a + on the line
CASE;

// IF CTL.OH Order Number is Not Blanks
IF CTL.OH_Order_Number <> *BLANK;

// LCL.OH Order Number = CONCAT(CTL.OH Order Number,CON.+,CON.2)
LCL.OH_Order_Number = CTL.OH_Order_Number + '+' (2);

ENDIF;

EXECUTE FUNCTION(Chg EDI OH Order Nbr  CH) TYPE(CHGOBJ) FILE(ECP004)            AC2140710;
PARAMETER(CTL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(LCL.OH_Order_Number);

//?01/09/20 DN S15952-Clear CTL Qty/Wgt Ordered & Accumulators.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Quantity Ordered Tot USR = CON.*ZERO
CTL.Quantity_Ordered_Tot_USR = *ZERO;

// PAR.Quantity Ordered Tot USR = CON.*ZERO
PAR.Quantity_Ordered_Tot_USR = *ZERO;

// CTL.Weight Ordered Tot Usr = CON.*ZERO
CTL.Weight_Ordered_Tot_Usr = *ZERO;

// PAR.Weight Ordered Tot Usr = CON.*ZERO
PAR.Weight_Ordered_Tot_Usr = *ZERO;

ENDIF;

// CTL.OH Order Number = LCL.OH Order Number
CTL.OH_Order_Number = LCL.OH_Order_Number;

ENDIF;

//?W84569 DN 12/01/21-Call Edit Order Entry Only for Same Session.
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

// AND LCL.Order Number Saved USR is Not equal to zeros
AND LCL.Order_Number_Saved_USR <> *ZERO;

//?PDSQXFR is called from multiple Order Entry points.
// LCL.Process Control = CND.Process Change
LCL.Process_Control = 'C';

// Call program EDT Order Entry Home   XF.
CALL PROGRAM(EDT Order Entry Home   XF) ('PDSQXFR');
PARAMETER(LCL.Company_Number_Pass_USR);
PARAMETER(LCL.Order_Number_Saved_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(LCL.Process_Control);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Return code = CND.Update Occurred
PGM.*Return_code = 'UPDOCC';

//?* Return company Number to calling program for acknowledgements
// PAR.Company Number Pass   USR = CTL.Company Number CDE
PAR.Company_Number_Pass_USR = CTL.Company_Number_CDE;

ENDIF;

ENDIF;

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

