      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO890
      * TITLE:       Specify Print Options
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     01/07/08
      *
      *
      * FUNCTION: Allows user to enter print options.
      *
      * NOTE:    This is a pop-up window program.  Please note that in window
      *          programs the record format containing the window definition
      *          must be written first.  So, we write the error message subfile
      *          control record first followed by the command line record format.
      *          This is opposite of the non-window programs.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Frod890    cf   e             workstn infds(iofeed)
      *
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      * Parms
      *
     D xxoutq          s                   like(d1outq)
     D xxerror         s              1
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('ROMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      *  LDA
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   move      scrn1         routne
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     ro890ec
     C                   write     ro890k1
     C                   exfmt     ro890r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
     C                   other
      *
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $proc1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
      * Validate:
      *  1) Outq/Printer
      *  2) Hold
      *  3) Save
      *  4) Copy
      *
     C     $edit1        begsr
      *
     C                   exsr      $outq
     C                   exsr      $hold
     C                   exsr      $save
     C                   exsr      $copy
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Outq/Printer
      *----------------------------------------------------------------
      *
     C     $outq         begsr
      *
     C                   select
     C                   when      d1outq = *blank
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'RO09001'     mgid(e)
     C                   endif
     C                   other
      *
     C                   call      'RO890CL'
     C                   parm      d1outq        xxoutq
     C                   parm      *blank        xxerror
      *
     C                   if        xxerror = yes
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'RO09009'     mgid(e)
     C                   endif
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Hold
      *----------------------------------------------------------------
      *
     C     $hold         begsr
      *
     C                   select
     C                   when      d1hold = '*YES'
     C                   when      d1hold = '*NO '
     C                   other
      *
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'RO09007'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Save
      *------------------------------------------------------------------------------------
      *
     C     $save         begsr
      *
     C                   select
     C                   when      d1save = '*YES'
     C                   when      d1save = '*NO '
     C                   other
      *
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'RO09007'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Copy number
      *------------------------------------------------------------------------------------
      *
     C     $copy         begsr
      *
     C                   select
     C                   when      d1copy = 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'RO09001'     mgid(e)
     C                   endif
      *
     C                   when      d1copy < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'RO09000'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * Populate LDA fields.
      *
     C                   move      d1outq        ldoutq
     C                   move      d1hold        ldhold
     C                   move      d1save        ldsave
     C                   z-add     d1copy        ldcopy
      *
     C                   out       lda
      *
     C                   eval      routne = exit
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   None
      *
      * Key lists
      *   None
      *
      * Populate screen fields with values from LDA.
      *
     C                   move      ldoutq        d1outq
     C                   move      ldhold        d1hold
     C                   move      ldsave        d1save
     C                   z-add     ldcopy        d1copy
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * This window logic keeps the screen in the calling program from being
      * cleared.
      *
     C                   write     assume
      *
     C                   endsr
      /eject
