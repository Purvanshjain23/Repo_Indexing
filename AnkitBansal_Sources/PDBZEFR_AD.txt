// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDBZEFR
// ?Date: 14.08.2025 Time: 03:27:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.Error Status = CND.no
WRK.Error_Status = 'N';

//?USER: Initialize subfile header

EXECUTE FUNCTION(Val Total Pop %       RT) TYPE(RTVOBJ) FILE(PDIZREP)           AC1302638;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Cutout_Matrix_Code);
PARAMETER(CTL.Effective_Month_Day);
PARAMETER(CTL.Min_Carcass_Weight);
PARAMETER(CTL.Max_Carcass_Weight);
PARAMETER(CTL.Population_Total_USR);
{
 //?USER: Initialize routine

 // PAR.Population % Total USR = CON.*ZERO
 PAR.Population_Total_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Population % Total USR = PAR.Population % Total USR + DB1.Population Percent
 PAR.Population_Total_USR = PAR.Population_Total_USR + DB1.Population_Percent;

}


// CTL.Condition Desc. 1  USR = Condition name of PAR.Cutout Matrix Type
CTL.Condition_Desc_1_USR = RTVCND(PAR.Cutout_Matrix_Type);

//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Val % of Carc Tot     RT) TYPE(RTVOBJ) FILE(PDI4REP)           AC1302594;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Lean_Percent);
PARAMETER(RCD.Percent_of_Carcass);
{
 //?USER: Initialize routine

 // PAR.Percent of Carcass = CON.*ZERO
 PAR.Percent_of_Carcass = *ZERO;

 //?USER: Process Data record

 // PAR.Percent of Carcass = PAR.Percent of Carcass + DB1.Percent of Carcass
 PAR.Percent_of_Carcass = PAR.Percent_of_Carcass + DB1.Percent_of_Carcass;

}


//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?USER: Validate subfile record fields

//?Validate Average Weight
CASE;

// IF RCD.Population Percent is GT Zero
IF RCD.Population_Percent > *ZERO;

CASE;

// IF RCD.Average Weight LT RCD.Min Carcass Weight
IF RCD.Average_Cold_Wgt < RCD.Min_Carcass_Weight;

// OR RCD.Average Weight GT RCD.Max Carcass Weight
OR RCD.Average_Cold_Wgt > RCD.Max_Carcass_Weight;

// Send error message - 'Average Weight is not within the Carcass Weight Range.'
ERROR(USR1743);
MSGPARM(RCD.Average_Cold_Wgt);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val % of Carc Tot     RT) TYPE(RTVOBJ) FILE(PDI4REP)           AC1302594;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Lean_Percent);
PARAMETER(RCD.Percent_of_Carcass);
{
 //?USER: Initialize routine

 // PAR.Percent of Carcass = CON.*ZERO
 PAR.Percent_of_Carcass = *ZERO;

 //?USER: Process Data record

 // PAR.Percent of Carcass = PAR.Percent of Carcass + DB1.Percent of Carcass
 PAR.Percent_of_Carcass = PAR.Percent_of_Carcass + DB1.Percent_of_Carcass;

}


//?USER: Validate subfile record relations

//?Copy Items
CASE;

// IF RCD.*SFLSEL is *Copy request
IF RCD.*SFLSEL = '3'/'3';

// Call program Zzz Distribution      PV.
CALL PROGRAM(Zzz Distribution      PV) ('PDB0PVR');
PARAMETER(CTL.Cutout_Matrix_Desc);
PARAMETER(CTL.Name);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Lean_Percent);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Edit Items
CASE;

// IF RCD.*SFLSEL is Edit Opt7
IF RCD.*SFLSEL = '7'/'7';

// Call program Edt Cutout Items      EF.
CALL PROGRAM(Edt Cutout Items      EF) ('PDBVEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Lean_Percent);
PARAMETER(CTL.Name);
PARAMETER(CTL.Cutout_Matrix_Desc);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Distribution      CR) TYPE(CRTOBJ) FILE(PDIZREP)           AC1254596;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Lean_Percent);
PARAMETER(RCD.Average_Cold_Wgt);
PARAMETER(RCD.Population_Percent);
PARAMETER(RCD.Average_Lean_Percent);
PARAMETER(RCD.Average_Backfat_Inches);
PARAMETER(RCD.Average_Loin_Eye_Depth);
PARAMETER(RCD.Population_Head);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del Distribution      IF) TYPE(EXCINTFUN) FILE(PDIZREP)        AC1255934;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Lean_Percent);
{
 //?Execute internal function

 //?*Delete Items
 EXECUTE FUNCTION(Del Cutout Item       RT) TYPE(RTVOBJ) FILE(PDI4REP)           AC1255921;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(PAR.Min_Carcass_Weight);
 PARAMETER(PAR.Max_Carcass_Weight);
 PARAMETER(PAR.Lean_Percent);
 {
  //?USER: Process Data record

  //?*Delete Item
  EXECUTE FUNCTION(DLT Cutout Item        DL) TYPE(DLTOBJ) FILE(PDI4REP)          AC1255834;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Cutout_Matrix_Code);
  PARAMETER(DB1.Effective_Month_Day);
  PARAMETER(DB1.Min_Carcass_Weight);
  PARAMETER(DB1.Max_Carcass_Weight);
  PARAMETER(DB1.Lean_Percent);
  PARAMETER(DB1.Item_Code);
 }

 //?*Delete Distribution
 EXECUTE FUNCTION(DLT Distribution       DL) TYPE(DLTOBJ) FILE(PDIZREP)          AC1254598;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(PAR.Min_Carcass_Weight);
 PARAMETER(PAR.Max_Carcass_Weight);
 PARAMETER(PAR.Lean_Percent);
}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Distribution      CH) TYPE(CHGOBJ) FILE(PDIZREP)           AC1254597;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Lean_Percent);
PARAMETER(RCD.Average_Cold_Wgt);
PARAMETER(RCD.Population_Percent);
PARAMETER(RCD.Average_Lean_Percent);
PARAMETER(RCD.Average_Backfat_Inches);
PARAMETER(RCD.Average_Loin_Eye_Depth);
PARAMETER(RCD.Population_Head);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing after Data read

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

EXECUTE FUNCTION(Val Total Pop %       RT) TYPE(RTVOBJ) FILE(PDIZREP)           AC1302638;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Cutout_Matrix_Code);
PARAMETER(CTL.Effective_Month_Day);
PARAMETER(CTL.Min_Carcass_Weight);
PARAMETER(CTL.Max_Carcass_Weight);
PARAMETER(CTL.Population_Total_USR);
{
 //?USER: Initialize routine

 // PAR.Population % Total USR = CON.*ZERO
 PAR.Population_Total_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Population % Total USR = PAR.Population % Total USR + DB1.Population Percent
 PAR.Population_Total_USR = PAR.Population_Total_USR + DB1.Population_Percent;

}


