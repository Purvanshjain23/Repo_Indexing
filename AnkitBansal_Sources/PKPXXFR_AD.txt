// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKPXXFR
// ?Date: 14.08.2025 Time: 02:50:09
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification history
DO;

//?RMC 5/20/21 SDN440 E1 -- Check TRK and PD Vnd Addresses for zero too
//?11/04/20 ISE H16853-Recompiled due to change in Buy Order Number
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
//?- Send Payment Edit Balancing Error messages to ESEND Distribution
//?  List instead of using Halcyon.
//?E15076 JJH 06/04/19 - Send Error Messages to PRKDEVxxx
//?- 360 use HALCYON Broadcast Group PRKDEV360, Test PRKDEV360T
//?- 440 use HALCYON Broadcast Group PRKDEV440, Test PRKDEV440T
//?- 960 use HALCYON Broadcast Group PRKDEV960, Test PRKDEV960T
//?- 961 use HALCYON Broadcast Group PRKDEV960, Test PRKDEV960T
//?E14821 JBB 1/09/2019 - Print Payment Errors Report
//?- Added new function that checks for Pricing Errors in step 5.
//?- If pricing errors found, print Pricing Errors report.
//?E13016 JJH 05/03/18 - Update BOL Live Wgt Received
//?- These modifcations are occurring in Step 2
//?- This is a new program that will be ran at the end of Step 2 in
//?  in the Producer Payment Edit.
//?- This function will sum up the TH Live Weight for Market Hogs and
//?  populate this into the BOL Live Wgt Received.
//?- Company Value HPEBOLLVWT is Company specific, and initially this
//?  program will only update 440.
//?- Compnay Value HPEBOLLVSC is Source Code specific, and initially
//?  we will only be updating Source Code = SO.
//?- This program is being ran so that the Freight Allocation which
//?  occurs in Step 3 of the Producer Payment Edit will be able to
//?  correctly allocate the Freight Amount if their are multiple
//?  Tattoo, like a Hold Over.
//?E12054 JJH 11/10/17 - Producer Payment Messages
//?- Include the Buy Order, Load, and Tattoo on the MPLUS messages
//?  that are generated during the Edit Payment.
//?- Output parms from: PayEdt Chk For Errors RT - Tattoo Header
//?- Messages are in Step 1: Validate if all Tattoo's are balanced.
//?E9904 JBB 09/06/17 - TF2 Push Payment Processing
//?- After the SNDPGR call, reset PGM.*Return Code to Record Found.
//?E9904 JBB 08/14/17 - TF2 Push Payment Processing
//?- Send email to user running the payment edit.  Uncomment the
//?  SNDPGR calls and pass in user ID.
//?E7519 JJH 06/26/17 - M3Supplier/Producer/Trk/Loc
//?- Step 4  Trucker Posting/Create Trucker Vouchers
//?  - Determine if there are any Truckers with a missing M3 Supplier
//?  - If no Truckers with missing M3 Supplier, do not print the Prt
//?    Trucker Validation Error's report (PWBJPFR).
//?- Step 5 Producer Payment Edi
//?  - Determine if there are any Producers with a missing M3 Supplier
//?  - If no Producers with missing M3 Supplier, do not print the Prt
//?    Pre-Chk Producer Missing Supplier report (PWCQPFR).
//? 5/30/2017 SLM E7519 - SEL 1 AND validate for errors   *** Warning ***
//? 5/30/2017 SLM E7519 - SEL 2 AND validate for errors   *** Hard Halt ***
//? 5/09/2017 JBB E9890 - Don't allow Trucker payments for company
//?                       Check Company Values file for value
//?                       DALWTRKPMT to not allow the company to
//?                       make the Trucker Payment.
ENDDO;

EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Company Number Alpha Usr = CVTVAR(PAR.CC Company Number)
WRK.Company_Number_Alpha_Usr = CVTVAR(PAR.CC_Company_Number);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

//?Validate if Market Price exist for calculating NPPC for Seaboard.
DO;

// Call program Clc Base Mkt Dollars  XF.
CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(100);
PARAMETER('NPPCI');
PARAMETER(LCL.Base_Mkt_Prc_Amt_Tot_USR);

CASE;

// IF LCL.Base Mkt Prc Amt Tot USR is Not Entered
IF LCL.Base_Mkt_Prc_Amt_Tot_USR = *ZERO;

// Retrieve message - 'WARNING: Cant calculate SBD NPPC. Check Mkt/Group and rerun Payment Edit for
LCL.Pager_Msg_USR = RTVMSG(PRK0990);
PARAMETER(PAR.CC_Company_Number);

EXECUTE FUNCTION(Snd Alpha Pager Msg   IF) TYPE(EXCINTFUN)                      AB1239371;
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPESBDNPPC');
PARAMETER(LCL.Pager_Msg_USR);
{
 //?Execute internal function

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.Company_Number_USR);
 PARAMETER(PAR.Company_Value_Code_USR);
 PARAMETER(PAR.System_Value_Alpha_USR);

 // PAR.Pager Name USR = PAR.System Value Alpha    USR
 PAR.Pager_Name_USR = PAR.System_Value_Alpha_USR;

 CASE;

 // IF PAR.Pager Name USR is Not Entered
 IF PAR.Pager_Name_USR = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute command - 'SND Pager Message'
 EXECUTE COMMAND(PRK0991);
 PARAMETER(PAR.Pager_Msg_USR);
 PARAMETER(PAR.Pager_Name_USR);

 ENDIF;

}


ENDIF;

ENDDO;

//?Step 1: Validate if all Tattoo's are balanced.
CASE;

// IF WRK.Pmt Current Payment Step is Less or Equal to Step 1
IF WRK.Pmt_Current_Payment_Step <= 00001;

//?E15076 JJH 06/04/19 - Send Error Messages to PRKDEVxxx
// Call program Rtv User Class        UP.
CALL PROGRAM(Rtv User Class        UP) ('PKU3UPR');
PARAMETER(LCL.User_Class_f_usrprf_USR);

//?Determine Company Value Code to use for Error Distribution List
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Company Value Code    USR = CND.Producer Pymt Err Lst Tst
LCL.Company_Value_Code_USR = 'HPEPRKERRT';

//?Determine Company Value Code to use for Error Distribution List
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Value Code    USR = CND.Producer Pymt Err Lst Prd
LCL.Company_Value_Code_USR = 'HPEPRKERR';

ENDIF;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Company_Value_Code_USR);
PARAMETER(LCL.ESEND_Distribution_List);

//?Step 1  Validate that job may continue - Current Payment Date
DO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

//?UPD:  Current Payment Step = 1
CASE;

// IF WRK.Pmt Current Payment Step is Less or Equal to Step 1
IF WRK.Pmt_Current_Payment_Step <= 00001;

// WRK.Pmt Current Payment Step = CON.00001
WRK.Pmt_Current_Payment_Step = 00001;

EXECUTE FUNCTION(Upd Paymnt Prc         CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146820;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

// LCL.Date Type USR = CND.Current Kill Date
LCL.Date_Type_USR = 'C';

//?Shift 1 Validation
CASE;

// IF WRK.#Sequence Block is NULL
IF WRK.#Sequence_Block = *BLANK;

//?**** Shift 1 -- Not balanced record  ****
//?Blank means that record was never balanced
//?See if there are any Unbalance Records for this Company/Payment dt
// WRK.TH Kill Balancing Sts = CND.Not Balanced Record
WRK.TH_Kill_Balancing_Sts = *BLANK;

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
EXECUTE FUNCTION(PayEdt Chk For Errors RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1228558;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(1);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.Date_Type_USR);
PARAMETER(LCL.Buy_Order_Number_Alpha);
PARAMETER(LCL.Load_Number_Alpha);
PARAMETER(LCL.Tattoo_Number_Alpha);
{
 //?USER: Initialize routine

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CON.*BLANK
 PAR.Buy_Order_Number_Alpha = *BLANK;

 // PAR.Load Number Alpha = CON.*BLANK
 PAR.Load_Number_Alpha = *BLANK;

 // PAR.Tattoo Number Alpha = CON.*BLANK
 PAR.Tattoo_Number_Alpha = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 //?Check for Market or Subject if so record should be in balance
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?Current Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Current Kill Date
 IF PAR.Date_Type_USR = 'C';

 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 ENDIF;

 //?Previous Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Previous Kill Date
 IF PAR.Date_Type_USR = 'P';

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 //?Check for Market or Subject if so record should be in balance
 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

}


//?If a record is found then this is invalid
//?If no records are found then this is normal and processing may
//?continue
//?Shift 1 Not Bal Tattoo
//?Test are records balanced, if not quit - E12054
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

//?Error can not post and user select posting
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Email subject - No Balance Error Shift 1
// LCL.Email Subject-60 USR = CONCAT(CON.Payment Edit Not Balanced,CON.Error on Shift 1,CND.*One)
LCL.Email_Subject_60_USR = 'Payment Edit Not Balanced' + 'Error on Shift 1' (1);

//?Email message - No Balance Error Shift 1
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Office Dist Message USR = CONCAT(WRK.Company Number Alpha Usr,CON.Shift 1 Not Bal Tattoo,CON.
WRK.Office_Dist_Message_USR = WRK.Company_Number_Alpha_Usr + 'Shift 1 Not Bal Tattoo' (1);

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.- Buy Ord,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '- Buy Ord' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Buy Order Number Alpha,CON.1
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Buy_Order_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Ld,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Ld' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Load Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Load_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Tat,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Tat' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Tattoo Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Tattoo_Number_Alpha (1);

ENDIF;

//?E15076 JJH 06/04/19 - Add suffix "Test" if User Class = *PGMR
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Email Subject-60 USR = CONCAT(LCL.Email Subject-60 USR,CON.: TEST,CON.1)
LCL.Email_Subject_60_USR = LCL.Email_Subject_60_USR + ': TEST' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.: TEST,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + ': TEST' (1);

ENDIF;

ENDIF;

//?E15076 JJH 06/04/19 - Send Error Messages to PRKDEVxxx
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.ESEND_Distribution_List);
PARAMETER(LCL.Email_Subject_60_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

//?07/14/2017 JBB E9904 - Uncomment SNDPGRMSG
// PGM.*Return code = CND.Record Found
PGM.*Return_code = 999;

QUIT;

ENDIF;

//?**** Shift 1 -- Error record  ****
//?Error means that there are records in error
//?See if there are any Error Records for this Company/Payment Dt
// WRK.TH Kill Balancing Sts = CND.Error
WRK.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(PayEdt Chk For Errors RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1228558;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(1);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.Date_Type_USR);
PARAMETER(LCL.Buy_Order_Number_Alpha);
PARAMETER(LCL.Load_Number_Alpha);
PARAMETER(LCL.Tattoo_Number_Alpha);
{
 //?USER: Initialize routine

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CON.*BLANK
 PAR.Buy_Order_Number_Alpha = *BLANK;

 // PAR.Load Number Alpha = CON.*BLANK
 PAR.Load_Number_Alpha = *BLANK;

 // PAR.Tattoo Number Alpha = CON.*BLANK
 PAR.Tattoo_Number_Alpha = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 //?Check for Market or Subject if so record should be in balance
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?Current Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Current Kill Date
 IF PAR.Date_Type_USR = 'C';

 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 ENDIF;

 //?Previous Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Previous Kill Date
 IF PAR.Date_Type_USR = 'P';

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 //?Check for Market or Subject if so record should be in balance
 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

}


//?If a record is found then this is invalid
//?If no records are found then this is normal and processing may
//?continue
//?Shift 1 Error Tattoo
//?Test for records to be balanced, if not quit - E12054
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

//?Error can not post and user select posting
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Email subject - Shift 1 Error
// LCL.Email Subject-60 USR = CONCAT(CON.Payment Edit Shift 1 Erro,CON.r,CND.*None)
LCL.Email_Subject_60_USR = 'Payment Edit Shift 1 Erro' + 'r' (*ZERO);

//?Email message - Shift 1 Error
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Office Dist Message USR = CONCAT(WRK.Company Number Alpha Usr,CON.Shift 1 Error Tattoo,CON.1)
WRK.Office_Dist_Message_USR = WRK.Company_Number_Alpha_Usr + 'Shift 1 Error Tattoo' (1);

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.- Buy Ord,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '- Buy Ord' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Buy Order Number Alpha,CON.1
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Buy_Order_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Ld,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Ld' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Load Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Load_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Tat,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Tat' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Tattoo Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Tattoo_Number_Alpha (1);

ENDIF;

//?E15076 JJH 06/04/19 - Add suffix "Test" if User Class = *PGMR
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Email Subject-60 USR = CONCAT(LCL.Email Subject-60 USR,CON.: TEST,CON.1)
LCL.Email_Subject_60_USR = LCL.Email_Subject_60_USR + ': TEST' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.: TEST,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + ': TEST' (1);

ENDIF;

ENDIF;

//?E15076 JJH 06/04/19 - Send Tattoo Balance Error Msg to PRKDEVxxx
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.ESEND_Distribution_List);
PARAMETER(LCL.Email_Subject_60_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

//?07/14/2017 JBB E9904 - Uncomment SNDPGRMSG
// PGM.*Return code = CND.Record Found
PGM.*Return_code = 999;

QUIT;

ENDIF;

EXECUTE FUNCTION(Chk For Comm Errors RT) TYPE(RTVOBJ) FILE(PKA1CPP)             AB1213204;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(1);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(PGM.*Return_code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Commission Prdcr   RT) TYPE(RTVOBJ) FILE(PKACREP)          AB1212539;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(WRK.Commission_Producer_Payee);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF WRK.Commission Producer Payee is Blank
 IF WRK.Commission_Producer_Payee = *BLANK;

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

}


//?Shift 1 Commission Error
//?Test for records in error, if so quit - E12054
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

//?Error can not post and user select posting
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Email subject - Commission Error Shift 1
// LCL.Email Subject-60 USR = CONCAT(CON.Payment Edit Commission E,CON.rror on Shift 1,CND.*None)
LCL.Email_Subject_60_USR = 'Payment Edit Commission E' + 'rror on Shift 1' (*ZERO);

//?Email message - Commission Error Shift 1
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Office Dist Message USR = CONCAT(WRK.Company Number Alpha Usr,CON.Commission Error Shift 1,CO
WRK.Office_Dist_Message_USR = WRK.Company_Number_Alpha_Usr + 'Commission Error Shift 1' (1);

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.- Buy Ord,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '- Buy Ord' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Buy Order Number Alpha,CON.1
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Buy_Order_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Ld,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Ld' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Load Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Load_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Tat,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Tat' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Tattoo Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Tattoo_Number_Alpha (1);

ENDIF;

//?E15076 JJH 06/04/19 - Add suffix "Test" if User Class = *PGMR
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Email Subject-60 USR = CONCAT(LCL.Email Subject-60 USR,CON.: TEST,CON.1)
LCL.Email_Subject_60_USR = LCL.Email_Subject_60_USR + ': TEST' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.: TEST,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + ': TEST' (1);

ENDIF;

ENDIF;

//?E15076 JJH 06/04/19 - Send Tattoo Balance Error Msg to PRKDEVxxx
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.ESEND_Distribution_List);
PARAMETER(LCL.Email_Subject_60_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

//?07/14/2017 JBB E9904 - Uncomment SNDPGRMSG
// PGM.*Return code = CND.Record Found
PGM.*Return_code = 999;

QUIT;

ENDIF;

ENDIF;

//?Shift 2 Validation
CASE;

// IF WRK.#Sequence Block is NULL
IF WRK.#Sequence_Block = *BLANK;

//?**** Shift 2 -- Not balance record ****
//?Blank means that record was never balanced
//?See if there are any Unbalance Records for this Company/Payment Dt
// WRK.TH Kill Balancing Sts = CND.Not Balanced Record
WRK.TH_Kill_Balancing_Sts = *BLANK;

EXECUTE FUNCTION(PayEdt Chk For Errors RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1228558;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(2);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.Date_Type_USR);
PARAMETER(LCL.Buy_Order_Number_Alpha);
PARAMETER(LCL.Load_Number_Alpha);
PARAMETER(LCL.Tattoo_Number_Alpha);
{
 //?USER: Initialize routine

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CON.*BLANK
 PAR.Buy_Order_Number_Alpha = *BLANK;

 // PAR.Load Number Alpha = CON.*BLANK
 PAR.Load_Number_Alpha = *BLANK;

 // PAR.Tattoo Number Alpha = CON.*BLANK
 PAR.Tattoo_Number_Alpha = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 //?Check for Market or Subject if so record should be in balance
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?Current Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Current Kill Date
 IF PAR.Date_Type_USR = 'C';

 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 ENDIF;

 //?Previous Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Previous Kill Date
 IF PAR.Date_Type_USR = 'P';

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 //?Check for Market or Subject if so record should be in balance
 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

}


//?If a record is found then this is invalid
//?If no records are found then this is normal and processing may
//?continue
//?Shift 2 Not Bal Tattoo
//?Test are records balanced, if not quit - R12054
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

//?Error can not post and user select posting
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Email subject - No Balance Error Shift 2
// LCL.Email Subject-60 USR = CONCAT(CON.Payment Edit Not Balanced,CON.Error on Shift 2,CND.*One)
LCL.Email_Subject_60_USR = 'Payment Edit Not Balanced' + 'Error on Shift 2' (1);

//?Email message - No Balance Error Shift 2
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Office Dist Message USR = CONCAT(WRK.Company Number Alpha Usr,CON.Shift 2 Not Bal Tattoo,CON.
WRK.Office_Dist_Message_USR = WRK.Company_Number_Alpha_Usr + 'Shift 2 Not Bal Tattoo' (1);

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.- Buy Ord,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '- Buy Ord' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Buy Order Number Alpha,CON.1
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Buy_Order_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Ld,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Ld' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Load Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Load_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Tat,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Tat' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Tattoo Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Tattoo_Number_Alpha (1);

ENDIF;

//?E15076 JJH 06/04/19 - Add suffix "Test" if User Class = *PGMR
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Email Subject-60 USR = CONCAT(LCL.Email Subject-60 USR,CON.: TEST,CON.1)
LCL.Email_Subject_60_USR = LCL.Email_Subject_60_USR + ': TEST' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.: TEST,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + ': TEST' (1);

ENDIF;

ENDIF;

//?E15076 JJH 06/04/19 - Send Tattoo Balance Error Msg to PRKDEVxxx
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.ESEND_Distribution_List);
PARAMETER(LCL.Email_Subject_60_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

//?07/14/2017 JBB E9904 - Uncomment SNDPGRMSG
// PGM.*Return code = CND.Record Found
PGM.*Return_code = 999;

QUIT;

ENDIF;

//?**** Shift 2 -- Error record  ****
//?Error means that there are records in error
//?See if there are any Unbalance Records for this Company/Payment Dt
// WRK.TH Kill Balancing Sts = CND.Error
WRK.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(PayEdt Chk For Errors RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1228558;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(2);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.Date_Type_USR);
PARAMETER(LCL.Buy_Order_Number_Alpha);
PARAMETER(LCL.Load_Number_Alpha);
PARAMETER(LCL.Tattoo_Number_Alpha);
{
 //?USER: Initialize routine

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CON.*BLANK
 PAR.Buy_Order_Number_Alpha = *BLANK;

 // PAR.Load Number Alpha = CON.*BLANK
 PAR.Load_Number_Alpha = *BLANK;

 // PAR.Tattoo Number Alpha = CON.*BLANK
 PAR.Tattoo_Number_Alpha = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 //?Check for Market or Subject if so record should be in balance
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?Current Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Current Kill Date
 IF PAR.Date_Type_USR = 'C';

 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 ENDIF;

 //?Previous Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Previous Kill Date
 IF PAR.Date_Type_USR = 'P';

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 //?Check for Market or Subject if so record should be in balance
 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

}


//?If a record is found then this is invalid
//?If no records are found then this is normal and processing may
//?continue
//?Shift 2 Error Tattoo
//?Test for records to be balanced, if not quit - R12054
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

//?Error can not post and user select posting
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Email subject - Shift 2 Error
// LCL.Email Subject-60 USR = CONCAT(CON.Payment Edit Shift 2 Erro,CON.r,CND.*None)
LCL.Email_Subject_60_USR = 'Payment Edit Shift 2 Erro' + 'r' (*ZERO);

//?Email message - Shift 2 Error
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Office Dist Message USR = CONCAT(WRK.Company Number Alpha Usr,CON.Shift 2 Error Tattoo,CON.1)
WRK.Office_Dist_Message_USR = WRK.Company_Number_Alpha_Usr + 'Shift 2 Error Tattoo' (1);

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.- Buy Ord,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '- Buy Ord' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Buy Order Number Alpha,CON.1
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Buy_Order_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Ld,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Ld' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Load Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Load_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Tat,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Tat' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Tattoo Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Tattoo_Number_Alpha (1);

ENDIF;

//?E15076 JJH 06/04/19 - Add suffix "Test" if User Class = *PGMR
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Email Subject-60 USR = CONCAT(LCL.Email Subject-60 USR,CON.: TEST,CON.1)
LCL.Email_Subject_60_USR = LCL.Email_Subject_60_USR + ': TEST' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.: TEST,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + ': TEST' (1);

ENDIF;

ENDIF;

//?E15076 JJH 06/04/19 - Send Tattoo Balance Error Msg to PRKDEVxxx
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.ESEND_Distribution_List);
PARAMETER(LCL.Email_Subject_60_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

//?07/14/2017 JBB E9904 - Uncomment SNDPGRMSG
// PGM.*Return code = CND.Record Found
PGM.*Return_code = 999;

QUIT;

ENDIF;

EXECUTE FUNCTION(Chk For Comm Errors RT) TYPE(RTVOBJ) FILE(PKA1CPP)             AB1213204;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(2);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(PGM.*Return_code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Commission Prdcr   RT) TYPE(RTVOBJ) FILE(PKACREP)          AB1212539;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(WRK.Commission_Producer_Payee);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF WRK.Commission Producer Payee is Blank
 IF WRK.Commission_Producer_Payee = *BLANK;

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

}


//?Shift 2 Commision Error
//?Test for records in error, if so quit - R12054
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

//?Error can not post and user select posting
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Email subject - Commission Error Shift 2
// LCL.Email Subject-60 USR = CONCAT(CON.Payment Edit Commission E,CON.rror on Shift 2,CND.*None)
LCL.Email_Subject_60_USR = 'Payment Edit Commission E' + 'rror on Shift 2' (*ZERO);

//?Email message - Commission Error Shift 2
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Office Dist Message USR = CONCAT(WRK.Company Number Alpha Usr,CON.Shift 2 Commission Error,CO
WRK.Office_Dist_Message_USR = WRK.Company_Number_Alpha_Usr + 'Shift 2 Commission Error' (1);

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.- Buy Ord,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '- Buy Ord' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Buy Order Number Alpha,CON.1
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Buy_Order_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Ld,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Ld' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Load Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Load_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Tat,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Tat' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Tattoo Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Tattoo_Number_Alpha (1);

ENDIF;

//?E15076 JJH 06/04/19 - Add suffix "Test" if User Class = *PGMR
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Email Subject-60 USR = CONCAT(LCL.Email Subject-60 USR,CON.: TEST,CON.1)
LCL.Email_Subject_60_USR = LCL.Email_Subject_60_USR + ': TEST' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.: TEST,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + ': TEST' (1);

ENDIF;

ENDIF;

//?E15076 JJH 06/04/19 - Send Tattoo Balance Error Msg to PRKDEVxxx
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.ESEND_Distribution_List);
PARAMETER(LCL.Email_Subject_60_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

//?07/14/2017 JBB E9904 - Uncomment SNDPGRMSG
// PGM.*Return code = CND.Record Found
PGM.*Return_code = 999;

QUIT;

ENDIF;

ENDIF;

ENDDO;

//?Test for return code equal to blank, if not do not continue job
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

QUIT;

ENDIF;

//?Step 1  Validate that job may continue - Held Over
DO;

// LCL.Date Type USR = CND.Previous Kill Date
LCL.Date_Type_USR = 'P';

// Call program Rtv Prev Kill Date    XF.
CALL PROGRAM(Rtv Prev Kill Date    XF) ('PDRUXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(LCL.Kill_Date_Usr);

//?**** Shift 1 -- Not balanced record  ****
//?Blank means that record was never balanced
//?See if there are any Unbalance Records for this Company/Payment dt
// WRK.TH Kill Balancing Sts = CND.Not Balanced Record
WRK.TH_Kill_Balancing_Sts = *BLANK;

EXECUTE FUNCTION(PayEdt Chk For Errors RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1228558;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(1);
PARAMETER(LCL.Kill_Date_Usr);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.Date_Type_USR);
PARAMETER(LCL.Buy_Order_Number_Alpha);
PARAMETER(LCL.Load_Number_Alpha);
PARAMETER(LCL.Tattoo_Number_Alpha);
{
 //?USER: Initialize routine

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CON.*BLANK
 PAR.Buy_Order_Number_Alpha = *BLANK;

 // PAR.Load Number Alpha = CON.*BLANK
 PAR.Load_Number_Alpha = *BLANK;

 // PAR.Tattoo Number Alpha = CON.*BLANK
 PAR.Tattoo_Number_Alpha = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 //?Check for Market or Subject if so record should be in balance
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?Current Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Current Kill Date
 IF PAR.Date_Type_USR = 'C';

 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 ENDIF;

 //?Previous Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Previous Kill Date
 IF PAR.Date_Type_USR = 'P';

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 //?Check for Market or Subject if so record should be in balance
 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

}


//?If a record is found then this is invalid
//?If no records are found then this is normal and processing may
//?continue
//?Shift 1 Not Bal Tattoo HO
//?Test are records balanced, if not quit - R12054
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

//?Error can not post and user select posting
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Email subject - Not Balanced Held Over Error Shift 1
// LCL.Email Subject-60 USR = CONCAT(CON.Payment Edit Not Balanced,CON.Held Over Error - Shift 1,CND
LCL.Email_Subject_60_USR = 'Payment Edit Not Balanced' + 'Held Over Error - Shift 1' (1);

//?Email message - Not Balanced Held Over Error Shift 1
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Office Dist Message USR = CONCAT(WRK.Company Number Alpha Usr,CON.Shift 1 Not Bal Tattoo HO,C
WRK.Office_Dist_Message_USR = WRK.Company_Number_Alpha_Usr + 'Shift 1 Not Bal Tattoo HO' (1);

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.- Buy Ord,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '- Buy Ord' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Buy Order Number Alpha,CON.1
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Buy_Order_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Ld,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Ld' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Load Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Load_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Tat,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Tat' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Tattoo Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Tattoo_Number_Alpha (1);

ENDIF;

//?E15076 JJH 06/04/19 - Add suffix "Test" if User Class = *PGMR
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Email Subject-60 USR = CONCAT(LCL.Email Subject-60 USR,CON.: TEST,CON.1)
LCL.Email_Subject_60_USR = LCL.Email_Subject_60_USR + ': TEST' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.: TEST,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + ': TEST' (1);

ENDIF;

ENDIF;

//?E15076 JJH 06/04/19 - Send Error Messages to PRKDEVxxx
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.ESEND_Distribution_List);
PARAMETER(LCL.Email_Subject_60_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

// PGM.*Return code = CND.Record Found
PGM.*Return_code = 999;

QUIT;

ENDIF;

//?**** Shift 1 -- Error record  ****
//?Error means that there are records in error
//?See if there are any Unbalance Records for this Company/Payment Dt
// WRK.TH Kill Balancing Sts = CND.Error
WRK.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(PayEdt Chk For Errors RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1228558;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(1);
PARAMETER(LCL.Kill_Date_Usr);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.Date_Type_USR);
PARAMETER(LCL.Buy_Order_Number_Alpha);
PARAMETER(LCL.Load_Number_Alpha);
PARAMETER(LCL.Tattoo_Number_Alpha);
{
 //?USER: Initialize routine

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CON.*BLANK
 PAR.Buy_Order_Number_Alpha = *BLANK;

 // PAR.Load Number Alpha = CON.*BLANK
 PAR.Load_Number_Alpha = *BLANK;

 // PAR.Tattoo Number Alpha = CON.*BLANK
 PAR.Tattoo_Number_Alpha = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 //?Check for Market or Subject if so record should be in balance
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?Current Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Current Kill Date
 IF PAR.Date_Type_USR = 'C';

 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 ENDIF;

 //?Previous Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Previous Kill Date
 IF PAR.Date_Type_USR = 'P';

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 //?Check for Market or Subject if so record should be in balance
 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

}


//?If a record is found then this is invalid
//?If no records are found then this is normal and processing may
//?continue
//?Shift 1 Error Tattoo HO
//?Test for records to be balanced, if not quit - E12054
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

//?Error can not post and user select posting
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Email subject - Held Over Error Shift 1
// LCL.Email Subject-60 USR = CONCAT(CON.Payment Edit Shift 1 Held,CON.Over Error,CND.*None)
LCL.Email_Subject_60_USR = 'Payment Edit Shift 1 Held' + 'Over Error' (*ZERO);

//?Email message - Held Over Error Shift 1
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Office Dist Message USR = CONCAT(WRK.Company Number Alpha Usr,CON.Shift 1 Error Tattoo HO,CON
WRK.Office_Dist_Message_USR = WRK.Company_Number_Alpha_Usr + 'Shift 1 Error Tattoo HO' (1);

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.- Buy Ord,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '- Buy Ord' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Buy Order Number Alpha,CON.1
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Buy_Order_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Ld,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Ld' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Load Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Load_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Tat,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Tat' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Tattoo Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Tattoo_Number_Alpha (1);

ENDIF;

//?E15076 JJH 06/04/19 - Add suffix "Test" if User Class = *PGMR
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Email Subject-60 USR = CONCAT(LCL.Email Subject-60 USR,CON.: TEST,CON.1)
LCL.Email_Subject_60_USR = LCL.Email_Subject_60_USR + ': TEST' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.: TEST,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + ': TEST' (1);

ENDIF;

ENDIF;

//?E15076 JJH 06/04/19 - Send Error Messages to PRKDEVxxx
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.ESEND_Distribution_List);
PARAMETER(LCL.Email_Subject_60_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

// PGM.*Return code = CND.Record Found
PGM.*Return_code = 999;

QUIT;

ENDIF;

//?**** Shift 2 -- Not balance record ****
//?Blank means that record was never balanced
//?See if there are any Unbalance Records for this Company/Payment Dt
// WRK.TH Kill Balancing Sts = CND.Not Balanced Record
WRK.TH_Kill_Balancing_Sts = *BLANK;

EXECUTE FUNCTION(PayEdt Chk For Errors RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1228558;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(2);
PARAMETER(LCL.Kill_Date_Usr);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.Date_Type_USR);
PARAMETER(LCL.Buy_Order_Number_Alpha);
PARAMETER(LCL.Load_Number_Alpha);
PARAMETER(LCL.Tattoo_Number_Alpha);
{
 //?USER: Initialize routine

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CON.*BLANK
 PAR.Buy_Order_Number_Alpha = *BLANK;

 // PAR.Load Number Alpha = CON.*BLANK
 PAR.Load_Number_Alpha = *BLANK;

 // PAR.Tattoo Number Alpha = CON.*BLANK
 PAR.Tattoo_Number_Alpha = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 //?Check for Market or Subject if so record should be in balance
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?Current Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Current Kill Date
 IF PAR.Date_Type_USR = 'C';

 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 ENDIF;

 //?Previous Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Previous Kill Date
 IF PAR.Date_Type_USR = 'P';

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 //?Check for Market or Subject if so record should be in balance
 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

}


//?If a record is found then this is invalid
//?If no records are found then this is normal and processing may
//?continue
//?Shift 2 Not Bal Tattoo HO
//?Test are records balanced, if not quit - E12054
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

//?Error can not post and user select posting
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Email subject - Held Over Not Balanced Shift 2
// LCL.Email Subject-60 USR = CONCAT(CON.Payment Edit Not Balanced,CON.Held Over Error - Shift 2,CND
LCL.Email_Subject_60_USR = 'Payment Edit Not Balanced' + 'Held Over Error - Shift 2' (1);

//?Email message - Held Over Not Balanced Shift 2
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Office Dist Message USR = CONCAT(WRK.Company Number Alpha Usr,CON.Shift 2 Not Bal Tattoo HO,C
WRK.Office_Dist_Message_USR = WRK.Company_Number_Alpha_Usr + 'Shift 2 Not Bal Tattoo HO' (1);

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.- Buy Ord,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '- Buy Ord' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Buy Order Number Alpha,CON.1
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Buy_Order_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Ld,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Ld' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Load Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Load_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Tat,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Tat' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Tattoo Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Tattoo_Number_Alpha (1);

ENDIF;

//?E15076 JJH 06/04/19 - Add suffix "Test" if User Class = *PGMR
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Email Subject-60 USR = CONCAT(LCL.Email Subject-60 USR,CON.: TEST,CON.1)
LCL.Email_Subject_60_USR = LCL.Email_Subject_60_USR + ': TEST' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.: TEST,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + ': TEST' (1);

ENDIF;

ENDIF;

//?E15076 JJH 06/04/19 - Send Error Messages to PRKDEVxxx
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.ESEND_Distribution_List);
PARAMETER(LCL.Email_Subject_60_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

// PGM.*Return code = CND.Record Found
PGM.*Return_code = 999;

QUIT;

ENDIF;

//?**** Shift 2 -- Error record  ****
//?Error means that there are records in error
//?See if there are any Unbalance Records for this Company/Payment Dt
// WRK.TH Kill Balancing Sts = CND.Error
WRK.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(PayEdt Chk For Errors RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1228558;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(2);
PARAMETER(LCL.Kill_Date_Usr);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.Date_Type_USR);
PARAMETER(LCL.Buy_Order_Number_Alpha);
PARAMETER(LCL.Load_Number_Alpha);
PARAMETER(LCL.Tattoo_Number_Alpha);
{
 //?USER: Initialize routine

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CON.*BLANK
 PAR.Buy_Order_Number_Alpha = *BLANK;

 // PAR.Load Number Alpha = CON.*BLANK
 PAR.Load_Number_Alpha = *BLANK;

 // PAR.Tattoo Number Alpha = CON.*BLANK
 PAR.Tattoo_Number_Alpha = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 //?Check for Market or Subject if so record should be in balance
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?Current Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Current Kill Date
 IF PAR.Date_Type_USR = 'C';

 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 ENDIF;

 //?Previous Kill Date Validation
 CASE;

 // IF PAR.Date Type USR is Previous Kill Date
 IF PAR.Date_Type_USR = 'P';

 //?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
 // PAR.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
 PAR.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

 // PAR.Load Number Alpha = CVTVAR(DB1.BOL Load Number)
 PAR.Load_Number_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 PAR.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

 ENDIF;

 //?Check for Market or Subject if so record should be in balance
 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

}


//?If a record is found then this is invalid
//?If no records are found then this is normal and processing may
//?continue
//?Shift 2 Error Tattoo HO
//?Test for records to be balanced, if not quit - E12054
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

//?Error can not post and user select posting
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Email subject - Held Over Error Shift 2
// LCL.Email Subject-60 USR = CONCAT(CON.Payment Edit Shift 2 Held,CON.Over Error,CND.*None)
LCL.Email_Subject_60_USR = 'Payment Edit Shift 2 Held' + 'Over Error' (*ZERO);

//?Email message - Held Over Error Shift 2
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Office Dist Message USR = CONCAT(WRK.Company Number Alpha Usr,CON.Shift 2 Error Tattoo HO,CON
WRK.Office_Dist_Message_USR = WRK.Company_Number_Alpha_Usr + 'Shift 2 Error Tattoo HO' (1);

//?E12045 JJH 11/12/17 - Output Buy Order / Load / Tatooo
// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.- Buy Ord,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '- Buy Ord' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Buy Order Number Alpha,CON.1
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Buy_Order_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Ld,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Ld' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Load Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Load_Number_Alpha (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON./,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + '/' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.Tat,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + 'Tat' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,LCL.Tattoo Number Alpha,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + LCL.Tattoo_Number_Alpha (1);

ENDIF;

//?E15076 JJH 06/04/19 - Add suffix "Test" if User Class = *PGMR
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Email Subject-60 USR = CONCAT(LCL.Email Subject-60 USR,CON.: TEST,CON.1)
LCL.Email_Subject_60_USR = LCL.Email_Subject_60_USR + ': TEST' (1);

// WRK.Office Dist Message USR = CONCAT(WRK.Office Dist Message USR,CON.: TEST,CON.1)
WRK.Office_Dist_Message_USR = WRK.Office_Dist_Message_USR + ': TEST' (1);

ENDIF;

ENDIF;

//?E15076 JJH 06/04/19 - Send Error Messages to PRKDEVxxx
//?E15483 JBB  9/17/19 - New Distribution Lists for Tattoo Balance Errors
// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.ESEND_Distribution_List);
PARAMETER(LCL.Email_Subject_60_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

// PGM.*Return code = CND.Record Found
PGM.*Return_code = 999;

QUIT;

ENDIF;

ENDDO;

//?Test for return code equal to blank, if not do not continue job
CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

QUIT;

ENDIF;

ENDIF;

//?Step 2 Create Carcass Detail Shell from Evaluation transaction
//?Update the Tattoo header for payment processed code, and R re-cal Net
//?Held over's are checked to see if they have been completed
//?If this needs to be rerun call IS Department to reset step to 1.
CASE;

// IF WRK.Pmt Current Payment Step is Less or Equal to Step 2
IF WRK.Pmt_Current_Payment_Step <= 00002;

//?Step 2 Create Carcass Records and Flag Tattoo Header for Payments
DO;

CASE;

// IF WRK.Pmt Current Payment Step is Less or Equal to Step 1
IF WRK.Pmt_Current_Payment_Step <= 00001;

// WRK.Pmt Current Payment Step = CON.00002
WRK.Pmt_Current_Payment_Step = 00002;

EXECUTE FUNCTION(Upd Paymnt Prc         CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146820;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

// Call program Prc Crt CDtl/Prc Flg  XF.
CALL PROGRAM(Prc Crt CDtl/Prc Flg  XF) ('PKPYXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(PAR.Oms_System_Value_Alpha);

//?E13016 JJH 05/03/18 - Update BOL Live Wgt Received
//?Check if Company updates BOL Weight prior to Step 3
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Get Company Value HPEBOLLVWT to determine if the update should
//?occur for the Company.  This Company Value was put in place to
//?allow this process to run for companies 440, 960, and 961. Company
//?360 will not call the program to update the BOL Live Weight.
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEBOLLVWT');
PARAMETER(LCL.Upd_BOL_Live_Wgt_Com_USR);

//?If Update Live BOL Wgt Company flag = Y, update weight
CASE;

// IF LCL.Upd BOL Live Wgt Com USR is Yes
IF LCL.Upd_BOL_Live_Wgt_Com_USR = 'Y';

//?The date that is retrieved from the Company Values file is used to
//?determine if the next program is called to update the BOL Live
//?Weight Received.  If the Payment Date being processed is on or
//?after the date retrieved, then the program is called. Otherwise
//?The program is not called.
// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEBOLLVDT');
PARAMETER(LCL.Upd_BOL_Live_Wgt_Dte_USR);

//?If current Payment Date >= HPEBOLLVDT, call pgm to update weight
CASE;

// IF WRK.Pmt Current Payment Date GE LCL.Upd BOL Live Wgt Dte USR
IF WRK.Pmt_Current_Payment_Date >= LCL.Upd_BOL_Live_Wgt_Dte_USR;

// Call program Upd BOL LivWgt/HdRcvd XF.
CALL PROGRAM(Upd BOL LivWgt/HdRcvd XF) ('PWGTXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

ENDIF;

ENDIF;

//?Step 2 ends
CASE;

// IF WRK.Pmt Current Payment Step is Less or Equal to Step 3
IF WRK.Pmt_Current_Payment_Step <= 00003;

// WRK.Pmt Current Payment Step = CON.00003
WRK.Pmt_Current_Payment_Step = 00003;

EXECUTE FUNCTION(Upd Paymnt Prc         CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146820;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

ENDDO;

ENDIF;

//?Step 3 Create Freight Allocation, D/A's and Net Pay
//?This step may be rerun as many time as need through and including
//?          Step 5.
CASE;

// IF WRK.Pmt Current Payment Step is Less or Equal to Step 5
IF WRK.Pmt_Current_Payment_Step <= 00005;

//?Step 3 Carcass Merit Pgm, Frt Allocation, D/A and Net
DO;

// Call program Prc Cmp/Frt/Da's/Net  XF.
CALL PROGRAM(Prc Cmp/Frt/Da's/Net  XF) ('PKSBXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(WRK.Pmt_Current_Payment_Date);

//?Step 3 complete set step to 4
CASE;

// IF WRK.Pmt Current Payment Step is Less or Equal to Step 3
IF WRK.Pmt_Current_Payment_Step <= 00003;

// WRK.Pmt Current Payment Step = CON.00004
WRK.Pmt_Current_Payment_Step = 00004;

EXECUTE FUNCTION(Upd Paymnt Prc         CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146820;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

ENDDO;

ENDIF;

//?Step 4 Trucker Posting , This will process only Truckers that
//?have not been paid.  This print file program will also create the
//?vouchers, and update the buy order load as being paid.
//?After this has been printed only new buy order loads will appear
//?if freight was added after this run.
CASE;

// IF WRK.Pmt Current Payment Step is Less or Equal to Step 5
IF WRK.Pmt_Current_Payment_Step <= 00005;

// WRK.PP Trucker Error = CND.No Errors
WRK.PP_Trucker_Error = 'N';

//?Step 4  Trucker Posting/Create Trucker Vouchers
DO;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('DALWTRKPMT');
PARAMETER(LCL.Don_t_Allow_Trucker_Pymt);

//?If Don't Process Trucker Pymt is Yes, skip post
//?E7519 slm - validate for m3 supplier - if 1 is missing then do not
//?allow the trucker to create batches but go on with reports
//?If Don't Process Trucker Pymt is Yes, skip post
CASE;

// IF LCL.Don't Allow Trucker Pymt is Yes
IF LCL.Don_t_Allow_Trucker_Pymt = 'Y';

//?Do not process Trucker Payments for current Company
//?If Don't Process Trucker Pymt is Yes, skip post
// IF *OTHERWISE
IF *OTHERWISE;

//?E7519 JJH 06/26/17 - Determine if there are any Truckers without
//?  M3 Supplier ID. If no, do not print Prt Trucker Valiation Error's
//?RMC 5/20/21 SDN440 E1 -- Check TRK Vnd Address for zero too
EXECUTE FUNCTION(Val Trucker M3/E1 Vnd RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1337695;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.PP_Trucker_Error);
{
 //?USER: Initialize routine

 //?SDN440 RMC 5/20/21  if E1 is live , validate VND
 // PAR.PP Trucker Error = CND.No Errors
 PAR.PP_Trucker_Error = 'N';

 //?get live with M3
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('M3LIVE');
 PARAMETER(WRK.Live_with_M3_USR);

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('E1LIVE');
 PARAMETER(WRK.Live_with_E1);

 //?USER: Process Data record

 CASE;

 // IF DB1.BOL Kill Date LE PAR.Pmt Current Payment Date
 IF DB1.BOL_Kill_Date <= PAR.Pmt_Current_Payment_Date;

 EXECUTE FUNCTION(Rtv Trucker Vnd Add#M3RT) TYPE(RTVOBJ) FILE(PKBAREP)           AB1332333;
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(NLL.TRK_Name);
 PARAMETER(LCL.TRK_VND_Address_Number);
 PARAMETER(LCL.TRK_M3_Supplier_Id);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.Record Found
  PGM.*Return_code = 999;

 }

 //?Check for  M3
 CASE;

 // IF LCL.TRK M3 Supplier Id is Not Entered
 IF LCL.TRK_M3_Supplier_Id = *BLANK;

 // AND WRK.Live with M3   USR is Live or Parallel
 AND WRK.Live_with_M3_USR = 'P'/'Y';

 // PAR.PP Trucker Error = CND.Errors
 PAR.PP_Trucker_Error = 'E';

 ENDIF;

 //?Check E1 Vendor -- added for SDN440
 CASE;

 // IF LCL.TRK VND Address Number is Zero
 IF LCL.TRK_VND_Address_Number = *ZERO;

 // AND WRK.Live with E1 is Yes
 AND WRK.Live_with_E1 = 'Y';

 // PAR.PP Trucker Error = CND.Errors
 PAR.PP_Trucker_Error = 'E';

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.PP Trucker Error is Errors
IF WRK.PP_Trucker_Error = 'E';

// Call program Prt TruckerPaymentEdOnlPF.
CALL PROGRAM(Prt TruckerPaymentEdOnlPF) ('PWCDPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.PP_Trucker_Error);

ENDIF;

//?E7519 SLM --- If there is a error do not run the trucker post
CASE;

// IF WRK.PP Trucker Error is No Errors
IF WRK.PP_Trucker_Error = 'N';

//?E7519 SLM --- If there is a error do not run the trucker post
// Call program Prt Trucker Vch PyPrc PF.
CALL PROGRAM(Prt Trucker Vch PyPrc PF) ('PKSMPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(WRK.Pmt_Current_Payment_Date);

ENDIF;

ENDIF;

//?Step 4 complete ready for step 5
CASE;

// IF WRK.Pmt Current Payment Step is Less or Equal to Step 4
IF WRK.Pmt_Current_Payment_Step <= 00004;

// WRK.Pmt Current Payment Step = CND.00005 Payment Listing
WRK.Pmt_Current_Payment_Step = 00005;

EXECUTE FUNCTION(Upd Paymnt Prc         CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146820;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

ENDDO;

ENDIF;

//?Step 5 Producer Payment Edit
//?Step 5 : Pre-check Edit, prm purch journal, prt paym edit, comm edit
CASE;

// IF WRK.Pmt Current Payment Step is 00005 Payment Listing
IF WRK.Pmt_Current_Payment_Step = 00005;

//?Step 5  Payment edits and pre edits  ** Edit **
DO;

// WRK.Pmt Payment Error = CND.No Errors
WRK.Pmt_Payment_Error = 'N';

// WRK.PP Commission Paym Error = CND.No Errors
WRK.PP_Commission_Paym_Error = 'N';

//?E7519 JJH 06/26/17 - Determine if there are any Producers without
//?  M3 Supplier ID. If no, do not print Prt Pre-Chk Producer Missing
//?  Supplier report (PWCQPFR).
//?RMC 5/20/21 SDN440 E1 -- Check Vnd Address for zero too
EXECUTE FUNCTION(Val Producer M3/E1 Vnd RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1337685;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.PP_Producer_Error);
{
 //?USER: Initialize routine

 //?Initialize Errros
 // PAR.PP Producer Error = CND.No Errors
 PAR.PP_Producer_Error = 'N';

 //?USER: Process Data record

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER('M3LIVE');
 PARAMETER(LCL.Live_with_M3_USR);

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER('E1LIVE');
 PARAMETER(LCL.Live_with_E1);

 //?Get Producer M3 Supplier ID
 EXECUTE FUNCTION(Rtv Prdcr Vendor#,M3  RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1330021;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(LCL.PD_VND_Address_Number);
 PARAMETER(LCL.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(PAR.M3_Supplier_ID);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 CASE;

 // IF LCL.M3 Supplier ID is Not found
 IF LCL.M3_Supplier_ID = *BLANK;

 // AND LCL.Live with M3   USR is Live or Parallel
 AND LCL.Live_with_M3_USR = 'P'/'Y';

 // PAR.PP Producer Error = CND.Errors
 PAR.PP_Producer_Error = 'E';

 ENDIF;

 //?SDN 440 -- added for E1
 CASE;

 // IF LCL.Live with E1 is Yes
 IF LCL.Live_with_E1 = 'Y';

 // AND LCL.PD VND Address Number is Zero
 AND LCL.PD_VND_Address_Number = *ZERO;

 // PAR.PP Producer Error = CND.Errors
 PAR.PP_Producer_Error = 'E';

 ENDIF;

}


CASE;

// IF WRK.PP Producer Error is Errors
IF WRK.PP_Producer_Error = 'E';

// Call program Prt Pre-Chk EditPrdM3EdPF.
CALL PROGRAM(Prt Pre-Chk EditPrdM3EdPF) ('PWCQPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('E');
PARAMETER('E');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');
PARAMETER(WRK.Pmt_Payment_Error);
PARAMETER(WRK.PP_Producer_Error);

// IF *OTHERWISE
IF *OTHERWISE;

//?01/02/19 JBB E14281 - Pricing Error Report
// Call program Chk for Pricing Error XF.
CALL PROGRAM(Chk for Pricing Error XF) ('PWH4XFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('E');
PARAMETER('E');
PARAMETER('U');
PARAMETER(LCL.Pricing_Error);

//?If Pricing Error found, print Pricing Error Report (PWHYPFR)
CASE;

// IF LCL.Pricing Error is Yes
IF LCL.Pricing_Error = 'Y';

// Call program Prt Pricing Errors    PF.
CALL PROGRAM(Prt Pricing Errors    PF) ('PWHYPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('E');
PARAMETER('E');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');

ENDIF;

// Call program Prt Pre-Chk Edit Rep  PF.
CALL PROGRAM(Prt Pre-Chk Edit Rep  PF) ('PKTQPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('E');
PARAMETER('E');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');
PARAMETER(WRK.Pmt_Payment_Error);

ENDIF;

// Call program Prt Pur-Jrn Prm/      PF.
CALL PROGRAM(Prt Pur-Jrn Prm/      PF) ('PKTTPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('E');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');
PARAMETER(WRK.Pmt_Payment_Error);

// Call program Prt Pur-Jrn Rsl       PF.
CALL PROGRAM(Prt Pur-Jrn Rsl       PF) ('PKTZPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('E');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');
PARAMETER(WRK.Pmt_Payment_Error);

// Call program Prt Payment Edit/Post PF.
CALL PROGRAM(Prt Payment Edit/Post PF) ('PKS2PFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('E');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('A');
PARAMETER(WRK.Pmt_Payment_Error);

// Call program Prt Payment Comm E/P  PF.
CALL PROGRAM(Prt Payment Comm E/P  PF) ('PKPMPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('E');
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(PAR.Oms_System_Value_Alpha);

// Call program Prt Recalc Live Wgt   PF.
CALL PROGRAM(Prt Recalc Live Wgt   PF) ('PKP1PFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(PAR.Oms_System_Value_Alpha);

// WRK.PP Payment Error = WRK.Pmt Payment Error
WRK.PP_Payment_Error = WRK.Pmt_Payment_Error;

EXECUTE FUNCTION(Upd Paymnt Prc         CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146820;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.Pmt_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDDO;

ENDIF;

