// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POQUDFR
// ?Date: 14.08.2025 Time: 03:38:40
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PGM.*Scan limit = CON.99999
PGM.*Scan_limit = 99999;

//?***** Change Log and Comments
DO;

//?RMC 10/5/20  change to match ww pa screen parms when calling this pgm
//?   WW OrdPrdSch Edit     DF - Order Detail  *
//?** 06/14/2012 RMC E2146 ALLOW ALL WAREHOUSES- about half of the code was
//?  there. Added rtvs to accum numbers for all warhouses
//?** 04/29/2011 slm Add the WW Kill/Plan Dsp
//?** 07/07/2009 RMC FP1054 when reading the OD, exclude orders with
//?** prod plan sts = "N" in the logical file select/omit
//?** This will exclude CM/DM/+TR,OR for items that arent planned
//?** 06/30/2009 LJB E00446
//?** Change to exclude Chargebacks when accumulating ordered quantity
//?**  FP1054 4/15/09 status flag 10 = Y, then accum sched qty & wgt
//?**   else accum orderd qty and wt. with new PA, they need to see ordered
//?** 02/25/2009 FP1054 SLM REMOVE *  OUT Prt Prd Schedule      PV
//?** Chg rtv to use the CTL for company and warehouse
//?** 02/04/2009 FP1054 RMC  Chg parms going to poqjdfr, option 11
//?** Chg rtv to use the CTL for company and warehouse
//?** 11/21/2008 slm E00243 Add selection of the trim & belly
//?** to production schedule report selecction f21
//?** 04/14/2008 LJB FP1235
//?** Add option to email the production schedule to distribution list
//?** 03/03/2006 LJB
//?** There are mixed usage of contexts in the retrieves. Some are
//?** using PAR context, some CTL and some RCD. I changed all
//?** retrieves to use the CTL context for Company Number and
//?** Warehouse Code to maintain consistancy.
//?*
//?** 08/31/2006 RMC PFS019 print new prod sched pla9pfr
//?** 09/14/2006 RMC PFS019 put pgm name in print sched prompt
//?*
//?** 09/01/2006 LJB L60831A  Pass the Co# and Whse code to
//?**   Product Availability
//?** DLY029R 05/25/07 JRB Changed Co Num from hard coded to RCD
//?** in 9=Edit BOM
//?*****
ENDDO;

//?Format Command Key Text
// Retrieve message - ' F3=Exit  F4=Prompt+  F5=Refresh   F10=All/Active Items  F12=WW Kill Plan   F
LCL.CMDKEY_Line_1_130_Char = RTVMSG(USR4402);

// Retrieve message - 'F16=WW Prod Avail   F21=Prt Sched   F22=WW Prod Adj   F23=Prt Whs Inv/Ord Com
LCL.CMDKEY_Line_2_130_Char = RTVMSG(USR4403);

// Execute function Screen 132 Wide 2 CMDLN.
EXECUTE FUNCTION(Screen 132 Wide 2 CMDLN) TYPE(EXCUSRSRC) ('PNHBUFR');
PARAMETER(LCL.CMDKEY_Line_1_130_Char);
PARAMETER(LCL.CMDKEY_Line_2_130_Char);
{
 C                     MOVEL#IVIT1    ##VIT1
 C                     MOVEL#IVJT1    ##VJT1
}


//?USER: Initialize subfile control

//?First Time Processing
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

// CTL.Availability Group Code = CON.ALL
CTL.Availability_Group_Code = 'ALL';

// CTL.Print On Schedule = CND.yes
CTL.Print_On_Schedule = 'Y';

// PAR.Print On Schedule = CTL.Print On Schedule
PAR.Print_On_Schedule = CTL.Print_On_Schedule;

// CTL.Active Status Flag = CND.Active
CTL.Active_Status_Flag = 'A';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?INIT:  Date
CASE;

// IF CTL.Date To               USR is Zeros
IF CTL.Date_To_USR = *ZERO;

// CTL.USR Day 1 = JOB.*Job date
CTL.USR_Day_1 = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_1);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_1_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Day 2 = CTL.USR Day 1 + CON.1 *DAYS
CTL.USR_Day_2 = DATEINCR(CTL.USR_Day_1 1 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_2);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Day 3 = CTL.USR Day 2 + CON.1 *DAYS
CTL.USR_Day_3 = DATEINCR(CTL.USR_Day_2 1 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_3);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_3_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Day 4 = CTL.USR Day 3 + CON.1 *DAYS
CTL.USR_Day_4 = DATEINCR(CTL.USR_Day_3 1 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_4);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_4_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Day 5 = CTL.USR Day 4 + CON.1 *DAYS
CTL.USR_Day_5 = DATEINCR(CTL.USR_Day_4 1 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_5);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_5_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Date To               USR = CTL.USR Day 5
CTL.Date_To_USR = CTL.USR_Day_5;

//?INIT:  Date
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.USR Day 5 = CTL.Date To               USR
CTL.USR_Day_5 = CTL.Date_To_USR;

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_5);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_5_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USR Day 4
CASE;

// IF CTL.USR Day 5 GT JOB.*Job date
IF CTL.USR_Day_5 > JOB.*Job_date;

// CTL.USR Day 4 = CTL.USR Day 5 + CON.-1 *DAYS
CTL.USR_Day_4 = DATEINCR(CTL.USR_Day_5 '-1' 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_4);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_4_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USR Day 4
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.USR Day 4 = CON.*ZERO
CTL.USR_Day_4 = *ZERO;

// CTL.USR Day 3 = CON.*ZERO
CTL.USR_Day_3 = *ZERO;

// CTL.USR Day 2 = CON.*ZERO
CTL.USR_Day_2 = *ZERO;

// CTL.USR Day 1 = CON.*ZERO
CTL.USR_Day_1 = *ZERO;

// CTL.Production Day 4 USR = CND.blank
CTL.Production_Day_4_USR = *BLANK;

// CTL.Production Day 3 USR = CND.blank
CTL.Production_Day_3_USR = *BLANK;

// CTL.Production Day 2 USR = CND.blank
CTL.Production_Day_2_USR = *BLANK;

// CTL.Production Day 1 USR = CND.blank
CTL.Production_Day_1_USR = *BLANK;

ENDIF;

//?USR Day 3
CASE;

// IF CTL.USR Day 4 GT JOB.*Job date
IF CTL.USR_Day_4 > JOB.*Job_date;

// CTL.USR Day 3 = CTL.USR Day 4 + CON.-1 *DAYS
CTL.USR_Day_3 = DATEINCR(CTL.USR_Day_4 '-1' 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_3);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_3_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USR Day 3
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.USR Day 3 = CON.*ZERO
CTL.USR_Day_3 = *ZERO;

// CTL.USR Day 2 = CON.*ZERO
CTL.USR_Day_2 = *ZERO;

// CTL.USR Day 1 = CON.*ZERO
CTL.USR_Day_1 = *ZERO;

// CTL.Production Day 3 USR = CND.blank
CTL.Production_Day_3_USR = *BLANK;

// CTL.Production Day 2 USR = CND.blank
CTL.Production_Day_2_USR = *BLANK;

// CTL.Production Day 1 USR = CND.blank
CTL.Production_Day_1_USR = *BLANK;

ENDIF;

//?USR Day 2
CASE;

// IF CTL.USR Day 3 GT JOB.*Job date
IF CTL.USR_Day_3 > JOB.*Job_date;

// CTL.USR Day 2 = CTL.USR Day 3 + CON.-1 *DAYS
CTL.USR_Day_2 = DATEINCR(CTL.USR_Day_3 '-1' 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_2);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USR Day 2
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.USR Day 2 = CON.*ZERO
CTL.USR_Day_2 = *ZERO;

// CTL.USR Day 1 = CON.*ZERO
CTL.USR_Day_1 = *ZERO;

// CTL.Production Day 2 USR = CND.blank
CTL.Production_Day_2_USR = *BLANK;

// CTL.Production Day 1 USR = CND.blank
CTL.Production_Day_1_USR = *BLANK;

ENDIF;

//?USR Day 1
CASE;

// IF CTL.USR Day 2 GT JOB.*Job date
IF CTL.USR_Day_2 > JOB.*Job_date;

// CTL.USR Day 1 = CTL.USR Day 2 + CON.-1 *DAYS
CTL.USR_Day_1 = DATEINCR(CTL.USR_Day_2 '-1' 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_1);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_1_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USR Day 1
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.USR Day 1 = CON.*ZERO
CTL.USR_Day_1 = *ZERO;

// CTL.Production Day 1 USR = CND.blank
CTL.Production_Day_1_USR = *BLANK;

ENDIF;

ENDIF;

//?INIT:  Availability Group
CASE;

// IF CTL.Availability Group Code is Blank
IF CTL.Availability_Group_Code = *BLANK;

// CTL.Availability Group Code = CON.ALL
CTL.Availability_Group_Code = 'ALL';

ENDIF;

//?Descriptions:
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(CTL.Availability_Group_Code);
PARAMETER(CTL.Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(CTL.Lot_Tracking_Flag);
PARAMETER(WRK.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?All/Active Items
CASE;

// IF CTL.Active Status Flag is Active
IF CTL.Active_Status_Flag = 'A';

// CTL.Condition Name 10 USR = Condition name of CTL.Active Status Flag
CTL.Condition_Name_10_USR = RTVCND(CTL.Active_Status_Flag);

//?All/Active Items
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Condition Name 10 USR = CON.*BLANK
CTL.Condition_Name_10_USR = *BLANK;

ENDIF;

SET CURSOR;

EXECUTE FUNCTION(Val Production Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1542370;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Status_Flag_1_Y_N);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?USER: Initialize subfile record from DBF record

//?** Change all retrieves to use the same context. Use CTL since
//?** this is the context being tested.          03/03/06 LJB
//?RST:  Company Number
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND CTL.Company Number NE DB1.Company Number
AND CTL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST:  Availability Group
CASE;

// IF CTL.Availability Group Code is NE Blank
IF CTL.Availability_Group_Code <> *BLANK;

// AND CTL.Availability Group Code NE DB1.Availability Group Code
AND CTL.Availability_Group_Code <> DB1.Availability_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST:  Warehouse code if entered
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Item Bal Exist    RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1428561;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(RCD.Fresh_Chilling_Time);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(RCD.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv First Consumed Itm XF.
CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Base_Item_Code);

//?Sel:  Print on Schedule
CASE;

// IF CTL.Print On Schedule is Y/N Values
IF CTL.Print_On_Schedule = 'N'/'Y';

// AND CTL.Print On Schedule NE RCD.Print On Schedule
AND CTL.Print_On_Schedule <> RCD.Print_On_Schedule;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  Base Item Code
CASE;

// IF CTL.Base Item Code is Entered
IF CTL.Base_Item_Code <> *ZERO;

CASE;

// IF CTL.Base Item Code NE RCD.Base Item Code
IF CTL.Base_Item_Code <> RCD.Base_Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?RTV:  On-Hand Quantity
CASE;

// IF CTL.Lot Tracking Flag is yes
IF CTL.Lot_Tracking_Flag = 'Y';

CASE;

// IF CTL.Warehouse Code is Not Blanks
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Item Loc Qty Tot  RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1517365;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(RCD.Qty_On_Hand_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Quantity Loc On-Hand USR = PAR.Quantity Loc On-Hand USR + DB1.ILL Item Qty O
 PAR.Quantity_Loc_On_Hand_USR = PAR.Quantity_Loc_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

}


// IF *OTHERWISE
IF *OTHERWISE;

//?new 6/14/12
EXECUTE FUNCTION(Rtv Item Loc Qty-AlWh RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC2046050;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Qty_On_Hand_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Quantity Loc On-Hand USR = PAR.Quantity Loc On-Hand USR + DB1.ILL Item Qty O
 PAR.Quantity_Loc_On_Hand_USR = PAR.Quantity_Loc_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

}


ENDIF;

//?RTV:  On-Hand Quantity
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Warehouse Code is Not Blanks
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV On Hand Qty f/Whse RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1514970;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(RCD.Qty_On_Hand_USR);
{
 //?USER: Process Data record

 // PAR.On Hand U/M1 Summary = PAR.On Hand U/M1 Summary + DB1.On Hand U/M1 Summary
 PAR.On_Hand_UOM1_Summary = PAR.On_Hand_UOM1_Summary + DB1.On_Hand_UOM1_Summary;

}


// IF *OTHERWISE
IF *OTHERWISE;

//?new 6/14/12
EXECUTE FUNCTION(RTV On Hand Qty A/Whse RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC2046051;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Qty_On_Hand_USR);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Item Code EQ DB1.Item Code
 IF PAR.Item_Code = DB1.Item_Code;

 // PAR.On Hand U/M1 Summary = PAR.On Hand U/M1 Summary + DB1.On Hand U/M1 Summary
 PAR.On_Hand_UOM1_Summary = PAR.On_Hand_UOM1_Summary + DB1.On_Hand_UOM1_Summary;

 ENDIF;

}


ENDIF;

ENDIF;

//?If inventory qty is less than zero then make zero
CASE;

// IF RCD.Qty On-Hand USR is LT Zero
IF RCD.Qty_On_Hand_USR < *ZERO;

// RCD.Qty On-Hand USR = CON.*ZERO
RCD.Qty_On_Hand_USR = *ZERO;

ENDIF;

//?FP1054 4/15/09 status flag 10 = Y, then accum sched qty, else accum orderd
// LCL.Status Flag 10 Y/N = CND.No
LCL.Status_Flag_10_Y_N = 'N';

// PAR.Ord/Sch Sts USR = CND.Ordered
PAR.Ord_Sch_Sts_USR = 'O';

//?** Change LF used by RTV to exclude Not Prod planned orders  FP1054
//?Warehouse is selected
CASE;

// IF CTL.Warehouse Code is Not Blanks
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Sched Ship ALL    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1515089;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


//?USR Day 1
CASE;

// IF CTL.USR Day 1 is GT Zero
IF CTL.USR_Day_1 > *ZERO;

EXECUTE FUNCTION(Rtv Sched Ship ALL    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1515089;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


ENDIF;

//?USR Day 2
CASE;

// IF CTL.USR Day 2 is GT Zero
IF CTL.USR_Day_2 > *ZERO;

CASE;

// IF CTL.USR Day 2 EQ JOB.*Job date
IF CTL.USR_Day_2 = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Sched Ship ALL    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1515089;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_2);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_2);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(PAR.Ord_Sch_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

//?USR Day 3
CASE;

// IF CTL.USR Day 3 is GT Zero
IF CTL.USR_Day_3 > *ZERO;

CASE;

// IF CTL.USR Day 3 EQ JOB.*Job date
IF CTL.USR_Day_3 = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Sched Ship ALL    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1515089;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_3);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_3);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(PAR.Ord_Sch_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

//?USR Day 4
CASE;

// IF CTL.USR Day 4 is GT Zero
IF CTL.USR_Day_4 > *ZERO;

CASE;

// IF CTL.USR Day 4 EQ JOB.*Job date
IF CTL.USR_Day_4 = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Sched Ship ALL    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1515089;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_4);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_4);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(PAR.Ord_Sch_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

//?USR Day 5
CASE;

// IF CTL.USR Day 5 is GT Zero
IF CTL.USR_Day_5 > *ZERO;

CASE;

// IF CTL.USR Day 5 EQ JOB.*Job date
IF CTL.USR_Day_5 = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Sched Ship ALL    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1515089;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_5);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_5);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(PAR.Ord_Sch_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

//?Warehouse is Blank so get All NEW 6/14/12
CASE;

// IF CTL.Warehouse Code is Blanks
IF CTL.Warehouse_Code = *BLANK;

EXECUTE FUNCTION(Rtv Sched Ship AL-Whs RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2046059;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


//?USR Day 1
CASE;

// IF CTL.USR Day 1 is GT Zero
IF CTL.USR_Day_1 > *ZERO;

EXECUTE FUNCTION(Rtv Sched Ship AL-Whs RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2046059;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


ENDIF;

//?USR Day 2
CASE;

// IF CTL.USR Day 2 is GT Zero
IF CTL.USR_Day_2 > *ZERO;

CASE;

// IF CTL.USR Day 2 EQ JOB.*Job date
IF CTL.USR_Day_2 = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Sched Ship AL-Whs RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2046059;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_2);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Sched Shipm-AllWh RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2046065;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_2);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(PAR.Ord_Sch_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

//?USR Day 3
CASE;

// IF CTL.USR Day 3 is GT Zero
IF CTL.USR_Day_3 > *ZERO;

CASE;

// IF CTL.USR Day 3 EQ JOB.*Job date
IF CTL.USR_Day_3 = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Sched Ship AL-Whs RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2046059;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_3);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Sched Shipm-AllWh RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2046065;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_3);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(PAR.Ord_Sch_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

//?USR Day 4
CASE;

// IF CTL.USR Day 4 is GT Zero
IF CTL.USR_Day_4 > *ZERO;

CASE;

// IF CTL.USR Day 4 EQ JOB.*Job date
IF CTL.USR_Day_4 = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Sched Ship AL-Whs RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2046059;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_4);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Sched Shipm-AllWh RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2046065;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_4);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(PAR.Ord_Sch_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

//?USR Day 5
CASE;

// IF CTL.USR Day 5 is GT Zero
IF CTL.USR_Day_5 > *ZERO;

CASE;

// IF CTL.USR Day 5 EQ JOB.*Job date
IF CTL.USR_Day_5 = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Sched Ship AL-Whs RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2046059;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_5);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(LCL.Status_Flag_10_Y_N);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Status Flag 10 Y/N is Yes
 IF PAR.Status_Flag_10_Y_N = 'Y';

 //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 if no, accum Ordered & qty & wgt
 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Sched Shipm-AllWh RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2046065;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_5);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(PAR.Ord_Sch_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

// Total Scheduled Quantity
RCD.Scheduled_Quantity = ( ( ( RCD.Qty_Sched_Ord_1_USR + RCD.Qty_Sched_Ord_2_USR )                 +
+ RCD.Qty_Sched_Ord_3_USR ) + RCD.Qty_Sched_Ord_4_USR ) + RCD.Qty_Sched_Ord_5_USR;

// RCD.Variance Qty 1 = RCD.Qty On-Hand USR - RCD.Scheduled Quantity
RCD.Variance_Qty_1 = RCD.Qty_On_Hand_USR - RCD.Scheduled_Quantity;

//?Sel:  Active
CASE;

// IF CTL.Active Status Flag is Active
IF CTL.Active_Status_Flag = 'A';

CASE;

// IF RCD.Scheduled Quantity is LE Zero
IF RCD.Scheduled_Quantity <= *ZERO;

// AND RCD.Qty On-Hand USR is LE Zero
AND RCD.Qty_On_Hand_USR <= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt  (Company/Warehouse/PA Group)
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Availability Group Code
IF PGM.*Cursor_field = CTL.Availability_Group_Code;

// Call program SEL Avail Group        SR.
CALL PROGRAM(SEL Avail Group        SR) ('PDDVSRR');
PARAMETER(CTL.Availability_Group_Code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?chg it to match the warehouse if it was entered.
CASE;

// IF CTL.Company Number is greater than zero
IF CTL.Company_Number > *ZERO;

CASE;

// IF LCL.Company Number is greater than zero
IF LCL.Company_Number > *ZERO;

// CTL.Company Number = LCL.Company Number
CTL.Company_Number = LCL.Company_Number;

ENDIF;

ENDIF;

//?Val:  Company Number
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

ENDIF;

//?Val:  Warehouse Code
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// CTL.Warehouse Description = CON.*ALL
CTL.Warehouse_Description = *ALL;

//?Val:  Warehouse Code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Warehouse Description is equal to blank
IF WRK.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_Code);
MSGPARM(CTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(Rtv Warehouse/type Val RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1469740;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 // PAR.Warehouse Type = DB1.Warehouse Type
 PAR.Warehouse_Type = DB1.Warehouse_Type;

 QUIT;

}


CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Chg:  Warehouse Code
CASE;

// IF PAR.Warehouse Code NE CTL.Warehouse Code
IF PAR.Warehouse_Code <> CTL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

QUIT;

ENDIF;

//?Chg:  Print on Schedule
CASE;

// IF PAR.Print On Schedule NE CTL.Print On Schedule
IF PAR.Print_On_Schedule <> CTL.Print_On_Schedule;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Print On Schedule = CTL.Print On Schedule
PAR.Print_On_Schedule = CTL.Print_On_Schedule;

QUIT;

ENDIF;

//?Chg:  Date To NE USR Day 5
CASE;

// IF CTL.Date To               USR NE CTL.USR Day 5
IF CTL.Date_To_USR <> CTL.USR_Day_5;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Chg:  Base Item Code
CASE;

// IF PAR.Base Item Code NE CTL.Base Item Code
IF PAR.Base_Item_Code <> CTL.Base_Item_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Base Item Code = CTL.Base Item Code
PAR.Base_Item_Code = CTL.Base_Item_Code;

QUIT;

ENDIF;

SET CURSOR;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit Production Adjustment
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Adjustment        ER.
CALL PROGRAM(Edt Adjustment        ER) ('PDTPE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER('PR');
PARAMETER(*ZERO);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?5=Display Item Warehouse inquiry Detail
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Description_Line_One);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Conversion_Factor_1);
PARAMETER(RCD.Operation_Factor_1);
PARAMETER(RCD.UOM_Second);
PARAMETER(RCD.Conversion_Factor_2);
PARAMETER(RCD.Operation_Factor_2);
PARAMETER(RCD.UOM_Third);
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(PAR.Name);
PARAMETER(LCL.*Initial_call);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?7=Edit Comments
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Edt Prod Sched Commnt EF.
CALL PROGRAM(Edt Prod Sched Commnt EF) ('PDSNEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(PAR.Name);
PARAMETER(RCD.Item_Description);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?8=Display Item Orders
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(PAR.Name);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.*Initial_call);
PARAMETER('FR');

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?9=Display BOM
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program DSP Bill of Material   ET.
CALL PROGRAM(DSP Bill of Material   ET) ('PPVMETR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

ENDIF;

//?10=Work With Item Allocation
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program WW Inv Allocation     DF.
CALL PROGRAM(WW Inv Allocation     DF) ('POP5DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?11=Work With Order Production Sched
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

CASE;

// IF RCD.Base/Conv/Loss Item is Base
IF RCD.Base_Conv_Loss_Item = 'B';

// LCL.Component Item Code = RCD.Item Code
LCL.Component_Item_Code = RCD.Item_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv First Consumed Itm XF.
CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Component_Item_Code);

ENDIF;

//?FP1054 pass in prod warehouse
//?RMC 1-05-20  change to match ww pa screen parms when calling this pgm
EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program WW OrdPrdSch Edit     DF.
CALL PROGRAM(WW OrdPrdSch Edit     DF) ('POQJDFR');
PARAMETER(LCL.Component_Item_Code);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(RCD.Item_Code);
PARAMETER(*BLANK);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?15=Display Item Specifications
CASE;

// IF RCD.*SFLSEL is Option 15
IF RCD.*SFLSEL = '15';

// Call program Dsp Item Specs        DR.
CALL PROGRAM(Dsp Item Specs        DR) ('POQMD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Process command keys

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F10=All/Active Items
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF CTL.Active Status Flag is Active
IF CTL.Active_Status_Flag = 'A';

// CTL.Active Status Flag = CND.Blank
CTL.Active_Status_Flag = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Active Status Flag = CND.Active
CTL.Active_Status_Flag = 'A';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F12=WW kill plan
CASE;

// IF CTL.*CMD key is CF12
IF CTL.*CMD_key = '12';

// Call program WW Kill/Plan Dsp HPE   UP.
CALL PROGRAM(WW Kill/Plan Dsp HPE   UP) ('PKBZDFR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_1);

ENDIF;

//?F13=WW Production Hold Orders
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program WW Prod Order Hold     DF.
CALL PROGRAM(WW Prod Order Hold     DF) ('PDVLDFR');

ENDIF;

//?F16=WW PA
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

//?** Pass the Co# and Whse code to Product Availability 9/01/06 LJB
// Call program WW Product Availablty DF.
CALL PROGRAM(WW Product Availablty DF) ('PDFPDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

//?11/21/2008 * out and replace with new prompt that will also
//?allow the user to select the trim & belly reports
//?F21=Print Schedule
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.Production Date = CTL.USR Day 2
PAR.Production_Date = CTL.USR_Day_2;

//?Production Type
CASE;

// IF PAR.Production Date EQ JOB.*Job date
IF PAR.Production_Date = JOB.*Job_date;

// WRK.Production Type = CND.Schedule
WRK.Production_Type = 'S';

//?Production Type
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Production Type = CND.Plan
WRK.Production_Type = 'P';

ENDIF;

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// LCL.PRT Night Queue Run Sts = CND.no
LCL.PRT_Night_Queue_Run_Sts = 'N';

// Call program Prt Prd Schedule Rpts PV.
CALL PROGRAM(Prt Prd Schedule Rpts PV) ('PMAQPVR');
PARAMETER(PAR.Production_Date);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Display_Prt_Opt_Pmt_USR);
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.Production_Type);
PARAMETER('Production Schedule');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(LCL.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(1);

ENDIF;

//?F22=WW Production Adjustments
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// Call program WW Prd Adjustments    DF.
CALL PROGRAM(WW Prd Adjustments    DF) ('PDTIDFR');

ENDIF;

//?F23=WW Production Adjustments
CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

// Call program Prt Inventory/Orders  PV.
CALL PROGRAM(Prt Inventory/Orders  PV) ('PDM8PVR');

ENDIF;

